(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
/*!
  Copyright (c) 2017 Jed Watson.
  Licensed under the MIT License (MIT), see
  http://jedwatson.github.io/classnames
*/
/* global define */

(function () {
	'use strict';

	var hasOwn = {}.hasOwnProperty;

	function classNames () {
		var classes = [];

		for (var i = 0; i < arguments.length; i++) {
			var arg = arguments[i];
			if (!arg) continue;

			var argType = typeof arg;

			if (argType === 'string' || argType === 'number') {
				classes.push(arg);
			} else if (Array.isArray(arg) && arg.length) {
				var inner = classNames.apply(null, arg);
				if (inner) {
					classes.push(inner);
				}
			} else if (argType === 'object') {
				for (var key in arg) {
					if (hasOwn.call(arg, key) && arg[key]) {
						classes.push(key);
					}
				}
			}
		}

		return classes.join(' ');
	}

	if (typeof module !== 'undefined' && module.exports) {
		classNames.default = classNames;
		module.exports = classNames;
	} else if (typeof define === 'function' && typeof define.amd === 'object' && define.amd) {
		// register as 'classnames', consistent with npm package name
		define('classnames', [], function () {
			return classNames;
		});
	} else {
		window.classNames = classNames;
	}
}());

},{}],2:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule EventListener
 * @typechecks
 */

'use strict';

var emptyFunction = require('./emptyFunction');

/**
 * Upstream version of event listener. Does not take into account specific
 * nature of platform.
 */
var EventListener = {
  /**
   * Listen to DOM events during the bubble phase.
   *
   * @param {DOMEventTarget} target DOM element to register listener on.
   * @param {string} eventType Event type, e.g. 'click' or 'mouseover'.
   * @param {function} callback Callback function.
   * @return {object} Object with a `remove` method.
   */
  listen: function (target, eventType, callback) {
    if (target.addEventListener) {
      target.addEventListener(eventType, callback, false);
      return {
        remove: function () {
          target.removeEventListener(eventType, callback, false);
        }
      };
    } else if (target.attachEvent) {
      target.attachEvent('on' + eventType, callback);
      return {
        remove: function () {
          target.detachEvent('on' + eventType, callback);
        }
      };
    }
  },

  /**
   * Listen to DOM events during the capture phase.
   *
   * @param {DOMEventTarget} target DOM element to register listener on.
   * @param {string} eventType Event type, e.g. 'click' or 'mouseover'.
   * @param {function} callback Callback function.
   * @return {object} Object with a `remove` method.
   */
  capture: function (target, eventType, callback) {
    if (target.addEventListener) {
      target.addEventListener(eventType, callback, true);
      return {
        remove: function () {
          target.removeEventListener(eventType, callback, true);
        }
      };
    } else {
      if ("production" !== 'production') {
        console.error('Attempted to listen to events during the capture phase on a ' + 'browser that does not support the capture phase. Your application ' + 'will not receive some events.');
      }
      return {
        remove: emptyFunction
      };
    }
  },

  registerDefault: function () {}
};

module.exports = EventListener;
},{"./emptyFunction":9}],3:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ExecutionEnvironment
 */

'use strict';

var canUseDOM = !!(typeof window !== 'undefined' && window.document && window.document.createElement);

/**
 * Simple, lightweight module assisting with the detection and context of
 * Worker. Helps avoid circular dependencies and allows code to reason about
 * whether or not they are in a Worker, even if they never include the main
 * `ReactWorker` dependency.
 */
var ExecutionEnvironment = {

  canUseDOM: canUseDOM,

  canUseWorkers: typeof Worker !== 'undefined',

  canUseEventListeners: canUseDOM && !!(window.addEventListener || window.attachEvent),

  canUseViewport: canUseDOM && !!window.screen,

  isInWorker: !canUseDOM // For now, this is true - might change in the future.

};

module.exports = ExecutionEnvironment;
},{}],4:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule camelize
 * @typechecks
 */

"use strict";

var _hyphenPattern = /-(.)/g;

/**
 * Camelcases a hyphenated string, for example:
 *
 *   > camelize('background-color')
 *   < "backgroundColor"
 *
 * @param {string} string
 * @return {string}
 */
function camelize(string) {
  return string.replace(_hyphenPattern, function (_, character) {
    return character.toUpperCase();
  });
}

module.exports = camelize;
},{}],5:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule camelizeStyleName
 * @typechecks
 */

'use strict';

var camelize = require('./camelize');

var msPattern = /^-ms-/;

/**
 * Camelcases a hyphenated CSS property name, for example:
 *
 *   > camelizeStyleName('background-color')
 *   < "backgroundColor"
 *   > camelizeStyleName('-moz-transition')
 *   < "MozTransition"
 *   > camelizeStyleName('-ms-transition')
 *   < "msTransition"
 *
 * As Andi Smith suggests
 * (http://www.andismith.com/blog/2012/02/modernizr-prefixed/), an `-ms` prefix
 * is converted to lowercase `ms`.
 *
 * @param {string} string
 * @return {string}
 */
function camelizeStyleName(string) {
  return camelize(string.replace(msPattern, 'ms-'));
}

module.exports = camelizeStyleName;
},{"./camelize":4}],6:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule containsNode
 * @typechecks
 */

'use strict';

var isTextNode = require('./isTextNode');

/*eslint-disable no-bitwise */

/**
 * Checks if a given DOM node contains or is another DOM node.
 *
 * @param {?DOMNode} outerNode Outer DOM node.
 * @param {?DOMNode} innerNode Inner DOM node.
 * @return {boolean} True if `outerNode` contains or is `innerNode`.
 */
function containsNode(_x, _x2) {
  var _again = true;

  _function: while (_again) {
    var outerNode = _x,
        innerNode = _x2;
    _again = false;

    if (!outerNode || !innerNode) {
      return false;
    } else if (outerNode === innerNode) {
      return true;
    } else if (isTextNode(outerNode)) {
      return false;
    } else if (isTextNode(innerNode)) {
      _x = outerNode;
      _x2 = innerNode.parentNode;
      _again = true;
      continue _function;
    } else if (outerNode.contains) {
      return outerNode.contains(innerNode);
    } else if (outerNode.compareDocumentPosition) {
      return !!(outerNode.compareDocumentPosition(innerNode) & 16);
    } else {
      return false;
    }
  }
}

module.exports = containsNode;
},{"./isTextNode":19}],7:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule createArrayFromMixed
 * @typechecks
 */

'use strict';

var toArray = require('./toArray');

/**
 * Perform a heuristic test to determine if an object is "array-like".
 *
 *   A monk asked Joshu, a Zen master, "Has a dog Buddha nature?"
 *   Joshu replied: "Mu."
 *
 * This function determines if its argument has "array nature": it returns
 * true if the argument is an actual array, an `arguments' object, or an
 * HTMLCollection (e.g. node.childNodes or node.getElementsByTagName()).
 *
 * It will return false for other array-like objects like Filelist.
 *
 * @param {*} obj
 * @return {boolean}
 */
function hasArrayNature(obj) {
  return(
    // not null/false
    !!obj && (
    // arrays are objects, NodeLists are functions in Safari
    typeof obj == 'object' || typeof obj == 'function') &&
    // quacks like an array
    'length' in obj &&
    // not window
    !('setInterval' in obj) &&
    // no DOM node should be considered an array-like
    // a 'select' element has 'length' and 'item' properties on IE8
    typeof obj.nodeType != 'number' && (
    // a real array
    Array.isArray(obj) ||
    // arguments
    'callee' in obj ||
    // HTMLCollection/NodeList
    'item' in obj)
  );
}

/**
 * Ensure that the argument is an array by wrapping it in an array if it is not.
 * Creates a copy of the argument if it is already an array.
 *
 * This is mostly useful idiomatically:
 *
 *   var createArrayFromMixed = require('createArrayFromMixed');
 *
 *   function takesOneOrMoreThings(things) {
 *     things = createArrayFromMixed(things);
 *     ...
 *   }
 *
 * This allows you to treat `things' as an array, but accept scalars in the API.
 *
 * If you need to convert an array-like object, like `arguments`, into an array
 * use toArray instead.
 *
 * @param {*} obj
 * @return {array}
 */
function createArrayFromMixed(obj) {
  if (!hasArrayNature(obj)) {
    return [obj];
  } else if (Array.isArray(obj)) {
    return obj.slice();
  } else {
    return toArray(obj);
  }
}

module.exports = createArrayFromMixed;
},{"./toArray":26}],8:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule createNodesFromMarkup
 * @typechecks
 */

/*eslint-disable fb-www/unsafe-html*/

'use strict';

var ExecutionEnvironment = require('./ExecutionEnvironment');

var createArrayFromMixed = require('./createArrayFromMixed');
var getMarkupWrap = require('./getMarkupWrap');
var invariant = require('./invariant');

/**
 * Dummy container used to render all markup.
 */
var dummyNode = ExecutionEnvironment.canUseDOM ? document.createElement('div') : null;

/**
 * Pattern used by `getNodeName`.
 */
var nodeNamePattern = /^\s*<(\w+)/;

/**
 * Extracts the `nodeName` of the first element in a string of markup.
 *
 * @param {string} markup String of markup.
 * @return {?string} Node name of the supplied markup.
 */
function getNodeName(markup) {
  var nodeNameMatch = markup.match(nodeNamePattern);
  return nodeNameMatch && nodeNameMatch[1].toLowerCase();
}

/**
 * Creates an array containing the nodes rendered from the supplied markup. The
 * optionally supplied `handleScript` function will be invoked once for each
 * <script> element that is rendered. If no `handleScript` function is supplied,
 * an exception is thrown if any <script> elements are rendered.
 *
 * @param {string} markup A string of valid HTML markup.
 * @param {?function} handleScript Invoked once for each rendered <script>.
 * @return {array<DOMElement|DOMTextNode>} An array of rendered nodes.
 */
function createNodesFromMarkup(markup, handleScript) {
  var node = dummyNode;
  !!!dummyNode ? "production" !== 'production' ? invariant(false, 'createNodesFromMarkup dummy not initialized') : invariant(false) : undefined;
  var nodeName = getNodeName(markup);

  var wrap = nodeName && getMarkupWrap(nodeName);
  if (wrap) {
    node.innerHTML = wrap[1] + markup + wrap[2];

    var wrapDepth = wrap[0];
    while (wrapDepth--) {
      node = node.lastChild;
    }
  } else {
    node.innerHTML = markup;
  }

  var scripts = node.getElementsByTagName('script');
  if (scripts.length) {
    !handleScript ? "production" !== 'production' ? invariant(false, 'createNodesFromMarkup(...): Unexpected <script> element rendered.') : invariant(false) : undefined;
    createArrayFromMixed(scripts).forEach(handleScript);
  }

  var nodes = createArrayFromMixed(node.childNodes);
  while (node.lastChild) {
    node.removeChild(node.lastChild);
  }
  return nodes;
}

module.exports = createNodesFromMarkup;
},{"./ExecutionEnvironment":3,"./createArrayFromMixed":7,"./getMarkupWrap":13,"./invariant":17}],9:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule emptyFunction
 */

"use strict";

function makeEmptyFunction(arg) {
  return function () {
    return arg;
  };
}

/**
 * This function accepts and discards inputs; it has no side effects. This is
 * primarily useful idiomatically for overridable function endpoints which
 * always need to be callable, since JS lacks a null-call idiom ala Cocoa.
 */
function emptyFunction() {}

emptyFunction.thatReturns = makeEmptyFunction;
emptyFunction.thatReturnsFalse = makeEmptyFunction(false);
emptyFunction.thatReturnsTrue = makeEmptyFunction(true);
emptyFunction.thatReturnsNull = makeEmptyFunction(null);
emptyFunction.thatReturnsThis = function () {
  return this;
};
emptyFunction.thatReturnsArgument = function (arg) {
  return arg;
};

module.exports = emptyFunction;
},{}],10:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule emptyObject
 */

'use strict';

var emptyObject = {};

if ("production" !== 'production') {
  Object.freeze(emptyObject);
}

module.exports = emptyObject;
},{}],11:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule focusNode
 */

'use strict';

/**
 * @param {DOMElement} node input/textarea to focus
 */
function focusNode(node) {
  // IE8 can throw "Can't move focus to the control because it is invisible,
  // not enabled, or of a type that does not accept the focus." for all kinds of
  // reasons that are too expensive and fragile to test.
  try {
    node.focus();
  } catch (e) {}
}

module.exports = focusNode;
},{}],12:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule getActiveElement
 * @typechecks
 */

/* eslint-disable fb-www/typeof-undefined */

/**
 * Same as document.activeElement but wraps in a try-catch block. In IE it is
 * not safe to call document.activeElement if there is nothing focused.
 *
 * The activeElement will be null only if the document or document body is not
 * yet defined.
 */
'use strict';

function getActiveElement() /*?DOMElement*/{
  if (typeof document === 'undefined') {
    return null;
  }
  try {
    return document.activeElement || document.body;
  } catch (e) {
    return document.body;
  }
}

module.exports = getActiveElement;
},{}],13:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule getMarkupWrap
 */

/*eslint-disable fb-www/unsafe-html */

'use strict';

var ExecutionEnvironment = require('./ExecutionEnvironment');

var invariant = require('./invariant');

/**
 * Dummy container used to detect which wraps are necessary.
 */
var dummyNode = ExecutionEnvironment.canUseDOM ? document.createElement('div') : null;

/**
 * Some browsers cannot use `innerHTML` to render certain elements standalone,
 * so we wrap them, render the wrapped nodes, then extract the desired node.
 *
 * In IE8, certain elements cannot render alone, so wrap all elements ('*').
 */

var shouldWrap = {};

var selectWrap = [1, '<select multiple="true">', '</select>'];
var tableWrap = [1, '<table>', '</table>'];
var trWrap = [3, '<table><tbody><tr>', '</tr></tbody></table>'];

var svgWrap = [1, '<svg xmlns="http://www.w3.org/2000/svg">', '</svg>'];

var markupWrap = {
  '*': [1, '?<div>', '</div>'],

  'area': [1, '<map>', '</map>'],
  'col': [2, '<table><tbody></tbody><colgroup>', '</colgroup></table>'],
  'legend': [1, '<fieldset>', '</fieldset>'],
  'param': [1, '<object>', '</object>'],
  'tr': [2, '<table><tbody>', '</tbody></table>'],

  'optgroup': selectWrap,
  'option': selectWrap,

  'caption': tableWrap,
  'colgroup': tableWrap,
  'tbody': tableWrap,
  'tfoot': tableWrap,
  'thead': tableWrap,

  'td': trWrap,
  'th': trWrap
};

// Initialize the SVG elements since we know they'll always need to be wrapped
// consistently. If they are created inside a <div> they will be initialized in
// the wrong namespace (and will not display).
var svgElements = ['circle', 'clipPath', 'defs', 'ellipse', 'g', 'image', 'line', 'linearGradient', 'mask', 'path', 'pattern', 'polygon', 'polyline', 'radialGradient', 'rect', 'stop', 'text', 'tspan'];
svgElements.forEach(function (nodeName) {
  markupWrap[nodeName] = svgWrap;
  shouldWrap[nodeName] = true;
});

/**
 * Gets the markup wrap configuration for the supplied `nodeName`.
 *
 * NOTE: This lazily detects which wraps are necessary for the current browser.
 *
 * @param {string} nodeName Lowercase `nodeName`.
 * @return {?array} Markup wrap configuration, if applicable.
 */
function getMarkupWrap(nodeName) {
  !!!dummyNode ? "production" !== 'production' ? invariant(false, 'Markup wrapping node not initialized') : invariant(false) : undefined;
  if (!markupWrap.hasOwnProperty(nodeName)) {
    nodeName = '*';
  }
  if (!shouldWrap.hasOwnProperty(nodeName)) {
    if (nodeName === '*') {
      dummyNode.innerHTML = '<link />';
    } else {
      dummyNode.innerHTML = '<' + nodeName + '></' + nodeName + '>';
    }
    shouldWrap[nodeName] = !dummyNode.firstChild;
  }
  return shouldWrap[nodeName] ? markupWrap[nodeName] : null;
}

module.exports = getMarkupWrap;
},{"./ExecutionEnvironment":3,"./invariant":17}],14:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule getUnboundedScrollPosition
 * @typechecks
 */

'use strict';

/**
 * Gets the scroll position of the supplied element or window.
 *
 * The return values are unbounded, unlike `getScrollPosition`. This means they
 * may be negative or exceed the element boundaries (which is possible using
 * inertial scrolling).
 *
 * @param {DOMWindow|DOMElement} scrollable
 * @return {object} Map with `x` and `y` keys.
 */
function getUnboundedScrollPosition(scrollable) {
  if (scrollable === window) {
    return {
      x: window.pageXOffset || document.documentElement.scrollLeft,
      y: window.pageYOffset || document.documentElement.scrollTop
    };
  }
  return {
    x: scrollable.scrollLeft,
    y: scrollable.scrollTop
  };
}

module.exports = getUnboundedScrollPosition;
},{}],15:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule hyphenate
 * @typechecks
 */

'use strict';

var _uppercasePattern = /([A-Z])/g;

/**
 * Hyphenates a camelcased string, for example:
 *
 *   > hyphenate('backgroundColor')
 *   < "background-color"
 *
 * For CSS style names, use `hyphenateStyleName` instead which works properly
 * with all vendor prefixes, including `ms`.
 *
 * @param {string} string
 * @return {string}
 */
function hyphenate(string) {
  return string.replace(_uppercasePattern, '-$1').toLowerCase();
}

module.exports = hyphenate;
},{}],16:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule hyphenateStyleName
 * @typechecks
 */

'use strict';

var hyphenate = require('./hyphenate');

var msPattern = /^ms-/;

/**
 * Hyphenates a camelcased CSS property name, for example:
 *
 *   > hyphenateStyleName('backgroundColor')
 *   < "background-color"
 *   > hyphenateStyleName('MozTransition')
 *   < "-moz-transition"
 *   > hyphenateStyleName('msTransition')
 *   < "-ms-transition"
 *
 * As Modernizr suggests (http://modernizr.com/docs/#prefixed), an `ms` prefix
 * is converted to `-ms-`.
 *
 * @param {string} string
 * @return {string}
 */
function hyphenateStyleName(string) {
  return hyphenate(string).replace(msPattern, '-ms-');
}

module.exports = hyphenateStyleName;
},{"./hyphenate":15}],17:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule invariant
 */

'use strict';

/**
 * Use invariant() to assert state which your program assumes to be true.
 *
 * Provide sprintf-style format (only %s is supported) and arguments
 * to provide information about what broke and what you were
 * expecting.
 *
 * The invariant message will be stripped in production, but the invariant
 * will remain to ensure logic does not differ in production.
 */

function invariant(condition, format, a, b, c, d, e, f) {
  if ("production" !== 'production') {
    if (format === undefined) {
      throw new Error('invariant requires an error message argument');
    }
  }

  if (!condition) {
    var error;
    if (format === undefined) {
      error = new Error('Minified exception occurred; use the non-minified dev environment ' + 'for the full error message and additional helpful warnings.');
    } else {
      var args = [a, b, c, d, e, f];
      var argIndex = 0;
      error = new Error(format.replace(/%s/g, function () {
        return args[argIndex++];
      }));
      error.name = 'Invariant Violation';
    }

    error.framesToPop = 1; // we don't care about invariant's own frame
    throw error;
  }
}

module.exports = invariant;
},{}],18:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule isNode
 * @typechecks
 */

/**
 * @param {*} object The object to check.
 * @return {boolean} Whether or not the object is a DOM node.
 */
'use strict';

function isNode(object) {
  return !!(object && (typeof Node === 'function' ? object instanceof Node : typeof object === 'object' && typeof object.nodeType === 'number' && typeof object.nodeName === 'string'));
}

module.exports = isNode;
},{}],19:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule isTextNode
 * @typechecks
 */

'use strict';

var isNode = require('./isNode');

/**
 * @param {*} object The object to check.
 * @return {boolean} Whether or not the object is a DOM text node.
 */
function isTextNode(object) {
  return isNode(object) && object.nodeType == 3;
}

module.exports = isTextNode;
},{"./isNode":18}],20:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule keyMirror
 * @typechecks static-only
 */

'use strict';

var invariant = require('./invariant');

/**
 * Constructs an enumeration with keys equal to their value.
 *
 * For example:
 *
 *   var COLORS = keyMirror({blue: null, red: null});
 *   var myColor = COLORS.blue;
 *   var isColorValid = !!COLORS[myColor];
 *
 * The last line could not be performed if the values of the generated enum were
 * not equal to their keys.
 *
 *   Input:  {key1: val1, key2: val2}
 *   Output: {key1: key1, key2: key2}
 *
 * @param {object} obj
 * @return {object}
 */
var keyMirror = function (obj) {
  var ret = {};
  var key;
  !(obj instanceof Object && !Array.isArray(obj)) ? "production" !== 'production' ? invariant(false, 'keyMirror(...): Argument must be an object.') : invariant(false) : undefined;
  for (key in obj) {
    if (!obj.hasOwnProperty(key)) {
      continue;
    }
    ret[key] = key;
  }
  return ret;
};

module.exports = keyMirror;
},{"./invariant":17}],21:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule keyOf
 */

/**
 * Allows extraction of a minified key. Let's the build system minify keys
 * without losing the ability to dynamically use key strings as values
 * themselves. Pass in an object with a single key/val pair and it will return
 * you the string key of that single record. Suppose you want to grab the
 * value for a key 'className' inside of an object. Key/val minification may
 * have aliased that key to be 'xa12'. keyOf({className: null}) will return
 * 'xa12' in that case. Resolve keys you want to use once at startup time, then
 * reuse those resolutions.
 */
"use strict";

var keyOf = function (oneKeyObj) {
  var key;
  for (key in oneKeyObj) {
    if (!oneKeyObj.hasOwnProperty(key)) {
      continue;
    }
    return key;
  }
  return null;
};

module.exports = keyOf;
},{}],22:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule memoizeStringOnly
 * @typechecks static-only
 */

'use strict';

/**
 * Memoizes the return value of a function that accepts one string argument.
 *
 * @param {function} callback
 * @return {function}
 */
function memoizeStringOnly(callback) {
  var cache = {};
  return function (string) {
    if (!cache.hasOwnProperty(string)) {
      cache[string] = callback.call(this, string);
    }
    return cache[string];
  };
}

module.exports = memoizeStringOnly;
},{}],23:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule performance
 * @typechecks
 */

'use strict';

var ExecutionEnvironment = require('./ExecutionEnvironment');

var performance;

if (ExecutionEnvironment.canUseDOM) {
  performance = window.performance || window.msPerformance || window.webkitPerformance;
}

module.exports = performance || {};
},{"./ExecutionEnvironment":3}],24:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule performanceNow
 * @typechecks
 */

'use strict';

var performance = require('./performance');

var performanceNow;

/**
 * Detect if we can use `window.performance.now()` and gracefully fallback to
 * `Date.now()` if it doesn't exist. We need to support Firefox < 15 for now
 * because of Facebook's testing infrastructure.
 */
if (performance.now) {
  performanceNow = function () {
    return performance.now();
  };
} else {
  performanceNow = function () {
    return Date.now();
  };
}

module.exports = performanceNow;
},{"./performance":23}],25:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule shallowEqual
 * @typechecks
 * 
 */

'use strict';

var hasOwnProperty = Object.prototype.hasOwnProperty;

/**
 * Performs equality by iterating through keys on an object and returning false
 * when any key has values which are not strictly equal between the arguments.
 * Returns true when the values of all keys are strictly equal.
 */
function shallowEqual(objA, objB) {
  if (objA === objB) {
    return true;
  }

  if (typeof objA !== 'object' || objA === null || typeof objB !== 'object' || objB === null) {
    return false;
  }

  var keysA = Object.keys(objA);
  var keysB = Object.keys(objB);

  if (keysA.length !== keysB.length) {
    return false;
  }

  // Test for A's keys different from B.
  var bHasOwnProperty = hasOwnProperty.bind(objB);
  for (var i = 0; i < keysA.length; i++) {
    if (!bHasOwnProperty(keysA[i]) || objA[keysA[i]] !== objB[keysA[i]]) {
      return false;
    }
  }

  return true;
}

module.exports = shallowEqual;
},{}],26:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule toArray
 * @typechecks
 */

'use strict';

var invariant = require('./invariant');

/**
 * Convert array-like objects to arrays.
 *
 * This API assumes the caller knows the contents of the data type. For less
 * well defined inputs use createArrayFromMixed.
 *
 * @param {object|function|filelist} obj
 * @return {array}
 */
function toArray(obj) {
  var length = obj.length;

  // Some browse builtin objects can report typeof 'function' (e.g. NodeList in
  // old versions of Safari).
  !(!Array.isArray(obj) && (typeof obj === 'object' || typeof obj === 'function')) ? "production" !== 'production' ? invariant(false, 'toArray: Array-like object expected') : invariant(false) : undefined;

  !(typeof length === 'number') ? "production" !== 'production' ? invariant(false, 'toArray: Object needs a length property') : invariant(false) : undefined;

  !(length === 0 || length - 1 in obj) ? "production" !== 'production' ? invariant(false, 'toArray: Object should have keys for indices') : invariant(false) : undefined;

  // Old IE doesn't give collections access to hasOwnProperty. Assume inputs
  // without method will throw during the slice call and skip straight to the
  // fallback.
  if (obj.hasOwnProperty) {
    try {
      return Array.prototype.slice.call(obj);
    } catch (e) {
      // IE < 9 does not support Array#slice on collections objects
    }
  }

  // Fall back to copying key by key. This assumes all keys have a value,
  // so will not preserve sparsely populated inputs.
  var ret = Array(length);
  for (var ii = 0; ii < length; ii++) {
    ret[ii] = obj[ii];
  }
  return ret;
}

module.exports = toArray;
},{"./invariant":17}],27:[function(require,module,exports){
/**
 * Copyright 2014-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule warning
 */

'use strict';

var emptyFunction = require('./emptyFunction');

/**
 * Similar to invariant but only logs a warning if the condition is not met.
 * This can be used to log issues in development environments in critical
 * paths. Removing the logging code for production environments will keep the
 * same logic and follow the same code paths.
 */

var warning = emptyFunction;

if ("production" !== 'production') {
  warning = function (condition, format) {
    for (var _len = arguments.length, args = Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
      args[_key - 2] = arguments[_key];
    }

    if (format === undefined) {
      throw new Error('`warning(condition, format, ...args)` requires a warning ' + 'message argument');
    }

    if (format.indexOf('Failed Composite propType: ') === 0) {
      return; // Ignore CompositeComponent proptype check.
    }

    if (!condition) {
      var argIndex = 0;
      var message = 'Warning: ' + format.replace(/%s/g, function () {
        return args[argIndex++];
      });
      if (typeof console !== 'undefined') {
        console.error(message);
      }
      try {
        // --- Welcome to debugging React ---
        // This error was thrown as a convenience so that you can use this stack
        // to find the callsite that caused this warning to fire.
        throw new Error(message);
      } catch (x) {}
    }
  };
}

module.exports = warning;
},{"./emptyFunction":9}],28:[function(require,module,exports){

module.exports = require("./lib/babel-transform/main.js")

},{"./lib/babel-transform/main.js":29}],29:[function(require,module,exports){
"use strict";

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _reactProxy = require("react-proxy");

module.exports = function babelPluginLiveReactload(_ref) {
  var filename = _ref.filename,
      components = _ref.components,
      imports = _ref.imports,
      locals = _ref.locals;

  var _imports = _slicedToArray(imports, 1),
      React = _imports[0];

  var forceUpdate = (0, _reactProxy.getForceUpdate)(React);

  return function applyProxy(Component, uniqueId) {
    var _components$uniqueId = components[uniqueId],
        displayName = _components$uniqueId.displayName,
        _components$uniqueId$ = _components$uniqueId.isInFunction,
        isInFunction = _components$uniqueId$ === undefined ? false : _components$uniqueId$;

    var proxies = getProxies();

    if (!proxies || isInFunction) {
      return Component;
    }

    var id = filename + "$$" + uniqueId;
    if (!proxies[id]) {
      var proxy = (0, _reactProxy.createProxy)(Component);
      proxies[id] = proxy;
      return mark(proxy.get());
    } else {
      console.log(" > Patch component :: ", displayName || uniqueId);
      var _proxy = proxies[id];
      var instances = _proxy.update(Component);
      setTimeout(function () {
        return instances.forEach(forceUpdate);
      }, 0);
      return mark(_proxy.get());
    }
  };
};

function mark(Component) {
  if (!Component.__$$LiveReactLoadable) {
    Object.defineProperty(Component, '__$$LiveReactLoadable', {
      configurable: false,
      writable: false,
      enumerable: false,
      value: true
    });
  }
  return Component;
}

function getProxies() {
  try {
    if (typeof window !== "undefined") {
      return window.$$LiveReactLoadProxies = window.$$LiveReactLoadProxies || {};
    }
  } catch (ignore) {}
}
},{"react-proxy":157}],30:[function(require,module,exports){
/*
object-assign
(c) Sindre Sorhus
@license MIT
*/

'use strict';
/* eslint-disable no-unused-vars */
var getOwnPropertySymbols = Object.getOwnPropertySymbols;
var hasOwnProperty = Object.prototype.hasOwnProperty;
var propIsEnumerable = Object.prototype.propertyIsEnumerable;

function toObject(val) {
	if (val === null || val === undefined) {
		throw new TypeError('Object.assign cannot be called with null or undefined');
	}

	return Object(val);
}

function shouldUseNative() {
	try {
		if (!Object.assign) {
			return false;
		}

		// Detect buggy property enumeration order in older V8 versions.

		// https://bugs.chromium.org/p/v8/issues/detail?id=4118
		var test1 = new String('abc');  // eslint-disable-line no-new-wrappers
		test1[5] = 'de';
		if (Object.getOwnPropertyNames(test1)[0] === '5') {
			return false;
		}

		// https://bugs.chromium.org/p/v8/issues/detail?id=3056
		var test2 = {};
		for (var i = 0; i < 10; i++) {
			test2['_' + String.fromCharCode(i)] = i;
		}
		var order2 = Object.getOwnPropertyNames(test2).map(function (n) {
			return test2[n];
		});
		if (order2.join('') !== '0123456789') {
			return false;
		}

		// https://bugs.chromium.org/p/v8/issues/detail?id=3056
		var test3 = {};
		'abcdefghijklmnopqrst'.split('').forEach(function (letter) {
			test3[letter] = letter;
		});
		if (Object.keys(Object.assign({}, test3)).join('') !==
				'abcdefghijklmnopqrst') {
			return false;
		}

		return true;
	} catch (err) {
		// We don't expect any of the above to throw, but better to be safe.
		return false;
	}
}

module.exports = shouldUseNative() ? Object.assign : function (target, source) {
	var from;
	var to = toObject(target);
	var symbols;

	for (var s = 1; s < arguments.length; s++) {
		from = Object(arguments[s]);

		for (var key in from) {
			if (hasOwnProperty.call(from, key)) {
				to[key] = from[key];
			}
		}

		if (getOwnPropertySymbols) {
			symbols = getOwnPropertySymbols(from);
			for (var i = 0; i < symbols.length; i++) {
				if (propIsEnumerable.call(from, symbols[i])) {
					to[symbols[i]] = from[symbols[i]];
				}
			}
		}
	}

	return to;
};

},{}],31:[function(require,module,exports){
// shim for using process in browser
var process = module.exports = {};

// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;

function defaultSetTimout() {
    throw new Error('setTimeout has not been defined');
}
function defaultClearTimeout () {
    throw new Error('clearTimeout has not been defined');
}
(function () {
    try {
        if (typeof setTimeout === 'function') {
            cachedSetTimeout = setTimeout;
        } else {
            cachedSetTimeout = defaultSetTimout;
        }
    } catch (e) {
        cachedSetTimeout = defaultSetTimout;
    }
    try {
        if (typeof clearTimeout === 'function') {
            cachedClearTimeout = clearTimeout;
        } else {
            cachedClearTimeout = defaultClearTimeout;
        }
    } catch (e) {
        cachedClearTimeout = defaultClearTimeout;
    }
} ())
function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) {
        //normal enviroments in sane situations
        return setTimeout(fun, 0);
    }
    // if setTimeout wasn't available but was latter defined
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
    } catch(e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
        } catch(e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
        }
    }


}
function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) {
        //normal enviroments in sane situations
        return clearTimeout(marker);
    }
    // if clearTimeout wasn't available but was latter defined
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
    } catch (e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
        } catch (e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
        }
    }



}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    if (!draining || !currentQueue) {
        return;
    }
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            if (currentQueue) {
                currentQueue[queueIndex].run();
            }
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        runTimeout(drainQueue);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;

process.listeners = function (name) { return [] }

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() { return 0; };

},{}],32:[function(require,module,exports){
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

'use strict';

var printWarning = function() {};

if ("production" !== 'production') {
  var ReactPropTypesSecret = require('./lib/ReactPropTypesSecret');
  var loggedTypeFailures = {};
  var has = Function.call.bind(Object.prototype.hasOwnProperty);

  printWarning = function(text) {
    var message = 'Warning: ' + text;
    if (typeof console !== 'undefined') {
      console.error(message);
    }
    try {
      // --- Welcome to debugging React ---
      // This error was thrown as a convenience so that you can use this stack
      // to find the callsite that caused this warning to fire.
      throw new Error(message);
    } catch (x) {}
  };
}

/**
 * Assert that the values match with the type specs.
 * Error messages are memorized and will only be shown once.
 *
 * @param {object} typeSpecs Map of name to a ReactPropType
 * @param {object} values Runtime values that need to be type-checked
 * @param {string} location e.g. "prop", "context", "child context"
 * @param {string} componentName Name of the component for error messages.
 * @param {?Function} getStack Returns the component stack.
 * @private
 */
function checkPropTypes(typeSpecs, values, location, componentName, getStack) {
  if ("production" !== 'production') {
    for (var typeSpecName in typeSpecs) {
      if (has(typeSpecs, typeSpecName)) {
        var error;
        // Prop type validation may throw. In case they do, we don't want to
        // fail the render phase where it didn't fail before. So we log it.
        // After these have been cleaned up, we'll let them throw.
        try {
          // This is intentionally an invariant that gets caught. It's the same
          // behavior as without this statement except with a better message.
          if (typeof typeSpecs[typeSpecName] !== 'function') {
            var err = Error(
              (componentName || 'React class') + ': ' + location + ' type `' + typeSpecName + '` is invalid; ' +
              'it must be a function, usually from the `prop-types` package, but received `' + typeof typeSpecs[typeSpecName] + '`.'
            );
            err.name = 'Invariant Violation';
            throw err;
          }
          error = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, ReactPropTypesSecret);
        } catch (ex) {
          error = ex;
        }
        if (error && !(error instanceof Error)) {
          printWarning(
            (componentName || 'React class') + ': type specification of ' +
            location + ' `' + typeSpecName + '` is invalid; the type checker ' +
            'function must return `null` or an `Error` but returned a ' + typeof error + '. ' +
            'You may have forgotten to pass an argument to the type checker ' +
            'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' +
            'shape all require an argument).'
          );
        }
        if (error instanceof Error && !(error.message in loggedTypeFailures)) {
          // Only monitor this failure once because there tends to be a lot of the
          // same error.
          loggedTypeFailures[error.message] = true;

          var stack = getStack ? getStack() : '';

          printWarning(
            'Failed ' + location + ' type: ' + error.message + (stack != null ? stack : '')
          );
        }
      }
    }
  }
}

/**
 * Resets warning cache when testing.
 *
 * @private
 */
checkPropTypes.resetWarningCache = function() {
  if ("production" !== 'production') {
    loggedTypeFailures = {};
  }
}

module.exports = checkPropTypes;

},{"./lib/ReactPropTypesSecret":36}],33:[function(require,module,exports){
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

'use strict';

var ReactPropTypesSecret = require('./lib/ReactPropTypesSecret');

function emptyFunction() {}
function emptyFunctionWithReset() {}
emptyFunctionWithReset.resetWarningCache = emptyFunction;

module.exports = function() {
  function shim(props, propName, componentName, location, propFullName, secret) {
    if (secret === ReactPropTypesSecret) {
      // It is still safe when called from React.
      return;
    }
    var err = new Error(
      'Calling PropTypes validators directly is not supported by the `prop-types` package. ' +
      'Use PropTypes.checkPropTypes() to call them. ' +
      'Read more at http://fb.me/use-check-prop-types'
    );
    err.name = 'Invariant Violation';
    throw err;
  };
  shim.isRequired = shim;
  function getShim() {
    return shim;
  };
  // Important!
  // Keep this list in sync with production version in `./factoryWithTypeCheckers.js`.
  var ReactPropTypes = {
    array: shim,
    bool: shim,
    func: shim,
    number: shim,
    object: shim,
    string: shim,
    symbol: shim,

    any: shim,
    arrayOf: getShim,
    element: shim,
    elementType: shim,
    instanceOf: getShim,
    node: shim,
    objectOf: getShim,
    oneOf: getShim,
    oneOfType: getShim,
    shape: getShim,
    exact: getShim,

    checkPropTypes: emptyFunctionWithReset,
    resetWarningCache: emptyFunction
  };

  ReactPropTypes.PropTypes = ReactPropTypes;

  return ReactPropTypes;
};

},{"./lib/ReactPropTypesSecret":36}],34:[function(require,module,exports){
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

'use strict';

var ReactIs = require('react-is');
var assign = require('object-assign');

var ReactPropTypesSecret = require('./lib/ReactPropTypesSecret');
var checkPropTypes = require('./checkPropTypes');

var has = Function.call.bind(Object.prototype.hasOwnProperty);
var printWarning = function() {};

if ("production" !== 'production') {
  printWarning = function(text) {
    var message = 'Warning: ' + text;
    if (typeof console !== 'undefined') {
      console.error(message);
    }
    try {
      // --- Welcome to debugging React ---
      // This error was thrown as a convenience so that you can use this stack
      // to find the callsite that caused this warning to fire.
      throw new Error(message);
    } catch (x) {}
  };
}

function emptyFunctionThatReturnsNull() {
  return null;
}

module.exports = function(isValidElement, throwOnDirectAccess) {
  /* global Symbol */
  var ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
  var FAUX_ITERATOR_SYMBOL = '@@iterator'; // Before Symbol spec.

  /**
   * Returns the iterator method function contained on the iterable object.
   *
   * Be sure to invoke the function with the iterable as context:
   *
   *     var iteratorFn = getIteratorFn(myIterable);
   *     if (iteratorFn) {
   *       var iterator = iteratorFn.call(myIterable);
   *       ...
   *     }
   *
   * @param {?object} maybeIterable
   * @return {?function}
   */
  function getIteratorFn(maybeIterable) {
    var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);
    if (typeof iteratorFn === 'function') {
      return iteratorFn;
    }
  }

  /**
   * Collection of methods that allow declaration and validation of props that are
   * supplied to React components. Example usage:
   *
   *   var Props = require('ReactPropTypes');
   *   var MyArticle = React.createClass({
   *     propTypes: {
   *       // An optional string prop named "description".
   *       description: Props.string,
   *
   *       // A required enum prop named "category".
   *       category: Props.oneOf(['News','Photos']).isRequired,
   *
   *       // A prop named "dialog" that requires an instance of Dialog.
   *       dialog: Props.instanceOf(Dialog).isRequired
   *     },
   *     render: function() { ... }
   *   });
   *
   * A more formal specification of how these methods are used:
   *
   *   type := array|bool|func|object|number|string|oneOf([...])|instanceOf(...)
   *   decl := ReactPropTypes.{type}(.isRequired)?
   *
   * Each and every declaration produces a function with the same signature. This
   * allows the creation of custom validation functions. For example:
   *
   *  var MyLink = React.createClass({
   *    propTypes: {
   *      // An optional string or URI prop named "href".
   *      href: function(props, propName, componentName) {
   *        var propValue = props[propName];
   *        if (propValue != null && typeof propValue !== 'string' &&
   *            !(propValue instanceof URI)) {
   *          return new Error(
   *            'Expected a string or an URI for ' + propName + ' in ' +
   *            componentName
   *          );
   *        }
   *      }
   *    },
   *    render: function() {...}
   *  });
   *
   * @internal
   */

  var ANONYMOUS = '<<anonymous>>';

  // Important!
  // Keep this list in sync with production version in `./factoryWithThrowingShims.js`.
  var ReactPropTypes = {
    array: createPrimitiveTypeChecker('array'),
    bool: createPrimitiveTypeChecker('boolean'),
    func: createPrimitiveTypeChecker('function'),
    number: createPrimitiveTypeChecker('number'),
    object: createPrimitiveTypeChecker('object'),
    string: createPrimitiveTypeChecker('string'),
    symbol: createPrimitiveTypeChecker('symbol'),

    any: createAnyTypeChecker(),
    arrayOf: createArrayOfTypeChecker,
    element: createElementTypeChecker(),
    elementType: createElementTypeTypeChecker(),
    instanceOf: createInstanceTypeChecker,
    node: createNodeChecker(),
    objectOf: createObjectOfTypeChecker,
    oneOf: createEnumTypeChecker,
    oneOfType: createUnionTypeChecker,
    shape: createShapeTypeChecker,
    exact: createStrictShapeTypeChecker,
  };

  /**
   * inlined Object.is polyfill to avoid requiring consumers ship their own
   * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is
   */
  /*eslint-disable no-self-compare*/
  function is(x, y) {
    // SameValue algorithm
    if (x === y) {
      // Steps 1-5, 7-10
      // Steps 6.b-6.e: +0 != -0
      return x !== 0 || 1 / x === 1 / y;
    } else {
      // Step 6.a: NaN == NaN
      return x !== x && y !== y;
    }
  }
  /*eslint-enable no-self-compare*/

  /**
   * We use an Error-like object for backward compatibility as people may call
   * PropTypes directly and inspect their output. However, we don't use real
   * Errors anymore. We don't inspect their stack anyway, and creating them
   * is prohibitively expensive if they are created too often, such as what
   * happens in oneOfType() for any type before the one that matched.
   */
  function PropTypeError(message) {
    this.message = message;
    this.stack = '';
  }
  // Make `instanceof Error` still work for returned errors.
  PropTypeError.prototype = Error.prototype;

  function createChainableTypeChecker(validate) {
    if ("production" !== 'production') {
      var manualPropTypeCallCache = {};
      var manualPropTypeWarningCount = 0;
    }
    function checkType(isRequired, props, propName, componentName, location, propFullName, secret) {
      componentName = componentName || ANONYMOUS;
      propFullName = propFullName || propName;

      if (secret !== ReactPropTypesSecret) {
        if (throwOnDirectAccess) {
          // New behavior only for users of `prop-types` package
          var err = new Error(
            'Calling PropTypes validators directly is not supported by the `prop-types` package. ' +
            'Use `PropTypes.checkPropTypes()` to call them. ' +
            'Read more at http://fb.me/use-check-prop-types'
          );
          err.name = 'Invariant Violation';
          throw err;
        } else if ("production" !== 'production' && typeof console !== 'undefined') {
          // Old behavior for people using React.PropTypes
          var cacheKey = componentName + ':' + propName;
          if (
            !manualPropTypeCallCache[cacheKey] &&
            // Avoid spamming the console because they are often not actionable except for lib authors
            manualPropTypeWarningCount < 3
          ) {
            printWarning(
              'You are manually calling a React.PropTypes validation ' +
              'function for the `' + propFullName + '` prop on `' + componentName  + '`. This is deprecated ' +
              'and will throw in the standalone `prop-types` package. ' +
              'You may be seeing this warning due to a third-party PropTypes ' +
              'library. See https://fb.me/react-warning-dont-call-proptypes ' + 'for details.'
            );
            manualPropTypeCallCache[cacheKey] = true;
            manualPropTypeWarningCount++;
          }
        }
      }
      if (props[propName] == null) {
        if (isRequired) {
          if (props[propName] === null) {
            return new PropTypeError('The ' + location + ' `' + propFullName + '` is marked as required ' + ('in `' + componentName + '`, but its value is `null`.'));
          }
          return new PropTypeError('The ' + location + ' `' + propFullName + '` is marked as required in ' + ('`' + componentName + '`, but its value is `undefined`.'));
        }
        return null;
      } else {
        return validate(props, propName, componentName, location, propFullName);
      }
    }

    var chainedCheckType = checkType.bind(null, false);
    chainedCheckType.isRequired = checkType.bind(null, true);

    return chainedCheckType;
  }

  function createPrimitiveTypeChecker(expectedType) {
    function validate(props, propName, componentName, location, propFullName, secret) {
      var propValue = props[propName];
      var propType = getPropType(propValue);
      if (propType !== expectedType) {
        // `propValue` being instance of, say, date/regexp, pass the 'object'
        // check, but we can offer a more precise error message here rather than
        // 'of type `object`'.
        var preciseType = getPreciseType(propValue);

        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + preciseType + '` supplied to `' + componentName + '`, expected ') + ('`' + expectedType + '`.'));
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }

  function createAnyTypeChecker() {
    return createChainableTypeChecker(emptyFunctionThatReturnsNull);
  }

  function createArrayOfTypeChecker(typeChecker) {
    function validate(props, propName, componentName, location, propFullName) {
      if (typeof typeChecker !== 'function') {
        return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside arrayOf.');
      }
      var propValue = props[propName];
      if (!Array.isArray(propValue)) {
        var propType = getPropType(propValue);
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an array.'));
      }
      for (var i = 0; i < propValue.length; i++) {
        var error = typeChecker(propValue, i, componentName, location, propFullName + '[' + i + ']', ReactPropTypesSecret);
        if (error instanceof Error) {
          return error;
        }
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }

  function createElementTypeChecker() {
    function validate(props, propName, componentName, location, propFullName) {
      var propValue = props[propName];
      if (!isValidElement(propValue)) {
        var propType = getPropType(propValue);
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected a single ReactElement.'));
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }

  function createElementTypeTypeChecker() {
    function validate(props, propName, componentName, location, propFullName) {
      var propValue = props[propName];
      if (!ReactIs.isValidElementType(propValue)) {
        var propType = getPropType(propValue);
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected a single ReactElement type.'));
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }

  function createInstanceTypeChecker(expectedClass) {
    function validate(props, propName, componentName, location, propFullName) {
      if (!(props[propName] instanceof expectedClass)) {
        var expectedClassName = expectedClass.name || ANONYMOUS;
        var actualClassName = getClassName(props[propName]);
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + actualClassName + '` supplied to `' + componentName + '`, expected ') + ('instance of `' + expectedClassName + '`.'));
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }

  function createEnumTypeChecker(expectedValues) {
    if (!Array.isArray(expectedValues)) {
      if ("production" !== 'production') {
        if (arguments.length > 1) {
          printWarning(
            'Invalid arguments supplied to oneOf, expected an array, got ' + arguments.length + ' arguments. ' +
            'A common mistake is to write oneOf(x, y, z) instead of oneOf([x, y, z]).'
          );
        } else {
          printWarning('Invalid argument supplied to oneOf, expected an array.');
        }
      }
      return emptyFunctionThatReturnsNull;
    }

    function validate(props, propName, componentName, location, propFullName) {
      var propValue = props[propName];
      for (var i = 0; i < expectedValues.length; i++) {
        if (is(propValue, expectedValues[i])) {
          return null;
        }
      }

      var valuesString = JSON.stringify(expectedValues, function replacer(key, value) {
        var type = getPreciseType(value);
        if (type === 'symbol') {
          return String(value);
        }
        return value;
      });
      return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of value `' + String(propValue) + '` ' + ('supplied to `' + componentName + '`, expected one of ' + valuesString + '.'));
    }
    return createChainableTypeChecker(validate);
  }

  function createObjectOfTypeChecker(typeChecker) {
    function validate(props, propName, componentName, location, propFullName) {
      if (typeof typeChecker !== 'function') {
        return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside objectOf.');
      }
      var propValue = props[propName];
      var propType = getPropType(propValue);
      if (propType !== 'object') {
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an object.'));
      }
      for (var key in propValue) {
        if (has(propValue, key)) {
          var error = typeChecker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);
          if (error instanceof Error) {
            return error;
          }
        }
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }

  function createUnionTypeChecker(arrayOfTypeCheckers) {
    if (!Array.isArray(arrayOfTypeCheckers)) {
      "production" !== 'production' ? printWarning('Invalid argument supplied to oneOfType, expected an instance of array.') : void 0;
      return emptyFunctionThatReturnsNull;
    }

    for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
      var checker = arrayOfTypeCheckers[i];
      if (typeof checker !== 'function') {
        printWarning(
          'Invalid argument supplied to oneOfType. Expected an array of check functions, but ' +
          'received ' + getPostfixForTypeWarning(checker) + ' at index ' + i + '.'
        );
        return emptyFunctionThatReturnsNull;
      }
    }

    function validate(props, propName, componentName, location, propFullName) {
      for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
        var checker = arrayOfTypeCheckers[i];
        if (checker(props, propName, componentName, location, propFullName, ReactPropTypesSecret) == null) {
          return null;
        }
      }

      return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`.'));
    }
    return createChainableTypeChecker(validate);
  }

  function createNodeChecker() {
    function validate(props, propName, componentName, location, propFullName) {
      if (!isNode(props[propName])) {
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`, expected a ReactNode.'));
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }

  function createShapeTypeChecker(shapeTypes) {
    function validate(props, propName, componentName, location, propFullName) {
      var propValue = props[propName];
      var propType = getPropType(propValue);
      if (propType !== 'object') {
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));
      }
      for (var key in shapeTypes) {
        var checker = shapeTypes[key];
        if (!checker) {
          continue;
        }
        var error = checker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);
        if (error) {
          return error;
        }
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }

  function createStrictShapeTypeChecker(shapeTypes) {
    function validate(props, propName, componentName, location, propFullName) {
      var propValue = props[propName];
      var propType = getPropType(propValue);
      if (propType !== 'object') {
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));
      }
      // We need to check all keys in case some are required but missing from
      // props.
      var allKeys = assign({}, props[propName], shapeTypes);
      for (var key in allKeys) {
        var checker = shapeTypes[key];
        if (!checker) {
          return new PropTypeError(
            'Invalid ' + location + ' `' + propFullName + '` key `' + key + '` supplied to `' + componentName + '`.' +
            '\nBad object: ' + JSON.stringify(props[propName], null, '  ') +
            '\nValid keys: ' +  JSON.stringify(Object.keys(shapeTypes), null, '  ')
          );
        }
        var error = checker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);
        if (error) {
          return error;
        }
      }
      return null;
    }

    return createChainableTypeChecker(validate);
  }

  function isNode(propValue) {
    switch (typeof propValue) {
      case 'number':
      case 'string':
      case 'undefined':
        return true;
      case 'boolean':
        return !propValue;
      case 'object':
        if (Array.isArray(propValue)) {
          return propValue.every(isNode);
        }
        if (propValue === null || isValidElement(propValue)) {
          return true;
        }

        var iteratorFn = getIteratorFn(propValue);
        if (iteratorFn) {
          var iterator = iteratorFn.call(propValue);
          var step;
          if (iteratorFn !== propValue.entries) {
            while (!(step = iterator.next()).done) {
              if (!isNode(step.value)) {
                return false;
              }
            }
          } else {
            // Iterator will provide entry [k,v] tuples rather than values.
            while (!(step = iterator.next()).done) {
              var entry = step.value;
              if (entry) {
                if (!isNode(entry[1])) {
                  return false;
                }
              }
            }
          }
        } else {
          return false;
        }

        return true;
      default:
        return false;
    }
  }

  function isSymbol(propType, propValue) {
    // Native Symbol.
    if (propType === 'symbol') {
      return true;
    }

    // falsy value can't be a Symbol
    if (!propValue) {
      return false;
    }

    // 19.4.3.5 Symbol.prototype[@@toStringTag] === 'Symbol'
    if (propValue['@@toStringTag'] === 'Symbol') {
      return true;
    }

    // Fallback for non-spec compliant Symbols which are polyfilled.
    if (typeof Symbol === 'function' && propValue instanceof Symbol) {
      return true;
    }

    return false;
  }

  // Equivalent of `typeof` but with special handling for array and regexp.
  function getPropType(propValue) {
    var propType = typeof propValue;
    if (Array.isArray(propValue)) {
      return 'array';
    }
    if (propValue instanceof RegExp) {
      // Old webkits (at least until Android 4.0) return 'function' rather than
      // 'object' for typeof a RegExp. We'll normalize this here so that /bla/
      // passes PropTypes.object.
      return 'object';
    }
    if (isSymbol(propType, propValue)) {
      return 'symbol';
    }
    return propType;
  }

  // This handles more types than `getPropType`. Only used for error messages.
  // See `createPrimitiveTypeChecker`.
  function getPreciseType(propValue) {
    if (typeof propValue === 'undefined' || propValue === null) {
      return '' + propValue;
    }
    var propType = getPropType(propValue);
    if (propType === 'object') {
      if (propValue instanceof Date) {
        return 'date';
      } else if (propValue instanceof RegExp) {
        return 'regexp';
      }
    }
    return propType;
  }

  // Returns a string that is postfixed to a warning about an invalid type.
  // For example, "undefined" or "of type array"
  function getPostfixForTypeWarning(value) {
    var type = getPreciseType(value);
    switch (type) {
      case 'array':
      case 'object':
        return 'an ' + type;
      case 'boolean':
      case 'date':
      case 'regexp':
        return 'a ' + type;
      default:
        return type;
    }
  }

  // Returns class name of the object, if any.
  function getClassName(propValue) {
    if (!propValue.constructor || !propValue.constructor.name) {
      return ANONYMOUS;
    }
    return propValue.constructor.name;
  }

  ReactPropTypes.checkPropTypes = checkPropTypes;
  ReactPropTypes.resetWarningCache = checkPropTypes.resetWarningCache;
  ReactPropTypes.PropTypes = ReactPropTypes;

  return ReactPropTypes;
};

},{"./checkPropTypes":32,"./lib/ReactPropTypesSecret":36,"object-assign":30,"react-is":135}],35:[function(require,module,exports){
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

if ("production" !== 'production') {
  var ReactIs = require('react-is');

  // By explicitly using `prop-types` you are opting into new development behavior.
  // http://fb.me/prop-types-in-prod
  var throwOnDirectAccess = true;
  module.exports = require('./factoryWithTypeCheckers')(ReactIs.isElement, throwOnDirectAccess);
} else {
  // By explicitly using `prop-types` you are opting into new production behavior.
  // http://fb.me/prop-types-in-prod
  module.exports = require('./factoryWithThrowingShims')();
}

},{"./factoryWithThrowingShims":33,"./factoryWithTypeCheckers":34,"react-is":135}],36:[function(require,module,exports){
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

'use strict';

var ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';

module.exports = ReactPropTypesSecret;

},{}],37:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _reactLifecyclesCompat = require("react-lifecycles-compat");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj["default"] = obj; return newObj; } }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (typeof call === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var classNames = require('classnames');

var Switch =
/*#__PURE__*/
function (_Component) {
  _inherits(Switch, _Component);

  function Switch(props) {
    var _this;

    _classCallCheck(this, Switch);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(Switch).call(this, props));

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "handleClick", function (e) {
      var checked = _this.state.checked;
      var onClick = _this.props.onClick;
      var newChecked = !checked;

      _this.setChecked(newChecked, e);

      if (onClick) {
        onClick(newChecked, e);
      }
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "handleKeyDown", function (e) {
      if (e.keyCode === 37) {
        // Left
        _this.setChecked(false, e);
      } else if (e.keyCode === 39) {
        // Right
        _this.setChecked(true, e);
      }
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "handleMouseUp", function (e) {
      var onMouseUp = _this.props.onMouseUp;

      if (_this.node) {
        _this.node.blur();
      }

      if (onMouseUp) {
        onMouseUp(e);
      }
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "saveNode", function (node) {
      _this.node = node;
    });

    var _checked = false;

    if ('checked' in props) {
      _checked = !!props.checked;
    } else {
      _checked = !!props.defaultChecked;
    }

    _this.state = {
      checked: _checked
    };
    return _this;
  }

  _createClass(Switch, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      var _this$props = this.props,
          autoFocus = _this$props.autoFocus,
          disabled = _this$props.disabled;

      if (autoFocus && !disabled) {
        this.focus();
      }
    }
  }, {
    key: "setChecked",
    value: function setChecked(checked, e) {
      var _this$props2 = this.props,
          disabled = _this$props2.disabled,
          onChange = _this$props2.onChange;

      if (disabled) {
        return;
      }

      if (!('checked' in this.props)) {
        this.setState({
          checked: checked
        });
      }

      if (onChange) {
        onChange(checked, e);
      }
    }
  }, {
    key: "focus",
    value: function focus() {
      this.node.focus();
    }
  }, {
    key: "blur",
    value: function blur() {
      this.node.blur();
    }
  }, {
    key: "render",
    value: function render() {
      var _classNames;

      var _this$props3 = this.props,
          className = _this$props3.className,
          prefixCls = _this$props3.prefixCls,
          disabled = _this$props3.disabled,
          loadingIcon = _this$props3.loadingIcon,
          checkedChildren = _this$props3.checkedChildren,
          unCheckedChildren = _this$props3.unCheckedChildren,
          restProps = _objectWithoutProperties(_this$props3, ["className", "prefixCls", "disabled", "loadingIcon", "checkedChildren", "unCheckedChildren"]);

      var checked = this.state.checked;
      var switchClassName = classNames((_classNames = {}, _defineProperty(_classNames, className, !!className), _defineProperty(_classNames, prefixCls, true), _defineProperty(_classNames, "".concat(prefixCls, "-checked"), checked), _defineProperty(_classNames, "".concat(prefixCls, "-disabled"), disabled), _classNames));
      return _react["default"].createElement("button", _extends({}, restProps, {
        type: "button",
        role: "switch",
        "aria-checked": checked,
        disabled: disabled,
        className: switchClassName,
        ref: this.saveNode,
        onKeyDown: this.handleKeyDown,
        onClick: this.handleClick,
        onMouseUp: this.handleMouseUp
      }), loadingIcon, _react["default"].createElement("span", {
        className: "".concat(prefixCls, "-inner")
      }, checked ? checkedChildren : unCheckedChildren));
    }
  }], [{
    key: "getDerivedStateFromProps",
    value: function getDerivedStateFromProps(nextProps) {
      var newState = {};
      var checked = nextProps.checked;

      if ('checked' in nextProps) {
        newState.checked = !!checked;
      }

      return newState;
    }
  }]);

  return Switch;
}(_react.Component);

Switch.propTypes = {
  className: _propTypes["default"].string,
  prefixCls: _propTypes["default"].string,
  disabled: _propTypes["default"].bool,
  checkedChildren: _propTypes["default"].any,
  unCheckedChildren: _propTypes["default"].any,
  onChange: _propTypes["default"].func,
  onMouseUp: _propTypes["default"].func,
  onClick: _propTypes["default"].func,
  tabIndex: _propTypes["default"].number,
  checked: _propTypes["default"].bool,
  defaultChecked: _propTypes["default"].bool,
  autoFocus: _propTypes["default"].bool,
  loadingIcon: _propTypes["default"].node
};
Switch.defaultProps = {
  prefixCls: 'rc-switch',
  checkedChildren: null,
  unCheckedChildren: null,
  className: '',
  defaultChecked: false
};
(0, _reactLifecyclesCompat.polyfill)(Switch);
var _default = Switch;
exports["default"] = _default;
},{"classnames":1,"prop-types":35,"react":"react","react-lifecycles-compat":152}],38:[function(require,module,exports){
"use strict";

module.exports = require('./Switch');
},{"./Switch":37}],39:[function(require,module,exports){
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @providesModule shallowCompare
 */

'use strict';

var shallowEqual = require('fbjs/lib/shallowEqual');

/**
 * Does a shallow comparison for props and state.
 * See ReactComponentWithPureRenderMixin
 * See also https://facebook.github.io/react/docs/shallow-compare.html
 */
function shallowCompare(instance, nextProps, nextState) {
  return (
    !shallowEqual(instance.props, nextProps) ||
    !shallowEqual(instance.state, nextState)
  );
}

module.exports = shallowCompare;

},{"fbjs/lib/shallowEqual":40}],40:[function(require,module,exports){
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @typechecks
 * 
 */

/*eslint-disable no-self-compare */

'use strict';

var hasOwnProperty = Object.prototype.hasOwnProperty;

/**
 * inlined Object.is polyfill to avoid requiring consumers ship their own
 * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is
 */
function is(x, y) {
  // SameValue algorithm
  if (x === y) {
    // Steps 1-5, 7-10
    // Steps 6.b-6.e: +0 != -0
    // Added the nonzero y check to make Flow happy, but it is redundant
    return x !== 0 || y !== 0 || 1 / x === 1 / y;
  } else {
    // Step 6.a: NaN == NaN
    return x !== x && y !== y;
  }
}

/**
 * Performs equality by iterating through keys on an object and returning false
 * when any key has values which are not strictly equal between the arguments.
 * Returns true when the values of all keys are strictly equal.
 */
function shallowEqual(objA, objB) {
  if (is(objA, objB)) {
    return true;
  }

  if (typeof objA !== 'object' || objA === null || typeof objB !== 'object' || objB === null) {
    return false;
  }

  var keysA = Object.keys(objA);
  var keysB = Object.keys(objB);

  if (keysA.length !== keysB.length) {
    return false;
  }

  // Test for A's keys different from B.
  for (var i = 0; i < keysA.length; i++) {
    if (!hasOwnProperty.call(objB, keysA[i]) || !is(objA[keysA[i]], objB[keysA[i]])) {
      return false;
    }
  }

  return true;
}

module.exports = shallowEqual;
},{}],41:[function(require,module,exports){
"use strict";

var _objectWithoutProperties = require("babel-runtime/helpers/object-without-properties")["default"];

var _extends = require("babel-runtime/helpers/extends")["default"];

var _Map = require("babel-runtime/core-js/map")["default"];

var _getIterator = require("babel-runtime/core-js/get-iterator")["default"];

var _interopRequireDefault = require("babel-runtime/helpers/interop-require-default")["default"];

exports.__esModule = true;
exports["default"] = makeAsyncScript;

var _react = require("react");

var _react2 = _interopRequireDefault(_react);

var SCRIPT_MAP = new _Map();

// A counter used to generate a unique id for each component that uses the function
var idCount = 0;

function makeAsyncScript(Component, scriptURL, options) {
  options = options || {};
  var funcs = {
    displayName: "AsyncScriptLoader",

    propTypes: {
      asyncScriptOnLoad: _react.PropTypes.func
    },

    statics: {
      asyncScriptLoaderTriggerOnScriptLoaded: function asyncScriptLoaderTriggerOnScriptLoaded() {
        var mapEntry = SCRIPT_MAP.get(scriptURL);
        if (!mapEntry || !mapEntry.loaded) {
          throw new Error("Script is not loaded.");
        }
        for (var _iterator = mapEntry.observers.values(), _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _getIterator(_iterator);;) {
          var _ref;

          if (_isArray) {
            if (_i >= _iterator.length) break;
            _ref = _iterator[_i++];
          } else {
            _i = _iterator.next();
            if (_i.done) break;
            _ref = _i.value;
          }

          var observer = _ref;

          observer(mapEntry);
        }
        delete window[options.callbackName];
      }
    },

    getInitialState: function getInitialState() {
      return {};
    },

    asyncScriptLoaderGetScriptLoaderID: function asyncScriptLoaderGetScriptLoaderID() {
      if (!this.__scriptLoaderID) {
        this.__scriptLoaderID = "async-script-loader-" + idCount++;
      }
      return this.__scriptLoaderID;
    },

    getComponent: function getComponent() {
      return this.childComponent;
    },

    componentDidMount: function componentDidMount() {
      var _this = this;

      var key = this.asyncScriptLoaderGetScriptLoaderID();
      var _options = options;
      var globalName = _options.globalName;
      var callbackName = _options.callbackName;

      if (globalName && typeof window[globalName] !== "undefined") {
        SCRIPT_MAP.set(scriptURL, { loaded: true, observers: new _Map() });
      }

      if (SCRIPT_MAP.has(scriptURL)) {
        var entry = SCRIPT_MAP.get(scriptURL);
        if (entry.loaded || entry.errored) {
          this.asyncScriptLoaderHandleLoad(entry);
          return;
        }
        entry.observers.set(key, this.asyncScriptLoaderHandleLoad);
        return;
      }

      var observers = new _Map();
      observers.set(key, this.asyncScriptLoaderHandleLoad);
      SCRIPT_MAP.set(scriptURL, {
        loaded: false,
        observers: observers
      });

      var script = document.createElement("script");

      script.src = scriptURL;
      script.async = 1;

      var callObserverFuncAndRemoveObserver = function callObserverFuncAndRemoveObserver(func) {
        if (SCRIPT_MAP.has(scriptURL)) {
          var mapEntry = SCRIPT_MAP.get(scriptURL);
          var observersMap = mapEntry.observers;

          for (var _iterator2 = observersMap, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _getIterator(_iterator2);;) {
            var _ref2;

            if (_isArray2) {
              if (_i2 >= _iterator2.length) break;
              _ref2 = _iterator2[_i2++];
            } else {
              _i2 = _iterator2.next();
              if (_i2.done) break;
              _ref2 = _i2.value;
            }

            var obsKey = _ref2[0];
            var observer = _ref2[1];

            if (func(observer)) {
              observersMap["delete"](obsKey);
            }
          }
        }
      };

      if (callbackName && typeof window !== "undefined") {
        window[callbackName] = AsyncScriptLoader.asyncScriptLoaderTriggerOnScriptLoaded;
      }

      script.onload = function () {
        var mapEntry = SCRIPT_MAP.get(scriptURL);
        mapEntry.loaded = true;
        callObserverFuncAndRemoveObserver(function (observer) {
          if (callbackName) {
            return false;
          }
          observer(mapEntry);
          return true;
        });
      };
      script.onerror = function (event) {
        var mapEntry = SCRIPT_MAP.get(scriptURL);
        mapEntry.errored = true;
        callObserverFuncAndRemoveObserver(function (observer) {
          observer(mapEntry);
          return true;
        });
      };

      // (old) MSIE browsers may call "onreadystatechange" instead of "onload"
      script.onreadystatechange = function () {
        if (_this.readyState === "loaded") {
          // wait for other events, then call onload if default onload hadn't been called
          window.setTimeout(function () {
            if (SCRIPT_MAP.get(scriptURL).loaded !== true) {
              script.onload();
            }
          }, 0);
        }
      };

      document.body.appendChild(script);
    },

    asyncScriptLoaderHandleLoad: function asyncScriptLoaderHandleLoad(state) {
      this.setState(state, this.props.asyncScriptOnLoad);
    },

    componentWillUnmount: function componentWillUnmount() {
      // Clean the observer entry
      var mapEntry = SCRIPT_MAP.get(scriptURL);
      if (mapEntry) {
        mapEntry.observers["delete"](this.asyncScriptLoaderGetScriptLoaderID());
      }
    },

    render: function render() {
      var _this2 = this;

      var globalName = options.globalName;
      var _props = this.props;
      var asyncScriptOnLoad = _props.asyncScriptOnLoad;

      var childProps = _objectWithoutProperties(_props, ["asyncScriptOnLoad"]);

      if (globalName && typeof window !== "undefined") {
        childProps[globalName] = typeof window[globalName] !== "undefined" ? window[globalName] : undefined;
      }
      return _react2["default"].createElement(Component, _extends({ ref: function (comp) {
          _this2.childComponent = comp;
        } }, childProps));
    }

  };

  if (options.exposeFuncs) {
    var _loop = function () {
      if (_isArray3) {
        if (_i3 >= _iterator3.length) return "break";
        _ref3 = _iterator3[_i3++];
      } else {
        _i3 = _iterator3.next();
        if (_i3.done) return "break";
        _ref3 = _i3.value;
      }

      var funcToExpose = _ref3;

      /* eslint-disable no-loop-func */
      funcs[funcToExpose] = function () {
        var _childComponent;

        return (_childComponent = this.childComponent)[funcToExpose].apply(_childComponent, arguments);
      };
      /* eslint-enable no-loop-func */
    };

    for (var _iterator3 = options.exposeFuncs, _isArray3 = Array.isArray(_iterator3), _i3 = 0, _iterator3 = _isArray3 ? _iterator3 : _getIterator(_iterator3);;) {
      var _ref3;

      var _ret = _loop();

      if (_ret === "break") break;
    }
  }
  var AsyncScriptLoader = _react2["default"].createClass(funcs);

  return AsyncScriptLoader;
}

module.exports = exports["default"];
},{"babel-runtime/core-js/get-iterator":42,"babel-runtime/core-js/map":43,"babel-runtime/helpers/extends":45,"babel-runtime/helpers/interop-require-default":46,"babel-runtime/helpers/object-without-properties":47,"react":"react"}],42:[function(require,module,exports){
module.exports = { "default": require("core-js/library/fn/get-iterator"), __esModule: true };
},{"core-js/library/fn/get-iterator":48}],43:[function(require,module,exports){
module.exports = { "default": require("core-js/library/fn/map"), __esModule: true };
},{"core-js/library/fn/map":49}],44:[function(require,module,exports){
module.exports = { "default": require("core-js/library/fn/object/assign"), __esModule: true };
},{"core-js/library/fn/object/assign":50}],45:[function(require,module,exports){
"use strict";

var _Object$assign = require("babel-runtime/core-js/object/assign")["default"];

exports["default"] = _Object$assign || function (target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i];

    for (var key in source) {
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }

  return target;
};

exports.__esModule = true;
},{"babel-runtime/core-js/object/assign":44}],46:[function(require,module,exports){
"use strict";

exports["default"] = function (obj) {
  return obj && obj.__esModule ? obj : {
    "default": obj
  };
};

exports.__esModule = true;
},{}],47:[function(require,module,exports){
"use strict";

exports["default"] = function (obj, keys) {
  var target = {};

  for (var i in obj) {
    if (keys.indexOf(i) >= 0) continue;
    if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;
    target[i] = obj[i];
  }

  return target;
};

exports.__esModule = true;
},{}],48:[function(require,module,exports){
require('../modules/web.dom.iterable');
require('../modules/es6.string.iterator');
module.exports = require('../modules/core.get-iterator');
},{"../modules/core.get-iterator":95,"../modules/es6.string.iterator":100,"../modules/web.dom.iterable":102}],49:[function(require,module,exports){
require('../modules/es6.object.to-string');
require('../modules/es6.string.iterator');
require('../modules/web.dom.iterable');
require('../modules/es6.map');
require('../modules/es7.map.to-json');
module.exports = require('../modules/$.core').Map;
},{"../modules/$.core":59,"../modules/es6.map":97,"../modules/es6.object.to-string":99,"../modules/es6.string.iterator":100,"../modules/es7.map.to-json":101,"../modules/web.dom.iterable":102}],50:[function(require,module,exports){
require('../../modules/es6.object.assign');
module.exports = require('../../modules/$.core').Object.assign;
},{"../../modules/$.core":59,"../../modules/es6.object.assign":98}],51:[function(require,module,exports){
module.exports = function(it){
  if(typeof it != 'function')throw TypeError(it + ' is not a function!');
  return it;
};
},{}],52:[function(require,module,exports){
module.exports = function(){ /* empty */ };
},{}],53:[function(require,module,exports){
var isObject = require('./$.is-object');
module.exports = function(it){
  if(!isObject(it))throw TypeError(it + ' is not an object!');
  return it;
};
},{"./$.is-object":71}],54:[function(require,module,exports){
// getting tag from 19.1.3.6 Object.prototype.toString()
var cof = require('./$.cof')
  , TAG = require('./$.wks')('toStringTag')
  // ES3 wrong here
  , ARG = cof(function(){ return arguments; }()) == 'Arguments';

module.exports = function(it){
  var O, T, B;
  return it === undefined ? 'Undefined' : it === null ? 'Null'
    // @@toStringTag case
    : typeof (T = (O = Object(it))[TAG]) == 'string' ? T
    // builtinTag case
    : ARG ? cof(O)
    // ES3 arguments fallback
    : (B = cof(O)) == 'Object' && typeof O.callee == 'function' ? 'Arguments' : B;
};
},{"./$.cof":55,"./$.wks":93}],55:[function(require,module,exports){
var toString = {}.toString;

module.exports = function(it){
  return toString.call(it).slice(8, -1);
};
},{}],56:[function(require,module,exports){
'use strict';
var $            = require('./$')
  , hide         = require('./$.hide')
  , redefineAll  = require('./$.redefine-all')
  , ctx          = require('./$.ctx')
  , strictNew    = require('./$.strict-new')
  , defined      = require('./$.defined')
  , forOf        = require('./$.for-of')
  , $iterDefine  = require('./$.iter-define')
  , step         = require('./$.iter-step')
  , ID           = require('./$.uid')('id')
  , $has         = require('./$.has')
  , isObject     = require('./$.is-object')
  , setSpecies   = require('./$.set-species')
  , DESCRIPTORS  = require('./$.descriptors')
  , isExtensible = Object.isExtensible || isObject
  , SIZE         = DESCRIPTORS ? '_s' : 'size'
  , id           = 0;

var fastKey = function(it, create){
  // return primitive with prefix
  if(!isObject(it))return typeof it == 'symbol' ? it : (typeof it == 'string' ? 'S' : 'P') + it;
  if(!$has(it, ID)){
    // can't set id to frozen object
    if(!isExtensible(it))return 'F';
    // not necessary to add id
    if(!create)return 'E';
    // add missing object id
    hide(it, ID, ++id);
  // return object id with prefix
  } return 'O' + it[ID];
};

var getEntry = function(that, key){
  // fast case
  var index = fastKey(key), entry;
  if(index !== 'F')return that._i[index];
  // frozen object case
  for(entry = that._f; entry; entry = entry.n){
    if(entry.k == key)return entry;
  }
};

module.exports = {
  getConstructor: function(wrapper, NAME, IS_MAP, ADDER){
    var C = wrapper(function(that, iterable){
      strictNew(that, C, NAME);
      that._i = $.create(null); // index
      that._f = undefined;      // first entry
      that._l = undefined;      // last entry
      that[SIZE] = 0;           // size
      if(iterable != undefined)forOf(iterable, IS_MAP, that[ADDER], that);
    });
    redefineAll(C.prototype, {
      // 23.1.3.1 Map.prototype.clear()
      // 23.2.3.2 Set.prototype.clear()
      clear: function clear(){
        for(var that = this, data = that._i, entry = that._f; entry; entry = entry.n){
          entry.r = true;
          if(entry.p)entry.p = entry.p.n = undefined;
          delete data[entry.i];
        }
        that._f = that._l = undefined;
        that[SIZE] = 0;
      },
      // 23.1.3.3 Map.prototype.delete(key)
      // 23.2.3.4 Set.prototype.delete(value)
      'delete': function(key){
        var that  = this
          , entry = getEntry(that, key);
        if(entry){
          var next = entry.n
            , prev = entry.p;
          delete that._i[entry.i];
          entry.r = true;
          if(prev)prev.n = next;
          if(next)next.p = prev;
          if(that._f == entry)that._f = next;
          if(that._l == entry)that._l = prev;
          that[SIZE]--;
        } return !!entry;
      },
      // 23.2.3.6 Set.prototype.forEach(callbackfn, thisArg = undefined)
      // 23.1.3.5 Map.prototype.forEach(callbackfn, thisArg = undefined)
      forEach: function forEach(callbackfn /*, that = undefined */){
        var f = ctx(callbackfn, arguments.length > 1 ? arguments[1] : undefined, 3)
          , entry;
        while(entry = entry ? entry.n : this._f){
          f(entry.v, entry.k, this);
          // revert to the last existing entry
          while(entry && entry.r)entry = entry.p;
        }
      },
      // 23.1.3.7 Map.prototype.has(key)
      // 23.2.3.7 Set.prototype.has(value)
      has: function has(key){
        return !!getEntry(this, key);
      }
    });
    if(DESCRIPTORS)$.setDesc(C.prototype, 'size', {
      get: function(){
        return defined(this[SIZE]);
      }
    });
    return C;
  },
  def: function(that, key, value){
    var entry = getEntry(that, key)
      , prev, index;
    // change existing entry
    if(entry){
      entry.v = value;
    // create new entry
    } else {
      that._l = entry = {
        i: index = fastKey(key, true), // <- index
        k: key,                        // <- key
        v: value,                      // <- value
        p: prev = that._l,             // <- previous entry
        n: undefined,                  // <- next entry
        r: false                       // <- removed
      };
      if(!that._f)that._f = entry;
      if(prev)prev.n = entry;
      that[SIZE]++;
      // add to index
      if(index !== 'F')that._i[index] = entry;
    } return that;
  },
  getEntry: getEntry,
  setStrong: function(C, NAME, IS_MAP){
    // add .keys, .values, .entries, [@@iterator]
    // 23.1.3.4, 23.1.3.8, 23.1.3.11, 23.1.3.12, 23.2.3.5, 23.2.3.8, 23.2.3.10, 23.2.3.11
    $iterDefine(C, NAME, function(iterated, kind){
      this._t = iterated;  // target
      this._k = kind;      // kind
      this._l = undefined; // previous
    }, function(){
      var that  = this
        , kind  = that._k
        , entry = that._l;
      // revert to the last existing entry
      while(entry && entry.r)entry = entry.p;
      // get next entry
      if(!that._t || !(that._l = entry = entry ? entry.n : that._t._f)){
        // or finish the iteration
        that._t = undefined;
        return step(1);
      }
      // return step by kind
      if(kind == 'keys'  )return step(0, entry.k);
      if(kind == 'values')return step(0, entry.v);
      return step(0, [entry.k, entry.v]);
    }, IS_MAP ? 'entries' : 'values' , !IS_MAP, true);

    // add [@@species], 23.1.2.2, 23.2.2.2
    setSpecies(NAME);
  }
};
},{"./$":77,"./$.ctx":60,"./$.defined":61,"./$.descriptors":62,"./$.for-of":65,"./$.has":67,"./$.hide":68,"./$.is-object":71,"./$.iter-define":74,"./$.iter-step":75,"./$.redefine-all":81,"./$.set-species":83,"./$.strict-new":86,"./$.uid":92}],57:[function(require,module,exports){
// https://github.com/DavidBruant/Map-Set.prototype.toJSON
var forOf   = require('./$.for-of')
  , classof = require('./$.classof');
module.exports = function(NAME){
  return function toJSON(){
    if(classof(this) != NAME)throw TypeError(NAME + "#toJSON isn't generic");
    var arr = [];
    forOf(this, false, arr.push, arr);
    return arr;
  };
};
},{"./$.classof":54,"./$.for-of":65}],58:[function(require,module,exports){
'use strict';
var $              = require('./$')
  , global         = require('./$.global')
  , $export        = require('./$.export')
  , fails          = require('./$.fails')
  , hide           = require('./$.hide')
  , redefineAll    = require('./$.redefine-all')
  , forOf          = require('./$.for-of')
  , strictNew      = require('./$.strict-new')
  , isObject       = require('./$.is-object')
  , setToStringTag = require('./$.set-to-string-tag')
  , DESCRIPTORS    = require('./$.descriptors');

module.exports = function(NAME, wrapper, methods, common, IS_MAP, IS_WEAK){
  var Base  = global[NAME]
    , C     = Base
    , ADDER = IS_MAP ? 'set' : 'add'
    , proto = C && C.prototype
    , O     = {};
  if(!DESCRIPTORS || typeof C != 'function' || !(IS_WEAK || proto.forEach && !fails(function(){
    new C().entries().next();
  }))){
    // create collection constructor
    C = common.getConstructor(wrapper, NAME, IS_MAP, ADDER);
    redefineAll(C.prototype, methods);
  } else {
    C = wrapper(function(target, iterable){
      strictNew(target, C, NAME);
      target._c = new Base;
      if(iterable != undefined)forOf(iterable, IS_MAP, target[ADDER], target);
    });
    $.each.call('add,clear,delete,forEach,get,has,set,keys,values,entries'.split(','),function(KEY){
      var IS_ADDER = KEY == 'add' || KEY == 'set';
      if(KEY in proto && !(IS_WEAK && KEY == 'clear'))hide(C.prototype, KEY, function(a, b){
        if(!IS_ADDER && IS_WEAK && !isObject(a))return KEY == 'get' ? undefined : false;
        var result = this._c[KEY](a === 0 ? 0 : a, b);
        return IS_ADDER ? this : result;
      });
    });
    if('size' in proto)$.setDesc(C.prototype, 'size', {
      get: function(){
        return this._c.size;
      }
    });
  }

  setToStringTag(C, NAME);

  O[NAME] = C;
  $export($export.G + $export.W + $export.F, O);

  if(!IS_WEAK)common.setStrong(C, NAME, IS_MAP);

  return C;
};
},{"./$":77,"./$.descriptors":62,"./$.export":63,"./$.fails":64,"./$.for-of":65,"./$.global":66,"./$.hide":68,"./$.is-object":71,"./$.redefine-all":81,"./$.set-to-string-tag":84,"./$.strict-new":86}],59:[function(require,module,exports){
var core = module.exports = {version: '1.2.6'};
if(typeof __e == 'number')__e = core; // eslint-disable-line no-undef
},{}],60:[function(require,module,exports){
// optional / simple context binding
var aFunction = require('./$.a-function');
module.exports = function(fn, that, length){
  aFunction(fn);
  if(that === undefined)return fn;
  switch(length){
    case 1: return function(a){
      return fn.call(that, a);
    };
    case 2: return function(a, b){
      return fn.call(that, a, b);
    };
    case 3: return function(a, b, c){
      return fn.call(that, a, b, c);
    };
  }
  return function(/* ...args */){
    return fn.apply(that, arguments);
  };
};
},{"./$.a-function":51}],61:[function(require,module,exports){
// 7.2.1 RequireObjectCoercible(argument)
module.exports = function(it){
  if(it == undefined)throw TypeError("Can't call method on  " + it);
  return it;
};
},{}],62:[function(require,module,exports){
// Thank's IE8 for his funny defineProperty
module.exports = !require('./$.fails')(function(){
  return Object.defineProperty({}, 'a', {get: function(){ return 7; }}).a != 7;
});
},{"./$.fails":64}],63:[function(require,module,exports){
var global    = require('./$.global')
  , core      = require('./$.core')
  , ctx       = require('./$.ctx')
  , PROTOTYPE = 'prototype';

var $export = function(type, name, source){
  var IS_FORCED = type & $export.F
    , IS_GLOBAL = type & $export.G
    , IS_STATIC = type & $export.S
    , IS_PROTO  = type & $export.P
    , IS_BIND   = type & $export.B
    , IS_WRAP   = type & $export.W
    , exports   = IS_GLOBAL ? core : core[name] || (core[name] = {})
    , target    = IS_GLOBAL ? global : IS_STATIC ? global[name] : (global[name] || {})[PROTOTYPE]
    , key, own, out;
  if(IS_GLOBAL)source = name;
  for(key in source){
    // contains in native
    own = !IS_FORCED && target && key in target;
    if(own && key in exports)continue;
    // export native or passed
    out = own ? target[key] : source[key];
    // prevent global pollution for namespaces
    exports[key] = IS_GLOBAL && typeof target[key] != 'function' ? source[key]
    // bind timers to global for call from export context
    : IS_BIND && own ? ctx(out, global)
    // wrap global constructors for prevent change them in library
    : IS_WRAP && target[key] == out ? (function(C){
      var F = function(param){
        return this instanceof C ? new C(param) : C(param);
      };
      F[PROTOTYPE] = C[PROTOTYPE];
      return F;
    // make static versions for prototype methods
    })(out) : IS_PROTO && typeof out == 'function' ? ctx(Function.call, out) : out;
    if(IS_PROTO)(exports[PROTOTYPE] || (exports[PROTOTYPE] = {}))[key] = out;
  }
};
// type bitmap
$export.F = 1;  // forced
$export.G = 2;  // global
$export.S = 4;  // static
$export.P = 8;  // proto
$export.B = 16; // bind
$export.W = 32; // wrap
module.exports = $export;
},{"./$.core":59,"./$.ctx":60,"./$.global":66}],64:[function(require,module,exports){
module.exports = function(exec){
  try {
    return !!exec();
  } catch(e){
    return true;
  }
};
},{}],65:[function(require,module,exports){
var ctx         = require('./$.ctx')
  , call        = require('./$.iter-call')
  , isArrayIter = require('./$.is-array-iter')
  , anObject    = require('./$.an-object')
  , toLength    = require('./$.to-length')
  , getIterFn   = require('./core.get-iterator-method');
module.exports = function(iterable, entries, fn, that){
  var iterFn = getIterFn(iterable)
    , f      = ctx(fn, that, entries ? 2 : 1)
    , index  = 0
    , length, step, iterator;
  if(typeof iterFn != 'function')throw TypeError(iterable + ' is not iterable!');
  // fast case for arrays with default iterator
  if(isArrayIter(iterFn))for(length = toLength(iterable.length); length > index; index++){
    entries ? f(anObject(step = iterable[index])[0], step[1]) : f(iterable[index]);
  } else for(iterator = iterFn.call(iterable); !(step = iterator.next()).done; ){
    call(iterator, f, step.value, entries);
  }
};
},{"./$.an-object":53,"./$.ctx":60,"./$.is-array-iter":70,"./$.iter-call":72,"./$.to-length":90,"./core.get-iterator-method":94}],66:[function(require,module,exports){
// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028
var global = module.exports = typeof window != 'undefined' && window.Math == Math
  ? window : typeof self != 'undefined' && self.Math == Math ? self : Function('return this')();
if(typeof __g == 'number')__g = global; // eslint-disable-line no-undef
},{}],67:[function(require,module,exports){
var hasOwnProperty = {}.hasOwnProperty;
module.exports = function(it, key){
  return hasOwnProperty.call(it, key);
};
},{}],68:[function(require,module,exports){
var $          = require('./$')
  , createDesc = require('./$.property-desc');
module.exports = require('./$.descriptors') ? function(object, key, value){
  return $.setDesc(object, key, createDesc(1, value));
} : function(object, key, value){
  object[key] = value;
  return object;
};
},{"./$":77,"./$.descriptors":62,"./$.property-desc":80}],69:[function(require,module,exports){
// fallback for non-array-like ES3 and non-enumerable old V8 strings
var cof = require('./$.cof');
module.exports = Object('z').propertyIsEnumerable(0) ? Object : function(it){
  return cof(it) == 'String' ? it.split('') : Object(it);
};
},{"./$.cof":55}],70:[function(require,module,exports){
// check on default Array iterator
var Iterators  = require('./$.iterators')
  , ITERATOR   = require('./$.wks')('iterator')
  , ArrayProto = Array.prototype;

module.exports = function(it){
  return it !== undefined && (Iterators.Array === it || ArrayProto[ITERATOR] === it);
};
},{"./$.iterators":76,"./$.wks":93}],71:[function(require,module,exports){
module.exports = function(it){
  return typeof it === 'object' ? it !== null : typeof it === 'function';
};
},{}],72:[function(require,module,exports){
// call something on iterator step with safe closing on error
var anObject = require('./$.an-object');
module.exports = function(iterator, fn, value, entries){
  try {
    return entries ? fn(anObject(value)[0], value[1]) : fn(value);
  // 7.4.6 IteratorClose(iterator, completion)
  } catch(e){
    var ret = iterator['return'];
    if(ret !== undefined)anObject(ret.call(iterator));
    throw e;
  }
};
},{"./$.an-object":53}],73:[function(require,module,exports){
'use strict';
var $              = require('./$')
  , descriptor     = require('./$.property-desc')
  , setToStringTag = require('./$.set-to-string-tag')
  , IteratorPrototype = {};

// 25.1.2.1.1 %IteratorPrototype%[@@iterator]()
require('./$.hide')(IteratorPrototype, require('./$.wks')('iterator'), function(){ return this; });

module.exports = function(Constructor, NAME, next){
  Constructor.prototype = $.create(IteratorPrototype, {next: descriptor(1, next)});
  setToStringTag(Constructor, NAME + ' Iterator');
};
},{"./$":77,"./$.hide":68,"./$.property-desc":80,"./$.set-to-string-tag":84,"./$.wks":93}],74:[function(require,module,exports){
'use strict';
var LIBRARY        = require('./$.library')
  , $export        = require('./$.export')
  , redefine       = require('./$.redefine')
  , hide           = require('./$.hide')
  , has            = require('./$.has')
  , Iterators      = require('./$.iterators')
  , $iterCreate    = require('./$.iter-create')
  , setToStringTag = require('./$.set-to-string-tag')
  , getProto       = require('./$').getProto
  , ITERATOR       = require('./$.wks')('iterator')
  , BUGGY          = !([].keys && 'next' in [].keys()) // Safari has buggy iterators w/o `next`
  , FF_ITERATOR    = '@@iterator'
  , KEYS           = 'keys'
  , VALUES         = 'values';

var returnThis = function(){ return this; };

module.exports = function(Base, NAME, Constructor, next, DEFAULT, IS_SET, FORCED){
  $iterCreate(Constructor, NAME, next);
  var getMethod = function(kind){
    if(!BUGGY && kind in proto)return proto[kind];
    switch(kind){
      case KEYS: return function keys(){ return new Constructor(this, kind); };
      case VALUES: return function values(){ return new Constructor(this, kind); };
    } return function entries(){ return new Constructor(this, kind); };
  };
  var TAG        = NAME + ' Iterator'
    , DEF_VALUES = DEFAULT == VALUES
    , VALUES_BUG = false
    , proto      = Base.prototype
    , $native    = proto[ITERATOR] || proto[FF_ITERATOR] || DEFAULT && proto[DEFAULT]
    , $default   = $native || getMethod(DEFAULT)
    , methods, key;
  // Fix native
  if($native){
    var IteratorPrototype = getProto($default.call(new Base));
    // Set @@toStringTag to native iterators
    setToStringTag(IteratorPrototype, TAG, true);
    // FF fix
    if(!LIBRARY && has(proto, FF_ITERATOR))hide(IteratorPrototype, ITERATOR, returnThis);
    // fix Array#{values, @@iterator}.name in V8 / FF
    if(DEF_VALUES && $native.name !== VALUES){
      VALUES_BUG = true;
      $default = function values(){ return $native.call(this); };
    }
  }
  // Define iterator
  if((!LIBRARY || FORCED) && (BUGGY || VALUES_BUG || !proto[ITERATOR])){
    hide(proto, ITERATOR, $default);
  }
  // Plug for library
  Iterators[NAME] = $default;
  Iterators[TAG]  = returnThis;
  if(DEFAULT){
    methods = {
      values:  DEF_VALUES  ? $default : getMethod(VALUES),
      keys:    IS_SET      ? $default : getMethod(KEYS),
      entries: !DEF_VALUES ? $default : getMethod('entries')
    };
    if(FORCED)for(key in methods){
      if(!(key in proto))redefine(proto, key, methods[key]);
    } else $export($export.P + $export.F * (BUGGY || VALUES_BUG), NAME, methods);
  }
  return methods;
};
},{"./$":77,"./$.export":63,"./$.has":67,"./$.hide":68,"./$.iter-create":73,"./$.iterators":76,"./$.library":78,"./$.redefine":82,"./$.set-to-string-tag":84,"./$.wks":93}],75:[function(require,module,exports){
module.exports = function(done, value){
  return {value: value, done: !!done};
};
},{}],76:[function(require,module,exports){
module.exports = {};
},{}],77:[function(require,module,exports){
var $Object = Object;
module.exports = {
  create:     $Object.create,
  getProto:   $Object.getPrototypeOf,
  isEnum:     {}.propertyIsEnumerable,
  getDesc:    $Object.getOwnPropertyDescriptor,
  setDesc:    $Object.defineProperty,
  setDescs:   $Object.defineProperties,
  getKeys:    $Object.keys,
  getNames:   $Object.getOwnPropertyNames,
  getSymbols: $Object.getOwnPropertySymbols,
  each:       [].forEach
};
},{}],78:[function(require,module,exports){
module.exports = true;
},{}],79:[function(require,module,exports){
// 19.1.2.1 Object.assign(target, source, ...)
var $        = require('./$')
  , toObject = require('./$.to-object')
  , IObject  = require('./$.iobject');

// should work with symbols and should have deterministic property order (V8 bug)
module.exports = require('./$.fails')(function(){
  var a = Object.assign
    , A = {}
    , B = {}
    , S = Symbol()
    , K = 'abcdefghijklmnopqrst';
  A[S] = 7;
  K.split('').forEach(function(k){ B[k] = k; });
  return a({}, A)[S] != 7 || Object.keys(a({}, B)).join('') != K;
}) ? function assign(target, source){ // eslint-disable-line no-unused-vars
  var T     = toObject(target)
    , $$    = arguments
    , $$len = $$.length
    , index = 1
    , getKeys    = $.getKeys
    , getSymbols = $.getSymbols
    , isEnum     = $.isEnum;
  while($$len > index){
    var S      = IObject($$[index++])
      , keys   = getSymbols ? getKeys(S).concat(getSymbols(S)) : getKeys(S)
      , length = keys.length
      , j      = 0
      , key;
    while(length > j)if(isEnum.call(S, key = keys[j++]))T[key] = S[key];
  }
  return T;
} : Object.assign;
},{"./$":77,"./$.fails":64,"./$.iobject":69,"./$.to-object":91}],80:[function(require,module,exports){
module.exports = function(bitmap, value){
  return {
    enumerable  : !(bitmap & 1),
    configurable: !(bitmap & 2),
    writable    : !(bitmap & 4),
    value       : value
  };
};
},{}],81:[function(require,module,exports){
var redefine = require('./$.redefine');
module.exports = function(target, src){
  for(var key in src)redefine(target, key, src[key]);
  return target;
};
},{"./$.redefine":82}],82:[function(require,module,exports){
module.exports = require('./$.hide');
},{"./$.hide":68}],83:[function(require,module,exports){
'use strict';
var core        = require('./$.core')
  , $           = require('./$')
  , DESCRIPTORS = require('./$.descriptors')
  , SPECIES     = require('./$.wks')('species');

module.exports = function(KEY){
  var C = core[KEY];
  if(DESCRIPTORS && C && !C[SPECIES])$.setDesc(C, SPECIES, {
    configurable: true,
    get: function(){ return this; }
  });
};
},{"./$":77,"./$.core":59,"./$.descriptors":62,"./$.wks":93}],84:[function(require,module,exports){
var def = require('./$').setDesc
  , has = require('./$.has')
  , TAG = require('./$.wks')('toStringTag');

module.exports = function(it, tag, stat){
  if(it && !has(it = stat ? it : it.prototype, TAG))def(it, TAG, {configurable: true, value: tag});
};
},{"./$":77,"./$.has":67,"./$.wks":93}],85:[function(require,module,exports){
var global = require('./$.global')
  , SHARED = '__core-js_shared__'
  , store  = global[SHARED] || (global[SHARED] = {});
module.exports = function(key){
  return store[key] || (store[key] = {});
};
},{"./$.global":66}],86:[function(require,module,exports){
module.exports = function(it, Constructor, name){
  if(!(it instanceof Constructor))throw TypeError(name + ": use the 'new' operator!");
  return it;
};
},{}],87:[function(require,module,exports){
var toInteger = require('./$.to-integer')
  , defined   = require('./$.defined');
// true  -> String#at
// false -> String#codePointAt
module.exports = function(TO_STRING){
  return function(that, pos){
    var s = String(defined(that))
      , i = toInteger(pos)
      , l = s.length
      , a, b;
    if(i < 0 || i >= l)return TO_STRING ? '' : undefined;
    a = s.charCodeAt(i);
    return a < 0xd800 || a > 0xdbff || i + 1 === l || (b = s.charCodeAt(i + 1)) < 0xdc00 || b > 0xdfff
      ? TO_STRING ? s.charAt(i) : a
      : TO_STRING ? s.slice(i, i + 2) : (a - 0xd800 << 10) + (b - 0xdc00) + 0x10000;
  };
};
},{"./$.defined":61,"./$.to-integer":88}],88:[function(require,module,exports){
// 7.1.4 ToInteger
var ceil  = Math.ceil
  , floor = Math.floor;
module.exports = function(it){
  return isNaN(it = +it) ? 0 : (it > 0 ? floor : ceil)(it);
};
},{}],89:[function(require,module,exports){
// to indexed object, toObject with fallback for non-array-like ES3 strings
var IObject = require('./$.iobject')
  , defined = require('./$.defined');
module.exports = function(it){
  return IObject(defined(it));
};
},{"./$.defined":61,"./$.iobject":69}],90:[function(require,module,exports){
// 7.1.15 ToLength
var toInteger = require('./$.to-integer')
  , min       = Math.min;
module.exports = function(it){
  return it > 0 ? min(toInteger(it), 0x1fffffffffffff) : 0; // pow(2, 53) - 1 == 9007199254740991
};
},{"./$.to-integer":88}],91:[function(require,module,exports){
// 7.1.13 ToObject(argument)
var defined = require('./$.defined');
module.exports = function(it){
  return Object(defined(it));
};
},{"./$.defined":61}],92:[function(require,module,exports){
var id = 0
  , px = Math.random();
module.exports = function(key){
  return 'Symbol('.concat(key === undefined ? '' : key, ')_', (++id + px).toString(36));
};
},{}],93:[function(require,module,exports){
var store  = require('./$.shared')('wks')
  , uid    = require('./$.uid')
  , Symbol = require('./$.global').Symbol;
module.exports = function(name){
  return store[name] || (store[name] =
    Symbol && Symbol[name] || (Symbol || uid)('Symbol.' + name));
};
},{"./$.global":66,"./$.shared":85,"./$.uid":92}],94:[function(require,module,exports){
var classof   = require('./$.classof')
  , ITERATOR  = require('./$.wks')('iterator')
  , Iterators = require('./$.iterators');
module.exports = require('./$.core').getIteratorMethod = function(it){
  if(it != undefined)return it[ITERATOR]
    || it['@@iterator']
    || Iterators[classof(it)];
};
},{"./$.classof":54,"./$.core":59,"./$.iterators":76,"./$.wks":93}],95:[function(require,module,exports){
var anObject = require('./$.an-object')
  , get      = require('./core.get-iterator-method');
module.exports = require('./$.core').getIterator = function(it){
  var iterFn = get(it);
  if(typeof iterFn != 'function')throw TypeError(it + ' is not iterable!');
  return anObject(iterFn.call(it));
};
},{"./$.an-object":53,"./$.core":59,"./core.get-iterator-method":94}],96:[function(require,module,exports){
'use strict';
var addToUnscopables = require('./$.add-to-unscopables')
  , step             = require('./$.iter-step')
  , Iterators        = require('./$.iterators')
  , toIObject        = require('./$.to-iobject');

// 22.1.3.4 Array.prototype.entries()
// 22.1.3.13 Array.prototype.keys()
// 22.1.3.29 Array.prototype.values()
// 22.1.3.30 Array.prototype[@@iterator]()
module.exports = require('./$.iter-define')(Array, 'Array', function(iterated, kind){
  this._t = toIObject(iterated); // target
  this._i = 0;                   // next index
  this._k = kind;                // kind
// 22.1.5.2.1 %ArrayIteratorPrototype%.next()
}, function(){
  var O     = this._t
    , kind  = this._k
    , index = this._i++;
  if(!O || index >= O.length){
    this._t = undefined;
    return step(1);
  }
  if(kind == 'keys'  )return step(0, index);
  if(kind == 'values')return step(0, O[index]);
  return step(0, [index, O[index]]);
}, 'values');

// argumentsList[@@iterator] is %ArrayProto_values% (9.4.4.6, 9.4.4.7)
Iterators.Arguments = Iterators.Array;

addToUnscopables('keys');
addToUnscopables('values');
addToUnscopables('entries');
},{"./$.add-to-unscopables":52,"./$.iter-define":74,"./$.iter-step":75,"./$.iterators":76,"./$.to-iobject":89}],97:[function(require,module,exports){
'use strict';
var strong = require('./$.collection-strong');

// 23.1 Map Objects
require('./$.collection')('Map', function(get){
  return function Map(){ return get(this, arguments.length > 0 ? arguments[0] : undefined); };
}, {
  // 23.1.3.6 Map.prototype.get(key)
  get: function get(key){
    var entry = strong.getEntry(this, key);
    return entry && entry.v;
  },
  // 23.1.3.9 Map.prototype.set(key, value)
  set: function set(key, value){
    return strong.def(this, key === 0 ? 0 : key, value);
  }
}, strong, true);
},{"./$.collection":58,"./$.collection-strong":56}],98:[function(require,module,exports){
// 19.1.3.1 Object.assign(target, source)
var $export = require('./$.export');

$export($export.S + $export.F, 'Object', {assign: require('./$.object-assign')});
},{"./$.export":63,"./$.object-assign":79}],99:[function(require,module,exports){

},{}],100:[function(require,module,exports){
'use strict';
var $at  = require('./$.string-at')(true);

// 21.1.3.27 String.prototype[@@iterator]()
require('./$.iter-define')(String, 'String', function(iterated){
  this._t = String(iterated); // target
  this._i = 0;                // next index
// 21.1.5.2.1 %StringIteratorPrototype%.next()
}, function(){
  var O     = this._t
    , index = this._i
    , point;
  if(index >= O.length)return {value: undefined, done: true};
  point = $at(O, index);
  this._i += point.length;
  return {value: point, done: false};
});
},{"./$.iter-define":74,"./$.string-at":87}],101:[function(require,module,exports){
// https://github.com/DavidBruant/Map-Set.prototype.toJSON
var $export  = require('./$.export');

$export($export.P, 'Map', {toJSON: require('./$.collection-to-json')('Map')});
},{"./$.collection-to-json":57,"./$.export":63}],102:[function(require,module,exports){
require('./es6.array.iterator');
var Iterators = require('./$.iterators');
Iterators.NodeList = Iterators.HTMLCollection = Iterators.Array;
},{"./$.iterators":76,"./es6.array.iterator":96}],103:[function(require,module,exports){
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var React = require('react');

function checkbox(name, checkedValues, onChange) {
  return function Checkbox(props) {
    var checked = checkedValues.indexOf(props.value) >= 0;
    var boxChange = onChange.bind(null, props.value);

    return React.createElement('input', _extends({}, props, {
      type: 'checkbox',
      name: name,
      checked: checked,
      onChange: boxChange
    }));
  };
}

module.exports = React.createClass({
  displayName: 'CheckboxGroup',
  getInitialState: function getInitialState() {
    return {
      value: this.props.value || this.props.defaultValue || []
    };
  },
  isControlledComponent: function isControlledComponent() {
    return !!this.props.value;
  },
  componentWillReceiveProps: function componentWillReceiveProps(newProps) {
    if (newProps.value) {
      this.setState({ value: newProps.value });
    }
  },

  onCheckboxChange: function onCheckboxChange(checkboxValue, event) {
    var newValue;
    if (event.target.checked) {
      newValue = this.state.value.concat(checkboxValue);
    } else {
      newValue = this.state.value.filter(function (v) {
        return v !== checkboxValue;
      });
    }

    if (!this.isControlledComponent()) {
      this.setState({ value: newValue });
    } else {
      this.setState({ value: this.props.value });
    }

    if (typeof this.props.onChange === 'function') {
      this.props.onChange(newValue);
    }
  },
  getValue: function getValue() {
    return this.state.value;
  },
  render: function render() {
    var _props = this.props;
    var name = _props.name;
    var value = _props.value;
    var children = _props.children;


    var checkedValues;
    if (!this.isControlledComponent()) {
      checkedValues = this.state.value;
    } else {
      checkedValues = value;
    }

    var renderedChildren = children(checkbox(name, checkedValues, this.onCheckboxChange));
    return renderedChildren && React.Children.only(renderedChildren);
  }
});

},{"react":"react"}],104:[function(require,module,exports){
'use strict';

exports.__esModule = true;
exports['default'] = getForceUpdate;
function traverseRenderedChildren(internalInstance, callback, argument) {
  callback(internalInstance, argument);

  if (internalInstance._renderedComponent) {
    traverseRenderedChildren(internalInstance._renderedComponent, callback, argument);
  } else {
    for (var key in internalInstance._renderedChildren) {
      if (internalInstance._renderedChildren.hasOwnProperty(key)) {
        traverseRenderedChildren(internalInstance._renderedChildren[key], callback, argument);
      }
    }
  }
}

function setPendingForceUpdate(internalInstance) {
  if (internalInstance._pendingForceUpdate === false) {
    internalInstance._pendingForceUpdate = true;
  }
}

function forceUpdateIfPending(internalInstance, React) {
  if (internalInstance._pendingForceUpdate === true) {
    var publicInstance = internalInstance._instance;
    React.Component.prototype.forceUpdate.call(publicInstance);
  }
}

function deepForceUpdateStack(instance, React) {
  var internalInstance = instance._reactInternalInstance;
  traverseRenderedChildren(internalInstance, setPendingForceUpdate);
  traverseRenderedChildren(internalInstance, forceUpdateIfPending, React);
}

function deepForceUpdate(instance, React) {
  var root = instance._reactInternalFiber || instance._reactInternalInstance;
  if (typeof root.tag !== 'number') {
    // Traverse stack-based React tree.
    return deepForceUpdateStack(instance, React);
  }

  var node = root;
  while (true) {
    if (node.stateNode !== null && typeof node.type === 'function') {
      var publicInstance = node.stateNode;
      var updater = publicInstance.updater;

      if (typeof publicInstance.forceUpdate === 'function') {
        publicInstance.forceUpdate();
      } else if (updater && typeof updater.enqueueForceUpdate === 'function') {
        updater.enqueueForceUpdate(publicInstance);
      }
    }
    if (node.child) {
      node.child['return'] = node;
      node = node.child;
      continue;
    }
    if (node === root) {
      return undefined;
    }
    while (!node.sibling) {
      if (!node['return'] || node['return'] === root) {
        return undefined;
      }
      node = node['return'];
    }
    node.sibling['return'] = node['return'];
    node = node.sibling;
  }
}

function getForceUpdate(React) {
  return function (instance) {
    deepForceUpdate(instance, React);
  };
}

module.exports = exports['default'];
},{}],105:[function(require,module,exports){
'use strict';

module.exports = require('react/lib/ReactDOMServer');

},{"react/lib/ReactDOMServer":347}],106:[function(require,module,exports){
'use strict';

var _extends = Object.assign || function (target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i];for (var key in source) {
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }return target;
};

// A convenience wrapper for bar-only charts 

var React = require('react');

var Chart = require('./cartesian-chart.js');

var BarChart = function BarChart(props) {
  return React.createElement(Chart, _extends({}, props, {
    series: props.series.map(function (s) {
      return _extends({}, s, { type: 'bar' });
    })
  }));
};

module.exports = BarChart;

},{"./cartesian-chart.js":107,"react":"react"}],107:[function(require,module,exports){
(function (global){
'use strict';

var _extends = Object.assign || function (target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i];for (var key in source) {
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }return target;
};

var _ = require('lodash');
var React = require('react');
var ReactDOM = require('react-dom');
var echarts = (typeof window !== "undefined" ? window['echarts'] : typeof global !== "undefined" ? global['echarts'] : null);
var rgbcolor = require('rgbcolor');
var sprintf = require('sprintf');

var develop = !("production" == 'production');

var PropTypes = React.PropTypes;

var util = require('../util');
var validators = require('../validators');

var xaxisPropType = PropTypes.shape({
  name: PropTypes.string,
  data: PropTypes.array,
  formatter: PropTypes.func,
  boundaryGap: PropTypes.oneOfType([PropTypes.bool, PropTypes.arrayOf(PropTypes.number)]),
  numTicks: PropTypes.number,
  scale: PropTypes.bool,
  min: PropTypes.number,
  max: PropTypes.number
});

var yaxisPropType = PropTypes.shape({
  name: PropTypes.string,
  formatter: PropTypes.func,
  numTicks: PropTypes.number,
  splitArea: PropTypes.bool,
  scale: PropTypes.bool,
  min: PropTypes.number,
  max: PropTypes.number
});

var seriesPropType = PropTypes.shape({
  type: PropTypes.oneOf(['line', 'bar', 'scatter']),
  name: PropTypes.string.isRequired,
  data: PropTypes.array.isRequired, // further checks must be performed at runtime
  yAxisIndex: PropTypes.number, // meaningfull if a dual Y axis is provided
  color: PropTypes.oneOfType([PropTypes.string, PropTypes.func]),
  fill: PropTypes.number, // area opacity
  smooth: PropTypes.bool, // per-series
  symbolSize: PropTypes.number,
  symbol: PropTypes.oneOf(['circle', 'rectangle', 'triangle', 'diamond', 'emptyCircle', 'emptyRectangle', 'emptyTriangle', 'emptyDiamond']),
  label: PropTypes.oneOfType([PropTypes.bool, PropTypes.shape({
    position: PropTypes.oneOf(['left', 'right', 'top', 'bottom', 'inside', 'insideTop', 'insideBottom']),
    formatter: PropTypes.func
  })]),
  lineWidth: PropTypes.number, // pixels
  lineType: PropTypes.oneOf(['solid', 'dotted', 'dashed']),
  mark: PropTypes.shape({
    points: PropTypes.arrayOf(PropTypes.shape({
      type: PropTypes.oneOf(['min', 'max']),
      name: PropTypes.string
    })),
    lines: PropTypes.arrayOf(PropTypes.shape({
      type: PropTypes.oneOf(['min', 'max', 'avg']),
      name: PropTypes.string
    }))
  })
});

var gridPropType = PropTypes.shape({
  x: PropTypes.string,
  y: PropTypes.string,
  x2: PropTypes.string,
  y2: PropTypes.string
});

var imageOptionsPropType = PropTypes.shape({
  type: PropTypes.string,
  pixelRatio: PropTypes.number, // pixels
  backgroundColor: PropTypes.string
});

// A ECharts-based chart implemented as a React portal component
var Chart = React.createClass({
  displayName: 'Chart',

  statics: {
    limits: {
      numSeries: 8, // per chart
      numLegendItemsPerLine: 4
    },
    messages: {
      loadingText: 'Loading data...'
    },
    // Provide class-level defaults for messages, titles etc (lodash templates).
    templates: {
      pointTooltip: _.template('<%= seriesName %> <br/><%= x %>: <%= y %>'),
      valueTooltip: _.template('<%= seriesName %> <br/><%= name %>: <%= y %>')
    },
    defaults: {
      series: {
        type: 'line'
      },
      xAxis: {
        scale: true
      },
      yAxis: {
        splitArea: true,
        scale: true
      },
      legend: {
        data: null,
        padding: 5,
        itemGap: 5,
        itemHeight: 35
      }
    },

    propsToTheme: function propsToTheme(props) {
      var theme = _.cloneDeep(props.theme);

      theme = _.defaultsDeep(theme, {
        scatter: {
          itemStyle: {
            normal: {},
            emphasis: {}
          }
        },
        line: {
          itemStyle: {
            normal: {
              label: {}
            },
            emphasis: {}
          }
        },
        bar: {
          normal: {
            label: {}
          },
          emphasis: {}
        }
      });

      return theme;
    },

    propsToOptions: function propsToOptions(props) {
      // Build echarts-specific options based on props passed to component

      var opts = _.extend({}, {
        animation: false,
        calculable: false
      }, this.propsToAxisOptions(props), this.propsToTooltipOptions(props), this.propsToSeries(props));

      // Perform a final pass to adjust previously built options

      opts = this.adjustOptions(opts, props);

      return opts;
    },

    adjustOptions: function adjustOptions(opts, props) {
      // Note: This method modifies options in-place! 

      // 1. Adjust grid according to legend data

      var grid = opts.grid;

      var legend = _extends({}, this.defaults.legend, props.theme.legend, opts.legend);

      if (legend.data) {
        // Re-adjust grid.y according to number of line breaks in legend
        var n = legend.data.filter(function (name) {
          return name == '';
        }).length;
        var y0 = _.isString(grid.y) && grid.y.endsWith('%') ? parseInt(grid.y) * 0.01 * parseInt(props.height) : grid.y;
        var h = parseInt(legend.itemGap) + parseInt(legend.itemHeight);
        grid.y = parseInt(y0 || 0) + 2 * legend.padding + (n + 1) * h;
      }

      // 2. Swap axes, if horizontal view is enabled

      if (props.horizontal) {
        var xAxis = opts.xAxis,
            yAxis = opts.yAxis;

        opts.yAxis = xAxis;
        opts.xAxis = yAxis;
      }

      return opts;
    },

    propsToAxisOptions: function propsToAxisOptions(props) {
      var defaults = this.defaults;

      var axisType = props.xAxis.data ? 'category' : 'value';
      var opts = {};

      opts.grid = _extends({}, props.theme.grid, props.grid);

      var xax1 = {
        type: axisType,
        name: props.xAxis.name,
        data: props.xAxis.data,
        boundaryGap: props.xAxis.boundaryGap,
        splitNumber: axisType == 'category' || !_.isNumber(props.xAxis.numTicks) ? null : Number(props.xAxis.numTicks) - 1,
        axisTick: {
          show: true,
          interval: 'auto'
        },
        axisLabel: {
          formatter: props.xAxis.formatter,
          interval: axisType == 'value' ? null : props.xAxis.labelFilter || 'auto'
        },
        scale: props.xAxis.scale == null ? defaults.xAxis.scale : props.xAxis.scale,
        min: props.xAxis.min,
        max: props.xAxis.max
      };

      opts.xAxis = [xax1];

      opts.yAxis = (_.isArray(props.yAxis) ? props.yAxis.slice(0, 2) : [props.yAxis]).map(function (y) {
        return {
          type: 'value',
          name: y.name,
          splitArea: {
            show: y.splitArea == null ? defaults.yAxis.splitArea : Boolean(y.splitArea)
          },
          splitNumber: !_.isNumber(y.numTicks) ? null : Number(y.numTicks) - 1,
          axisLabel: {
            formatter: y.formatter
          },
          scale: y.scale == null ? defaults.yAxis.scale : y.scale,
          min: y.min,
          max: y.max
        };
      });

      return opts;
    },

    propsToTooltipOptions: function propsToTooltipOptions(props) {
      var _this = this;

      if (!props.tooltip) return { tooltip: false };

      var fx = props.xAxis.formatter || function (x) {
        return x.toString();
      };
      var fy = props.yAxis.formatter || function (y) {
        return y.toString();
      };
      var formatter = function formatter(p) {
        if (_.isArray(p.value)) {
          // Tooltip for a point
          return _this.templates.pointTooltip({
            seriesName: p.seriesName,
            x: fx(p.value[0]),
            y: fy(p.value[1])
          });
        } else {
          // Tooltip for a named value.
          // (a mark line or y value of a category chart)
          return _this.templates.valueTooltip({
            seriesName: p.seriesName,
            name: _.isNumber(p.name) ? fx(p.name) : p.name,
            y: fy(p.value)
          });
        }
      };

      return { tooltip: { formatter: formatter } };
    },

    propsToSeries: function propsToSeries(props) {
      var _this2 = this;

      var delimiter = util.delimiter,
          flattener = util.flattener;
      var defaults = this.defaults;
      var _limits = this.limits,
          N = _limits.numSeries,
          L = _limits.numLegendItemsPerLine;
      var series = props.series,
          legend = props.legend,
          theme = props.theme;

      if (series == null) {
        series = [];
      } else if (series.length > N) {
        console.warn(sprintf('Unable to plot more than %d series per chart', N));
        series = series.slice(0, N);
      }

      var colors = props.color || theme.color; // chart-wide palette

      // Build options for all provided series

      series = series.map(function (y, i) {
        var type = y.type || defaults.series.type; // line, bar, scatter

        var data = _this2._checkData(props.xAxis.data, y.data);
        if (!data) return null;

        // Colorize

        var color = null,
            rgba = null;
        if (y.color != null && _.isFunction(y.color)) {
          // A user-provided function for coloring: wrap to what ECharts expects
          color = function color(p) {
            return y.color(p.name, p.data, p.dataIndex);
          };
        } else {
          // A simple color: turn into rgba
          rgba = new rgbcolor(y.color || colors[i]);
          rgba.alpha = y.fill == null ? 1.0 : y.fill;
          color = rgba.toRGB();
        }

        // Provide labels for points

        var label = y.label ? _.isObject(y.label) ? y.label : {} : null;
        if (label != null) {
          (function () {
            var yf = label.formatter || props.yAxis.formatter;
            label = {
              show: true,
              position: label.position || (props.horizontal ? 'right' : 'top'),
              formatter: yf == null ? null : function (p) {
                return p.data ? yf(p.data) : null;
              }
            };
            label = _.defaults(label, theme[type].itemStyle.normal.label);
          })();
        }

        // Build options for this series 

        var r = {
          type: type,
          data: data,
          name: y.name,
          itemStyle: {
            normal: {
              color: color,
              label: label,
              areaStyle: y.fill == null || rgba == null ? null : {
                color: rgba.toRGBA()
              },
              lineStyle: rgba == null ? {} : {
                color: rgba.toRGB()
              }
            }
          },
          markPoint: !(y.mark && y.mark.points) ? null : {
            data: y.mark.points.map(function (y1) {
              return { name: y1.name, type: y1.type };
            }) },
          markLine: !(y.mark && y.mark.lines) ? null : {
            data: y.mark.lines.map(function (y1) {
              return { name: y1.name, type: y1.type };
            }) }
        };

        if (_.isString(y.symbol)) r.symbol = y.symbol;

        if (_.isNumber(y.symbolSize)) r.symbolSize = y.symbolSize;

        if (_.isBoolean(y.smooth)) r.smooth = y.smooth;

        if (_.isNumber(y.yAxisIndex)) r.yAxisIndex = y.yAxisIndex;

        var lineWidth = y.lineWidth || props.lineWidth;
        if (_.isNumber(lineWidth)) r.itemStyle.normal.lineStyle.width = lineWidth;

        var lineType = y.lineType || props.lineType;
        if (_.isString(lineType)) r.itemStyle.normal.lineStyle.type = lineType;

        return r;
      });

      series = series.filter(function (y) {
        return y;
      }); //omit malformed series (mapped to null)

      // Build legend options based on supplied series.
      // For readability, insert line breaks every L items.

      if (legend === false) {
        // Hide
        legend = { show: false };
      } else if (legend == null || legend === true) {
        // By default, simply provide the names of all series.
        var names = series.map(function (y) {
          return y.name;
        });
        legend = {
          data: names.length > L ? names.reduce(delimiter(L, ''), []) : names
        };
      } else if (_.isArray(legend)) {
        // The layout is described as an array of names
        if (legend.every(function (v) {
          return _.isString(v);
        })) {
          // Assume a flat array of series names
          legend = {
            data: legend.length > L ? legend.reduce(delimiter(L, ''), []) : legend
          };
        } else {
          // Assume a nested array that explicitly describes layout (line breaks)
          legend = {
            data: legend.reduce(flattener(''), [])
          };
        }
      } else {
        legend = null;
      }

      if (legend.data) {
        (function () {
          // Format names to appear in a table layout (pad to maximum length)
          var n = _.max(legend.data.map(function (name) {
            return name.length;
          }));
          legend.formatter = function (name) {
            return _.padEnd(name, n, ' ');
          };
        })();
      }

      // Done
      return { legend: legend, series: series };
    },

    _checkData: function _checkData(xaxisData, data) {
      // Check if supplied (series) data is according to x-axis type
      if (xaxisData) {
        // Expect array of numbers paired to x-axis data (xAxis.type=category)
        data = data.map(function (v) {
          return v == '-' || v == null ? null : Number(v);
        });
        if (data.length != xaxisData.length || data.some(function (v) {
          return isNaN(v);
        })) data = null; // invalidate the entire array
      } else {
        // Expect array of [x, y] pairs (xAxis.type=value)
        data = data.filter(function (p) {
          return Array.isArray(p) && p.length == 2;
        }).map(function (p) {
          return [Number(p[0]), Number(p[1])];
        });
      }
      return data;
    },

    propsToLoadingOptions: function propsToLoadingOptions(props) {
      // Consider as loading only if received 'loading' prop
      var opts = null;
      if (_.isObject(props.loading)) {
        var text = props.loading.text;
        opts = {
          effect: 'spin',
          text: text || this.messages.loadingText
        };
      }
      return opts;
    }
  },

  propTypes: {
    // Properties for the container (i.e. portal) element
    id: PropTypes.string,
    prefix: PropTypes.string,
    width: validators.validateDimension,
    height: validators.validateDimension,
    // Properties injected from parent for callbacks
    refreshData: PropTypes.func,
    // Properties for charting: a simplified subset of the options provided by ECharts
    theme: PropTypes.oneOfType([PropTypes.string, PropTypes.object]),
    legend: PropTypes.oneOfType([PropTypes.bool, PropTypes.array]),
    loading: PropTypes.oneOfType([PropTypes.bool, PropTypes.shape({ text: PropTypes.string })]),
    xAxis: xaxisPropType,
    yAxis: PropTypes.oneOfType([yaxisPropType, PropTypes.arrayOf(yaxisPropType)]),
    grid: gridPropType,
    color: PropTypes.arrayOf(PropTypes.string),
    tooltip: PropTypes.bool,
    horizontal: PropTypes.bool,
    onPointClick: PropTypes.func,
    smooth: PropTypes.bool, // fallback for series
    lineWidth: PropTypes.number, // fallback for series (pixels)
    lineType: PropTypes.oneOf([// fallback for series
    'solid', 'dotted', 'dashed']),
    renderAsImage: PropTypes.bool,
    imageOptions: imageOptionsPropType,
    series: PropTypes.arrayOf(seriesPropType)
  },

  // Lifecycle

  getDefaultProps: function getDefaultProps() {
    // Note: getDefaultProps is a class method (`this` is the component class)
    var defaults = this.defaults;

    return {
      prefix: 'chart',
      loading: false,
      theme: require('../theme/default'),
      grid: {},
      tooltip: true,
      horizontal: false,
      legend: true,
      xAxis: _extends({}, defaults.xAxis, {
        numTicks: 10,
        labelFilter: 'auto'
      }),
      yAxis: _extends({}, defaults.yAxis, {
        numTicks: 5
      }),
      smooth: false, // override per-series
      lineWidth: 2,
      lineType: 'solid',
      renderAsImage: false,
      imageOptions: {
        type: 'png',
        pixelRatio: 5,
        backgroundColor: '#fff'
      }
    };
  },

  componentWillMount: function componentWillMount() {
    var randomString = util.randomString;

    develop && console.debug('About to mount <Chart>...');
    this._id = this.props.id ? this.props.id : this.props.prefix + '-' + randomString();
  },

  componentDidMount: function componentDidMount() {
    this._initializeChart();
    this._redrawChart(this.props);
  },

  componentWillUnmount: function componentWillUnmount() {
    this._chart.off('CLICK');
    this._destroyChart();
    this._el = null;
  },

  componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
    develop && console.debug('Received new props for <Chart>...');

    // Check if viewport has changed
    if (nextProps.width != this.props.width || nextProps.height != this.props.height) {
      this._resize(nextProps.width, nextProps.height);
    }

    // Redraw chart
    this._redrawChart(nextProps);
  },

  shouldComponentUpdate: function shouldComponentUpdate() {
    return false;
  },

  componentWillUpdate: function componentWillUpdate() {
    console.assert(false, 'Unexpected update!');
  },

  render: function render() {
    var _this3 = this;

    develop && console.debug('Rendering <Chart>...');
    return React.createElement('div', {
      id: this._id,
      ref: function ref(el) {
        _this3._el = el;
      },
      className: ['portal', this.props.prefix].join(' '),
      style: {
        width: this.props.width,
        height: this.props.height
      }
    });
  },

  // Internal methods: lifecycle of ECharts instance

  _resize: function _resize(width, height) {
    console.assert(this._el != null, 'The DOM element must be mounted!');
    this._el.style.width = width.toString() + "px";
    this._el.style.height = height.toString() + "px";

    console.assert(this._chart != null, 'The ECharts instance must be initialized!');
    this._chart.resize();
  },

  _initializeChart: function _initializeChart() {
    var _this4 = this;

    var cls = this.constructor;

    console.assert(this._el != null, 'Invalid parent DOM element');
    console.assert(this._chart == null, 'Expected an empty EChart instance');

    var theme = cls.propsToTheme(this.props);
    this._chart = echarts.init(this._el, theme);

    _.isFunction(this.props.onPointClick) && this._chart.on('CLICK', function (p) {
      _this4.props.onPointClick(p.seriesIndex, p.dataIndex);
    });

    if (_.isFunction(this.props.refreshData)) {
      // Can refresh itself: fire a request for fresh series data.
      this.props.refreshData();
    }
  },

  _redrawChart: function _redrawChart(nextProps) {
    var cls = this.constructor;
    var options = null;

    develop && console.debug('Redrawing <Chart> from nextProps...');

    // Reset chart from received props
    options = cls.propsToOptions(nextProps);
    this._chart.setOption(options, true);

    // Reset loading status
    options = cls.propsToLoadingOptions(nextProps);
    if (!options) {
      this._chart.hideLoading();
    } else {
      this._chart.showLoading(options);
    }

    if (nextProps.renderAsImage) {
      this._renderAsImage(nextProps.imageOptions);
    }
  },

  _renderAsImage: function _renderAsImage(imageOptions) {
    // this version of echarts does not support direct renderAsImage
    // render image as base-64
    var img = document.createElement('img');
    var src = this._chart.getDataURL(imageOptions);

    img.setAttribute('src', src);
    img.setAttribute('id', this._id);
    img.setAttribute('width', '100%');
    img.setAttribute('max-height', '100%');

    var parent = document.getElementById(this._id).parentNode;
    parent.removeChild(parent.childNodes[0]);
    parent.appendChild(img);
  },

  _destroyChart: function _destroyChart() {
    this._chart.dispose();
    this._chart = null;
  }
});

module.exports = Chart;

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"../theme/default":110,"../util":111,"../validators":112,"lodash":"lodash","react":"react","react-dom":"react-dom","rgbcolor":427,"sprintf":"sprintf"}],108:[function(require,module,exports){
'use strict';

var _extends = Object.assign || function (target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i];for (var key in source) {
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }return target;
};

// A convenience wrapper for line-only charts 

var React = require('react');

var Chart = require('./cartesian-chart.js');

var LineChart = function LineChart(props) {
  return React.createElement(Chart, _extends({}, props, {
    series: props.series.map(function (s) {
      return _extends({}, s, { type: 'line' });
    })
  }));
};

module.exports = LineChart;

},{"./cartesian-chart.js":107,"react":"react"}],109:[function(require,module,exports){
'use strict';

var Chart = require('./components/cartesian-chart.js');
var LineChart = require('./components/line-chart.js');
var BarChart = require('./components/bar-chart.js');

module.exports = { Chart: Chart, LineChart: LineChart, BarChart: BarChart };

},{"./components/bar-chart.js":106,"./components/cartesian-chart.js":107,"./components/line-chart.js":108}],110:[function(require,module,exports){
'use strict';

module.exports = {

  color: ['#C23531', '#2F4554', '#61A0A8', '#ECA63F', '#41B024', '#DD4BCF', '#30EC9F', '#ECE030', '#ED2868', '#34B4F1'],

  grid: {
    x: '12%',
    y: '9%',
    x2: '9%',
    y2: '9%',
    borderColor: '#bbb'
  },

  legend: {
    padding: 10,
    itemHeight: 12,
    itemGap: 6,
    itemWidth: 35,
    backgroundColor: '#fff',
    borderColor: '#ccc',
    borderWidth: 0,
    textStyle: {
      fontSize: 12,
      fontFamily: 'serif'
    },
    x: 'center',
    y: 0
  },

  tooltip: {
    trigger: 'item',
    borderRadius: 1,
    padding: 8,
    backgroundColor: 'rgba(0,0,0,0.75)',
    textStyle: {
      fontSize: 10,
      color: '#fff'
    }
  },

  categoryAxis: {
    boundaryGap: false,
    nameTextStyle: {
      fontSize: 13
    },
    axisLine: {
      show: true,
      lineStyle: {
        color: '#555',
        width: 2,
        type: 'solid'
      }
    },
    axisTick: {
      show: true,
      interval: 'auto',
      inside: false,
      length: 5,
      lineStyle: {
        color: '#333',
        width: 1
      }
    },
    axisLabel: {
      show: true,
      interval: 'auto',
      rotate: 0,
      margin: 8,
      textStyle: {
        color: '#333',
        fontSize: 11,
        fontFamily: 'sans-serif'
      }
    },
    splitArea: {
      show: false,
      areaStyle: {
        color: ['rgba(255,255,255,0.3)', 'rgba(200,200,200,0.2)']
      }
    }
  },

  valueAxis: {
    boundaryGap: [0, 0],
    nameTextStyle: {
      fontSize: 13
    },
    axisLine: {
      show: true,
      lineStyle: {
        color: '#555',
        width: 2,
        type: 'solid'
      }
    },
    axisTick: {
      show: true,
      interval: 'auto',
      inside: false,
      length: 5,
      lineStyle: {
        color: '#333',
        width: 1
      }
    },
    axisLabel: {
      show: true,
      interval: 'auto',
      rotate: 0,
      margin: 8,
      textStyle: {
        color: '#333',
        fontSize: 11,
        fontFamily: 'sans-serif'
      }
    },
    splitArea: {
      show: false,
      areaStyle: {
        color: ['rgba(255,255,255,0.3)', 'rgba(200,200,200,0.2)']
      }
    }
  },

  line: {
    itemStyle: {
      normal: {
        lineStyle: {
          width: 2,
          type: 'solid'
        }
      },
      emphasis: {}
    },
    smooth: false,
    symbol: 'emptyCircle',
    symbolSize: 4
  },

  bar: {
    barMinHeight: 0,
    //barGap: '10%',
    barCategoryGap: '40%',
    itemStyle: {
      normal: {
        barBorderWidth: 0,
        barBorderRadius: 0
      },
      emphasis: {}
    }
  },

  symbolList: ['circle', 'rectangle', 'triangle', 'diamond', 'emptyCircle', 'emptyRectangle', 'emptyTriangle', 'emptyDiamond']

};

},{}],111:[function(require,module,exports){
"use strict";

// Several utility functions that dont fit anywhere //

// Generate a random string mapped from a random integer in range 0 .. 10^dd

var randomString = function randomString() {
  var dd = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 9;
  return parseInt(Math.random() * Math.pow(10, dd)).toString(36);
};

// An array reducer that inserts a given delimiting symbol every step items
var delimiter = function delimiter(step, delim) {
  return function (res, val, i) {
    return i > 0 && i % step == 0 && res.push(delim), res.push(val), res;
  };
};

// An array reducer that flattens input, possibly inserting a delimiting symbol
var flattener = function flattener(delim) {
  return function (res, val, i) {
    return delim != null && i > 0 && res.push(delim), res.push.apply(res, _.isArray(val) ? val : [val]), res;
  };
};

module.exports = { randomString: randomString, delimiter: delimiter, flattener: flattener };

},{}],112:[function(require,module,exports){
'use strict';

var React = require('react');
var _ = require('lodash');

var PropTypes = React.PropTypes;

// A collection of validators for React properties (propTypes)

var validateDimension = function validateDimension(props, propName, componentName) {
  var val = props[propName];

  if (val == null) {
    return; // do not validate; nulls are allowed
  }

  if (_.isNumber(val)) {
    return;
  } else if (!/^[0-9]+.?([0-9]+)?(px|em|ex|%|vh|vw)$/.test(val.toString())) {
    return new Error('Invalid property `' + propName + '` supplied to' + ' `' + componentName + '`:' + 'Not a CSS dimension (width/height): ' + val);
  }
};

module.exports = { validateDimension: validateDimension };

},{"lodash":"lodash","react":"react"}],113:[function(require,module,exports){
"use strict";

var _interopRequireDefault = require("babel-runtime/helpers/interop-require-default")["default"];

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _recaptcha = require("./recaptcha");

var _recaptcha2 = _interopRequireDefault(_recaptcha);

var _reactAsyncScript = require("react-async-script");

var _reactAsyncScript2 = _interopRequireDefault(_reactAsyncScript);

var callbackName = "onloadcallback";
var lang = typeof window !== "undefined" && window.recaptchaOptions && window.recaptchaOptions.lang ? "&hl=" + window.recaptchaOptions.lang : "";
var URL = "https://www.google.com/recaptcha/api.js?onload=" + callbackName + "&render=explicit" + lang;
var globalName = "grecaptcha";

exports["default"] = (0, _reactAsyncScript2["default"])(_recaptcha2["default"], URL, {
  callbackName: callbackName,
  globalName: globalName,
  exposeFuncs: ["getValue", "reset"]
});
module.exports = exports["default"];
},{"./recaptcha":114,"babel-runtime/helpers/interop-require-default":117,"react-async-script":41}],114:[function(require,module,exports){
"use strict";

var _objectWithoutProperties = require("babel-runtime/helpers/object-without-properties")["default"];

var _extends = require("babel-runtime/helpers/extends")["default"];

var _interopRequireDefault = require("babel-runtime/helpers/interop-require-default")["default"];

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _react = require("react");

var _react2 = _interopRequireDefault(_react);

var ReCAPTCHA = _react2["default"].createClass({
  displayName: "reCAPTCHA",
  propTypes: {
    sitekey: _react.PropTypes.string.isRequired,
    onChange: _react.PropTypes.func.isRequired,
    grecaptcha: _react.PropTypes.object,
    theme: _react.PropTypes.oneOf(["dark", "light"]),
    type: _react.PropTypes.oneOf(["image", "audio"]),
    tabindex: _react.PropTypes.number,
    onExpired: _react.PropTypes.func,
    size: _react.PropTypes.oneOf(["compact", "normal"]),
    stoken: _react.PropTypes.string
  },

  getInitialState: function getInitialState() {
    return {};
  },

  getDefaultProps: function getDefaultProps() {
    return {
      theme: "light",
      type: "image",
      tabindex: 0,
      size: "normal"
    };
  },

  getValue: function getValue() {
    if (this.props.grecaptcha && this.state.widgetId !== undefined) {
      return this.props.grecaptcha.getResponse(this.state.widgetId);
    }
    return null;
  },

  reset: function reset() {
    if (this.props.grecaptcha && this.state.widgetId !== undefined) {
      this.props.grecaptcha.reset(this.state.widgetId);
    }
  },

  handleExpired: function handleExpired() {
    if (this.props.onExpired) {
      this.props.onExpired();
    } else if (this.props.onChange) {
      this.props.onChange(null);
    }
  },

  explicitRender: function explicitRender(cb) {
    if (this.props.grecaptcha && this.state.widgetId === undefined) {
      var id = this.props.grecaptcha.render(this.refs.captcha, {
        sitekey: this.props.sitekey,
        callback: this.props.onChange,
        theme: this.props.theme,
        type: this.props.type,
        tabindex: this.props.tabindex,
        "expired-callback": this.handleExpired,
        size: this.props.size,
        stoken: this.props.stoken
      });
      this.setState({
        widgetId: id
      }, cb);
    }
  },

  componentDidMount: function componentDidMount() {
    this.explicitRender();
  },

  componentDidUpdate: function componentDidUpdate() {
    this.explicitRender();
  },

  render: function render() {
    // consume properties owned by the reCATPCHA, pass the rest to the div so the user can style it.
    /* eslint-disable no-unused-vars */
    var _props = this.props;
    var sitekey = _props.sitekey;
    var onChange = _props.onChange;
    var theme = _props.theme;
    var type = _props.type;
    var tabindex = _props.tabindex;
    var onExpired = _props.onExpired;
    var size = _props.size;
    var stoken = _props.stoken;
    var grecaptcha = _props.grecaptcha;

    var childProps = _objectWithoutProperties(_props, ["sitekey", "onChange", "theme", "type", "tabindex", "onExpired", "size", "stoken", "grecaptcha"]);

    /* eslint-enable no-unused-vars */
    return _react2["default"].createElement("div", _extends({}, childProps, { ref: "captcha" }));
  }
});

exports["default"] = ReCAPTCHA;
module.exports = exports["default"];
},{"babel-runtime/helpers/extends":116,"babel-runtime/helpers/interop-require-default":117,"babel-runtime/helpers/object-without-properties":118,"react":"react"}],115:[function(require,module,exports){
arguments[4][44][0].apply(exports,arguments)
},{"core-js/library/fn/object/assign":119,"dup":44}],116:[function(require,module,exports){
arguments[4][45][0].apply(exports,arguments)
},{"babel-runtime/core-js/object/assign":115,"dup":45}],117:[function(require,module,exports){
arguments[4][46][0].apply(exports,arguments)
},{"dup":46}],118:[function(require,module,exports){
arguments[4][47][0].apply(exports,arguments)
},{"dup":47}],119:[function(require,module,exports){
arguments[4][50][0].apply(exports,arguments)
},{"../../modules/$.core":122,"../../modules/es6.object.assign":132,"dup":50}],120:[function(require,module,exports){
arguments[4][51][0].apply(exports,arguments)
},{"dup":51}],121:[function(require,module,exports){
arguments[4][55][0].apply(exports,arguments)
},{"dup":55}],122:[function(require,module,exports){
arguments[4][59][0].apply(exports,arguments)
},{"dup":59}],123:[function(require,module,exports){
arguments[4][60][0].apply(exports,arguments)
},{"./$.a-function":120,"dup":60}],124:[function(require,module,exports){
arguments[4][61][0].apply(exports,arguments)
},{"dup":61}],125:[function(require,module,exports){
arguments[4][63][0].apply(exports,arguments)
},{"./$.core":122,"./$.ctx":123,"./$.global":127,"dup":63}],126:[function(require,module,exports){
arguments[4][64][0].apply(exports,arguments)
},{"dup":64}],127:[function(require,module,exports){
arguments[4][66][0].apply(exports,arguments)
},{"dup":66}],128:[function(require,module,exports){
arguments[4][69][0].apply(exports,arguments)
},{"./$.cof":121,"dup":69}],129:[function(require,module,exports){
arguments[4][77][0].apply(exports,arguments)
},{"dup":77}],130:[function(require,module,exports){
arguments[4][79][0].apply(exports,arguments)
},{"./$":129,"./$.fails":126,"./$.iobject":128,"./$.to-object":131,"dup":79}],131:[function(require,module,exports){
arguments[4][91][0].apply(exports,arguments)
},{"./$.defined":124,"dup":91}],132:[function(require,module,exports){
arguments[4][98][0].apply(exports,arguments)
},{"./$.export":125,"./$.object-assign":130,"dup":98}],133:[function(require,module,exports){
(function (process){
/** @license React v16.13.1
 * react-is.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

'use strict';



if (process.env.NODE_ENV !== "production") {
  (function() {
'use strict';

// The Symbol used to tag the ReactElement-like types. If there is no native Symbol
// nor polyfill, then a plain number is used for performance.
var hasSymbol = typeof Symbol === 'function' && Symbol.for;
var REACT_ELEMENT_TYPE = hasSymbol ? Symbol.for('react.element') : 0xeac7;
var REACT_PORTAL_TYPE = hasSymbol ? Symbol.for('react.portal') : 0xeaca;
var REACT_FRAGMENT_TYPE = hasSymbol ? Symbol.for('react.fragment') : 0xeacb;
var REACT_STRICT_MODE_TYPE = hasSymbol ? Symbol.for('react.strict_mode') : 0xeacc;
var REACT_PROFILER_TYPE = hasSymbol ? Symbol.for('react.profiler') : 0xead2;
var REACT_PROVIDER_TYPE = hasSymbol ? Symbol.for('react.provider') : 0xeacd;
var REACT_CONTEXT_TYPE = hasSymbol ? Symbol.for('react.context') : 0xeace; // TODO: We don't use AsyncMode or ConcurrentMode anymore. They were temporary
// (unstable) APIs that have been removed. Can we remove the symbols?

var REACT_ASYNC_MODE_TYPE = hasSymbol ? Symbol.for('react.async_mode') : 0xeacf;
var REACT_CONCURRENT_MODE_TYPE = hasSymbol ? Symbol.for('react.concurrent_mode') : 0xeacf;
var REACT_FORWARD_REF_TYPE = hasSymbol ? Symbol.for('react.forward_ref') : 0xead0;
var REACT_SUSPENSE_TYPE = hasSymbol ? Symbol.for('react.suspense') : 0xead1;
var REACT_SUSPENSE_LIST_TYPE = hasSymbol ? Symbol.for('react.suspense_list') : 0xead8;
var REACT_MEMO_TYPE = hasSymbol ? Symbol.for('react.memo') : 0xead3;
var REACT_LAZY_TYPE = hasSymbol ? Symbol.for('react.lazy') : 0xead4;
var REACT_BLOCK_TYPE = hasSymbol ? Symbol.for('react.block') : 0xead9;
var REACT_FUNDAMENTAL_TYPE = hasSymbol ? Symbol.for('react.fundamental') : 0xead5;
var REACT_RESPONDER_TYPE = hasSymbol ? Symbol.for('react.responder') : 0xead6;
var REACT_SCOPE_TYPE = hasSymbol ? Symbol.for('react.scope') : 0xead7;

function isValidElementType(type) {
  return typeof type === 'string' || typeof type === 'function' || // Note: its typeof might be other than 'symbol' or 'number' if it's a polyfill.
  type === REACT_FRAGMENT_TYPE || type === REACT_CONCURRENT_MODE_TYPE || type === REACT_PROFILER_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || typeof type === 'object' && type !== null && (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_RESPONDER_TYPE || type.$$typeof === REACT_SCOPE_TYPE || type.$$typeof === REACT_BLOCK_TYPE);
}

function typeOf(object) {
  if (typeof object === 'object' && object !== null) {
    var $$typeof = object.$$typeof;

    switch ($$typeof) {
      case REACT_ELEMENT_TYPE:
        var type = object.type;

        switch (type) {
          case REACT_ASYNC_MODE_TYPE:
          case REACT_CONCURRENT_MODE_TYPE:
          case REACT_FRAGMENT_TYPE:
          case REACT_PROFILER_TYPE:
          case REACT_STRICT_MODE_TYPE:
          case REACT_SUSPENSE_TYPE:
            return type;

          default:
            var $$typeofType = type && type.$$typeof;

            switch ($$typeofType) {
              case REACT_CONTEXT_TYPE:
              case REACT_FORWARD_REF_TYPE:
              case REACT_LAZY_TYPE:
              case REACT_MEMO_TYPE:
              case REACT_PROVIDER_TYPE:
                return $$typeofType;

              default:
                return $$typeof;
            }

        }

      case REACT_PORTAL_TYPE:
        return $$typeof;
    }
  }

  return undefined;
} // AsyncMode is deprecated along with isAsyncMode

var AsyncMode = REACT_ASYNC_MODE_TYPE;
var ConcurrentMode = REACT_CONCURRENT_MODE_TYPE;
var ContextConsumer = REACT_CONTEXT_TYPE;
var ContextProvider = REACT_PROVIDER_TYPE;
var Element = REACT_ELEMENT_TYPE;
var ForwardRef = REACT_FORWARD_REF_TYPE;
var Fragment = REACT_FRAGMENT_TYPE;
var Lazy = REACT_LAZY_TYPE;
var Memo = REACT_MEMO_TYPE;
var Portal = REACT_PORTAL_TYPE;
var Profiler = REACT_PROFILER_TYPE;
var StrictMode = REACT_STRICT_MODE_TYPE;
var Suspense = REACT_SUSPENSE_TYPE;
var hasWarnedAboutDeprecatedIsAsyncMode = false; // AsyncMode should be deprecated

function isAsyncMode(object) {
  {
    if (!hasWarnedAboutDeprecatedIsAsyncMode) {
      hasWarnedAboutDeprecatedIsAsyncMode = true; // Using console['warn'] to evade Babel and ESLint

      console['warn']('The ReactIs.isAsyncMode() alias has been deprecated, ' + 'and will be removed in React 17+. Update your code to use ' + 'ReactIs.isConcurrentMode() instead. It has the exact same API.');
    }
  }

  return isConcurrentMode(object) || typeOf(object) === REACT_ASYNC_MODE_TYPE;
}
function isConcurrentMode(object) {
  return typeOf(object) === REACT_CONCURRENT_MODE_TYPE;
}
function isContextConsumer(object) {
  return typeOf(object) === REACT_CONTEXT_TYPE;
}
function isContextProvider(object) {
  return typeOf(object) === REACT_PROVIDER_TYPE;
}
function isElement(object) {
  return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
}
function isForwardRef(object) {
  return typeOf(object) === REACT_FORWARD_REF_TYPE;
}
function isFragment(object) {
  return typeOf(object) === REACT_FRAGMENT_TYPE;
}
function isLazy(object) {
  return typeOf(object) === REACT_LAZY_TYPE;
}
function isMemo(object) {
  return typeOf(object) === REACT_MEMO_TYPE;
}
function isPortal(object) {
  return typeOf(object) === REACT_PORTAL_TYPE;
}
function isProfiler(object) {
  return typeOf(object) === REACT_PROFILER_TYPE;
}
function isStrictMode(object) {
  return typeOf(object) === REACT_STRICT_MODE_TYPE;
}
function isSuspense(object) {
  return typeOf(object) === REACT_SUSPENSE_TYPE;
}

exports.AsyncMode = AsyncMode;
exports.ConcurrentMode = ConcurrentMode;
exports.ContextConsumer = ContextConsumer;
exports.ContextProvider = ContextProvider;
exports.Element = Element;
exports.ForwardRef = ForwardRef;
exports.Fragment = Fragment;
exports.Lazy = Lazy;
exports.Memo = Memo;
exports.Portal = Portal;
exports.Profiler = Profiler;
exports.StrictMode = StrictMode;
exports.Suspense = Suspense;
exports.isAsyncMode = isAsyncMode;
exports.isConcurrentMode = isConcurrentMode;
exports.isContextConsumer = isContextConsumer;
exports.isContextProvider = isContextProvider;
exports.isElement = isElement;
exports.isForwardRef = isForwardRef;
exports.isFragment = isFragment;
exports.isLazy = isLazy;
exports.isMemo = isMemo;
exports.isPortal = isPortal;
exports.isProfiler = isProfiler;
exports.isStrictMode = isStrictMode;
exports.isSuspense = isSuspense;
exports.isValidElementType = isValidElementType;
exports.typeOf = typeOf;
  })();
}

}).call(this,require('_process'))
},{"_process":31}],134:[function(require,module,exports){
/** @license React v16.13.1
 * react-is.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

'use strict';var b="function"===typeof Symbol&&Symbol.for,c=b?Symbol.for("react.element"):60103,d=b?Symbol.for("react.portal"):60106,e=b?Symbol.for("react.fragment"):60107,f=b?Symbol.for("react.strict_mode"):60108,g=b?Symbol.for("react.profiler"):60114,h=b?Symbol.for("react.provider"):60109,k=b?Symbol.for("react.context"):60110,l=b?Symbol.for("react.async_mode"):60111,m=b?Symbol.for("react.concurrent_mode"):60111,n=b?Symbol.for("react.forward_ref"):60112,p=b?Symbol.for("react.suspense"):60113,q=b?
Symbol.for("react.suspense_list"):60120,r=b?Symbol.for("react.memo"):60115,t=b?Symbol.for("react.lazy"):60116,v=b?Symbol.for("react.block"):60121,w=b?Symbol.for("react.fundamental"):60117,x=b?Symbol.for("react.responder"):60118,y=b?Symbol.for("react.scope"):60119;
function z(a){if("object"===typeof a&&null!==a){var u=a.$$typeof;switch(u){case c:switch(a=a.type,a){case l:case m:case e:case g:case f:case p:return a;default:switch(a=a&&a.$$typeof,a){case k:case n:case t:case r:case h:return a;default:return u}}case d:return u}}}function A(a){return z(a)===m}exports.AsyncMode=l;exports.ConcurrentMode=m;exports.ContextConsumer=k;exports.ContextProvider=h;exports.Element=c;exports.ForwardRef=n;exports.Fragment=e;exports.Lazy=t;exports.Memo=r;exports.Portal=d;
exports.Profiler=g;exports.StrictMode=f;exports.Suspense=p;exports.isAsyncMode=function(a){return A(a)||z(a)===l};exports.isConcurrentMode=A;exports.isContextConsumer=function(a){return z(a)===k};exports.isContextProvider=function(a){return z(a)===h};exports.isElement=function(a){return"object"===typeof a&&null!==a&&a.$$typeof===c};exports.isForwardRef=function(a){return z(a)===n};exports.isFragment=function(a){return z(a)===e};exports.isLazy=function(a){return z(a)===t};
exports.isMemo=function(a){return z(a)===r};exports.isPortal=function(a){return z(a)===d};exports.isProfiler=function(a){return z(a)===g};exports.isStrictMode=function(a){return z(a)===f};exports.isSuspense=function(a){return z(a)===p};
exports.isValidElementType=function(a){return"string"===typeof a||"function"===typeof a||a===e||a===m||a===g||a===f||a===p||a===q||"object"===typeof a&&null!==a&&(a.$$typeof===t||a.$$typeof===r||a.$$typeof===h||a.$$typeof===k||a.$$typeof===n||a.$$typeof===w||a.$$typeof===x||a.$$typeof===y||a.$$typeof===v)};exports.typeOf=z;

},{}],135:[function(require,module,exports){
(function (process){
'use strict';

if (process.env.NODE_ENV === 'production') {
  module.exports = require('./cjs/react-is.production.min.js');
} else {
  module.exports = require('./cjs/react-is.development.js');
}

}).call(this,require('_process'))
},{"./cjs/react-is.development.js":133,"./cjs/react-is.production.min.js":134,"_process":31}],136:[function(require,module,exports){
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _server = require('react-dom/server');

var _leaflet = require('leaflet');

var _leaflet2 = _interopRequireDefault(_leaflet);

var _chromaJs = require('chroma-js');

var _chromaJs2 = _interopRequireDefault(_chromaJs);

var _GeoJSON = require('./GeoJSON');

var _GeoJSON2 = _interopRequireDefault(_GeoJSON);

var _InfoControl = require('./InfoControl');

var _InfoControl2 = _interopRequireDefault(_InfoControl);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Choropleth = function (_React$Component) {
  _inherits(Choropleth, _React$Component);

  function Choropleth(props) {
    _classCallCheck(this, Choropleth);

    return _possibleConstructorReturn(this, (Choropleth.__proto__ || Object.getPrototypeOf(Choropleth)).call(this, props));
  }

  _createClass(Choropleth, [{
    key: 'componentWillMount',
    value: function componentWillMount() {
      this.values = this.getValues(this.props.data);
      this.limits = this.getLimits(this.values);
      this.colors = this.getColors();
    }
  }, {
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(nextProps) {
      if (nextProps.data) {
        this.values = this.getValues(nextProps.data);
        this.limits = this.getLimits(this.values);
        this.colors = this.getColors();
      }
    }
  }, {
    key: 'getValues',
    value: function getValues(data) {
      var _this2 = this;

      return data ? data.features.map(function (feature) {
        return typeof _this2.props.valueProperty === 'function' ? _this2.props.valueProperty(feature) : feature.properties[_this2.props.valueProperty];
      }) : [];
    }
  }, {
    key: 'getLimits',
    value: function getLimits(values) {
      var _this3 = this;

      return this.props.buckets ? this.props.buckets : this.props.limits ? Array.from({ length: this.props.steps + 1 }, function (v, i) {
        return i === _this3.props.steps ? _this3.props.limits[1] : _this3.props.limits[0] + i * Math.round((_this3.props.limits[1] - _this3.props.limits[0]) / _this3.props.steps);
      }) : Array.isArray(values) && values.length > 0 ? _chromaJs2.default.limits(values, this.props.mode, this.props.steps) : [];
    }
  }, {
    key: 'limitsToBuckets',
    value: function limitsToBuckets() {
      return this.limits.map(function (limit, i, arr) {
        return i < arr.length - 1 ? [arr[i], arr[i + 1]] : null;
      }).filter(function (x, i, arr) {
        return i < arr.length - 1;
      });
    }
  }, {
    key: 'getColors',
    value: function getColors() {
      return this.props.colors || _chromaJs2.default.scale(this.props.scale).colors(this.props.steps + 1);
    }
  }, {
    key: 'getStyle',
    value: function getStyle() {
      var _this4 = this;

      return function (feature) {
        var style = typeof _this4.props.style === 'function' ? _extends({}, _this4.props.style()) : _extends({}, _this4.props.style);
        var value = typeof _this4.props.valueProperty === 'function' ? _this4.props.valueProperty(feature) : feature.properties[_this4.props.valueProperty];

        var buckets = _this4.limitsToBuckets();

        var idx = buckets.findIndex(function (bucket) {
          return value >= bucket[0] && value < bucket[1];
        });

        //if bucket not found add to last?
        if (idx === -1) {
          style.fillColor = _this4.colors[_this4.colors.length - 1];
        } else {
          style.fillColor = _this4.colors[idx];
        }

        return style;
      };
    }
  }, {
    key: 'render',
    value: function render() {
      return _react2.default.createElement(
        'div',
        null,
        this.props.legend && this.limits && this.colors ? _react2.default.createElement(
          _InfoControl2.default,
          {
            map: this.props.map,
            position: this.props.legend,
            className: this.props.legendClass
          },
          _react2.default.createElement(InitLegend, {
            buckets: this.limitsToBuckets(),
            colors: this.colors
          })
        ) : null,
        _react2.default.createElement(_GeoJSON2.default, _extends({}, this.props, {
          style: this.getStyle()
        }))
      );
    }
  }]);

  return Choropleth;
}(_react2.default.Component);

Choropleth.defaultProps = {
  data: null,
  valueProperty: null,
  scale: ['white', 'red'],
  steps: 5,
  mode: 'q',
  style: {},
  legend: false,
  legendClass: 'info legend'
};

var InitLegend = function (_React$Component2) {
  _inherits(InitLegend, _React$Component2);

  function InitLegend(props) {
    _classCallCheck(this, InitLegend);

    return _possibleConstructorReturn(this, (InitLegend.__proto__ || Object.getPrototypeOf(InitLegend)).call(this, props));
  }

  _createClass(InitLegend, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      this.props.updateInfo('');

      var buckets = this.props.buckets;
      var colors = this.props.colors;

      this.props.updateInfo((0, _server.renderToStaticMarkup)(_react2.default.createElement(LegendMarkup, { buckets: buckets, colors: colors })));
    }
  }, {
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(nextProps) {
      var buckets = nextProps.buckets || this.props.buckets;
      var colors = nextProps.colors || this.props.colors;

      this.props.updateInfo('');
      this.props.updateInfo((0, _server.renderToStaticMarkup)(_react2.default.createElement(LegendMarkup, { buckets: buckets, colors: colors })));
    }
  }, {
    key: 'render',
    value: function render() {
      return null;
    }
  }]);

  return InitLegend;
}(_react2.default.Component);

function LegendMarkup(props) {
  var buckets = props.buckets,
      colors = props.colors;

  return _react2.default.createElement(
    'div',
    null,
    buckets.map(function (bucket, i) {
      return _react2.default.createElement(
        'span',
        { key: i },
        _react2.default.createElement('i', { style: { backgroundColor: colors[i] } }),
        bucket[0] + ' - ' + bucket[1],
        _react2.default.createElement('br', null)
      );
    })
  );
}

module.exports = Choropleth;
},{"./GeoJSON":138,"./InfoControl":140,"chroma-js":"chroma-js","leaflet":"leaflet","react":"react","react-dom/server":105}],137:[function(require,module,exports){
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _leaflet = require('leaflet');

var _leaflet2 = _interopRequireDefault(_leaflet);

require('leaflet-draw');

var _GeoJSON = require('./GeoJSON');

var _GeoJSON2 = _interopRequireDefault(_GeoJSON);

var _handlers = require('./handlers/');

var _handlers2 = _interopRequireDefault(_handlers);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var DrawControl = function (_React$Component) {
  _inherits(DrawControl, _React$Component);

  function DrawControl(props) {
    _classCallCheck(this, DrawControl);

    var _this = _possibleConstructorReturn(this, (DrawControl.__proto__ || Object.getPrototypeOf(DrawControl)).call(this, props));

    _this.state = {
      data: _this.props.data,
      geojson: null
    };
    return _this;
  }

  _createClass(DrawControl, [{
    key: 'componentWillMount',
    value: function componentWillMount() {
      this.props.map.on('draw:created', this.createHandler.bind(this));
      this.props.map.on('draw:edited', this.editHandler.bind(this));
      this.props.map.on('draw:deleted', this.deleteHandler.bind(this));
    }
  }, {
    key: 'componentWillUpdate',
    value: function componentWillUpdate(nextProps, nextState) {
      if (nextState.geojson && !this.state.geojson) {
        this.control = new _leaflet2.default.Control.Draw({
          position: this.props.position,
          edit: _extends({
            featureGroup: nextState.geojson
          }, this.getEditOptions()),
          draw: this.getDrawOptions()
        });
        this.control.addTo(this.props.map);
      }
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      this.control.remove();

      this.props.map.off('draw:created');
      this.props.map.off('draw:edited');
      this.props.map.off('draw:deleted');
    }
  }, {
    key: 'getDrawOptions',
    value: function getDrawOptions() {
      return {
        polyline: false,
        rectangle: {
          shapeOptions: _extends({}, this.props.style)
        },
        circle: false,
        marker: false,
        polygon: {
          allowIntersection: false,
          showArea: true,
          shapeOptions: _extends({}, this.props.style)
        }
      };
    }
  }, {
    key: 'getEditOptions',
    value: function getEditOptions() {
      return _extends({
        edit: true,
        remove: true
      }, this.props.edit);
    }
  }, {
    key: 'createHandler',
    value: function createHandler(e) {
      var layer = {
        type: 'FeatureCollection',
        features: [e.layer.toGeoJSON()]
      };
      this.updateData(layer);
    }
  }, {
    key: 'editHandler',
    value: function editHandler(e) {
      var layer = e.layers.toGeoJSON();
      this.updateData(layer);
    }
  }, {
    key: 'deleteHandler',
    value: function deleteHandler(e) {
      this.updateData(null);
    }
  }, {
    key: 'updateData',
    value: function updateData(data) {
      if (!this.props.controlled) {
        this.setState({ data: data });
      }

      if (typeof this.props.onFeatureChange === 'function') {
        this.props.onFeatureChange(data);
      }
    }
  }, {
    key: 'render',
    value: function render() {
      var _this2 = this;

      return _react2.default.createElement(_GeoJSON2.default, _extends({
        ref: function ref(geojson) {
          if (geojson && !_this2.state.geojson) {
            _this2.setState({ geojson: geojson.layer });
          }
        }
      }, this.props, {
        data: this.props.controlled ? this.props.data : this.state.data
      }));
    }
  }]);

  return DrawControl;
}(_react2.default.Component);

DrawControl.defaultProps = {
  position: 'topleft',
  data: null,
  edit: {},
  draw: {},
  style: {
    color: '#2c3e50',
    fillColor: '#2980b9'
  },
  name: 'Selection',
  controlled: false
};

module.exports = DrawControl;
},{"./GeoJSON":138,"./handlers/":150,"leaflet":"leaflet","leaflet-draw":"leaflet-draw","react":"react"}],138:[function(require,module,exports){
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _leaflet = require('leaflet');

var _leaflet2 = _interopRequireDefault(_leaflet);

var _handlers = require('./handlers/');

var _handlers2 = _interopRequireDefault(_handlers);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var GeoJSON = function (_React$Component) {
  _inherits(GeoJSON, _React$Component);

  function GeoJSON(props) {
    _classCallCheck(this, GeoJSON);

    var _this = _possibleConstructorReturn(this, (GeoJSON.__proto__ || Object.getPrototypeOf(GeoJSON)).call(this, props));

    _this.state = {
      mouseover: null,
      click: null
    };
    return _this;
  }

  _createClass(GeoJSON, [{
    key: 'componentWillMount',
    value: function componentWillMount() {
      this.layer = _leaflet2.default.geoJson(this.props.data, _extends({
        onEachFeature: this.onEachFeature.bind(this),
        pointToLayer: this.props.circleMarkers ? this.pointToCircleMarker.bind(this) : this.pointToMarker.bind(this)
      }, this.props)).addTo(this.props.map);
    }
  }, {
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(nextProps) {
      if (nextProps.data === null) {
        this.layer.clearLayers();
      }
      if (nextProps.data && nextProps.data !== this.props.data) {
        this.layer.clearLayers();
        this.layer.addData(nextProps.data);
      }
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      this.layer.remove();
    }
  }, {
    key: 'featureClick',
    value: function featureClick(feature, layer) {
      if (typeof this.props.onClick === 'function') {
        this.props.onClick(feature, layer, this.props.map);
      }

      this.setState({ click: feature });
    }
  }, {
    key: 'featureMouseover',
    value: function featureMouseover(feature, layer) {
      if (typeof this.props.onMouseover === 'function') {
        this.props.onMouseover(feature, layer, this.props.map);
      }

      if (this.props.highlightStyle && (layer.feature.geometry.type !== 'Point' || this.props.circleMarkers)) {
        layer.setStyle(this.props.highlightStyle);
      }

      this.setState({ mouseover: feature });
    }
  }, {
    key: 'featureMouseout',
    value: function featureMouseout(feature, layer) {
      if (typeof this.props.onMouseout === 'function') {
        this.props.onMouseout(feature, layer, this.props.map);
      }
      if (this.props.highlightStyle && (layer.feature.geometry.type !== 'Point' || this.props.circleMarkers)) {
        this.layer.resetStyle(layer);
      }
      this.setState({ mouseover: null });
    }
  }, {
    key: 'onEachFeature',
    value: function onEachFeature(feature, layer) {
      layer.on({
        mouseover: this.featureMouseover.bind(this, feature, layer),
        mouseout: this.featureMouseout.bind(this, feature, layer),
        click: this.featureClick.bind(this, feature, layer)
      });
    }
  }, {
    key: 'pointToCircleMarker',
    value: function pointToCircleMarker(point, latlng) {
      return _leaflet2.default.circleMarker(latlng, this.props.markerStyle || this.props.style);
    }
  }, {
    key: 'pointToMarker',
    value: function pointToMarker(point, latlng) {
      return _leaflet2.default.marker(latlng, this.props.markerOptions);
    }
  }, {
    key: 'render',
    value: function render() {
      return _react2.default.createElement(_handlers2.default, _extends({}, this.props, {
        layer: this.layer,
        click: this.state.click,
        mouseover: this.state.mouseover
      }));
    }
  }]);

  return GeoJSON;
}(_react2.default.Component);

GeoJSON.defaultProps = {
  data: null,
  style: {},
  info: null,
  name: '',
  circleMarkers: false,
  controlledLayer: true
};

module.exports = GeoJSON;
},{"./handlers/":150,"leaflet":"leaflet","react":"react"}],139:[function(require,module,exports){
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _leaflet = require('leaflet');

var _leaflet2 = _interopRequireDefault(_leaflet);

require('leaflet.heat');

var _handlers = require('./handlers/');

var _handlers2 = _interopRequireDefault(_handlers);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var HeatLayer = function (_React$Component) {
  _inherits(HeatLayer, _React$Component);

  function HeatLayer(props) {
    _classCallCheck(this, HeatLayer);

    return _possibleConstructorReturn(this, (HeatLayer.__proto__ || Object.getPrototypeOf(HeatLayer)).call(this, props));
  }

  _createClass(HeatLayer, [{
    key: 'componentWillMount',
    value: function componentWillMount() {
      this.layer = _leaflet2.default.heatLayer(this.props.data, this.props).addTo(this.props.map);
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      this.layer.remove();
    }
  }, {
    key: 'render',
    value: function render() {
      return _react2.default.createElement(_handlers2.default, _extends({}, this.props, {
        layer: this.layer
      }));
    }
  }]);

  return HeatLayer;
}(_react2.default.Component);

HeatLayer.defaultProps = {
  data: null,
  style: {},
  name: 'Heatmap',
  radius: 30,
  maxZoom: 11
};

module.exports = HeatLayer;
},{"./handlers/":150,"leaflet":"leaflet","leaflet.heat":"leaflet.heat","react":"react"}],140:[function(require,module,exports){
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _leaflet = require('leaflet');

var _leaflet2 = _interopRequireDefault(_leaflet);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var InfoControl = function (_React$Component) {
  _inherits(InfoControl, _React$Component);

  function InfoControl(props) {
    _classCallCheck(this, InfoControl);

    return _possibleConstructorReturn(this, (InfoControl.__proto__ || Object.getPrototypeOf(InfoControl)).call(this, props));
  }

  _createClass(InfoControl, [{
    key: 'componentWillMount',
    value: function componentWillMount() {
      var _this2 = this;

      this.control = _leaflet2.default.control({ position: this.props.position });

      this.control.onAdd = function (map) {
        return _leaflet2.default.DomUtil.create('div', _this2.props.className);
      };

      this.control.addTo(this.props.map);
      this.updateInfo('');
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      this.control.remove();
    }
  }, {
    key: 'updateInfo',
    value: function updateInfo(display) {
      this.control.getContainer().innerHTML = display;
    }
  }, {
    key: 'render',
    value: function render() {
      var _this3 = this;

      return _react2.default.createElement(
        'div',
        null,
        this.control ? _react2.default.Children.map(this.props.children, function (child, idx) {
          var properties = Object.keys(_this3.props).filter(function (key) {
            return key !== 'children';
          }).reduce(function (p, key) {
            p[key] = _this3.props[key];return p;
          }, {});

          return _react2.default.cloneElement(child, _extends({ infoControl: _this3.control, updateInfo: _this3.updateInfo.bind(_this3) }, properties, child.props));
        }) : null
      );
    }
  }]);

  return InfoControl;
}(_react2.default.Component);

InfoControl.defaultProps = {
  position: 'bottomright',
  className: 'info'
};

module.exports = InfoControl;
},{"leaflet":"leaflet","react":"react"}],141:[function(require,module,exports){
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _leaflet = require('leaflet');

var _leaflet2 = _interopRequireDefault(_leaflet);

var _LayersControl = require('./handlers/LayersControl');

var _LayersControl2 = _interopRequireDefault(_LayersControl);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var LayerGroup = function (_React$Component) {
  _inherits(LayerGroup, _React$Component);

  function LayerGroup(props) {
    _classCallCheck(this, LayerGroup);

    return _possibleConstructorReturn(this, (LayerGroup.__proto__ || Object.getPrototypeOf(LayerGroup)).call(this, props));
  }

  _createClass(LayerGroup, [{
    key: 'componentWillMount',
    value: function componentWillMount() {
      this.layer = _leaflet2.default.layerGroup().addTo(this.props.map);
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      this.layer.clearLayers();
      this.layer.remove();
    }
  }, {
    key: 'render',
    value: function render() {
      var _this2 = this;

      return _react2.default.createElement(
        'div',
        null,
        _react2.default.Children.map(this.props.children, function (Child, idx) {
          var properties = Object.keys(_this2.props).filter(function (key) {
            return key !== 'children';
          }).reduce(function (p, key) {
            p[key] = _this2.props[key];return p;
          }, {});
          return _react2.default.cloneElement(Child, _extends({ layerGroup: _this2.layer }, properties, Child.props));
        }),
        _react2.default.createElement(_LayersControl2.default, _extends({}, this.props, {
          layer: this.layer
        }))
      );
    }
  }]);

  return LayerGroup;
}(_react2.default.Component);

LayerGroup.defaultProps = {
  name: 'Group',
  controlledLayer: true
};

module.exports = LayerGroup;
},{"./handlers/LayersControl":148,"leaflet":"leaflet","react":"react"}],142:[function(require,module,exports){
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _leaflet = require('leaflet');

var _leaflet2 = _interopRequireDefault(_leaflet);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var LayersControl = function (_React$Component) {
  _inherits(LayersControl, _React$Component);

  function LayersControl(props) {
    _classCallCheck(this, LayersControl);

    return _possibleConstructorReturn(this, (LayersControl.__proto__ || Object.getPrototypeOf(LayersControl)).call(this, props));
  }

  _createClass(LayersControl, [{
    key: 'componentWillMount',
    value: function componentWillMount() {
      this.control = _leaflet2.default.control.layers({}, {}, { position: this.props.position });
      this.control.addTo(this.props.map);
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      this.control.remove();
    }
  }, {
    key: 'render',
    value: function render() {
      var _this2 = this;

      return _react2.default.createElement(
        'div',
        null,
        this.control ? _react2.default.Children.map(this.props.children, function (Child, idx) {
          var properties = Object.keys(_this2.props).filter(function (key) {
            return key !== 'children';
          }).reduce(function (p, key) {
            p[key] = _this2.props[key];return p;
          }, {});
          return _react2.default.cloneElement(Child, _extends({ layersControl: _this2.control }, properties, Child.props));
        }) : null
      );
    }
  }]);

  return LayersControl;
}(_react2.default.Component);

LayersControl.defaultProps = {
  position: 'topright'
};

module.exports = LayersControl;
},{"leaflet":"leaflet","react":"react"}],143:[function(require,module,exports){
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactDom = require('react-dom');

var _leaflet = require('leaflet');

var _leaflet2 = _interopRequireDefault(_leaflet);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var LeafletMap = function (_React$Component) {
  _inherits(LeafletMap, _React$Component);

  function LeafletMap(props) {
    _classCallCheck(this, LeafletMap);

    var _this = _possibleConstructorReturn(this, (LeafletMap.__proto__ || Object.getPrototypeOf(LeafletMap)).call(this, props));

    _this.state = {
      map: null
    };
    return _this;
  }

  _createClass(LeafletMap, [{
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(nextProps) {
      if (nextProps.center && (nextProps.center[0] !== this.props.center[0] || nextProps.center[1] !== this.props.center[1]) && this.state.map) {
        this.state.map.setView(nextProps.center);
      }
      if (nextProps.zoom && nextProps.zoom !== this.props.zoom && this.state.map) {
        this.state.map.setZoom(nextProps.zoom);
      }
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      this.state.map.remove();
    }
  }, {
    key: 'setMap',
    value: function setMap(map) {
      this.setState({ map: map });
    }
  }, {
    key: 'render',
    value: function render() {
      var children = this.props.children;
      var map = this.state.map;

      return _react2.default.createElement(
        'div',
        { className: this.props.prefix },
        _react2.default.createElement(MapComponent, _extends({}, this.props, {
          setMap: this.setMap.bind(this)
        })),
        map ? _react2.default.Children.map(children, function (child, idx) {
          return _react2.default.cloneElement(child, { map: map });
        }) : null
      );
    }
  }]);

  return LeafletMap;
}(_react2.default.Component);

LeafletMap.defaultProps = {
  prefix: 'map',
  center: [0, 0],
  zoom: 13,
  width: '100%',
  height: 400
};

//leaflet lives under here

var MapComponent = function (_React$Component2) {
  _inherits(MapComponent, _React$Component2);

  function MapComponent(props) {
    _classCallCheck(this, MapComponent);

    return _possibleConstructorReturn(this, (MapComponent.__proto__ || Object.getPrototypeOf(MapComponent)).call(this, props));
  }

  _createClass(MapComponent, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      var map = _leaflet2.default.map((0, _reactDom.findDOMNode)(this), this.props);
      this.props.setMap(map);
    }
  }, {
    key: 'shouldComponentUpdate',
    value: function shouldComponentUpdate() {
      return false;
    }
  }, {
    key: 'render',
    value: function render() {
      return _react2.default.createElement('div', {
        style: { width: this.props.width, height: this.props.height }
      });
    }
  }]);

  return MapComponent;
}(_react2.default.Component);

module.exports = LeafletMap;
},{"leaflet":"leaflet","react":"react","react-dom":"react-dom"}],144:[function(require,module,exports){
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _leaflet = require('leaflet');

var _leaflet2 = _interopRequireDefault(_leaflet);

var _handlers = require('./handlers/');

var _handlers2 = _interopRequireDefault(_handlers);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Marker = function (_React$Component) {
  _inherits(Marker, _React$Component);

  function Marker(props) {
    _classCallCheck(this, Marker);

    var _this = _possibleConstructorReturn(this, (Marker.__proto__ || Object.getPrototypeOf(Marker)).call(this, props));

    _this.state = {
      mouseover: null,
      click: null
    };
    return _this;
  }

  _createClass(Marker, [{
    key: 'componentWillMount',
    value: function componentWillMount() {
      this.layer = _leaflet2.default.marker(this.props.latlng, this.props).addTo(this.props.map);

      this.layer.on({
        click: this.onMarkerClick.bind(this),
        mouseover: this.onMarkerMouseover.bind(this),
        mouseout: this.onMarkerMouseout.bind(this)
      });
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      this.layer.remove();
      this.layer.off('click', this.onMarkerClick);
    }
  }, {
    key: 'onMarkerClick',
    value: function onMarkerClick(e) {
      var layer = e.target;
      if (typeof this.props.onClick === 'function') {
        this.props.onClick(layer, this.props.map);
      }
      this.setState({ click: layer });
    }
  }, {
    key: 'onMarkerMouseover',
    value: function onMarkerMouseover(e) {
      var layer = e.target;
      if (typeof this.props.onMouseover === 'function') {
        this.props.onMouseover(layer, this.props.map);
      }
      this.setState({ mouseover: e.target });
    }
  }, {
    key: 'onMarkerMouseout',
    value: function onMarkerMouseout(e) {
      var layer = e.target;
      if (typeof this.props.onMouseout === 'function') {
        this.props.onMouseout(layer, this.props.map);
      }
      this.setState({ mouseover: null });
    }
  }, {
    key: 'render',
    value: function render() {
      return _react2.default.createElement(_handlers2.default, _extends({}, this.props, {
        layer: this.layer,
        click: this.state.click,
        mouseover: this.state.mouseover
      }));
    }
  }]);

  return Marker;
}(_react2.default.Component);

Marker.defaultProps = {
  latlng: null,
  name: 'Marker',
  controlledLayer: false,
  draggable: false
};

module.exports = Marker;
},{"./handlers/":150,"leaflet":"leaflet","react":"react"}],145:[function(require,module,exports){
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _leaflet = require('leaflet');

var _leaflet2 = _interopRequireDefault(_leaflet);

var _handlers = require('./handlers/');

var _handlers2 = _interopRequireDefault(_handlers);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Tile = function (_React$Component) {
  _inherits(Tile, _React$Component);

  function Tile(props) {
    _classCallCheck(this, Tile);

    return _possibleConstructorReturn(this, (Tile.__proto__ || Object.getPrototypeOf(Tile)).call(this, props));
  }

  _createClass(Tile, [{
    key: 'componentWillMount',
    value: function componentWillMount() {
      this.layer = _leaflet2.default.tileLayer(this.props.url, _extends({
        attribution: this.props.attribution
      }, this.props)).addTo(this.props.map);
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      this.layer.remove();
    }
  }, {
    key: 'render',
    value: function render() {
      return _react2.default.createElement(
        'div',
        null,
        _react2.default.createElement(_handlers2.default, _extends({}, this.props, {
          layer: this.layer,
          type: 'base'
        }))
      );
    }
  }]);

  return Tile;
}(_react2.default.Component);

Tile.defaultProps = {
  url: 'https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png',
  attribution: '&copy; <a href="http://osm.org/copyright">OpenStreetMap</a> contributors',
  name: 'Base',
  controlledLayer: true
};

module.exports = Tile;
},{"./handlers/":150,"leaflet":"leaflet","react":"react"}],146:[function(require,module,exports){
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _server = require('react-dom/server');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var HandleInfoControl = function (_React$Component) {
  _inherits(HandleInfoControl, _React$Component);

  function HandleInfoControl(props) {
    _classCallCheck(this, HandleInfoControl);

    return _possibleConstructorReturn(this, (HandleInfoControl.__proto__ || Object.getPrototypeOf(HandleInfoControl)).call(this, props));
  }

  _createClass(HandleInfoControl, [{
    key: 'componentWillMount',
    value: function componentWillMount() {
      this.props.updateInfo((0, _server.renderToStaticMarkup)(this.props.infoContent()));
    }
  }, {
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(nextProps) {
      if (nextProps.mouseover === null) {
        this.props.updateInfo((0, _server.renderToStaticMarkup)(this.props.infoContent()));
      }
      if (nextProps.mouseover) {
        this.props.updateInfo((0, _server.renderToStaticMarkup)(this.props.infoContent(nextProps.mouseover)));
      }
    }
  }, {
    key: 'render',
    value: function render() {
      return null;
    }
  }]);

  return HandleInfoControl;
}(_react2.default.Component);

module.exports = HandleInfoControl;
},{"react":"react","react-dom/server":105}],147:[function(require,module,exports){
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var HandleLayerGroup = function (_React$Component) {
  _inherits(HandleLayerGroup, _React$Component);

  function HandleLayerGroup(props) {
    _classCallCheck(this, HandleLayerGroup);

    return _possibleConstructorReturn(this, (HandleLayerGroup.__proto__ || Object.getPrototypeOf(HandleLayerGroup)).call(this, props));
  }

  _createClass(HandleLayerGroup, [{
    key: 'componentWillMount',
    value: function componentWillMount() {
      this.props.layerGroup.addLayer(this.props.layer);
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      this.props.layerGroup.removeLayer(this.props.layer);
    }
  }, {
    key: 'render',
    value: function render() {
      return null;
    }
  }]);

  return HandleLayerGroup;
}(_react2.default.Component);

module.exports = HandleLayerGroup;
},{"react":"react"}],148:[function(require,module,exports){
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var HandleLayersControl = function (_React$Component) {
  _inherits(HandleLayersControl, _React$Component);

  function HandleLayersControl(props) {
    _classCallCheck(this, HandleLayersControl);

    return _possibleConstructorReturn(this, (HandleLayersControl.__proto__ || Object.getPrototypeOf(HandleLayersControl)).call(this, props));
  }

  _createClass(HandleLayersControl, [{
    key: 'componentWillMount',
    value: function componentWillMount() {
      if (this.props.type === 'overlay') {
        this.props.layersControl.addOverlay(this.props.layer, this.props.name);
      } else if (this.props.type === 'base') {
        this.props.layersControl.addBaseLayer(this.props.layer, this.props.name);
      }
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      this.props.layersControl.removeLayer(this.props.layer);
    }
  }, {
    key: 'render',
    value: function render() {
      return null;
    }
  }]);

  return HandleLayersControl;
}(_react2.default.Component);

HandleLayersControl.defaultProps = {
  type: 'overlay'
};

module.exports = HandleLayersControl;
},{"react":"react"}],149:[function(require,module,exports){
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _server = require('react-dom/server');

var _reactDom = require('react-dom');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var HandlePopup = function (_React$Component) {
  _inherits(HandlePopup, _React$Component);

  function HandlePopup(props) {
    _classCallCheck(this, HandlePopup);

    return _possibleConstructorReturn(this, (HandlePopup.__proto__ || Object.getPrototypeOf(HandlePopup)).call(this, props));
  }

  _createClass(HandlePopup, [{
    key: 'componentWillMount',
    value: function componentWillMount() {
      this.popup = L.popup().setLatLng(this.props.map.getCenter()).openOn(this.props.map);

      this.props.layer.bindPopup(this.popup).closePopup();
    }
  }, {
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(nextProps) {
      if (nextProps.click !== this.props.click) {
        (0, _reactDom.render)(this.props.popupContent(nextProps.click), this.popup._contentNode);
      }
      if (nextProps.data !== this.props.data) {
        this.popup.remove();
      }
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      this.props.layer.unbindPopup();
      this.popup.remove();
      (0, _reactDom.unmountComponentAtNode)(this.popup._contentNode);
    }
  }, {
    key: 'render',
    value: function render() {
      return null;
    }
  }]);

  return HandlePopup;
}(_react2.default.Component);

module.exports = HandlePopup;
},{"react":"react","react-dom":"react-dom","react-dom/server":105}],150:[function(require,module,exports){
'use strict';

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _LayerGroup = require('./LayerGroup');

var _LayerGroup2 = _interopRequireDefault(_LayerGroup);

var _LayersControl = require('./LayersControl');

var _LayersControl2 = _interopRequireDefault(_LayersControl);

var _Popup = require('./Popup');

var _Popup2 = _interopRequireDefault(_Popup);

var _InfoControl = require('./InfoControl');

var _InfoControl2 = _interopRequireDefault(_InfoControl);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var ControlHandlers = function ControlHandlers(props) {
  return _react2.default.createElement(
    'div',
    null,
    props.layerGroup ? _react2.default.createElement(_LayerGroup2.default, props) : null,
    props.layersControl && props.controlledLayer ? _react2.default.createElement(_LayersControl2.default, props) : null,
    props.infoContent && props.updateInfo ? _react2.default.createElement(_InfoControl2.default, props) : null,
    props.popupContent ? _react2.default.createElement(_Popup2.default, props) : null
  );
};

module.exports = ControlHandlers;
},{"./InfoControl":146,"./LayerGroup":147,"./LayersControl":148,"./Popup":149,"react":"react"}],151:[function(require,module,exports){
'use strict';

var Map = require('./Map');
var TileLayer = require('./Tile');
var GeoJSON = require('./GeoJSON');
var Marker = require('./Marker');
var Choropleth = require('./Choropleth');
var HeatLayer = require('./Heat');
var LayerGroup = require('./LayerGroup');
var DrawControl = require('./DrawControl');
var LayersControl = require('./LayersControl');
var InfoControl = require('./InfoControl');

module.exports = {
  Map: Map,
  TileLayer: TileLayer,
  Marker: Marker,
  GeoJSON: GeoJSON,
  Choropleth: Choropleth,
  HeatLayer: HeatLayer,
  LayerGroup: LayerGroup,
  DrawControl: DrawControl,
  LayersControl: LayersControl,
  InfoControl: InfoControl
};
},{"./Choropleth":136,"./DrawControl":137,"./GeoJSON":138,"./Heat":139,"./InfoControl":140,"./LayerGroup":141,"./LayersControl":142,"./Map":143,"./Marker":144,"./Tile":145}],152:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

function componentWillMount() {
  // Call this.constructor.gDSFP to support sub-classes.
  var state = this.constructor.getDerivedStateFromProps(this.props, this.state);
  if (state !== null && state !== undefined) {
    this.setState(state);
  }
}

function componentWillReceiveProps(nextProps) {
  // Call this.constructor.gDSFP to support sub-classes.
  // Use the setState() updater to ensure state isn't stale in certain edge cases.
  function updater(prevState) {
    var state = this.constructor.getDerivedStateFromProps(nextProps, prevState);
    return state !== null && state !== undefined ? state : null;
  }
  // Binding "this" is important for shallow renderer support.
  this.setState(updater.bind(this));
}

function componentWillUpdate(nextProps, nextState) {
  try {
    var prevProps = this.props;
    var prevState = this.state;
    this.props = nextProps;
    this.state = nextState;
    this.__reactInternalSnapshotFlag = true;
    this.__reactInternalSnapshot = this.getSnapshotBeforeUpdate(
      prevProps,
      prevState
    );
  } finally {
    this.props = prevProps;
    this.state = prevState;
  }
}

// React may warn about cWM/cWRP/cWU methods being deprecated.
// Add a flag to suppress these warnings for this special case.
componentWillMount.__suppressDeprecationWarning = true;
componentWillReceiveProps.__suppressDeprecationWarning = true;
componentWillUpdate.__suppressDeprecationWarning = true;

function polyfill(Component) {
  var prototype = Component.prototype;

  if (!prototype || !prototype.isReactComponent) {
    throw new Error('Can only polyfill class components');
  }

  if (
    typeof Component.getDerivedStateFromProps !== 'function' &&
    typeof prototype.getSnapshotBeforeUpdate !== 'function'
  ) {
    return Component;
  }

  // If new component APIs are defined, "unsafe" lifecycles won't be called.
  // Error if any of these lifecycles are present,
  // Because they would work differently between older and newer (16.3+) versions of React.
  var foundWillMountName = null;
  var foundWillReceivePropsName = null;
  var foundWillUpdateName = null;
  if (typeof prototype.componentWillMount === 'function') {
    foundWillMountName = 'componentWillMount';
  } else if (typeof prototype.UNSAFE_componentWillMount === 'function') {
    foundWillMountName = 'UNSAFE_componentWillMount';
  }
  if (typeof prototype.componentWillReceiveProps === 'function') {
    foundWillReceivePropsName = 'componentWillReceiveProps';
  } else if (typeof prototype.UNSAFE_componentWillReceiveProps === 'function') {
    foundWillReceivePropsName = 'UNSAFE_componentWillReceiveProps';
  }
  if (typeof prototype.componentWillUpdate === 'function') {
    foundWillUpdateName = 'componentWillUpdate';
  } else if (typeof prototype.UNSAFE_componentWillUpdate === 'function') {
    foundWillUpdateName = 'UNSAFE_componentWillUpdate';
  }
  if (
    foundWillMountName !== null ||
    foundWillReceivePropsName !== null ||
    foundWillUpdateName !== null
  ) {
    var componentName = Component.displayName || Component.name;
    var newApiName =
      typeof Component.getDerivedStateFromProps === 'function'
        ? 'getDerivedStateFromProps()'
        : 'getSnapshotBeforeUpdate()';

    throw Error(
      'Unsafe legacy lifecycles will not be called for components using new component APIs.\n\n' +
        componentName +
        ' uses ' +
        newApiName +
        ' but also contains the following legacy lifecycles:' +
        (foundWillMountName !== null ? '\n  ' + foundWillMountName : '') +
        (foundWillReceivePropsName !== null
          ? '\n  ' + foundWillReceivePropsName
          : '') +
        (foundWillUpdateName !== null ? '\n  ' + foundWillUpdateName : '') +
        '\n\nThe above lifecycles should be removed. Learn more about this warning here:\n' +
        'https://fb.me/react-async-component-lifecycle-hooks'
    );
  }

  // React <= 16.2 does not support static getDerivedStateFromProps.
  // As a workaround, use cWM and cWRP to invoke the new static lifecycle.
  // Newer versions of React will ignore these lifecycles if gDSFP exists.
  if (typeof Component.getDerivedStateFromProps === 'function') {
    prototype.componentWillMount = componentWillMount;
    prototype.componentWillReceiveProps = componentWillReceiveProps;
  }

  // React <= 16.2 does not support getSnapshotBeforeUpdate.
  // As a workaround, use cWU to invoke the new lifecycle.
  // Newer versions of React will ignore that lifecycle if gSBU exists.
  if (typeof prototype.getSnapshotBeforeUpdate === 'function') {
    if (typeof prototype.componentDidUpdate !== 'function') {
      throw new Error(
        'Cannot polyfill getSnapshotBeforeUpdate() for components that do not define componentDidUpdate() on the prototype'
      );
    }

    prototype.componentWillUpdate = componentWillUpdate;

    var componentDidUpdate = prototype.componentDidUpdate;

    prototype.componentDidUpdate = function componentDidUpdatePolyfill(
      prevProps,
      prevState,
      maybeSnapshot
    ) {
      // 16.3+ will not execute our will-update method;
      // It will pass a snapshot value to did-update though.
      // Older versions will require our polyfilled will-update value.
      // We need to handle both cases, but can't just check for the presence of "maybeSnapshot",
      // Because for <= 15.x versions this might be a "prevContext" object.
      // We also can't just check "__reactInternalSnapshot",
      // Because get-snapshot might return a falsy value.
      // So check for the explicit __reactInternalSnapshotFlag flag to determine behavior.
      var snapshot = this.__reactInternalSnapshotFlag
        ? this.__reactInternalSnapshot
        : maybeSnapshot;

      componentDidUpdate.call(this, prevProps, prevState, snapshot);
    };
  }

  return Component;
}

exports.polyfill = polyfill;

},{}],153:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = bindAutoBindMethods;
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of React source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * Original:
 * https://github.com/facebook/react/blob/6508b1ad273a6f371e8d90ae676e5390199461b4/src/isomorphic/classic/class/ReactClass.js#L650-L713
 */

function bindAutoBindMethod(component, method) {
  var boundMethod = method.bind(component);

  boundMethod.__reactBoundContext = component;
  boundMethod.__reactBoundMethod = method;
  boundMethod.__reactBoundArguments = null;

  var componentName = component.constructor.displayName,
      _bind = boundMethod.bind;

  boundMethod.bind = function (newThis) {
    var args = Array.prototype.slice.call(arguments, 1);
    if (newThis !== component && newThis !== null) {
      console.warn('bind(): React component methods may only be bound to the ' + 'component instance. See ' + componentName);
    } else if (!args.length) {
      console.warn('bind(): You are binding a component method to the component. ' + 'React does this for you automatically in a high-performance ' + 'way, so you can safely remove this call. See ' + componentName);
      return boundMethod;
    }

    var reboundMethod = _bind.apply(boundMethod, arguments);
    reboundMethod.__reactBoundContext = component;
    reboundMethod.__reactBoundMethod = method;
    reboundMethod.__reactBoundArguments = args;

    return reboundMethod;
  };

  return boundMethod;
}

function bindAutoBindMethodsFromMap(component) {
  for (var autoBindKey in component.__reactAutoBindMap) {
    if (!component.__reactAutoBindMap.hasOwnProperty(autoBindKey)) {
      return;
    }

    // Tweak: skip methods that are already bound.
    // This is to preserve method reference in case it is used
    // as a subscription handler that needs to be detached later.
    if (component.hasOwnProperty(autoBindKey) && component[autoBindKey].__reactBoundContext === component) {
      continue;
    }

    var method = component.__reactAutoBindMap[autoBindKey];
    component[autoBindKey] = bindAutoBindMethod(component, method);
  }
}

function bindAutoBindMethods(component) {
  if (component.__reactAutoBindPairs) {
    bindAutoBindMethodsFromArray(component);
  } else if (component.__reactAutoBindMap) {
    bindAutoBindMethodsFromMap(component);
  }
}

function bindAutoBindMethodsFromArray(component) {
  var pairs = component.__reactAutoBindPairs;

  if (!pairs) {
    return;
  }

  for (var i = 0; i < pairs.length; i += 2) {
    var autoBindKey = pairs[i];

    if (component.hasOwnProperty(autoBindKey) && component[autoBindKey].__reactBoundContext === component) {
      continue;
    }

    var method = pairs[i + 1];

    component[autoBindKey] = bindAutoBindMethod(component, method);
  }
}
},{}],154:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

exports.default = proxyClass;
exports.default = createClassProxy;

var _find = require('lodash/find');

var _find2 = _interopRequireDefault(_find);

var _createPrototypeProxy = require('./createPrototypeProxy');

var _createPrototypeProxy2 = _interopRequireDefault(_createPrototypeProxy);

var _bindAutoBindMethods = require('./bindAutoBindMethods');

var _bindAutoBindMethods2 = _interopRequireDefault(_bindAutoBindMethods);

var _deleteUnknownAutoBindMethods = require('./deleteUnknownAutoBindMethods');

var _deleteUnknownAutoBindMethods2 = _interopRequireDefault(_deleteUnknownAutoBindMethods);

var _supportsProtoAssignment = require('./supportsProtoAssignment');

var _supportsProtoAssignment2 = _interopRequireDefault(_supportsProtoAssignment);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

var RESERVED_STATICS = ['length', 'name', 'arguments', 'caller', 'prototype', 'toString'];

function isEqualDescriptor(a, b) {
  if (!a && !b) {
    return true;
  }
  if (!a || !b) {
    return false;
  }
  for (var key in a) {
    if (a[key] !== b[key]) {
      return false;
    }
  }
  return true;
}

// This was originally a WeakMap but we had issues with React Native:
// https://github.com/gaearon/react-proxy/issues/50#issuecomment-192928066
var allProxies = [];
function findProxy(Component) {
  var pair = (0, _find2.default)(allProxies, function (_ref) {
    var _ref2 = _slicedToArray(_ref, 1);

    var key = _ref2[0];
    return key === Component;
  });
  return pair ? pair[1] : null;
}
function addProxy(Component, proxy) {
  allProxies.push([Component, proxy]);
}

function proxyClass(InitialComponent) {
  // Prevent double wrapping.
  // Given a proxy class, return the existing proxy managing it.
  var existingProxy = findProxy(InitialComponent);
  if (existingProxy) {
    return existingProxy;
  }

  var prototypeProxy = (0, _createPrototypeProxy2.default)();
  var CurrentComponent = undefined;
  var ProxyComponent = undefined;

  var staticDescriptors = {};
  function wasStaticModifiedByUser(key) {
    // Compare the descriptor with the one we previously set ourselves.
    var currentDescriptor = Object.getOwnPropertyDescriptor(ProxyComponent, key);
    return !isEqualDescriptor(staticDescriptors[key], currentDescriptor);
  }

  function instantiate(factory, context, params) {
    var component = factory();

    try {
      return component.apply(context, params);
    } catch (err) {
      (function () {
        // Native ES6 class instantiation
        var instance = new (Function.prototype.bind.apply(component, [null].concat(_toConsumableArray(params))))();

        Object.keys(instance).forEach(function (key) {
          if (RESERVED_STATICS.indexOf(key) > -1) {
            return;
          }
          context[key] = instance[key];
        });
      })();
    }
  }

  try {
    // Create a proxy constructor with matching name
    ProxyComponent = new Function('factory', 'instantiate', 'return function ' + (InitialComponent.name || 'ProxyComponent') + '() {\n         return instantiate(factory, this, arguments);\n      }')(function () {
      return CurrentComponent;
    }, instantiate);
  } catch (err) {
    // Some environments may forbid dynamic evaluation
    ProxyComponent = function ProxyComponent() {
      return instantiate(function () {
        return CurrentComponent;
      }, this, arguments);
    };
  }

  // Point proxy constructor to the proxy prototype
  ProxyComponent.prototype = prototypeProxy.get();

  // Proxy toString() to the current constructor
  ProxyComponent.toString = function toString() {
    return CurrentComponent.toString();
  };

  function update(NextComponent) {
    if (typeof NextComponent !== 'function') {
      throw new Error('Expected a constructor.');
    }

    // Prevent proxy cycles
    var existingProxy = findProxy(NextComponent);
    if (existingProxy) {
      return update(existingProxy.__getCurrent());
    }

    // Save the next constructor so we call it
    CurrentComponent = NextComponent;

    // Update the prototype proxy with new methods
    var mountedInstances = prototypeProxy.update(NextComponent.prototype);

    // Set up the constructor property so accessing the statics work
    ProxyComponent.prototype.constructor = ProxyComponent;

    // Set up the same prototype for inherited statics
    ProxyComponent.__proto__ = NextComponent.__proto__;

    // Copy static methods and properties
    Object.getOwnPropertyNames(NextComponent).forEach(function (key) {
      if (RESERVED_STATICS.indexOf(key) > -1) {
        return;
      }

      var staticDescriptor = _extends({}, Object.getOwnPropertyDescriptor(NextComponent, key), {
        configurable: true
      });

      // Copy static unless user has redefined it at runtime
      if (!wasStaticModifiedByUser(key)) {
        Object.defineProperty(ProxyComponent, key, staticDescriptor);
        staticDescriptors[key] = staticDescriptor;
      }
    });

    // Remove old static methods and properties
    Object.getOwnPropertyNames(ProxyComponent).forEach(function (key) {
      if (RESERVED_STATICS.indexOf(key) > -1) {
        return;
      }

      // Skip statics that exist on the next class
      if (NextComponent.hasOwnProperty(key)) {
        return;
      }

      // Skip non-configurable statics
      var descriptor = Object.getOwnPropertyDescriptor(ProxyComponent, key);
      if (descriptor && !descriptor.configurable) {
        return;
      }

      // Delete static unless user has redefined it at runtime
      if (!wasStaticModifiedByUser(key)) {
        delete ProxyComponent[key];
        delete staticDescriptors[key];
      }
    });

    // Try to infer displayName
    ProxyComponent.displayName = NextComponent.displayName || NextComponent.name;

    // We might have added new methods that need to be auto-bound
    mountedInstances.forEach(_bindAutoBindMethods2.default);
    mountedInstances.forEach(_deleteUnknownAutoBindMethods2.default);

    // Let the user take care of redrawing
    return mountedInstances;
  };

  function get() {
    return ProxyComponent;
  }

  function getCurrent() {
    return CurrentComponent;
  }

  update(InitialComponent);

  var proxy = { get: get, update: update };
  addProxy(ProxyComponent, proxy);

  Object.defineProperty(proxy, '__getCurrent', {
    configurable: false,
    writable: false,
    enumerable: false,
    value: getCurrent
  });

  return proxy;
}

function createFallback(Component) {
  var CurrentComponent = Component;

  return {
    get: function get() {
      return CurrentComponent;
    },
    update: function update(NextComponent) {
      CurrentComponent = NextComponent;
    }
  };
}

function createClassProxy(Component) {
  return Component.__proto__ && (0, _supportsProtoAssignment2.default)() ? proxyClass(Component) : createFallback(Component);
}
},{"./bindAutoBindMethods":153,"./createPrototypeProxy":155,"./deleteUnknownAutoBindMethods":156,"./supportsProtoAssignment":158,"lodash/find":279}],155:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = createPrototypeProxy;

var _assign = require('lodash/assign');

var _assign2 = _interopRequireDefault(_assign);

var _difference = require('lodash/difference');

var _difference2 = _interopRequireDefault(_difference);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function createPrototypeProxy() {
  var proxy = {};
  var current = null;
  var mountedInstances = [];

  /**
   * Creates a proxied toString() method pointing to the current version's toString().
   */
  function proxyToString(name) {
    // Wrap to always call the current version
    return function toString() {
      if (typeof current[name] === 'function') {
        return current[name].toString();
      } else {
        return '<method was deleted>';
      }
    };
  }

  /**
   * Creates a proxied method that calls the current version, whenever available.
   */
  function proxyMethod(name) {
    // Wrap to always call the current version
    var proxiedMethod = function proxiedMethod() {
      if (typeof current[name] === 'function') {
        return current[name].apply(this, arguments);
      }
    };

    // Copy properties of the original function, if any
    (0, _assign2.default)(proxiedMethod, current[name]);
    proxiedMethod.toString = proxyToString(name);

    return proxiedMethod;
  }

  /**
   * Augments the original componentDidMount with instance tracking.
   */
  function proxiedComponentDidMount() {
    mountedInstances.push(this);
    if (typeof current.componentDidMount === 'function') {
      return current.componentDidMount.apply(this, arguments);
    }
  }
  proxiedComponentDidMount.toString = proxyToString('componentDidMount');

  /**
   * Augments the original componentWillUnmount with instance tracking.
   */
  function proxiedComponentWillUnmount() {
    var index = mountedInstances.indexOf(this);
    // Unless we're in a weird environment without componentDidMount
    if (index !== -1) {
      mountedInstances.splice(index, 1);
    }
    if (typeof current.componentWillUnmount === 'function') {
      return current.componentWillUnmount.apply(this, arguments);
    }
  }
  proxiedComponentWillUnmount.toString = proxyToString('componentWillUnmount');

  /**
   * Defines a property on the proxy.
   */
  function defineProxyProperty(name, descriptor) {
    Object.defineProperty(proxy, name, descriptor);
  }

  /**
   * Defines a property, attempting to keep the original descriptor configuration.
   */
  function defineProxyPropertyWithValue(name, value) {
    var _ref = Object.getOwnPropertyDescriptor(current, name) || {};

    var _ref$enumerable = _ref.enumerable;
    var enumerable = _ref$enumerable === undefined ? false : _ref$enumerable;
    var _ref$writable = _ref.writable;
    var writable = _ref$writable === undefined ? true : _ref$writable;


    defineProxyProperty(name, {
      configurable: true,
      enumerable: enumerable,
      writable: writable,
      value: value
    });
  }

  /**
   * Creates an auto-bind map mimicking the original map, but directed at proxy.
   */
  function createAutoBindMap() {
    if (!current.__reactAutoBindMap) {
      return;
    }

    var __reactAutoBindMap = {};
    for (var name in current.__reactAutoBindMap) {
      if (typeof proxy[name] === 'function' && current.__reactAutoBindMap.hasOwnProperty(name)) {
        __reactAutoBindMap[name] = proxy[name];
      }
    }

    return __reactAutoBindMap;
  }

  /**
   * Creates an auto-bind map mimicking the original map, but directed at proxy.
   */
  function createAutoBindPairs() {
    var __reactAutoBindPairs = [];

    for (var i = 0; i < current.__reactAutoBindPairs.length; i += 2) {
      var name = current.__reactAutoBindPairs[i];
      var method = proxy[name];

      if (typeof method === 'function') {
        __reactAutoBindPairs.push(name, method);
      }
    }

    return __reactAutoBindPairs;
  }

  /**
   * Applies the updated prototype.
   */
  function update(next) {
    // Save current source of truth
    current = next;

    // Find changed property names
    var currentNames = Object.getOwnPropertyNames(current);
    var previousName = Object.getOwnPropertyNames(proxy);
    var removedNames = (0, _difference2.default)(previousName, currentNames);

    // Remove properties and methods that are no longer there
    removedNames.forEach(function (name) {
      delete proxy[name];
    });

    // Copy every descriptor
    currentNames.forEach(function (name) {
      var descriptor = Object.getOwnPropertyDescriptor(current, name);
      if (typeof descriptor.value === 'function') {
        // Functions require additional wrapping so they can be bound later
        defineProxyPropertyWithValue(name, proxyMethod(name));
      } else {
        // Other values can be copied directly
        defineProxyProperty(name, descriptor);
      }
    });

    // Track mounting and unmounting
    defineProxyPropertyWithValue('componentDidMount', proxiedComponentDidMount);
    defineProxyPropertyWithValue('componentWillUnmount', proxiedComponentWillUnmount);

    if (current.hasOwnProperty('__reactAutoBindMap')) {
      defineProxyPropertyWithValue('__reactAutoBindMap', createAutoBindMap());
    }

    if (current.hasOwnProperty('__reactAutoBindPairs')) {
      defineProxyPropertyWithValue('__reactAutoBindPairs', createAutoBindPairs());
    }

    // Set up the prototype chain
    proxy.__proto__ = next;

    return mountedInstances;
  }

  /**
   * Returns the up-to-date proxy prototype.
   */
  function get() {
    return proxy;
  }

  return {
    update: update,
    get: get
  };
};
},{"lodash/assign":275,"lodash/difference":277}],156:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = deleteUnknownAutoBindMethods;
function shouldDeleteClassicInstanceMethod(component, name) {
  if (component.__reactAutoBindMap && component.__reactAutoBindMap.hasOwnProperty(name)) {
    // It's a known autobound function, keep it
    return false;
  }

  if (component.__reactAutoBindPairs && component.__reactAutoBindPairs.indexOf(name) >= 0) {
    // It's a known autobound function, keep it
    return false;
  }

  if (component[name].__reactBoundArguments !== null) {
    // It's a function bound to specific args, keep it
    return false;
  }

  // It's a cached bound method for a function
  // that was deleted by user, so we delete it from component.
  return true;
}

function shouldDeleteModernInstanceMethod(component, name) {
  var prototype = component.constructor.prototype;

  var prototypeDescriptor = Object.getOwnPropertyDescriptor(prototype, name);

  if (!prototypeDescriptor || !prototypeDescriptor.get) {
    // This is definitely not an autobinding getter
    return false;
  }

  if (prototypeDescriptor.get().length !== component[name].length) {
    // The length doesn't match, bail out
    return false;
  }

  // This seems like a method bound using an autobinding getter on the prototype
  // Hopefully we won't run into too many false positives.
  return true;
}

function shouldDeleteInstanceMethod(component, name) {
  var descriptor = Object.getOwnPropertyDescriptor(component, name);
  if (typeof descriptor.value !== 'function') {
    // Not a function, or something fancy: bail out
    return;
  }

  if (component.__reactAutoBindMap || component.__reactAutoBindPairs) {
    // Classic
    return shouldDeleteClassicInstanceMethod(component, name);
  } else {
    // Modern
    return shouldDeleteModernInstanceMethod(component, name);
  }
}

/**
 * Deletes autobound methods from the instance.
 *
 * For classic React classes, we only delete the methods that no longer exist in map.
 * This means the user actually deleted them in code.
 *
 * For modern classes, we delete methods that exist on prototype with the same length,
 * and which have getters on prototype, but are normal values on the instance.
 * This is usually an indication that an autobinding decorator is being used,
 * and the getter will re-generate the memoized handler on next access.
 */
function deleteUnknownAutoBindMethods(component) {
  var names = Object.getOwnPropertyNames(component);

  names.forEach(function (name) {
    if (shouldDeleteInstanceMethod(component, name)) {
      delete component[name];
    }
  });
}
},{}],157:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getForceUpdate = exports.createProxy = undefined;

var _supportsProtoAssignment = require('./supportsProtoAssignment');

var _supportsProtoAssignment2 = _interopRequireDefault(_supportsProtoAssignment);

var _createClassProxy = require('./createClassProxy');

var _createClassProxy2 = _interopRequireDefault(_createClassProxy);

var _reactDeepForceUpdate = require('react-deep-force-update');

var _reactDeepForceUpdate2 = _interopRequireDefault(_reactDeepForceUpdate);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

if (!(0, _supportsProtoAssignment2.default)()) {
  console.warn('This JavaScript environment does not support __proto__. ' + 'This means that react-proxy is unable to proxy React components. ' + 'Features that rely on react-proxy, such as react-transform-hmr, ' + 'will not function as expected.');
}

exports.createProxy = _createClassProxy2.default;
exports.getForceUpdate = _reactDeepForceUpdate2.default;
},{"./createClassProxy":154,"./supportsProtoAssignment":158,"react-deep-force-update":104}],158:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = supportsProtoAssignment;
var x = {};
var y = { supports: true };
try {
  x.__proto__ = y;
} catch (err) {}

function supportsProtoAssignment() {
  return x.supports || false;
};
},{}],159:[function(require,module,exports){
var getNative = require('./_getNative'),
    root = require('./_root');

/* Built-in method references that are verified to be native. */
var DataView = getNative(root, 'DataView');

module.exports = DataView;

},{"./_getNative":222,"./_root":260}],160:[function(require,module,exports){
var hashClear = require('./_hashClear'),
    hashDelete = require('./_hashDelete'),
    hashGet = require('./_hashGet'),
    hashHas = require('./_hashHas'),
    hashSet = require('./_hashSet');

/**
 * Creates a hash object.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */
function Hash(entries) {
  var index = -1,
      length = entries == null ? 0 : entries.length;

  this.clear();
  while (++index < length) {
    var entry = entries[index];
    this.set(entry[0], entry[1]);
  }
}

// Add methods to `Hash`.
Hash.prototype.clear = hashClear;
Hash.prototype['delete'] = hashDelete;
Hash.prototype.get = hashGet;
Hash.prototype.has = hashHas;
Hash.prototype.set = hashSet;

module.exports = Hash;

},{"./_hashClear":228,"./_hashDelete":229,"./_hashGet":230,"./_hashHas":231,"./_hashSet":232}],161:[function(require,module,exports){
var listCacheClear = require('./_listCacheClear'),
    listCacheDelete = require('./_listCacheDelete'),
    listCacheGet = require('./_listCacheGet'),
    listCacheHas = require('./_listCacheHas'),
    listCacheSet = require('./_listCacheSet');

/**
 * Creates an list cache object.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */
function ListCache(entries) {
  var index = -1,
      length = entries == null ? 0 : entries.length;

  this.clear();
  while (++index < length) {
    var entry = entries[index];
    this.set(entry[0], entry[1]);
  }
}

// Add methods to `ListCache`.
ListCache.prototype.clear = listCacheClear;
ListCache.prototype['delete'] = listCacheDelete;
ListCache.prototype.get = listCacheGet;
ListCache.prototype.has = listCacheHas;
ListCache.prototype.set = listCacheSet;

module.exports = ListCache;

},{"./_listCacheClear":241,"./_listCacheDelete":242,"./_listCacheGet":243,"./_listCacheHas":244,"./_listCacheSet":245}],162:[function(require,module,exports){
var getNative = require('./_getNative'),
    root = require('./_root');

/* Built-in method references that are verified to be native. */
var Map = getNative(root, 'Map');

module.exports = Map;

},{"./_getNative":222,"./_root":260}],163:[function(require,module,exports){
var mapCacheClear = require('./_mapCacheClear'),
    mapCacheDelete = require('./_mapCacheDelete'),
    mapCacheGet = require('./_mapCacheGet'),
    mapCacheHas = require('./_mapCacheHas'),
    mapCacheSet = require('./_mapCacheSet');

/**
 * Creates a map cache object to store key-value pairs.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */
function MapCache(entries) {
  var index = -1,
      length = entries == null ? 0 : entries.length;

  this.clear();
  while (++index < length) {
    var entry = entries[index];
    this.set(entry[0], entry[1]);
  }
}

// Add methods to `MapCache`.
MapCache.prototype.clear = mapCacheClear;
MapCache.prototype['delete'] = mapCacheDelete;
MapCache.prototype.get = mapCacheGet;
MapCache.prototype.has = mapCacheHas;
MapCache.prototype.set = mapCacheSet;

module.exports = MapCache;

},{"./_mapCacheClear":246,"./_mapCacheDelete":247,"./_mapCacheGet":248,"./_mapCacheHas":249,"./_mapCacheSet":250}],164:[function(require,module,exports){
var getNative = require('./_getNative'),
    root = require('./_root');

/* Built-in method references that are verified to be native. */
var Promise = getNative(root, 'Promise');

module.exports = Promise;

},{"./_getNative":222,"./_root":260}],165:[function(require,module,exports){
var getNative = require('./_getNative'),
    root = require('./_root');

/* Built-in method references that are verified to be native. */
var Set = getNative(root, 'Set');

module.exports = Set;

},{"./_getNative":222,"./_root":260}],166:[function(require,module,exports){
var MapCache = require('./_MapCache'),
    setCacheAdd = require('./_setCacheAdd'),
    setCacheHas = require('./_setCacheHas');

/**
 *
 * Creates an array cache object to store unique values.
 *
 * @private
 * @constructor
 * @param {Array} [values] The values to cache.
 */
function SetCache(values) {
  var index = -1,
      length = values == null ? 0 : values.length;

  this.__data__ = new MapCache;
  while (++index < length) {
    this.add(values[index]);
  }
}

// Add methods to `SetCache`.
SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
SetCache.prototype.has = setCacheHas;

module.exports = SetCache;

},{"./_MapCache":163,"./_setCacheAdd":261,"./_setCacheHas":262}],167:[function(require,module,exports){
var ListCache = require('./_ListCache'),
    stackClear = require('./_stackClear'),
    stackDelete = require('./_stackDelete'),
    stackGet = require('./_stackGet'),
    stackHas = require('./_stackHas'),
    stackSet = require('./_stackSet');

/**
 * Creates a stack cache object to store key-value pairs.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */
function Stack(entries) {
  var data = this.__data__ = new ListCache(entries);
  this.size = data.size;
}

// Add methods to `Stack`.
Stack.prototype.clear = stackClear;
Stack.prototype['delete'] = stackDelete;
Stack.prototype.get = stackGet;
Stack.prototype.has = stackHas;
Stack.prototype.set = stackSet;

module.exports = Stack;

},{"./_ListCache":161,"./_stackClear":266,"./_stackDelete":267,"./_stackGet":268,"./_stackHas":269,"./_stackSet":270}],168:[function(require,module,exports){
var root = require('./_root');

/** Built-in value references. */
var Symbol = root.Symbol;

module.exports = Symbol;

},{"./_root":260}],169:[function(require,module,exports){
var root = require('./_root');

/** Built-in value references. */
var Uint8Array = root.Uint8Array;

module.exports = Uint8Array;

},{"./_root":260}],170:[function(require,module,exports){
var getNative = require('./_getNative'),
    root = require('./_root');

/* Built-in method references that are verified to be native. */
var WeakMap = getNative(root, 'WeakMap');

module.exports = WeakMap;

},{"./_getNative":222,"./_root":260}],171:[function(require,module,exports){
/**
 * A faster alternative to `Function#apply`, this function invokes `func`
 * with the `this` binding of `thisArg` and the arguments of `args`.
 *
 * @private
 * @param {Function} func The function to invoke.
 * @param {*} thisArg The `this` binding of `func`.
 * @param {Array} args The arguments to invoke `func` with.
 * @returns {*} Returns the result of `func`.
 */
function apply(func, thisArg, args) {
  switch (args.length) {
    case 0: return func.call(thisArg);
    case 1: return func.call(thisArg, args[0]);
    case 2: return func.call(thisArg, args[0], args[1]);
    case 3: return func.call(thisArg, args[0], args[1], args[2]);
  }
  return func.apply(thisArg, args);
}

module.exports = apply;

},{}],172:[function(require,module,exports){
/**
 * A specialized version of `_.filter` for arrays without support for
 * iteratee shorthands.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} predicate The function invoked per iteration.
 * @returns {Array} Returns the new filtered array.
 */
function arrayFilter(array, predicate) {
  var index = -1,
      length = array == null ? 0 : array.length,
      resIndex = 0,
      result = [];

  while (++index < length) {
    var value = array[index];
    if (predicate(value, index, array)) {
      result[resIndex++] = value;
    }
  }
  return result;
}

module.exports = arrayFilter;

},{}],173:[function(require,module,exports){
var baseIndexOf = require('./_baseIndexOf');

/**
 * A specialized version of `_.includes` for arrays without support for
 * specifying an index to search from.
 *
 * @private
 * @param {Array} [array] The array to inspect.
 * @param {*} target The value to search for.
 * @returns {boolean} Returns `true` if `target` is found, else `false`.
 */
function arrayIncludes(array, value) {
  var length = array == null ? 0 : array.length;
  return !!length && baseIndexOf(array, value, 0) > -1;
}

module.exports = arrayIncludes;

},{"./_baseIndexOf":189}],174:[function(require,module,exports){
/**
 * This function is like `arrayIncludes` except that it accepts a comparator.
 *
 * @private
 * @param {Array} [array] The array to inspect.
 * @param {*} target The value to search for.
 * @param {Function} comparator The comparator invoked per element.
 * @returns {boolean} Returns `true` if `target` is found, else `false`.
 */
function arrayIncludesWith(array, value, comparator) {
  var index = -1,
      length = array == null ? 0 : array.length;

  while (++index < length) {
    if (comparator(value, array[index])) {
      return true;
    }
  }
  return false;
}

module.exports = arrayIncludesWith;

},{}],175:[function(require,module,exports){
var baseTimes = require('./_baseTimes'),
    isArguments = require('./isArguments'),
    isArray = require('./isArray'),
    isBuffer = require('./isBuffer'),
    isIndex = require('./_isIndex'),
    isTypedArray = require('./isTypedArray');

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * Creates an array of the enumerable property names of the array-like `value`.
 *
 * @private
 * @param {*} value The value to query.
 * @param {boolean} inherited Specify returning inherited property names.
 * @returns {Array} Returns the array of property names.
 */
function arrayLikeKeys(value, inherited) {
  var isArr = isArray(value),
      isArg = !isArr && isArguments(value),
      isBuff = !isArr && !isArg && isBuffer(value),
      isType = !isArr && !isArg && !isBuff && isTypedArray(value),
      skipIndexes = isArr || isArg || isBuff || isType,
      result = skipIndexes ? baseTimes(value.length, String) : [],
      length = result.length;

  for (var key in value) {
    if ((inherited || hasOwnProperty.call(value, key)) &&
        !(skipIndexes && (
           // Safari 9 has enumerable `arguments.length` in strict mode.
           key == 'length' ||
           // Node.js 0.10 has enumerable non-index properties on buffers.
           (isBuff && (key == 'offset' || key == 'parent')) ||
           // PhantomJS 2 has enumerable non-index properties on typed arrays.
           (isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset')) ||
           // Skip index properties.
           isIndex(key, length)
        ))) {
      result.push(key);
    }
  }
  return result;
}

module.exports = arrayLikeKeys;

},{"./_baseTimes":205,"./_isIndex":234,"./isArguments":284,"./isArray":285,"./isBuffer":288,"./isTypedArray":294}],176:[function(require,module,exports){
/**
 * A specialized version of `_.map` for arrays without support for iteratee
 * shorthands.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array} Returns the new mapped array.
 */
function arrayMap(array, iteratee) {
  var index = -1,
      length = array == null ? 0 : array.length,
      result = Array(length);

  while (++index < length) {
    result[index] = iteratee(array[index], index, array);
  }
  return result;
}

module.exports = arrayMap;

},{}],177:[function(require,module,exports){
/**
 * Appends the elements of `values` to `array`.
 *
 * @private
 * @param {Array} array The array to modify.
 * @param {Array} values The values to append.
 * @returns {Array} Returns `array`.
 */
function arrayPush(array, values) {
  var index = -1,
      length = values.length,
      offset = array.length;

  while (++index < length) {
    array[offset + index] = values[index];
  }
  return array;
}

module.exports = arrayPush;

},{}],178:[function(require,module,exports){
/**
 * A specialized version of `_.some` for arrays without support for iteratee
 * shorthands.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} predicate The function invoked per iteration.
 * @returns {boolean} Returns `true` if any element passes the predicate check,
 *  else `false`.
 */
function arraySome(array, predicate) {
  var index = -1,
      length = array == null ? 0 : array.length;

  while (++index < length) {
    if (predicate(array[index], index, array)) {
      return true;
    }
  }
  return false;
}

module.exports = arraySome;

},{}],179:[function(require,module,exports){
var baseAssignValue = require('./_baseAssignValue'),
    eq = require('./eq');

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * Assigns `value` to `key` of `object` if the existing value is not equivalent
 * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
 * for equality comparisons.
 *
 * @private
 * @param {Object} object The object to modify.
 * @param {string} key The key of the property to assign.
 * @param {*} value The value to assign.
 */
function assignValue(object, key, value) {
  var objValue = object[key];
  if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) ||
      (value === undefined && !(key in object))) {
    baseAssignValue(object, key, value);
  }
}

module.exports = assignValue;

},{"./_baseAssignValue":181,"./eq":278}],180:[function(require,module,exports){
var eq = require('./eq');

/**
 * Gets the index at which the `key` is found in `array` of key-value pairs.
 *
 * @private
 * @param {Array} array The array to inspect.
 * @param {*} key The key to search for.
 * @returns {number} Returns the index of the matched value, else `-1`.
 */
function assocIndexOf(array, key) {
  var length = array.length;
  while (length--) {
    if (eq(array[length][0], key)) {
      return length;
    }
  }
  return -1;
}

module.exports = assocIndexOf;

},{"./eq":278}],181:[function(require,module,exports){
var defineProperty = require('./_defineProperty');

/**
 * The base implementation of `assignValue` and `assignMergeValue` without
 * value checks.
 *
 * @private
 * @param {Object} object The object to modify.
 * @param {string} key The key of the property to assign.
 * @param {*} value The value to assign.
 */
function baseAssignValue(object, key, value) {
  if (key == '__proto__' && defineProperty) {
    defineProperty(object, key, {
      'configurable': true,
      'enumerable': true,
      'value': value,
      'writable': true
    });
  } else {
    object[key] = value;
  }
}

module.exports = baseAssignValue;

},{"./_defineProperty":214}],182:[function(require,module,exports){
var SetCache = require('./_SetCache'),
    arrayIncludes = require('./_arrayIncludes'),
    arrayIncludesWith = require('./_arrayIncludesWith'),
    arrayMap = require('./_arrayMap'),
    baseUnary = require('./_baseUnary'),
    cacheHas = require('./_cacheHas');

/** Used as the size to enable large array optimizations. */
var LARGE_ARRAY_SIZE = 200;

/**
 * The base implementation of methods like `_.difference` without support
 * for excluding multiple arrays or iteratee shorthands.
 *
 * @private
 * @param {Array} array The array to inspect.
 * @param {Array} values The values to exclude.
 * @param {Function} [iteratee] The iteratee invoked per element.
 * @param {Function} [comparator] The comparator invoked per element.
 * @returns {Array} Returns the new array of filtered values.
 */
function baseDifference(array, values, iteratee, comparator) {
  var index = -1,
      includes = arrayIncludes,
      isCommon = true,
      length = array.length,
      result = [],
      valuesLength = values.length;

  if (!length) {
    return result;
  }
  if (iteratee) {
    values = arrayMap(values, baseUnary(iteratee));
  }
  if (comparator) {
    includes = arrayIncludesWith;
    isCommon = false;
  }
  else if (values.length >= LARGE_ARRAY_SIZE) {
    includes = cacheHas;
    isCommon = false;
    values = new SetCache(values);
  }
  outer:
  while (++index < length) {
    var value = array[index],
        computed = iteratee == null ? value : iteratee(value);

    value = (comparator || value !== 0) ? value : 0;
    if (isCommon && computed === computed) {
      var valuesIndex = valuesLength;
      while (valuesIndex--) {
        if (values[valuesIndex] === computed) {
          continue outer;
        }
      }
      result.push(value);
    }
    else if (!includes(values, computed, comparator)) {
      result.push(value);
    }
  }
  return result;
}

module.exports = baseDifference;

},{"./_SetCache":166,"./_arrayIncludes":173,"./_arrayIncludesWith":174,"./_arrayMap":176,"./_baseUnary":207,"./_cacheHas":208}],183:[function(require,module,exports){
/**
 * The base implementation of `_.findIndex` and `_.findLastIndex` without
 * support for iteratee shorthands.
 *
 * @private
 * @param {Array} array The array to inspect.
 * @param {Function} predicate The function invoked per iteration.
 * @param {number} fromIndex The index to search from.
 * @param {boolean} [fromRight] Specify iterating from right to left.
 * @returns {number} Returns the index of the matched value, else `-1`.
 */
function baseFindIndex(array, predicate, fromIndex, fromRight) {
  var length = array.length,
      index = fromIndex + (fromRight ? 1 : -1);

  while ((fromRight ? index-- : ++index < length)) {
    if (predicate(array[index], index, array)) {
      return index;
    }
  }
  return -1;
}

module.exports = baseFindIndex;

},{}],184:[function(require,module,exports){
var arrayPush = require('./_arrayPush'),
    isFlattenable = require('./_isFlattenable');

/**
 * The base implementation of `_.flatten` with support for restricting flattening.
 *
 * @private
 * @param {Array} array The array to flatten.
 * @param {number} depth The maximum recursion depth.
 * @param {boolean} [predicate=isFlattenable] The function invoked per iteration.
 * @param {boolean} [isStrict] Restrict to values that pass `predicate` checks.
 * @param {Array} [result=[]] The initial result value.
 * @returns {Array} Returns the new flattened array.
 */
function baseFlatten(array, depth, predicate, isStrict, result) {
  var index = -1,
      length = array.length;

  predicate || (predicate = isFlattenable);
  result || (result = []);

  while (++index < length) {
    var value = array[index];
    if (depth > 0 && predicate(value)) {
      if (depth > 1) {
        // Recursively flatten arrays (susceptible to call stack limits).
        baseFlatten(value, depth - 1, predicate, isStrict, result);
      } else {
        arrayPush(result, value);
      }
    } else if (!isStrict) {
      result[result.length] = value;
    }
  }
  return result;
}

module.exports = baseFlatten;

},{"./_arrayPush":177,"./_isFlattenable":233}],185:[function(require,module,exports){
var castPath = require('./_castPath'),
    toKey = require('./_toKey');

/**
 * The base implementation of `_.get` without support for default values.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {Array|string} path The path of the property to get.
 * @returns {*} Returns the resolved value.
 */
function baseGet(object, path) {
  path = castPath(path, object);

  var index = 0,
      length = path.length;

  while (object != null && index < length) {
    object = object[toKey(path[index++])];
  }
  return (index && index == length) ? object : undefined;
}

module.exports = baseGet;

},{"./_castPath":209,"./_toKey":273}],186:[function(require,module,exports){
var arrayPush = require('./_arrayPush'),
    isArray = require('./isArray');

/**
 * The base implementation of `getAllKeys` and `getAllKeysIn` which uses
 * `keysFunc` and `symbolsFunc` to get the enumerable property names and
 * symbols of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {Function} keysFunc The function to get the keys of `object`.
 * @param {Function} symbolsFunc The function to get the symbols of `object`.
 * @returns {Array} Returns the array of property names and symbols.
 */
function baseGetAllKeys(object, keysFunc, symbolsFunc) {
  var result = keysFunc(object);
  return isArray(object) ? result : arrayPush(result, symbolsFunc(object));
}

module.exports = baseGetAllKeys;

},{"./_arrayPush":177,"./isArray":285}],187:[function(require,module,exports){
var Symbol = require('./_Symbol'),
    getRawTag = require('./_getRawTag'),
    objectToString = require('./_objectToString');

/** `Object#toString` result references. */
var nullTag = '[object Null]',
    undefinedTag = '[object Undefined]';

/** Built-in value references. */
var symToStringTag = Symbol ? Symbol.toStringTag : undefined;

/**
 * The base implementation of `getTag` without fallbacks for buggy environments.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the `toStringTag`.
 */
function baseGetTag(value) {
  if (value == null) {
    return value === undefined ? undefinedTag : nullTag;
  }
  return (symToStringTag && symToStringTag in Object(value))
    ? getRawTag(value)
    : objectToString(value);
}

module.exports = baseGetTag;

},{"./_Symbol":168,"./_getRawTag":223,"./_objectToString":257}],188:[function(require,module,exports){
/**
 * The base implementation of `_.hasIn` without support for deep paths.
 *
 * @private
 * @param {Object} [object] The object to query.
 * @param {Array|string} key The key to check.
 * @returns {boolean} Returns `true` if `key` exists, else `false`.
 */
function baseHasIn(object, key) {
  return object != null && key in Object(object);
}

module.exports = baseHasIn;

},{}],189:[function(require,module,exports){
var baseFindIndex = require('./_baseFindIndex'),
    baseIsNaN = require('./_baseIsNaN'),
    strictIndexOf = require('./_strictIndexOf');

/**
 * The base implementation of `_.indexOf` without `fromIndex` bounds checks.
 *
 * @private
 * @param {Array} array The array to inspect.
 * @param {*} value The value to search for.
 * @param {number} fromIndex The index to search from.
 * @returns {number} Returns the index of the matched value, else `-1`.
 */
function baseIndexOf(array, value, fromIndex) {
  return value === value
    ? strictIndexOf(array, value, fromIndex)
    : baseFindIndex(array, baseIsNaN, fromIndex);
}

module.exports = baseIndexOf;

},{"./_baseFindIndex":183,"./_baseIsNaN":194,"./_strictIndexOf":271}],190:[function(require,module,exports){
var baseGetTag = require('./_baseGetTag'),
    isObjectLike = require('./isObjectLike');

/** `Object#toString` result references. */
var argsTag = '[object Arguments]';

/**
 * The base implementation of `_.isArguments`.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an `arguments` object,
 */
function baseIsArguments(value) {
  return isObjectLike(value) && baseGetTag(value) == argsTag;
}

module.exports = baseIsArguments;

},{"./_baseGetTag":187,"./isObjectLike":292}],191:[function(require,module,exports){
var baseIsEqualDeep = require('./_baseIsEqualDeep'),
    isObjectLike = require('./isObjectLike');

/**
 * The base implementation of `_.isEqual` which supports partial comparisons
 * and tracks traversed objects.
 *
 * @private
 * @param {*} value The value to compare.
 * @param {*} other The other value to compare.
 * @param {boolean} bitmask The bitmask flags.
 *  1 - Unordered comparison
 *  2 - Partial comparison
 * @param {Function} [customizer] The function to customize comparisons.
 * @param {Object} [stack] Tracks traversed `value` and `other` objects.
 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
 */
function baseIsEqual(value, other, bitmask, customizer, stack) {
  if (value === other) {
    return true;
  }
  if (value == null || other == null || (!isObjectLike(value) && !isObjectLike(other))) {
    return value !== value && other !== other;
  }
  return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);
}

module.exports = baseIsEqual;

},{"./_baseIsEqualDeep":192,"./isObjectLike":292}],192:[function(require,module,exports){
var Stack = require('./_Stack'),
    equalArrays = require('./_equalArrays'),
    equalByTag = require('./_equalByTag'),
    equalObjects = require('./_equalObjects'),
    getTag = require('./_getTag'),
    isArray = require('./isArray'),
    isBuffer = require('./isBuffer'),
    isTypedArray = require('./isTypedArray');

/** Used to compose bitmasks for value comparisons. */
var COMPARE_PARTIAL_FLAG = 1;

/** `Object#toString` result references. */
var argsTag = '[object Arguments]',
    arrayTag = '[object Array]',
    objectTag = '[object Object]';

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * A specialized version of `baseIsEqual` for arrays and objects which performs
 * deep comparisons and tracks traversed objects enabling objects with circular
 * references to be compared.
 *
 * @private
 * @param {Object} object The object to compare.
 * @param {Object} other The other object to compare.
 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
 * @param {Function} customizer The function to customize comparisons.
 * @param {Function} equalFunc The function to determine equivalents of values.
 * @param {Object} [stack] Tracks traversed `object` and `other` objects.
 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
 */
function baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {
  var objIsArr = isArray(object),
      othIsArr = isArray(other),
      objTag = objIsArr ? arrayTag : getTag(object),
      othTag = othIsArr ? arrayTag : getTag(other);

  objTag = objTag == argsTag ? objectTag : objTag;
  othTag = othTag == argsTag ? objectTag : othTag;

  var objIsObj = objTag == objectTag,
      othIsObj = othTag == objectTag,
      isSameTag = objTag == othTag;

  if (isSameTag && isBuffer(object)) {
    if (!isBuffer(other)) {
      return false;
    }
    objIsArr = true;
    objIsObj = false;
  }
  if (isSameTag && !objIsObj) {
    stack || (stack = new Stack);
    return (objIsArr || isTypedArray(object))
      ? equalArrays(object, other, bitmask, customizer, equalFunc, stack)
      : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);
  }
  if (!(bitmask & COMPARE_PARTIAL_FLAG)) {
    var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),
        othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');

    if (objIsWrapped || othIsWrapped) {
      var objUnwrapped = objIsWrapped ? object.value() : object,
          othUnwrapped = othIsWrapped ? other.value() : other;

      stack || (stack = new Stack);
      return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
    }
  }
  if (!isSameTag) {
    return false;
  }
  stack || (stack = new Stack);
  return equalObjects(object, other, bitmask, customizer, equalFunc, stack);
}

module.exports = baseIsEqualDeep;

},{"./_Stack":167,"./_equalArrays":215,"./_equalByTag":216,"./_equalObjects":217,"./_getTag":225,"./isArray":285,"./isBuffer":288,"./isTypedArray":294}],193:[function(require,module,exports){
var Stack = require('./_Stack'),
    baseIsEqual = require('./_baseIsEqual');

/** Used to compose bitmasks for value comparisons. */
var COMPARE_PARTIAL_FLAG = 1,
    COMPARE_UNORDERED_FLAG = 2;

/**
 * The base implementation of `_.isMatch` without support for iteratee shorthands.
 *
 * @private
 * @param {Object} object The object to inspect.
 * @param {Object} source The object of property values to match.
 * @param {Array} matchData The property names, values, and compare flags to match.
 * @param {Function} [customizer] The function to customize comparisons.
 * @returns {boolean} Returns `true` if `object` is a match, else `false`.
 */
function baseIsMatch(object, source, matchData, customizer) {
  var index = matchData.length,
      length = index,
      noCustomizer = !customizer;

  if (object == null) {
    return !length;
  }
  object = Object(object);
  while (index--) {
    var data = matchData[index];
    if ((noCustomizer && data[2])
          ? data[1] !== object[data[0]]
          : !(data[0] in object)
        ) {
      return false;
    }
  }
  while (++index < length) {
    data = matchData[index];
    var key = data[0],
        objValue = object[key],
        srcValue = data[1];

    if (noCustomizer && data[2]) {
      if (objValue === undefined && !(key in object)) {
        return false;
      }
    } else {
      var stack = new Stack;
      if (customizer) {
        var result = customizer(objValue, srcValue, key, object, source, stack);
      }
      if (!(result === undefined
            ? baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG, customizer, stack)
            : result
          )) {
        return false;
      }
    }
  }
  return true;
}

module.exports = baseIsMatch;

},{"./_Stack":167,"./_baseIsEqual":191}],194:[function(require,module,exports){
/**
 * The base implementation of `_.isNaN` without support for number objects.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
 */
function baseIsNaN(value) {
  return value !== value;
}

module.exports = baseIsNaN;

},{}],195:[function(require,module,exports){
var isFunction = require('./isFunction'),
    isMasked = require('./_isMasked'),
    isObject = require('./isObject'),
    toSource = require('./_toSource');

/**
 * Used to match `RegExp`
 * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
 */
var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;

/** Used to detect host constructors (Safari). */
var reIsHostCtor = /^\[object .+?Constructor\]$/;

/** Used for built-in method references. */
var funcProto = Function.prototype,
    objectProto = Object.prototype;

/** Used to resolve the decompiled source of functions. */
var funcToString = funcProto.toString;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/** Used to detect if a method is native. */
var reIsNative = RegExp('^' +
  funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\$&')
  .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$'
);

/**
 * The base implementation of `_.isNative` without bad shim checks.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a native function,
 *  else `false`.
 */
function baseIsNative(value) {
  if (!isObject(value) || isMasked(value)) {
    return false;
  }
  var pattern = isFunction(value) ? reIsNative : reIsHostCtor;
  return pattern.test(toSource(value));
}

module.exports = baseIsNative;

},{"./_isMasked":238,"./_toSource":274,"./isFunction":289,"./isObject":291}],196:[function(require,module,exports){
var baseGetTag = require('./_baseGetTag'),
    isLength = require('./isLength'),
    isObjectLike = require('./isObjectLike');

/** `Object#toString` result references. */
var argsTag = '[object Arguments]',
    arrayTag = '[object Array]',
    boolTag = '[object Boolean]',
    dateTag = '[object Date]',
    errorTag = '[object Error]',
    funcTag = '[object Function]',
    mapTag = '[object Map]',
    numberTag = '[object Number]',
    objectTag = '[object Object]',
    regexpTag = '[object RegExp]',
    setTag = '[object Set]',
    stringTag = '[object String]',
    weakMapTag = '[object WeakMap]';

var arrayBufferTag = '[object ArrayBuffer]',
    dataViewTag = '[object DataView]',
    float32Tag = '[object Float32Array]',
    float64Tag = '[object Float64Array]',
    int8Tag = '[object Int8Array]',
    int16Tag = '[object Int16Array]',
    int32Tag = '[object Int32Array]',
    uint8Tag = '[object Uint8Array]',
    uint8ClampedTag = '[object Uint8ClampedArray]',
    uint16Tag = '[object Uint16Array]',
    uint32Tag = '[object Uint32Array]';

/** Used to identify `toStringTag` values of typed arrays. */
var typedArrayTags = {};
typedArrayTags[float32Tag] = typedArrayTags[float64Tag] =
typedArrayTags[int8Tag] = typedArrayTags[int16Tag] =
typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =
typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =
typedArrayTags[uint32Tag] = true;
typedArrayTags[argsTag] = typedArrayTags[arrayTag] =
typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =
typedArrayTags[dataViewTag] = typedArrayTags[dateTag] =
typedArrayTags[errorTag] = typedArrayTags[funcTag] =
typedArrayTags[mapTag] = typedArrayTags[numberTag] =
typedArrayTags[objectTag] = typedArrayTags[regexpTag] =
typedArrayTags[setTag] = typedArrayTags[stringTag] =
typedArrayTags[weakMapTag] = false;

/**
 * The base implementation of `_.isTypedArray` without Node.js optimizations.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
 */
function baseIsTypedArray(value) {
  return isObjectLike(value) &&
    isLength(value.length) && !!typedArrayTags[baseGetTag(value)];
}

module.exports = baseIsTypedArray;

},{"./_baseGetTag":187,"./isLength":290,"./isObjectLike":292}],197:[function(require,module,exports){
var baseMatches = require('./_baseMatches'),
    baseMatchesProperty = require('./_baseMatchesProperty'),
    identity = require('./identity'),
    isArray = require('./isArray'),
    property = require('./property');

/**
 * The base implementation of `_.iteratee`.
 *
 * @private
 * @param {*} [value=_.identity] The value to convert to an iteratee.
 * @returns {Function} Returns the iteratee.
 */
function baseIteratee(value) {
  // Don't store the `typeof` result in a variable to avoid a JIT bug in Safari 9.
  // See https://bugs.webkit.org/show_bug.cgi?id=156034 for more details.
  if (typeof value == 'function') {
    return value;
  }
  if (value == null) {
    return identity;
  }
  if (typeof value == 'object') {
    return isArray(value)
      ? baseMatchesProperty(value[0], value[1])
      : baseMatches(value);
  }
  return property(value);
}

module.exports = baseIteratee;

},{"./_baseMatches":199,"./_baseMatchesProperty":200,"./identity":283,"./isArray":285,"./property":297}],198:[function(require,module,exports){
var isPrototype = require('./_isPrototype'),
    nativeKeys = require('./_nativeKeys');

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 */
function baseKeys(object) {
  if (!isPrototype(object)) {
    return nativeKeys(object);
  }
  var result = [];
  for (var key in Object(object)) {
    if (hasOwnProperty.call(object, key) && key != 'constructor') {
      result.push(key);
    }
  }
  return result;
}

module.exports = baseKeys;

},{"./_isPrototype":239,"./_nativeKeys":255}],199:[function(require,module,exports){
var baseIsMatch = require('./_baseIsMatch'),
    getMatchData = require('./_getMatchData'),
    matchesStrictComparable = require('./_matchesStrictComparable');

/**
 * The base implementation of `_.matches` which doesn't clone `source`.
 *
 * @private
 * @param {Object} source The object of property values to match.
 * @returns {Function} Returns the new spec function.
 */
function baseMatches(source) {
  var matchData = getMatchData(source);
  if (matchData.length == 1 && matchData[0][2]) {
    return matchesStrictComparable(matchData[0][0], matchData[0][1]);
  }
  return function(object) {
    return object === source || baseIsMatch(object, source, matchData);
  };
}

module.exports = baseMatches;

},{"./_baseIsMatch":193,"./_getMatchData":221,"./_matchesStrictComparable":252}],200:[function(require,module,exports){
var baseIsEqual = require('./_baseIsEqual'),
    get = require('./get'),
    hasIn = require('./hasIn'),
    isKey = require('./_isKey'),
    isStrictComparable = require('./_isStrictComparable'),
    matchesStrictComparable = require('./_matchesStrictComparable'),
    toKey = require('./_toKey');

/** Used to compose bitmasks for value comparisons. */
var COMPARE_PARTIAL_FLAG = 1,
    COMPARE_UNORDERED_FLAG = 2;

/**
 * The base implementation of `_.matchesProperty` which doesn't clone `srcValue`.
 *
 * @private
 * @param {string} path The path of the property to get.
 * @param {*} srcValue The value to match.
 * @returns {Function} Returns the new spec function.
 */
function baseMatchesProperty(path, srcValue) {
  if (isKey(path) && isStrictComparable(srcValue)) {
    return matchesStrictComparable(toKey(path), srcValue);
  }
  return function(object) {
    var objValue = get(object, path);
    return (objValue === undefined && objValue === srcValue)
      ? hasIn(object, path)
      : baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG);
  };
}

module.exports = baseMatchesProperty;

},{"./_baseIsEqual":191,"./_isKey":236,"./_isStrictComparable":240,"./_matchesStrictComparable":252,"./_toKey":273,"./get":281,"./hasIn":282}],201:[function(require,module,exports){
/**
 * The base implementation of `_.property` without support for deep paths.
 *
 * @private
 * @param {string} key The key of the property to get.
 * @returns {Function} Returns the new accessor function.
 */
function baseProperty(key) {
  return function(object) {
    return object == null ? undefined : object[key];
  };
}

module.exports = baseProperty;

},{}],202:[function(require,module,exports){
var baseGet = require('./_baseGet');

/**
 * A specialized version of `baseProperty` which supports deep paths.
 *
 * @private
 * @param {Array|string} path The path of the property to get.
 * @returns {Function} Returns the new accessor function.
 */
function basePropertyDeep(path) {
  return function(object) {
    return baseGet(object, path);
  };
}

module.exports = basePropertyDeep;

},{"./_baseGet":185}],203:[function(require,module,exports){
var identity = require('./identity'),
    overRest = require('./_overRest'),
    setToString = require('./_setToString');

/**
 * The base implementation of `_.rest` which doesn't validate or coerce arguments.
 *
 * @private
 * @param {Function} func The function to apply a rest parameter to.
 * @param {number} [start=func.length-1] The start position of the rest parameter.
 * @returns {Function} Returns the new function.
 */
function baseRest(func, start) {
  return setToString(overRest(func, start, identity), func + '');
}

module.exports = baseRest;

},{"./_overRest":259,"./_setToString":264,"./identity":283}],204:[function(require,module,exports){
var constant = require('./constant'),
    defineProperty = require('./_defineProperty'),
    identity = require('./identity');

/**
 * The base implementation of `setToString` without support for hot loop shorting.
 *
 * @private
 * @param {Function} func The function to modify.
 * @param {Function} string The `toString` result.
 * @returns {Function} Returns `func`.
 */
var baseSetToString = !defineProperty ? identity : function(func, string) {
  return defineProperty(func, 'toString', {
    'configurable': true,
    'enumerable': false,
    'value': constant(string),
    'writable': true
  });
};

module.exports = baseSetToString;

},{"./_defineProperty":214,"./constant":276,"./identity":283}],205:[function(require,module,exports){
/**
 * The base implementation of `_.times` without support for iteratee shorthands
 * or max array length checks.
 *
 * @private
 * @param {number} n The number of times to invoke `iteratee`.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array} Returns the array of results.
 */
function baseTimes(n, iteratee) {
  var index = -1,
      result = Array(n);

  while (++index < n) {
    result[index] = iteratee(index);
  }
  return result;
}

module.exports = baseTimes;

},{}],206:[function(require,module,exports){
var Symbol = require('./_Symbol'),
    arrayMap = require('./_arrayMap'),
    isArray = require('./isArray'),
    isSymbol = require('./isSymbol');

/** Used as references for various `Number` constants. */
var INFINITY = 1 / 0;

/** Used to convert symbols to primitives and strings. */
var symbolProto = Symbol ? Symbol.prototype : undefined,
    symbolToString = symbolProto ? symbolProto.toString : undefined;

/**
 * The base implementation of `_.toString` which doesn't convert nullish
 * values to empty strings.
 *
 * @private
 * @param {*} value The value to process.
 * @returns {string} Returns the string.
 */
function baseToString(value) {
  // Exit early for strings to avoid a performance hit in some environments.
  if (typeof value == 'string') {
    return value;
  }
  if (isArray(value)) {
    // Recursively convert values (susceptible to call stack limits).
    return arrayMap(value, baseToString) + '';
  }
  if (isSymbol(value)) {
    return symbolToString ? symbolToString.call(value) : '';
  }
  var result = (value + '');
  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
}

module.exports = baseToString;

},{"./_Symbol":168,"./_arrayMap":176,"./isArray":285,"./isSymbol":293}],207:[function(require,module,exports){
/**
 * The base implementation of `_.unary` without support for storing metadata.
 *
 * @private
 * @param {Function} func The function to cap arguments for.
 * @returns {Function} Returns the new capped function.
 */
function baseUnary(func) {
  return function(value) {
    return func(value);
  };
}

module.exports = baseUnary;

},{}],208:[function(require,module,exports){
/**
 * Checks if a `cache` value for `key` exists.
 *
 * @private
 * @param {Object} cache The cache to query.
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function cacheHas(cache, key) {
  return cache.has(key);
}

module.exports = cacheHas;

},{}],209:[function(require,module,exports){
var isArray = require('./isArray'),
    isKey = require('./_isKey'),
    stringToPath = require('./_stringToPath'),
    toString = require('./toString');

/**
 * Casts `value` to a path array if it's not one.
 *
 * @private
 * @param {*} value The value to inspect.
 * @param {Object} [object] The object to query keys on.
 * @returns {Array} Returns the cast property path array.
 */
function castPath(value, object) {
  if (isArray(value)) {
    return value;
  }
  return isKey(value, object) ? [value] : stringToPath(toString(value));
}

module.exports = castPath;

},{"./_isKey":236,"./_stringToPath":272,"./isArray":285,"./toString":303}],210:[function(require,module,exports){
var assignValue = require('./_assignValue'),
    baseAssignValue = require('./_baseAssignValue');

/**
 * Copies properties of `source` to `object`.
 *
 * @private
 * @param {Object} source The object to copy properties from.
 * @param {Array} props The property identifiers to copy.
 * @param {Object} [object={}] The object to copy properties to.
 * @param {Function} [customizer] The function to customize copied values.
 * @returns {Object} Returns `object`.
 */
function copyObject(source, props, object, customizer) {
  var isNew = !object;
  object || (object = {});

  var index = -1,
      length = props.length;

  while (++index < length) {
    var key = props[index];

    var newValue = customizer
      ? customizer(object[key], source[key], key, object, source)
      : undefined;

    if (newValue === undefined) {
      newValue = source[key];
    }
    if (isNew) {
      baseAssignValue(object, key, newValue);
    } else {
      assignValue(object, key, newValue);
    }
  }
  return object;
}

module.exports = copyObject;

},{"./_assignValue":179,"./_baseAssignValue":181}],211:[function(require,module,exports){
var root = require('./_root');

/** Used to detect overreaching core-js shims. */
var coreJsData = root['__core-js_shared__'];

module.exports = coreJsData;

},{"./_root":260}],212:[function(require,module,exports){
var baseRest = require('./_baseRest'),
    isIterateeCall = require('./_isIterateeCall');

/**
 * Creates a function like `_.assign`.
 *
 * @private
 * @param {Function} assigner The function to assign values.
 * @returns {Function} Returns the new assigner function.
 */
function createAssigner(assigner) {
  return baseRest(function(object, sources) {
    var index = -1,
        length = sources.length,
        customizer = length > 1 ? sources[length - 1] : undefined,
        guard = length > 2 ? sources[2] : undefined;

    customizer = (assigner.length > 3 && typeof customizer == 'function')
      ? (length--, customizer)
      : undefined;

    if (guard && isIterateeCall(sources[0], sources[1], guard)) {
      customizer = length < 3 ? undefined : customizer;
      length = 1;
    }
    object = Object(object);
    while (++index < length) {
      var source = sources[index];
      if (source) {
        assigner(object, source, index, customizer);
      }
    }
    return object;
  });
}

module.exports = createAssigner;

},{"./_baseRest":203,"./_isIterateeCall":235}],213:[function(require,module,exports){
var baseIteratee = require('./_baseIteratee'),
    isArrayLike = require('./isArrayLike'),
    keys = require('./keys');

/**
 * Creates a `_.find` or `_.findLast` function.
 *
 * @private
 * @param {Function} findIndexFunc The function to find the collection index.
 * @returns {Function} Returns the new find function.
 */
function createFind(findIndexFunc) {
  return function(collection, predicate, fromIndex) {
    var iterable = Object(collection);
    if (!isArrayLike(collection)) {
      var iteratee = baseIteratee(predicate, 3);
      collection = keys(collection);
      predicate = function(key) { return iteratee(iterable[key], key, iterable); };
    }
    var index = findIndexFunc(collection, predicate, fromIndex);
    return index > -1 ? iterable[iteratee ? collection[index] : index] : undefined;
  };
}

module.exports = createFind;

},{"./_baseIteratee":197,"./isArrayLike":286,"./keys":295}],214:[function(require,module,exports){
var getNative = require('./_getNative');

var defineProperty = (function() {
  try {
    var func = getNative(Object, 'defineProperty');
    func({}, '', {});
    return func;
  } catch (e) {}
}());

module.exports = defineProperty;

},{"./_getNative":222}],215:[function(require,module,exports){
var SetCache = require('./_SetCache'),
    arraySome = require('./_arraySome'),
    cacheHas = require('./_cacheHas');

/** Used to compose bitmasks for value comparisons. */
var COMPARE_PARTIAL_FLAG = 1,
    COMPARE_UNORDERED_FLAG = 2;

/**
 * A specialized version of `baseIsEqualDeep` for arrays with support for
 * partial deep comparisons.
 *
 * @private
 * @param {Array} array The array to compare.
 * @param {Array} other The other array to compare.
 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
 * @param {Function} customizer The function to customize comparisons.
 * @param {Function} equalFunc The function to determine equivalents of values.
 * @param {Object} stack Tracks traversed `array` and `other` objects.
 * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.
 */
function equalArrays(array, other, bitmask, customizer, equalFunc, stack) {
  var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
      arrLength = array.length,
      othLength = other.length;

  if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
    return false;
  }
  // Check that cyclic values are equal.
  var arrStacked = stack.get(array);
  var othStacked = stack.get(other);
  if (arrStacked && othStacked) {
    return arrStacked == other && othStacked == array;
  }
  var index = -1,
      result = true,
      seen = (bitmask & COMPARE_UNORDERED_FLAG) ? new SetCache : undefined;

  stack.set(array, other);
  stack.set(other, array);

  // Ignore non-index properties.
  while (++index < arrLength) {
    var arrValue = array[index],
        othValue = other[index];

    if (customizer) {
      var compared = isPartial
        ? customizer(othValue, arrValue, index, other, array, stack)
        : customizer(arrValue, othValue, index, array, other, stack);
    }
    if (compared !== undefined) {
      if (compared) {
        continue;
      }
      result = false;
      break;
    }
    // Recursively compare arrays (susceptible to call stack limits).
    if (seen) {
      if (!arraySome(other, function(othValue, othIndex) {
            if (!cacheHas(seen, othIndex) &&
                (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
              return seen.push(othIndex);
            }
          })) {
        result = false;
        break;
      }
    } else if (!(
          arrValue === othValue ||
            equalFunc(arrValue, othValue, bitmask, customizer, stack)
        )) {
      result = false;
      break;
    }
  }
  stack['delete'](array);
  stack['delete'](other);
  return result;
}

module.exports = equalArrays;

},{"./_SetCache":166,"./_arraySome":178,"./_cacheHas":208}],216:[function(require,module,exports){
var Symbol = require('./_Symbol'),
    Uint8Array = require('./_Uint8Array'),
    eq = require('./eq'),
    equalArrays = require('./_equalArrays'),
    mapToArray = require('./_mapToArray'),
    setToArray = require('./_setToArray');

/** Used to compose bitmasks for value comparisons. */
var COMPARE_PARTIAL_FLAG = 1,
    COMPARE_UNORDERED_FLAG = 2;

/** `Object#toString` result references. */
var boolTag = '[object Boolean]',
    dateTag = '[object Date]',
    errorTag = '[object Error]',
    mapTag = '[object Map]',
    numberTag = '[object Number]',
    regexpTag = '[object RegExp]',
    setTag = '[object Set]',
    stringTag = '[object String]',
    symbolTag = '[object Symbol]';

var arrayBufferTag = '[object ArrayBuffer]',
    dataViewTag = '[object DataView]';

/** Used to convert symbols to primitives and strings. */
var symbolProto = Symbol ? Symbol.prototype : undefined,
    symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;

/**
 * A specialized version of `baseIsEqualDeep` for comparing objects of
 * the same `toStringTag`.
 *
 * **Note:** This function only supports comparing values with tags of
 * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
 *
 * @private
 * @param {Object} object The object to compare.
 * @param {Object} other The other object to compare.
 * @param {string} tag The `toStringTag` of the objects to compare.
 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
 * @param {Function} customizer The function to customize comparisons.
 * @param {Function} equalFunc The function to determine equivalents of values.
 * @param {Object} stack Tracks traversed `object` and `other` objects.
 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
 */
function equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {
  switch (tag) {
    case dataViewTag:
      if ((object.byteLength != other.byteLength) ||
          (object.byteOffset != other.byteOffset)) {
        return false;
      }
      object = object.buffer;
      other = other.buffer;

    case arrayBufferTag:
      if ((object.byteLength != other.byteLength) ||
          !equalFunc(new Uint8Array(object), new Uint8Array(other))) {
        return false;
      }
      return true;

    case boolTag:
    case dateTag:
    case numberTag:
      // Coerce booleans to `1` or `0` and dates to milliseconds.
      // Invalid dates are coerced to `NaN`.
      return eq(+object, +other);

    case errorTag:
      return object.name == other.name && object.message == other.message;

    case regexpTag:
    case stringTag:
      // Coerce regexes to strings and treat strings, primitives and objects,
      // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring
      // for more details.
      return object == (other + '');

    case mapTag:
      var convert = mapToArray;

    case setTag:
      var isPartial = bitmask & COMPARE_PARTIAL_FLAG;
      convert || (convert = setToArray);

      if (object.size != other.size && !isPartial) {
        return false;
      }
      // Assume cyclic values are equal.
      var stacked = stack.get(object);
      if (stacked) {
        return stacked == other;
      }
      bitmask |= COMPARE_UNORDERED_FLAG;

      // Recursively compare objects (susceptible to call stack limits).
      stack.set(object, other);
      var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);
      stack['delete'](object);
      return result;

    case symbolTag:
      if (symbolValueOf) {
        return symbolValueOf.call(object) == symbolValueOf.call(other);
      }
  }
  return false;
}

module.exports = equalByTag;

},{"./_Symbol":168,"./_Uint8Array":169,"./_equalArrays":215,"./_mapToArray":251,"./_setToArray":263,"./eq":278}],217:[function(require,module,exports){
var getAllKeys = require('./_getAllKeys');

/** Used to compose bitmasks for value comparisons. */
var COMPARE_PARTIAL_FLAG = 1;

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * A specialized version of `baseIsEqualDeep` for objects with support for
 * partial deep comparisons.
 *
 * @private
 * @param {Object} object The object to compare.
 * @param {Object} other The other object to compare.
 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
 * @param {Function} customizer The function to customize comparisons.
 * @param {Function} equalFunc The function to determine equivalents of values.
 * @param {Object} stack Tracks traversed `object` and `other` objects.
 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
 */
function equalObjects(object, other, bitmask, customizer, equalFunc, stack) {
  var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
      objProps = getAllKeys(object),
      objLength = objProps.length,
      othProps = getAllKeys(other),
      othLength = othProps.length;

  if (objLength != othLength && !isPartial) {
    return false;
  }
  var index = objLength;
  while (index--) {
    var key = objProps[index];
    if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {
      return false;
    }
  }
  // Check that cyclic values are equal.
  var objStacked = stack.get(object);
  var othStacked = stack.get(other);
  if (objStacked && othStacked) {
    return objStacked == other && othStacked == object;
  }
  var result = true;
  stack.set(object, other);
  stack.set(other, object);

  var skipCtor = isPartial;
  while (++index < objLength) {
    key = objProps[index];
    var objValue = object[key],
        othValue = other[key];

    if (customizer) {
      var compared = isPartial
        ? customizer(othValue, objValue, key, other, object, stack)
        : customizer(objValue, othValue, key, object, other, stack);
    }
    // Recursively compare objects (susceptible to call stack limits).
    if (!(compared === undefined
          ? (objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack))
          : compared
        )) {
      result = false;
      break;
    }
    skipCtor || (skipCtor = key == 'constructor');
  }
  if (result && !skipCtor) {
    var objCtor = object.constructor,
        othCtor = other.constructor;

    // Non `Object` object instances with different constructors are not equal.
    if (objCtor != othCtor &&
        ('constructor' in object && 'constructor' in other) &&
        !(typeof objCtor == 'function' && objCtor instanceof objCtor &&
          typeof othCtor == 'function' && othCtor instanceof othCtor)) {
      result = false;
    }
  }
  stack['delete'](object);
  stack['delete'](other);
  return result;
}

module.exports = equalObjects;

},{"./_getAllKeys":219}],218:[function(require,module,exports){
(function (global){
/** Detect free variable `global` from Node.js. */
var freeGlobal = typeof global == 'object' && global && global.Object === Object && global;

module.exports = freeGlobal;

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{}],219:[function(require,module,exports){
var baseGetAllKeys = require('./_baseGetAllKeys'),
    getSymbols = require('./_getSymbols'),
    keys = require('./keys');

/**
 * Creates an array of own enumerable property names and symbols of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names and symbols.
 */
function getAllKeys(object) {
  return baseGetAllKeys(object, keys, getSymbols);
}

module.exports = getAllKeys;

},{"./_baseGetAllKeys":186,"./_getSymbols":224,"./keys":295}],220:[function(require,module,exports){
var isKeyable = require('./_isKeyable');

/**
 * Gets the data for `map`.
 *
 * @private
 * @param {Object} map The map to query.
 * @param {string} key The reference key.
 * @returns {*} Returns the map data.
 */
function getMapData(map, key) {
  var data = map.__data__;
  return isKeyable(key)
    ? data[typeof key == 'string' ? 'string' : 'hash']
    : data.map;
}

module.exports = getMapData;

},{"./_isKeyable":237}],221:[function(require,module,exports){
var isStrictComparable = require('./_isStrictComparable'),
    keys = require('./keys');

/**
 * Gets the property names, values, and compare flags of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the match data of `object`.
 */
function getMatchData(object) {
  var result = keys(object),
      length = result.length;

  while (length--) {
    var key = result[length],
        value = object[key];

    result[length] = [key, value, isStrictComparable(value)];
  }
  return result;
}

module.exports = getMatchData;

},{"./_isStrictComparable":240,"./keys":295}],222:[function(require,module,exports){
var baseIsNative = require('./_baseIsNative'),
    getValue = require('./_getValue');

/**
 * Gets the native function at `key` of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {string} key The key of the method to get.
 * @returns {*} Returns the function if it's native, else `undefined`.
 */
function getNative(object, key) {
  var value = getValue(object, key);
  return baseIsNative(value) ? value : undefined;
}

module.exports = getNative;

},{"./_baseIsNative":195,"./_getValue":226}],223:[function(require,module,exports){
var Symbol = require('./_Symbol');

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * Used to resolve the
 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
 * of values.
 */
var nativeObjectToString = objectProto.toString;

/** Built-in value references. */
var symToStringTag = Symbol ? Symbol.toStringTag : undefined;

/**
 * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the raw `toStringTag`.
 */
function getRawTag(value) {
  var isOwn = hasOwnProperty.call(value, symToStringTag),
      tag = value[symToStringTag];

  try {
    value[symToStringTag] = undefined;
    var unmasked = true;
  } catch (e) {}

  var result = nativeObjectToString.call(value);
  if (unmasked) {
    if (isOwn) {
      value[symToStringTag] = tag;
    } else {
      delete value[symToStringTag];
    }
  }
  return result;
}

module.exports = getRawTag;

},{"./_Symbol":168}],224:[function(require,module,exports){
var arrayFilter = require('./_arrayFilter'),
    stubArray = require('./stubArray');

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Built-in value references. */
var propertyIsEnumerable = objectProto.propertyIsEnumerable;

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeGetSymbols = Object.getOwnPropertySymbols;

/**
 * Creates an array of the own enumerable symbols of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of symbols.
 */
var getSymbols = !nativeGetSymbols ? stubArray : function(object) {
  if (object == null) {
    return [];
  }
  object = Object(object);
  return arrayFilter(nativeGetSymbols(object), function(symbol) {
    return propertyIsEnumerable.call(object, symbol);
  });
};

module.exports = getSymbols;

},{"./_arrayFilter":172,"./stubArray":298}],225:[function(require,module,exports){
var DataView = require('./_DataView'),
    Map = require('./_Map'),
    Promise = require('./_Promise'),
    Set = require('./_Set'),
    WeakMap = require('./_WeakMap'),
    baseGetTag = require('./_baseGetTag'),
    toSource = require('./_toSource');

/** `Object#toString` result references. */
var mapTag = '[object Map]',
    objectTag = '[object Object]',
    promiseTag = '[object Promise]',
    setTag = '[object Set]',
    weakMapTag = '[object WeakMap]';

var dataViewTag = '[object DataView]';

/** Used to detect maps, sets, and weakmaps. */
var dataViewCtorString = toSource(DataView),
    mapCtorString = toSource(Map),
    promiseCtorString = toSource(Promise),
    setCtorString = toSource(Set),
    weakMapCtorString = toSource(WeakMap);

/**
 * Gets the `toStringTag` of `value`.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the `toStringTag`.
 */
var getTag = baseGetTag;

// Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.
if ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||
    (Map && getTag(new Map) != mapTag) ||
    (Promise && getTag(Promise.resolve()) != promiseTag) ||
    (Set && getTag(new Set) != setTag) ||
    (WeakMap && getTag(new WeakMap) != weakMapTag)) {
  getTag = function(value) {
    var result = baseGetTag(value),
        Ctor = result == objectTag ? value.constructor : undefined,
        ctorString = Ctor ? toSource(Ctor) : '';

    if (ctorString) {
      switch (ctorString) {
        case dataViewCtorString: return dataViewTag;
        case mapCtorString: return mapTag;
        case promiseCtorString: return promiseTag;
        case setCtorString: return setTag;
        case weakMapCtorString: return weakMapTag;
      }
    }
    return result;
  };
}

module.exports = getTag;

},{"./_DataView":159,"./_Map":162,"./_Promise":164,"./_Set":165,"./_WeakMap":170,"./_baseGetTag":187,"./_toSource":274}],226:[function(require,module,exports){
/**
 * Gets the value at `key` of `object`.
 *
 * @private
 * @param {Object} [object] The object to query.
 * @param {string} key The key of the property to get.
 * @returns {*} Returns the property value.
 */
function getValue(object, key) {
  return object == null ? undefined : object[key];
}

module.exports = getValue;

},{}],227:[function(require,module,exports){
var castPath = require('./_castPath'),
    isArguments = require('./isArguments'),
    isArray = require('./isArray'),
    isIndex = require('./_isIndex'),
    isLength = require('./isLength'),
    toKey = require('./_toKey');

/**
 * Checks if `path` exists on `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {Array|string} path The path to check.
 * @param {Function} hasFunc The function to check properties.
 * @returns {boolean} Returns `true` if `path` exists, else `false`.
 */
function hasPath(object, path, hasFunc) {
  path = castPath(path, object);

  var index = -1,
      length = path.length,
      result = false;

  while (++index < length) {
    var key = toKey(path[index]);
    if (!(result = object != null && hasFunc(object, key))) {
      break;
    }
    object = object[key];
  }
  if (result || ++index != length) {
    return result;
  }
  length = object == null ? 0 : object.length;
  return !!length && isLength(length) && isIndex(key, length) &&
    (isArray(object) || isArguments(object));
}

module.exports = hasPath;

},{"./_castPath":209,"./_isIndex":234,"./_toKey":273,"./isArguments":284,"./isArray":285,"./isLength":290}],228:[function(require,module,exports){
var nativeCreate = require('./_nativeCreate');

/**
 * Removes all key-value entries from the hash.
 *
 * @private
 * @name clear
 * @memberOf Hash
 */
function hashClear() {
  this.__data__ = nativeCreate ? nativeCreate(null) : {};
  this.size = 0;
}

module.exports = hashClear;

},{"./_nativeCreate":254}],229:[function(require,module,exports){
/**
 * Removes `key` and its value from the hash.
 *
 * @private
 * @name delete
 * @memberOf Hash
 * @param {Object} hash The hash to modify.
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */
function hashDelete(key) {
  var result = this.has(key) && delete this.__data__[key];
  this.size -= result ? 1 : 0;
  return result;
}

module.exports = hashDelete;

},{}],230:[function(require,module,exports){
var nativeCreate = require('./_nativeCreate');

/** Used to stand-in for `undefined` hash values. */
var HASH_UNDEFINED = '__lodash_hash_undefined__';

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * Gets the hash value for `key`.
 *
 * @private
 * @name get
 * @memberOf Hash
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */
function hashGet(key) {
  var data = this.__data__;
  if (nativeCreate) {
    var result = data[key];
    return result === HASH_UNDEFINED ? undefined : result;
  }
  return hasOwnProperty.call(data, key) ? data[key] : undefined;
}

module.exports = hashGet;

},{"./_nativeCreate":254}],231:[function(require,module,exports){
var nativeCreate = require('./_nativeCreate');

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * Checks if a hash value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf Hash
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function hashHas(key) {
  var data = this.__data__;
  return nativeCreate ? (data[key] !== undefined) : hasOwnProperty.call(data, key);
}

module.exports = hashHas;

},{"./_nativeCreate":254}],232:[function(require,module,exports){
var nativeCreate = require('./_nativeCreate');

/** Used to stand-in for `undefined` hash values. */
var HASH_UNDEFINED = '__lodash_hash_undefined__';

/**
 * Sets the hash `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf Hash
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the hash instance.
 */
function hashSet(key, value) {
  var data = this.__data__;
  this.size += this.has(key) ? 0 : 1;
  data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;
  return this;
}

module.exports = hashSet;

},{"./_nativeCreate":254}],233:[function(require,module,exports){
var Symbol = require('./_Symbol'),
    isArguments = require('./isArguments'),
    isArray = require('./isArray');

/** Built-in value references. */
var spreadableSymbol = Symbol ? Symbol.isConcatSpreadable : undefined;

/**
 * Checks if `value` is a flattenable `arguments` object or array.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is flattenable, else `false`.
 */
function isFlattenable(value) {
  return isArray(value) || isArguments(value) ||
    !!(spreadableSymbol && value && value[spreadableSymbol]);
}

module.exports = isFlattenable;

},{"./_Symbol":168,"./isArguments":284,"./isArray":285}],234:[function(require,module,exports){
/** Used as references for various `Number` constants. */
var MAX_SAFE_INTEGER = 9007199254740991;

/** Used to detect unsigned integer values. */
var reIsUint = /^(?:0|[1-9]\d*)$/;

/**
 * Checks if `value` is a valid array-like index.
 *
 * @private
 * @param {*} value The value to check.
 * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
 * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
 */
function isIndex(value, length) {
  var type = typeof value;
  length = length == null ? MAX_SAFE_INTEGER : length;

  return !!length &&
    (type == 'number' ||
      (type != 'symbol' && reIsUint.test(value))) &&
        (value > -1 && value % 1 == 0 && value < length);
}

module.exports = isIndex;

},{}],235:[function(require,module,exports){
var eq = require('./eq'),
    isArrayLike = require('./isArrayLike'),
    isIndex = require('./_isIndex'),
    isObject = require('./isObject');

/**
 * Checks if the given arguments are from an iteratee call.
 *
 * @private
 * @param {*} value The potential iteratee value argument.
 * @param {*} index The potential iteratee index or key argument.
 * @param {*} object The potential iteratee object argument.
 * @returns {boolean} Returns `true` if the arguments are from an iteratee call,
 *  else `false`.
 */
function isIterateeCall(value, index, object) {
  if (!isObject(object)) {
    return false;
  }
  var type = typeof index;
  if (type == 'number'
        ? (isArrayLike(object) && isIndex(index, object.length))
        : (type == 'string' && index in object)
      ) {
    return eq(object[index], value);
  }
  return false;
}

module.exports = isIterateeCall;

},{"./_isIndex":234,"./eq":278,"./isArrayLike":286,"./isObject":291}],236:[function(require,module,exports){
var isArray = require('./isArray'),
    isSymbol = require('./isSymbol');

/** Used to match property names within property paths. */
var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,
    reIsPlainProp = /^\w*$/;

/**
 * Checks if `value` is a property name and not a property path.
 *
 * @private
 * @param {*} value The value to check.
 * @param {Object} [object] The object to query keys on.
 * @returns {boolean} Returns `true` if `value` is a property name, else `false`.
 */
function isKey(value, object) {
  if (isArray(value)) {
    return false;
  }
  var type = typeof value;
  if (type == 'number' || type == 'symbol' || type == 'boolean' ||
      value == null || isSymbol(value)) {
    return true;
  }
  return reIsPlainProp.test(value) || !reIsDeepProp.test(value) ||
    (object != null && value in Object(object));
}

module.exports = isKey;

},{"./isArray":285,"./isSymbol":293}],237:[function(require,module,exports){
/**
 * Checks if `value` is suitable for use as unique object key.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
 */
function isKeyable(value) {
  var type = typeof value;
  return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')
    ? (value !== '__proto__')
    : (value === null);
}

module.exports = isKeyable;

},{}],238:[function(require,module,exports){
var coreJsData = require('./_coreJsData');

/** Used to detect methods masquerading as native. */
var maskSrcKey = (function() {
  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');
  return uid ? ('Symbol(src)_1.' + uid) : '';
}());

/**
 * Checks if `func` has its source masked.
 *
 * @private
 * @param {Function} func The function to check.
 * @returns {boolean} Returns `true` if `func` is masked, else `false`.
 */
function isMasked(func) {
  return !!maskSrcKey && (maskSrcKey in func);
}

module.exports = isMasked;

},{"./_coreJsData":211}],239:[function(require,module,exports){
/** Used for built-in method references. */
var objectProto = Object.prototype;

/**
 * Checks if `value` is likely a prototype object.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
 */
function isPrototype(value) {
  var Ctor = value && value.constructor,
      proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;

  return value === proto;
}

module.exports = isPrototype;

},{}],240:[function(require,module,exports){
var isObject = require('./isObject');

/**
 * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` if suitable for strict
 *  equality comparisons, else `false`.
 */
function isStrictComparable(value) {
  return value === value && !isObject(value);
}

module.exports = isStrictComparable;

},{"./isObject":291}],241:[function(require,module,exports){
/**
 * Removes all key-value entries from the list cache.
 *
 * @private
 * @name clear
 * @memberOf ListCache
 */
function listCacheClear() {
  this.__data__ = [];
  this.size = 0;
}

module.exports = listCacheClear;

},{}],242:[function(require,module,exports){
var assocIndexOf = require('./_assocIndexOf');

/** Used for built-in method references. */
var arrayProto = Array.prototype;

/** Built-in value references. */
var splice = arrayProto.splice;

/**
 * Removes `key` and its value from the list cache.
 *
 * @private
 * @name delete
 * @memberOf ListCache
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */
function listCacheDelete(key) {
  var data = this.__data__,
      index = assocIndexOf(data, key);

  if (index < 0) {
    return false;
  }
  var lastIndex = data.length - 1;
  if (index == lastIndex) {
    data.pop();
  } else {
    splice.call(data, index, 1);
  }
  --this.size;
  return true;
}

module.exports = listCacheDelete;

},{"./_assocIndexOf":180}],243:[function(require,module,exports){
var assocIndexOf = require('./_assocIndexOf');

/**
 * Gets the list cache value for `key`.
 *
 * @private
 * @name get
 * @memberOf ListCache
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */
function listCacheGet(key) {
  var data = this.__data__,
      index = assocIndexOf(data, key);

  return index < 0 ? undefined : data[index][1];
}

module.exports = listCacheGet;

},{"./_assocIndexOf":180}],244:[function(require,module,exports){
var assocIndexOf = require('./_assocIndexOf');

/**
 * Checks if a list cache value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf ListCache
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function listCacheHas(key) {
  return assocIndexOf(this.__data__, key) > -1;
}

module.exports = listCacheHas;

},{"./_assocIndexOf":180}],245:[function(require,module,exports){
var assocIndexOf = require('./_assocIndexOf');

/**
 * Sets the list cache `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf ListCache
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the list cache instance.
 */
function listCacheSet(key, value) {
  var data = this.__data__,
      index = assocIndexOf(data, key);

  if (index < 0) {
    ++this.size;
    data.push([key, value]);
  } else {
    data[index][1] = value;
  }
  return this;
}

module.exports = listCacheSet;

},{"./_assocIndexOf":180}],246:[function(require,module,exports){
var Hash = require('./_Hash'),
    ListCache = require('./_ListCache'),
    Map = require('./_Map');

/**
 * Removes all key-value entries from the map.
 *
 * @private
 * @name clear
 * @memberOf MapCache
 */
function mapCacheClear() {
  this.size = 0;
  this.__data__ = {
    'hash': new Hash,
    'map': new (Map || ListCache),
    'string': new Hash
  };
}

module.exports = mapCacheClear;

},{"./_Hash":160,"./_ListCache":161,"./_Map":162}],247:[function(require,module,exports){
var getMapData = require('./_getMapData');

/**
 * Removes `key` and its value from the map.
 *
 * @private
 * @name delete
 * @memberOf MapCache
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */
function mapCacheDelete(key) {
  var result = getMapData(this, key)['delete'](key);
  this.size -= result ? 1 : 0;
  return result;
}

module.exports = mapCacheDelete;

},{"./_getMapData":220}],248:[function(require,module,exports){
var getMapData = require('./_getMapData');

/**
 * Gets the map value for `key`.
 *
 * @private
 * @name get
 * @memberOf MapCache
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */
function mapCacheGet(key) {
  return getMapData(this, key).get(key);
}

module.exports = mapCacheGet;

},{"./_getMapData":220}],249:[function(require,module,exports){
var getMapData = require('./_getMapData');

/**
 * Checks if a map value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf MapCache
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function mapCacheHas(key) {
  return getMapData(this, key).has(key);
}

module.exports = mapCacheHas;

},{"./_getMapData":220}],250:[function(require,module,exports){
var getMapData = require('./_getMapData');

/**
 * Sets the map `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf MapCache
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the map cache instance.
 */
function mapCacheSet(key, value) {
  var data = getMapData(this, key),
      size = data.size;

  data.set(key, value);
  this.size += data.size == size ? 0 : 1;
  return this;
}

module.exports = mapCacheSet;

},{"./_getMapData":220}],251:[function(require,module,exports){
/**
 * Converts `map` to its key-value pairs.
 *
 * @private
 * @param {Object} map The map to convert.
 * @returns {Array} Returns the key-value pairs.
 */
function mapToArray(map) {
  var index = -1,
      result = Array(map.size);

  map.forEach(function(value, key) {
    result[++index] = [key, value];
  });
  return result;
}

module.exports = mapToArray;

},{}],252:[function(require,module,exports){
/**
 * A specialized version of `matchesProperty` for source values suitable
 * for strict equality comparisons, i.e. `===`.
 *
 * @private
 * @param {string} key The key of the property to get.
 * @param {*} srcValue The value to match.
 * @returns {Function} Returns the new spec function.
 */
function matchesStrictComparable(key, srcValue) {
  return function(object) {
    if (object == null) {
      return false;
    }
    return object[key] === srcValue &&
      (srcValue !== undefined || (key in Object(object)));
  };
}

module.exports = matchesStrictComparable;

},{}],253:[function(require,module,exports){
var memoize = require('./memoize');

/** Used as the maximum memoize cache size. */
var MAX_MEMOIZE_SIZE = 500;

/**
 * A specialized version of `_.memoize` which clears the memoized function's
 * cache when it exceeds `MAX_MEMOIZE_SIZE`.
 *
 * @private
 * @param {Function} func The function to have its output memoized.
 * @returns {Function} Returns the new memoized function.
 */
function memoizeCapped(func) {
  var result = memoize(func, function(key) {
    if (cache.size === MAX_MEMOIZE_SIZE) {
      cache.clear();
    }
    return key;
  });

  var cache = result.cache;
  return result;
}

module.exports = memoizeCapped;

},{"./memoize":296}],254:[function(require,module,exports){
var getNative = require('./_getNative');

/* Built-in method references that are verified to be native. */
var nativeCreate = getNative(Object, 'create');

module.exports = nativeCreate;

},{"./_getNative":222}],255:[function(require,module,exports){
var overArg = require('./_overArg');

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeKeys = overArg(Object.keys, Object);

module.exports = nativeKeys;

},{"./_overArg":258}],256:[function(require,module,exports){
var freeGlobal = require('./_freeGlobal');

/** Detect free variable `exports`. */
var freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;

/** Detect free variable `module`. */
var freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;

/** Detect the popular CommonJS extension `module.exports`. */
var moduleExports = freeModule && freeModule.exports === freeExports;

/** Detect free variable `process` from Node.js. */
var freeProcess = moduleExports && freeGlobal.process;

/** Used to access faster Node.js helpers. */
var nodeUtil = (function() {
  try {
    // Use `util.types` for Node.js 10+.
    var types = freeModule && freeModule.require && freeModule.require('util').types;

    if (types) {
      return types;
    }

    // Legacy `process.binding('util')` for Node.js < 10.
    return freeProcess && freeProcess.binding && freeProcess.binding('util');
  } catch (e) {}
}());

module.exports = nodeUtil;

},{"./_freeGlobal":218}],257:[function(require,module,exports){
/** Used for built-in method references. */
var objectProto = Object.prototype;

/**
 * Used to resolve the
 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
 * of values.
 */
var nativeObjectToString = objectProto.toString;

/**
 * Converts `value` to a string using `Object.prototype.toString`.
 *
 * @private
 * @param {*} value The value to convert.
 * @returns {string} Returns the converted string.
 */
function objectToString(value) {
  return nativeObjectToString.call(value);
}

module.exports = objectToString;

},{}],258:[function(require,module,exports){
/**
 * Creates a unary function that invokes `func` with its argument transformed.
 *
 * @private
 * @param {Function} func The function to wrap.
 * @param {Function} transform The argument transform.
 * @returns {Function} Returns the new function.
 */
function overArg(func, transform) {
  return function(arg) {
    return func(transform(arg));
  };
}

module.exports = overArg;

},{}],259:[function(require,module,exports){
var apply = require('./_apply');

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeMax = Math.max;

/**
 * A specialized version of `baseRest` which transforms the rest array.
 *
 * @private
 * @param {Function} func The function to apply a rest parameter to.
 * @param {number} [start=func.length-1] The start position of the rest parameter.
 * @param {Function} transform The rest array transform.
 * @returns {Function} Returns the new function.
 */
function overRest(func, start, transform) {
  start = nativeMax(start === undefined ? (func.length - 1) : start, 0);
  return function() {
    var args = arguments,
        index = -1,
        length = nativeMax(args.length - start, 0),
        array = Array(length);

    while (++index < length) {
      array[index] = args[start + index];
    }
    index = -1;
    var otherArgs = Array(start + 1);
    while (++index < start) {
      otherArgs[index] = args[index];
    }
    otherArgs[start] = transform(array);
    return apply(func, this, otherArgs);
  };
}

module.exports = overRest;

},{"./_apply":171}],260:[function(require,module,exports){
var freeGlobal = require('./_freeGlobal');

/** Detect free variable `self`. */
var freeSelf = typeof self == 'object' && self && self.Object === Object && self;

/** Used as a reference to the global object. */
var root = freeGlobal || freeSelf || Function('return this')();

module.exports = root;

},{"./_freeGlobal":218}],261:[function(require,module,exports){
/** Used to stand-in for `undefined` hash values. */
var HASH_UNDEFINED = '__lodash_hash_undefined__';

/**
 * Adds `value` to the array cache.
 *
 * @private
 * @name add
 * @memberOf SetCache
 * @alias push
 * @param {*} value The value to cache.
 * @returns {Object} Returns the cache instance.
 */
function setCacheAdd(value) {
  this.__data__.set(value, HASH_UNDEFINED);
  return this;
}

module.exports = setCacheAdd;

},{}],262:[function(require,module,exports){
/**
 * Checks if `value` is in the array cache.
 *
 * @private
 * @name has
 * @memberOf SetCache
 * @param {*} value The value to search for.
 * @returns {number} Returns `true` if `value` is found, else `false`.
 */
function setCacheHas(value) {
  return this.__data__.has(value);
}

module.exports = setCacheHas;

},{}],263:[function(require,module,exports){
/**
 * Converts `set` to an array of its values.
 *
 * @private
 * @param {Object} set The set to convert.
 * @returns {Array} Returns the values.
 */
function setToArray(set) {
  var index = -1,
      result = Array(set.size);

  set.forEach(function(value) {
    result[++index] = value;
  });
  return result;
}

module.exports = setToArray;

},{}],264:[function(require,module,exports){
var baseSetToString = require('./_baseSetToString'),
    shortOut = require('./_shortOut');

/**
 * Sets the `toString` method of `func` to return `string`.
 *
 * @private
 * @param {Function} func The function to modify.
 * @param {Function} string The `toString` result.
 * @returns {Function} Returns `func`.
 */
var setToString = shortOut(baseSetToString);

module.exports = setToString;

},{"./_baseSetToString":204,"./_shortOut":265}],265:[function(require,module,exports){
/** Used to detect hot functions by number of calls within a span of milliseconds. */
var HOT_COUNT = 800,
    HOT_SPAN = 16;

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeNow = Date.now;

/**
 * Creates a function that'll short out and invoke `identity` instead
 * of `func` when it's called `HOT_COUNT` or more times in `HOT_SPAN`
 * milliseconds.
 *
 * @private
 * @param {Function} func The function to restrict.
 * @returns {Function} Returns the new shortable function.
 */
function shortOut(func) {
  var count = 0,
      lastCalled = 0;

  return function() {
    var stamp = nativeNow(),
        remaining = HOT_SPAN - (stamp - lastCalled);

    lastCalled = stamp;
    if (remaining > 0) {
      if (++count >= HOT_COUNT) {
        return arguments[0];
      }
    } else {
      count = 0;
    }
    return func.apply(undefined, arguments);
  };
}

module.exports = shortOut;

},{}],266:[function(require,module,exports){
var ListCache = require('./_ListCache');

/**
 * Removes all key-value entries from the stack.
 *
 * @private
 * @name clear
 * @memberOf Stack
 */
function stackClear() {
  this.__data__ = new ListCache;
  this.size = 0;
}

module.exports = stackClear;

},{"./_ListCache":161}],267:[function(require,module,exports){
/**
 * Removes `key` and its value from the stack.
 *
 * @private
 * @name delete
 * @memberOf Stack
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */
function stackDelete(key) {
  var data = this.__data__,
      result = data['delete'](key);

  this.size = data.size;
  return result;
}

module.exports = stackDelete;

},{}],268:[function(require,module,exports){
/**
 * Gets the stack value for `key`.
 *
 * @private
 * @name get
 * @memberOf Stack
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */
function stackGet(key) {
  return this.__data__.get(key);
}

module.exports = stackGet;

},{}],269:[function(require,module,exports){
/**
 * Checks if a stack value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf Stack
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function stackHas(key) {
  return this.__data__.has(key);
}

module.exports = stackHas;

},{}],270:[function(require,module,exports){
var ListCache = require('./_ListCache'),
    Map = require('./_Map'),
    MapCache = require('./_MapCache');

/** Used as the size to enable large array optimizations. */
var LARGE_ARRAY_SIZE = 200;

/**
 * Sets the stack `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf Stack
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the stack cache instance.
 */
function stackSet(key, value) {
  var data = this.__data__;
  if (data instanceof ListCache) {
    var pairs = data.__data__;
    if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {
      pairs.push([key, value]);
      this.size = ++data.size;
      return this;
    }
    data = this.__data__ = new MapCache(pairs);
  }
  data.set(key, value);
  this.size = data.size;
  return this;
}

module.exports = stackSet;

},{"./_ListCache":161,"./_Map":162,"./_MapCache":163}],271:[function(require,module,exports){
/**
 * A specialized version of `_.indexOf` which performs strict equality
 * comparisons of values, i.e. `===`.
 *
 * @private
 * @param {Array} array The array to inspect.
 * @param {*} value The value to search for.
 * @param {number} fromIndex The index to search from.
 * @returns {number} Returns the index of the matched value, else `-1`.
 */
function strictIndexOf(array, value, fromIndex) {
  var index = fromIndex - 1,
      length = array.length;

  while (++index < length) {
    if (array[index] === value) {
      return index;
    }
  }
  return -1;
}

module.exports = strictIndexOf;

},{}],272:[function(require,module,exports){
var memoizeCapped = require('./_memoizeCapped');

/** Used to match property names within property paths. */
var rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;

/** Used to match backslashes in property paths. */
var reEscapeChar = /\\(\\)?/g;

/**
 * Converts `string` to a property path array.
 *
 * @private
 * @param {string} string The string to convert.
 * @returns {Array} Returns the property path array.
 */
var stringToPath = memoizeCapped(function(string) {
  var result = [];
  if (string.charCodeAt(0) === 46 /* . */) {
    result.push('');
  }
  string.replace(rePropName, function(match, number, quote, subString) {
    result.push(quote ? subString.replace(reEscapeChar, '$1') : (number || match));
  });
  return result;
});

module.exports = stringToPath;

},{"./_memoizeCapped":253}],273:[function(require,module,exports){
var isSymbol = require('./isSymbol');

/** Used as references for various `Number` constants. */
var INFINITY = 1 / 0;

/**
 * Converts `value` to a string key if it's not a string or symbol.
 *
 * @private
 * @param {*} value The value to inspect.
 * @returns {string|symbol} Returns the key.
 */
function toKey(value) {
  if (typeof value == 'string' || isSymbol(value)) {
    return value;
  }
  var result = (value + '');
  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
}

module.exports = toKey;

},{"./isSymbol":293}],274:[function(require,module,exports){
/** Used for built-in method references. */
var funcProto = Function.prototype;

/** Used to resolve the decompiled source of functions. */
var funcToString = funcProto.toString;

/**
 * Converts `func` to its source code.
 *
 * @private
 * @param {Function} func The function to convert.
 * @returns {string} Returns the source code.
 */
function toSource(func) {
  if (func != null) {
    try {
      return funcToString.call(func);
    } catch (e) {}
    try {
      return (func + '');
    } catch (e) {}
  }
  return '';
}

module.exports = toSource;

},{}],275:[function(require,module,exports){
var assignValue = require('./_assignValue'),
    copyObject = require('./_copyObject'),
    createAssigner = require('./_createAssigner'),
    isArrayLike = require('./isArrayLike'),
    isPrototype = require('./_isPrototype'),
    keys = require('./keys');

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * Assigns own enumerable string keyed properties of source objects to the
 * destination object. Source objects are applied from left to right.
 * Subsequent sources overwrite property assignments of previous sources.
 *
 * **Note:** This method mutates `object` and is loosely based on
 * [`Object.assign`](https://mdn.io/Object/assign).
 *
 * @static
 * @memberOf _
 * @since 0.10.0
 * @category Object
 * @param {Object} object The destination object.
 * @param {...Object} [sources] The source objects.
 * @returns {Object} Returns `object`.
 * @see _.assignIn
 * @example
 *
 * function Foo() {
 *   this.a = 1;
 * }
 *
 * function Bar() {
 *   this.c = 3;
 * }
 *
 * Foo.prototype.b = 2;
 * Bar.prototype.d = 4;
 *
 * _.assign({ 'a': 0 }, new Foo, new Bar);
 * // => { 'a': 1, 'c': 3 }
 */
var assign = createAssigner(function(object, source) {
  if (isPrototype(source) || isArrayLike(source)) {
    copyObject(source, keys(source), object);
    return;
  }
  for (var key in source) {
    if (hasOwnProperty.call(source, key)) {
      assignValue(object, key, source[key]);
    }
  }
});

module.exports = assign;

},{"./_assignValue":179,"./_copyObject":210,"./_createAssigner":212,"./_isPrototype":239,"./isArrayLike":286,"./keys":295}],276:[function(require,module,exports){
/**
 * Creates a function that returns `value`.
 *
 * @static
 * @memberOf _
 * @since 2.4.0
 * @category Util
 * @param {*} value The value to return from the new function.
 * @returns {Function} Returns the new constant function.
 * @example
 *
 * var objects = _.times(2, _.constant({ 'a': 1 }));
 *
 * console.log(objects);
 * // => [{ 'a': 1 }, { 'a': 1 }]
 *
 * console.log(objects[0] === objects[1]);
 * // => true
 */
function constant(value) {
  return function() {
    return value;
  };
}

module.exports = constant;

},{}],277:[function(require,module,exports){
var baseDifference = require('./_baseDifference'),
    baseFlatten = require('./_baseFlatten'),
    baseRest = require('./_baseRest'),
    isArrayLikeObject = require('./isArrayLikeObject');

/**
 * Creates an array of `array` values not included in the other given arrays
 * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
 * for equality comparisons. The order and references of result values are
 * determined by the first array.
 *
 * **Note:** Unlike `_.pullAll`, this method returns a new array.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Array
 * @param {Array} array The array to inspect.
 * @param {...Array} [values] The values to exclude.
 * @returns {Array} Returns the new array of filtered values.
 * @see _.without, _.xor
 * @example
 *
 * _.difference([2, 1], [2, 3]);
 * // => [1]
 */
var difference = baseRest(function(array, values) {
  return isArrayLikeObject(array)
    ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true))
    : [];
});

module.exports = difference;

},{"./_baseDifference":182,"./_baseFlatten":184,"./_baseRest":203,"./isArrayLikeObject":287}],278:[function(require,module,exports){
/**
 * Performs a
 * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
 * comparison between two values to determine if they are equivalent.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to compare.
 * @param {*} other The other value to compare.
 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
 * @example
 *
 * var object = { 'a': 1 };
 * var other = { 'a': 1 };
 *
 * _.eq(object, object);
 * // => true
 *
 * _.eq(object, other);
 * // => false
 *
 * _.eq('a', 'a');
 * // => true
 *
 * _.eq('a', Object('a'));
 * // => false
 *
 * _.eq(NaN, NaN);
 * // => true
 */
function eq(value, other) {
  return value === other || (value !== value && other !== other);
}

module.exports = eq;

},{}],279:[function(require,module,exports){
var createFind = require('./_createFind'),
    findIndex = require('./findIndex');

/**
 * Iterates over elements of `collection`, returning the first element
 * `predicate` returns truthy for. The predicate is invoked with three
 * arguments: (value, index|key, collection).
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Collection
 * @param {Array|Object} collection The collection to inspect.
 * @param {Function} [predicate=_.identity] The function invoked per iteration.
 * @param {number} [fromIndex=0] The index to search from.
 * @returns {*} Returns the matched element, else `undefined`.
 * @example
 *
 * var users = [
 *   { 'user': 'barney',  'age': 36, 'active': true },
 *   { 'user': 'fred',    'age': 40, 'active': false },
 *   { 'user': 'pebbles', 'age': 1,  'active': true }
 * ];
 *
 * _.find(users, function(o) { return o.age < 40; });
 * // => object for 'barney'
 *
 * // The `_.matches` iteratee shorthand.
 * _.find(users, { 'age': 1, 'active': true });
 * // => object for 'pebbles'
 *
 * // The `_.matchesProperty` iteratee shorthand.
 * _.find(users, ['active', false]);
 * // => object for 'fred'
 *
 * // The `_.property` iteratee shorthand.
 * _.find(users, 'active');
 * // => object for 'barney'
 */
var find = createFind(findIndex);

module.exports = find;

},{"./_createFind":213,"./findIndex":280}],280:[function(require,module,exports){
var baseFindIndex = require('./_baseFindIndex'),
    baseIteratee = require('./_baseIteratee'),
    toInteger = require('./toInteger');

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeMax = Math.max;

/**
 * This method is like `_.find` except that it returns the index of the first
 * element `predicate` returns truthy for instead of the element itself.
 *
 * @static
 * @memberOf _
 * @since 1.1.0
 * @category Array
 * @param {Array} array The array to inspect.
 * @param {Function} [predicate=_.identity] The function invoked per iteration.
 * @param {number} [fromIndex=0] The index to search from.
 * @returns {number} Returns the index of the found element, else `-1`.
 * @example
 *
 * var users = [
 *   { 'user': 'barney',  'active': false },
 *   { 'user': 'fred',    'active': false },
 *   { 'user': 'pebbles', 'active': true }
 * ];
 *
 * _.findIndex(users, function(o) { return o.user == 'barney'; });
 * // => 0
 *
 * // The `_.matches` iteratee shorthand.
 * _.findIndex(users, { 'user': 'fred', 'active': false });
 * // => 1
 *
 * // The `_.matchesProperty` iteratee shorthand.
 * _.findIndex(users, ['active', false]);
 * // => 0
 *
 * // The `_.property` iteratee shorthand.
 * _.findIndex(users, 'active');
 * // => 2
 */
function findIndex(array, predicate, fromIndex) {
  var length = array == null ? 0 : array.length;
  if (!length) {
    return -1;
  }
  var index = fromIndex == null ? 0 : toInteger(fromIndex);
  if (index < 0) {
    index = nativeMax(length + index, 0);
  }
  return baseFindIndex(array, baseIteratee(predicate, 3), index);
}

module.exports = findIndex;

},{"./_baseFindIndex":183,"./_baseIteratee":197,"./toInteger":301}],281:[function(require,module,exports){
var baseGet = require('./_baseGet');

/**
 * Gets the value at `path` of `object`. If the resolved value is
 * `undefined`, the `defaultValue` is returned in its place.
 *
 * @static
 * @memberOf _
 * @since 3.7.0
 * @category Object
 * @param {Object} object The object to query.
 * @param {Array|string} path The path of the property to get.
 * @param {*} [defaultValue] The value returned for `undefined` resolved values.
 * @returns {*} Returns the resolved value.
 * @example
 *
 * var object = { 'a': [{ 'b': { 'c': 3 } }] };
 *
 * _.get(object, 'a[0].b.c');
 * // => 3
 *
 * _.get(object, ['a', '0', 'b', 'c']);
 * // => 3
 *
 * _.get(object, 'a.b.c', 'default');
 * // => 'default'
 */
function get(object, path, defaultValue) {
  var result = object == null ? undefined : baseGet(object, path);
  return result === undefined ? defaultValue : result;
}

module.exports = get;

},{"./_baseGet":185}],282:[function(require,module,exports){
var baseHasIn = require('./_baseHasIn'),
    hasPath = require('./_hasPath');

/**
 * Checks if `path` is a direct or inherited property of `object`.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Object
 * @param {Object} object The object to query.
 * @param {Array|string} path The path to check.
 * @returns {boolean} Returns `true` if `path` exists, else `false`.
 * @example
 *
 * var object = _.create({ 'a': _.create({ 'b': 2 }) });
 *
 * _.hasIn(object, 'a');
 * // => true
 *
 * _.hasIn(object, 'a.b');
 * // => true
 *
 * _.hasIn(object, ['a', 'b']);
 * // => true
 *
 * _.hasIn(object, 'b');
 * // => false
 */
function hasIn(object, path) {
  return object != null && hasPath(object, path, baseHasIn);
}

module.exports = hasIn;

},{"./_baseHasIn":188,"./_hasPath":227}],283:[function(require,module,exports){
/**
 * This method returns the first argument it receives.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Util
 * @param {*} value Any value.
 * @returns {*} Returns `value`.
 * @example
 *
 * var object = { 'a': 1 };
 *
 * console.log(_.identity(object) === object);
 * // => true
 */
function identity(value) {
  return value;
}

module.exports = identity;

},{}],284:[function(require,module,exports){
var baseIsArguments = require('./_baseIsArguments'),
    isObjectLike = require('./isObjectLike');

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/** Built-in value references. */
var propertyIsEnumerable = objectProto.propertyIsEnumerable;

/**
 * Checks if `value` is likely an `arguments` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an `arguments` object,
 *  else `false`.
 * @example
 *
 * _.isArguments(function() { return arguments; }());
 * // => true
 *
 * _.isArguments([1, 2, 3]);
 * // => false
 */
var isArguments = baseIsArguments(function() { return arguments; }()) ? baseIsArguments : function(value) {
  return isObjectLike(value) && hasOwnProperty.call(value, 'callee') &&
    !propertyIsEnumerable.call(value, 'callee');
};

module.exports = isArguments;

},{"./_baseIsArguments":190,"./isObjectLike":292}],285:[function(require,module,exports){
/**
 * Checks if `value` is classified as an `Array` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an array, else `false`.
 * @example
 *
 * _.isArray([1, 2, 3]);
 * // => true
 *
 * _.isArray(document.body.children);
 * // => false
 *
 * _.isArray('abc');
 * // => false
 *
 * _.isArray(_.noop);
 * // => false
 */
var isArray = Array.isArray;

module.exports = isArray;

},{}],286:[function(require,module,exports){
var isFunction = require('./isFunction'),
    isLength = require('./isLength');

/**
 * Checks if `value` is array-like. A value is considered array-like if it's
 * not a function and has a `value.length` that's an integer greater than or
 * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
 * @example
 *
 * _.isArrayLike([1, 2, 3]);
 * // => true
 *
 * _.isArrayLike(document.body.children);
 * // => true
 *
 * _.isArrayLike('abc');
 * // => true
 *
 * _.isArrayLike(_.noop);
 * // => false
 */
function isArrayLike(value) {
  return value != null && isLength(value.length) && !isFunction(value);
}

module.exports = isArrayLike;

},{"./isFunction":289,"./isLength":290}],287:[function(require,module,exports){
var isArrayLike = require('./isArrayLike'),
    isObjectLike = require('./isObjectLike');

/**
 * This method is like `_.isArrayLike` except that it also checks if `value`
 * is an object.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an array-like object,
 *  else `false`.
 * @example
 *
 * _.isArrayLikeObject([1, 2, 3]);
 * // => true
 *
 * _.isArrayLikeObject(document.body.children);
 * // => true
 *
 * _.isArrayLikeObject('abc');
 * // => false
 *
 * _.isArrayLikeObject(_.noop);
 * // => false
 */
function isArrayLikeObject(value) {
  return isObjectLike(value) && isArrayLike(value);
}

module.exports = isArrayLikeObject;

},{"./isArrayLike":286,"./isObjectLike":292}],288:[function(require,module,exports){
var root = require('./_root'),
    stubFalse = require('./stubFalse');

/** Detect free variable `exports`. */
var freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;

/** Detect free variable `module`. */
var freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;

/** Detect the popular CommonJS extension `module.exports`. */
var moduleExports = freeModule && freeModule.exports === freeExports;

/** Built-in value references. */
var Buffer = moduleExports ? root.Buffer : undefined;

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined;

/**
 * Checks if `value` is a buffer.
 *
 * @static
 * @memberOf _
 * @since 4.3.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.
 * @example
 *
 * _.isBuffer(new Buffer(2));
 * // => true
 *
 * _.isBuffer(new Uint8Array(2));
 * // => false
 */
var isBuffer = nativeIsBuffer || stubFalse;

module.exports = isBuffer;

},{"./_root":260,"./stubFalse":299}],289:[function(require,module,exports){
var baseGetTag = require('./_baseGetTag'),
    isObject = require('./isObject');

/** `Object#toString` result references. */
var asyncTag = '[object AsyncFunction]',
    funcTag = '[object Function]',
    genTag = '[object GeneratorFunction]',
    proxyTag = '[object Proxy]';

/**
 * Checks if `value` is classified as a `Function` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a function, else `false`.
 * @example
 *
 * _.isFunction(_);
 * // => true
 *
 * _.isFunction(/abc/);
 * // => false
 */
function isFunction(value) {
  if (!isObject(value)) {
    return false;
  }
  // The use of `Object#toString` avoids issues with the `typeof` operator
  // in Safari 9 which returns 'object' for typed arrays and other constructors.
  var tag = baseGetTag(value);
  return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
}

module.exports = isFunction;

},{"./_baseGetTag":187,"./isObject":291}],290:[function(require,module,exports){
/** Used as references for various `Number` constants. */
var MAX_SAFE_INTEGER = 9007199254740991;

/**
 * Checks if `value` is a valid array-like length.
 *
 * **Note:** This method is loosely based on
 * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
 * @example
 *
 * _.isLength(3);
 * // => true
 *
 * _.isLength(Number.MIN_VALUE);
 * // => false
 *
 * _.isLength(Infinity);
 * // => false
 *
 * _.isLength('3');
 * // => false
 */
function isLength(value) {
  return typeof value == 'number' &&
    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
}

module.exports = isLength;

},{}],291:[function(require,module,exports){
/**
 * Checks if `value` is the
 * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
 * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an object, else `false`.
 * @example
 *
 * _.isObject({});
 * // => true
 *
 * _.isObject([1, 2, 3]);
 * // => true
 *
 * _.isObject(_.noop);
 * // => true
 *
 * _.isObject(null);
 * // => false
 */
function isObject(value) {
  var type = typeof value;
  return value != null && (type == 'object' || type == 'function');
}

module.exports = isObject;

},{}],292:[function(require,module,exports){
/**
 * Checks if `value` is object-like. A value is object-like if it's not `null`
 * and has a `typeof` result of "object".
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
 * @example
 *
 * _.isObjectLike({});
 * // => true
 *
 * _.isObjectLike([1, 2, 3]);
 * // => true
 *
 * _.isObjectLike(_.noop);
 * // => false
 *
 * _.isObjectLike(null);
 * // => false
 */
function isObjectLike(value) {
  return value != null && typeof value == 'object';
}

module.exports = isObjectLike;

},{}],293:[function(require,module,exports){
var baseGetTag = require('./_baseGetTag'),
    isObjectLike = require('./isObjectLike');

/** `Object#toString` result references. */
var symbolTag = '[object Symbol]';

/**
 * Checks if `value` is classified as a `Symbol` primitive or object.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
 * @example
 *
 * _.isSymbol(Symbol.iterator);
 * // => true
 *
 * _.isSymbol('abc');
 * // => false
 */
function isSymbol(value) {
  return typeof value == 'symbol' ||
    (isObjectLike(value) && baseGetTag(value) == symbolTag);
}

module.exports = isSymbol;

},{"./_baseGetTag":187,"./isObjectLike":292}],294:[function(require,module,exports){
var baseIsTypedArray = require('./_baseIsTypedArray'),
    baseUnary = require('./_baseUnary'),
    nodeUtil = require('./_nodeUtil');

/* Node.js helper references. */
var nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;

/**
 * Checks if `value` is classified as a typed array.
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
 * @example
 *
 * _.isTypedArray(new Uint8Array);
 * // => true
 *
 * _.isTypedArray([]);
 * // => false
 */
var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;

module.exports = isTypedArray;

},{"./_baseIsTypedArray":196,"./_baseUnary":207,"./_nodeUtil":256}],295:[function(require,module,exports){
var arrayLikeKeys = require('./_arrayLikeKeys'),
    baseKeys = require('./_baseKeys'),
    isArrayLike = require('./isArrayLike');

/**
 * Creates an array of the own enumerable property names of `object`.
 *
 * **Note:** Non-object values are coerced to objects. See the
 * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
 * for more details.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Object
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 * @example
 *
 * function Foo() {
 *   this.a = 1;
 *   this.b = 2;
 * }
 *
 * Foo.prototype.c = 3;
 *
 * _.keys(new Foo);
 * // => ['a', 'b'] (iteration order is not guaranteed)
 *
 * _.keys('hi');
 * // => ['0', '1']
 */
function keys(object) {
  return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
}

module.exports = keys;

},{"./_arrayLikeKeys":175,"./_baseKeys":198,"./isArrayLike":286}],296:[function(require,module,exports){
var MapCache = require('./_MapCache');

/** Error message constants. */
var FUNC_ERROR_TEXT = 'Expected a function';

/**
 * Creates a function that memoizes the result of `func`. If `resolver` is
 * provided, it determines the cache key for storing the result based on the
 * arguments provided to the memoized function. By default, the first argument
 * provided to the memoized function is used as the map cache key. The `func`
 * is invoked with the `this` binding of the memoized function.
 *
 * **Note:** The cache is exposed as the `cache` property on the memoized
 * function. Its creation may be customized by replacing the `_.memoize.Cache`
 * constructor with one whose instances implement the
 * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)
 * method interface of `clear`, `delete`, `get`, `has`, and `set`.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Function
 * @param {Function} func The function to have its output memoized.
 * @param {Function} [resolver] The function to resolve the cache key.
 * @returns {Function} Returns the new memoized function.
 * @example
 *
 * var object = { 'a': 1, 'b': 2 };
 * var other = { 'c': 3, 'd': 4 };
 *
 * var values = _.memoize(_.values);
 * values(object);
 * // => [1, 2]
 *
 * values(other);
 * // => [3, 4]
 *
 * object.a = 2;
 * values(object);
 * // => [1, 2]
 *
 * // Modify the result cache.
 * values.cache.set(object, ['a', 'b']);
 * values(object);
 * // => ['a', 'b']
 *
 * // Replace `_.memoize.Cache`.
 * _.memoize.Cache = WeakMap;
 */
function memoize(func, resolver) {
  if (typeof func != 'function' || (resolver != null && typeof resolver != 'function')) {
    throw new TypeError(FUNC_ERROR_TEXT);
  }
  var memoized = function() {
    var args = arguments,
        key = resolver ? resolver.apply(this, args) : args[0],
        cache = memoized.cache;

    if (cache.has(key)) {
      return cache.get(key);
    }
    var result = func.apply(this, args);
    memoized.cache = cache.set(key, result) || cache;
    return result;
  };
  memoized.cache = new (memoize.Cache || MapCache);
  return memoized;
}

// Expose `MapCache`.
memoize.Cache = MapCache;

module.exports = memoize;

},{"./_MapCache":163}],297:[function(require,module,exports){
var baseProperty = require('./_baseProperty'),
    basePropertyDeep = require('./_basePropertyDeep'),
    isKey = require('./_isKey'),
    toKey = require('./_toKey');

/**
 * Creates a function that returns the value at `path` of a given object.
 *
 * @static
 * @memberOf _
 * @since 2.4.0
 * @category Util
 * @param {Array|string} path The path of the property to get.
 * @returns {Function} Returns the new accessor function.
 * @example
 *
 * var objects = [
 *   { 'a': { 'b': 2 } },
 *   { 'a': { 'b': 1 } }
 * ];
 *
 * _.map(objects, _.property('a.b'));
 * // => [2, 1]
 *
 * _.map(_.sortBy(objects, _.property(['a', 'b'])), 'a.b');
 * // => [1, 2]
 */
function property(path) {
  return isKey(path) ? baseProperty(toKey(path)) : basePropertyDeep(path);
}

module.exports = property;

},{"./_baseProperty":201,"./_basePropertyDeep":202,"./_isKey":236,"./_toKey":273}],298:[function(require,module,exports){
/**
 * This method returns a new empty array.
 *
 * @static
 * @memberOf _
 * @since 4.13.0
 * @category Util
 * @returns {Array} Returns the new empty array.
 * @example
 *
 * var arrays = _.times(2, _.stubArray);
 *
 * console.log(arrays);
 * // => [[], []]
 *
 * console.log(arrays[0] === arrays[1]);
 * // => false
 */
function stubArray() {
  return [];
}

module.exports = stubArray;

},{}],299:[function(require,module,exports){
/**
 * This method returns `false`.
 *
 * @static
 * @memberOf _
 * @since 4.13.0
 * @category Util
 * @returns {boolean} Returns `false`.
 * @example
 *
 * _.times(2, _.stubFalse);
 * // => [false, false]
 */
function stubFalse() {
  return false;
}

module.exports = stubFalse;

},{}],300:[function(require,module,exports){
var toNumber = require('./toNumber');

/** Used as references for various `Number` constants. */
var INFINITY = 1 / 0,
    MAX_INTEGER = 1.7976931348623157e+308;

/**
 * Converts `value` to a finite number.
 *
 * @static
 * @memberOf _
 * @since 4.12.0
 * @category Lang
 * @param {*} value The value to convert.
 * @returns {number} Returns the converted number.
 * @example
 *
 * _.toFinite(3.2);
 * // => 3.2
 *
 * _.toFinite(Number.MIN_VALUE);
 * // => 5e-324
 *
 * _.toFinite(Infinity);
 * // => 1.7976931348623157e+308
 *
 * _.toFinite('3.2');
 * // => 3.2
 */
function toFinite(value) {
  if (!value) {
    return value === 0 ? value : 0;
  }
  value = toNumber(value);
  if (value === INFINITY || value === -INFINITY) {
    var sign = (value < 0 ? -1 : 1);
    return sign * MAX_INTEGER;
  }
  return value === value ? value : 0;
}

module.exports = toFinite;

},{"./toNumber":302}],301:[function(require,module,exports){
var toFinite = require('./toFinite');

/**
 * Converts `value` to an integer.
 *
 * **Note:** This method is loosely based on
 * [`ToInteger`](http://www.ecma-international.org/ecma-262/7.0/#sec-tointeger).
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to convert.
 * @returns {number} Returns the converted integer.
 * @example
 *
 * _.toInteger(3.2);
 * // => 3
 *
 * _.toInteger(Number.MIN_VALUE);
 * // => 0
 *
 * _.toInteger(Infinity);
 * // => 1.7976931348623157e+308
 *
 * _.toInteger('3.2');
 * // => 3
 */
function toInteger(value) {
  var result = toFinite(value),
      remainder = result % 1;

  return result === result ? (remainder ? result - remainder : result) : 0;
}

module.exports = toInteger;

},{"./toFinite":300}],302:[function(require,module,exports){
var isObject = require('./isObject'),
    isSymbol = require('./isSymbol');

/** Used as references for various `Number` constants. */
var NAN = 0 / 0;

/** Used to match leading and trailing whitespace. */
var reTrim = /^\s+|\s+$/g;

/** Used to detect bad signed hexadecimal string values. */
var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;

/** Used to detect binary string values. */
var reIsBinary = /^0b[01]+$/i;

/** Used to detect octal string values. */
var reIsOctal = /^0o[0-7]+$/i;

/** Built-in method references without a dependency on `root`. */
var freeParseInt = parseInt;

/**
 * Converts `value` to a number.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to process.
 * @returns {number} Returns the number.
 * @example
 *
 * _.toNumber(3.2);
 * // => 3.2
 *
 * _.toNumber(Number.MIN_VALUE);
 * // => 5e-324
 *
 * _.toNumber(Infinity);
 * // => Infinity
 *
 * _.toNumber('3.2');
 * // => 3.2
 */
function toNumber(value) {
  if (typeof value == 'number') {
    return value;
  }
  if (isSymbol(value)) {
    return NAN;
  }
  if (isObject(value)) {
    var other = typeof value.valueOf == 'function' ? value.valueOf() : value;
    value = isObject(other) ? (other + '') : other;
  }
  if (typeof value != 'string') {
    return value === 0 ? value : +value;
  }
  value = value.replace(reTrim, '');
  var isBinary = reIsBinary.test(value);
  return (isBinary || reIsOctal.test(value))
    ? freeParseInt(value.slice(2), isBinary ? 2 : 8)
    : (reIsBadHex.test(value) ? NAN : +value);
}

module.exports = toNumber;

},{"./isObject":291,"./isSymbol":293}],303:[function(require,module,exports){
var baseToString = require('./_baseToString');

/**
 * Converts `value` to a string. An empty string is returned for `null`
 * and `undefined` values. The sign of `-0` is preserved.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to convert.
 * @returns {string} Returns the converted string.
 * @example
 *
 * _.toString(null);
 * // => ''
 *
 * _.toString(-0);
 * // => '-0'
 *
 * _.toString([1, 2, 3]);
 * // => '1,2,3'
 */
function toString(value) {
  return value == null ? '' : baseToString(value);
}

module.exports = toString;

},{"./_baseToString":206}],304:[function(require,module,exports){
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _reactAddonsShallowCompare = require('react-addons-shallow-compare');

var _reactAddonsShallowCompare2 = _interopRequireDefault(_reactAddonsShallowCompare);

var _utils = require('./utils');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var defaultNext = function defaultNext(children, idx) {
  return function () {
    if (children[idx + 1]) {
      return children[idx + 1].props.id;
    } else {
      return 'complete';
    }
  };
};

var defaultValidate = function defaultValidate() {};

var defaultOnComplete = function defaultOnComplete() {
  return function (values) {
    console.log('completed:', values);
  };
};

var defaultOnValidationFail = function defaultOnValidationFail() {
  return function (err) {
    console.error(err);
  };
};

var createWizard = function createWizard() {
  var WizardItemWrapper = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;

  var Wizard = function (_React$Component) {
    _inherits(Wizard, _React$Component);

    function Wizard(props) {
      _classCallCheck(this, Wizard);

      var _this = _possibleConstructorReturn(this, (Wizard.__proto__ || Object.getPrototypeOf(Wizard)).call(this, props));

      var children = props.children;

      if (!children) throw new Error('No wizard items specified. Check Wizard');

      _this.wizardItems = _react2.default.Children.toArray(_react2.default.Children.map(children, function (Child, idx) {
        if (!Child.props.id) {
          throw new Error('Each wizard child must have an id property. ' + ('Check ' + Child.type.name + ' wizard item'));
        };

        var WizardItem = createWizardItem(Child.type, WizardItemWrapper);

        return _react2.default.createElement(WizardItem, _extends({
          next: defaultNext(children, idx),
          validate: defaultValidate
        }, _this.props.childrenProps, Child.props, {
          onNextClicked: _this._onNextClicked.bind(_this),
          onPreviousClicked: _this._onPreviousClicked.bind(_this),
          onGoToId: _this._onGoToId.bind(_this),
          onComplete: _this._onComplete.bind(_this),
          reset: _this._reset.bind(_this),
          submitItem: _this._setItemValues.bind(_this),
          getClearedValues: _this._getClearedValues.bind(_this)
        }));
      }));

      _this.onComplete = props.onComplete ? props.onComplete : defaultOnComplete;

      _this.state = _this._getInitialState();
      return _this;
    }

    //helper get functions


    _createClass(Wizard, [{
      key: '_getInitialState',
      value: function _getInitialState() {
        var first = this.wizardItems[0].props.id;
        var values = this._getInitialValues();

        return {
          active: this.props.initialActive || first,
          cleared: this.props.initialActive && this._getPath(first, this.props.initialActive, values) || [],
          values: values,
          completed: false,
          errors: {}
        };
      }
    }, {
      key: '_getInitialValues',
      value: function _getInitialValues() {
        var _this2 = this;

        return this.wizardItems.reduce(function (p, c) {
          var d = _extends({}, p);
          var initialValue = c.props.initialValue != null ? c.props.initialValue : _this2.props.initialValues && _this2.props.initialValues[c.props.id];

          if (initialValue == null) {
            throw new Error('Wizard: No initialValue set for ' + c.props.id + '.' + 'You can either provide initialValue as step prop or all initialValues as Wizard Component prop');
          }

          d[c.props.id] = initialValue;
          return d;
        }, {});
      }
    }, {
      key: '_getClearedValues',
      value: function _getClearedValues() {
        return (0, _utils.filterObjByKeys)(this.state.values, this.state.cleared);
      }
    }, {
      key: '_getActiveWizardItem',
      value: function _getActiveWizardItem() {
        return this._getWizardItem(this.state.active);
      }
    }, {
      key: '_getWizardItem',
      value: function _getWizardItem(id) {
        return this.wizardItems.find(function (item) {
          return item.props.id === id;
        });
      }
    }, {
      key: '_getIndexById',
      value: function _getIndexById(id) {
        return this.wizardItems.findIndex(function (it) {
          return it.props.id === id;
        });
      }
    }, {
      key: '_getPath',
      value: function _getPath(from, to, values) {
        if (!to || !(to in _extends({}, values, { complete: null }))) {
          throw new Error('Wizard: No path to \'' + to + '\'. Check initialActive prop');
        };
        var path = [];

        var current = from;
        var step = this._getWizardItem(current);

        while (current !== to) {
          path.push(current);
          step = this._getWizardItem(current);
          if (!step || !step.props) {
            throw new Error('Wizard: No path to \'' + to + '\'. Check initialActive prop and initialValues');
          }
          current = step.props.next(values[current]);
        }
        return path;
      }
    }, {
      key: '_getSteps',
      value: function _getSteps() {
        var _this3 = this;

        var path = this._getPath(this.wizardItems[0].props.id, 'complete', this.state.values);
        return path.map(function (id, idx) {
          return {
            id: id,
            index: idx,
            title: _this3._getWizardItem(id).props.title,
            cleared: _this3.state.cleared.find(function (it) {
              return it === id;
            }) ? true : false,
            active: _this3._isActive(id)
          };
        });
      }
    }, {
      key: '_isActive',
      value: function _isActive(id) {
        return this.state.active === id;
      }

      //set state functions

    }, {
      key: '_reset',
      value: function _reset() {
        this.setState(this._getInitialState());
      }
    }, {
      key: '_setCompleted',
      value: function _setCompleted() {
        this.setState({ completed: true });
      }
    }, {
      key: '_resetCompleted',
      value: function _resetCompleted() {
        this.setState({ completed: false });
      }
    }, {
      key: '_setValidationFail',
      value: function _setValidationFail(id, error) {
        var newErrors = _extends({}, this.state.errors);
        newErrors[id] = error;
        this.setState({ errors: newErrors });
      }
    }, {
      key: '_setValidationClear',
      value: function _setValidationClear(id) {
        if (this.state.errors[id] == null) return;

        var newErrors = _extends({}, this.state.errors);
        newErrors[id] = null;
        this.setState({ errors: newErrors });
      }
    }, {
      key: '_setItemValues',
      value: function _setItemValues(id, value) {
        var validateLive = this.props.validateLive;

        var item = this._getWizardItem(id);

        var newValues = _extends({}, this.state.values);
        newValues[id] = value;
        this.setState({ values: newValues });

        if (validateLive) {
          this._validate(id, value).catch(function (err) {
            //just catch error 
          });
        }
      }
    }, {
      key: '_pushCleared',
      value: function _pushCleared(id) {
        if (this.state.cleared[this.state.cleared.length - 1] === id) return;
        this.setState({ cleared: [].concat(_toConsumableArray(this.state.cleared), [id]) });
      }
    }, {
      key: '_popCleared',
      value: function _popCleared() {
        var cleared = [].concat(_toConsumableArray(this.state.cleared));
        var last = cleared.pop();
        this.setState({ cleared: cleared });
        return last;
      }
    }, {
      key: '_popUntilId',
      value: function _popUntilId(id) {
        var idx = this.state.cleared.findIndex(function (c) {
          return c === id;
        });
        var last = this.state.cleared[idx];
        if (idx !== -1) {
          var cleared = this.state.cleared.slice(0, idx);
          this.setState({ cleared: cleared });
        }
        return last;
      }
    }, {
      key: '_setActiveById',
      value: function _setActiveById(id) {
        if (id == null || id === 'complete') return;

        this.setState({ active: id });
      }

      //handle event functions

    }, {
      key: '_validate',
      value: function _validate(id, value) {
        var _this4 = this;

        var item = this._getWizardItem(id);
        var validate = item.props.validate;

        return Promise.resolve().then(function () {
          return validate(value, _this4._getClearedValues());
        }).then(function () {
          _this4._setValidationClear(id);return value;
        }).catch(function (err) {
          _this4._setValidationFail(id, err);throw err;
        });
      }
    }, {
      key: '_onComplete',
      value: function _onComplete() {
        var cleared = this._getClearedValues();
        this.onComplete(cleared);
        this._setCompleted();
      }
    }, {
      key: '_onNextClicked',
      value: function _onNextClicked() {
        var _this5 = this;

        var promiseOnNext = this.props.promiseOnNext;

        var active = this._getActiveWizardItem();
        var _active$props = active.props,
            id = _active$props.id,
            next = _active$props.next,
            validate = _active$props.validate;

        var value = this.state.values[id];

        return this._validate(id, value).then(function (value) {
          _this5._pushCleared(id);
          _this5._setActiveById(next(value));
          return value;
        }, function (err) {
          if (promiseOnNext) {
            // if promise on next prop, rethrow and let user handle
            throw err;
          }
        });
      }
    }, {
      key: '_onPreviousClicked',
      value: function _onPreviousClicked() {
        var active = this._getActiveWizardItem();
        var _active$props2 = active.props,
            id = _active$props2.id,
            next = _active$props2.next,
            validate = _active$props2.validate;


        var cleared = this._popCleared();
        if (!cleared) return;

        this._setValidationClear(id);
        this._setActiveById(cleared);

        if (this.state.completed) {
          this._resetCompleted();
        }
      }
    }, {
      key: '_onGoToId',
      value: function _onGoToId(id) {
        var last = this._popUntilId(id);

        if (this.state.cleared.includes(id)) {
          this._setActiveById(id);
        }
      }
    }, {
      key: 'render',
      value: function render() {
        var _this6 = this;

        var _state = this.state,
            cleared = _state.cleared,
            values = _state.values,
            errors = _state.errors,
            completed = _state.completed;

        var steps = this._getSteps();
        return _react2.default.createElement(
          'div',
          null,
          _react2.default.Children.map(this.wizardItems, function (Component, idx) {
            var _Component$props = Component.props,
                id = _Component$props.id,
                next = _Component$props.next;

            var value = values[id];
            var error = errors[id];
            var Child = _react2.default.Children.toArray(_this6.props.children).find(function (c, cidx) {
              return cidx === idx;
            });
            return _react2.default.createElement(Component.type, _extends({
              key: id,
              completed: completed,
              isActive: _this6._isActive(id),
              isLast: next(value) === 'complete',
              hasNext: next(value) !== 'complete' && next(value) != null,
              hasPrevious: cleared.length > 0,
              value: value,
              errors: error,
              step: steps.find(function (s) {
                return s.active;
              }),
              steps: steps
            }, _this6.props.childrenProps, Component.props, Child.props));
          })
        );
      }
    }]);

    return Wizard;
  }(_react2.default.Component);

  ;

  Wizard.defaultProps = {
    promiseOnNext: false,
    validateLive: false,
    childrenProps: {},
    initialValues: {}
  };

  Wizard.propTypes = {
    onComplete: _propTypes2.default.func, //onComplete callback function to execute
    promiseOnNext: _propTypes2.default.bool, //option to return promise in onNextClicked function
    validateLive: _propTypes2.default.bool, //option to validate on user-input, otherwise only on next
    initialActive: _propTypes2.default.string, // pass step id to start from step other than first. 
    initialValues: _propTypes2.default.object, // alternative way to pass initialValues for children
    childrenProps: _propTypes2.default.object, //pass extra properties to all children
    children: _propTypes2.default.oneOfType([_propTypes2.default.arrayOf(_propTypes2.default.element), _propTypes2.default.object]).isRequired
  };

  return Wizard;
};

var createWizardItem = function createWizardItem(WizardItemInner, WizardItemWrapper) {

  var _renderWithWrapper = function _renderWithWrapper(props) {
    if (!props.isActive) return null;
    return _react2.default.createElement(
      WizardItemWrapper,
      props,
      _react2.default.createElement(WizardItemInner, props)
    );
  };

  var _renderWithoutWrapper = function _renderWithoutWrapper(props) {
    if (!props.isActive) return null;
    return _react2.default.createElement(WizardItemInner, props);
  };

  var renderWizardItem = WizardItemWrapper != null ? _renderWithWrapper : _renderWithoutWrapper;

  var WizardItem = function (_React$Component2) {
    _inherits(WizardItem, _React$Component2);

    function WizardItem(props) {
      _classCallCheck(this, WizardItem);

      var _this7 = _possibleConstructorReturn(this, (WizardItem.__proto__ || Object.getPrototypeOf(WizardItem)).call(this, props));

      _this7.renderWizardItem = renderWizardItem.bind(_this7);
      return _this7;
    }

    _createClass(WizardItem, [{
      key: 'shouldComponentUpdate',
      value: function shouldComponentUpdate(nextProps, nextState) {
        if (this.props.isActive || nextProps.isActive) {
          return (0, _reactAddonsShallowCompare2.default)(this, nextProps, nextState);
        }
        return false;
      }
    }, {
      key: '_setValue',
      value: function _setValue(value) {
        this.props.submitItem(this.props.id, value);
      }
    }, {
      key: 'render',
      value: function render() {
        var props = _extends({}, this.props, {
          values: this.props.getClearedValues(),
          setValue: this._setValue.bind(this)
        });
        return this.renderWizardItem(props);
      }
    }]);

    return WizardItem;
  }(_react2.default.Component);

  ;

  WizardItem.propTypes = {
    id: _propTypes2.default.string.isRequired, // id is required
    title: _propTypes2.default.string,
    description: _propTypes2.default.string,
    initialValue: _propTypes2.default.any, //initialValue defines return value expected type
    validate: _propTypes2.default.func, // ex. value => !value ? throw 'Error' : null
    next: _propTypes2.default.func // ex. value => value == 1 ? 'id1' : 'id2'
  };

  return WizardItem;
};

//provided to render wrapper (if provided) and each component 
var renderPropTypes = {
  onNextClicked: _propTypes2.default.func, //next click handler
  onPreviousClicked: _propTypes2.default.func, //previous clicked handler
  onComplete: _propTypes2.default.func, //on complete handler with values object, ex. values => handleValues(values)
  reset: _propTypes2.default.func, //reset handler
  setValue: _propTypes2.default.func, //the callback function to set the wizard item value, ex. () => setValue('check'), or setValue([1,2,3]), or setValue({a:1, b:2})
  value: _propTypes2.default.any, //the value set by setValue (initially initialValue)
  values: _propTypes2.default.object, //the cleared wizard values as a dict with wizard items ids as keys, ex. {'step1': 'check', 'step2': [1,2,3]}, 
  errors: _propTypes2.default.string, //any validation errors
  completed: _propTypes2.default.bool, //wizard completed
  step: _propTypes2.default.number, // the wizard step based on how many next clicked
  isActive: _propTypes2.default.bool, //is wizard item active (by default only active is displayed)
  isLast: _propTypes2.default.bool, //is last wizard item
  hasNext: _propTypes2.default.bool, //wizard item has next
  hasPrevious: _propTypes2.default.bool //wizard item has previous
};

module.exports = createWizard;
},{"./utils":305,"prop-types":35,"react":"react","react-addons-shallow-compare":39}],305:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

exports.filterObjByKeys = filterObjByKeys;
function filterObjByKeys(values, filterKeys) {
	return Object.keys(values).filter(function (id) {
		return filterKeys.includes(id);
	}).reduce(function (p, c) {
		var d = _extends({}, p);
		d[c] = values[c];
		return d;
	}, {});
}
},{}],306:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule AutoFocusUtils
 * @typechecks static-only
 */

'use strict';

var ReactMount = require('./ReactMount');

var findDOMNode = require('./findDOMNode');
var focusNode = require('fbjs/lib/focusNode');

var Mixin = {
  componentDidMount: function () {
    if (this.props.autoFocus) {
      focusNode(findDOMNode(this));
    }
  }
};

var AutoFocusUtils = {
  Mixin: Mixin,

  focusDOMComponent: function () {
    focusNode(ReactMount.getNode(this._rootNodeID));
  }
};

module.exports = AutoFocusUtils;
},{"./ReactMount":365,"./findDOMNode":407,"fbjs/lib/focusNode":11}],307:[function(require,module,exports){
/**
 * Copyright 2013-2015 Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule BeforeInputEventPlugin
 * @typechecks static-only
 */

'use strict';

var EventConstants = require('./EventConstants');
var EventPropagators = require('./EventPropagators');
var ExecutionEnvironment = require('fbjs/lib/ExecutionEnvironment');
var FallbackCompositionState = require('./FallbackCompositionState');
var SyntheticCompositionEvent = require('./SyntheticCompositionEvent');
var SyntheticInputEvent = require('./SyntheticInputEvent');

var keyOf = require('fbjs/lib/keyOf');

var END_KEYCODES = [9, 13, 27, 32]; // Tab, Return, Esc, Space
var START_KEYCODE = 229;

var canUseCompositionEvent = ExecutionEnvironment.canUseDOM && 'CompositionEvent' in window;

var documentMode = null;
if (ExecutionEnvironment.canUseDOM && 'documentMode' in document) {
  documentMode = document.documentMode;
}

// Webkit offers a very useful `textInput` event that can be used to
// directly represent `beforeInput`. The IE `textinput` event is not as
// useful, so we don't use it.
var canUseTextInputEvent = ExecutionEnvironment.canUseDOM && 'TextEvent' in window && !documentMode && !isPresto();

// In IE9+, we have access to composition events, but the data supplied
// by the native compositionend event may be incorrect. Japanese ideographic
// spaces, for instance (\u3000) are not recorded correctly.
var useFallbackCompositionData = ExecutionEnvironment.canUseDOM && (!canUseCompositionEvent || documentMode && documentMode > 8 && documentMode <= 11);

/**
 * Opera <= 12 includes TextEvent in window, but does not fire
 * text input events. Rely on keypress instead.
 */
function isPresto() {
  var opera = window.opera;
  return typeof opera === 'object' && typeof opera.version === 'function' && parseInt(opera.version(), 10) <= 12;
}

var SPACEBAR_CODE = 32;
var SPACEBAR_CHAR = String.fromCharCode(SPACEBAR_CODE);

var topLevelTypes = EventConstants.topLevelTypes;

// Events and their corresponding property names.
var eventTypes = {
  beforeInput: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onBeforeInput: null }),
      captured: keyOf({ onBeforeInputCapture: null })
    },
    dependencies: [topLevelTypes.topCompositionEnd, topLevelTypes.topKeyPress, topLevelTypes.topTextInput, topLevelTypes.topPaste]
  },
  compositionEnd: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onCompositionEnd: null }),
      captured: keyOf({ onCompositionEndCapture: null })
    },
    dependencies: [topLevelTypes.topBlur, topLevelTypes.topCompositionEnd, topLevelTypes.topKeyDown, topLevelTypes.topKeyPress, topLevelTypes.topKeyUp, topLevelTypes.topMouseDown]
  },
  compositionStart: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onCompositionStart: null }),
      captured: keyOf({ onCompositionStartCapture: null })
    },
    dependencies: [topLevelTypes.topBlur, topLevelTypes.topCompositionStart, topLevelTypes.topKeyDown, topLevelTypes.topKeyPress, topLevelTypes.topKeyUp, topLevelTypes.topMouseDown]
  },
  compositionUpdate: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onCompositionUpdate: null }),
      captured: keyOf({ onCompositionUpdateCapture: null })
    },
    dependencies: [topLevelTypes.topBlur, topLevelTypes.topCompositionUpdate, topLevelTypes.topKeyDown, topLevelTypes.topKeyPress, topLevelTypes.topKeyUp, topLevelTypes.topMouseDown]
  }
};

// Track whether we've ever handled a keypress on the space key.
var hasSpaceKeypress = false;

/**
 * Return whether a native keypress event is assumed to be a command.
 * This is required because Firefox fires `keypress` events for key commands
 * (cut, copy, select-all, etc.) even though no character is inserted.
 */
function isKeypressCommand(nativeEvent) {
  return (nativeEvent.ctrlKey || nativeEvent.altKey || nativeEvent.metaKey) &&
  // ctrlKey && altKey is equivalent to AltGr, and is not a command.
  !(nativeEvent.ctrlKey && nativeEvent.altKey);
}

/**
 * Translate native top level events into event types.
 *
 * @param {string} topLevelType
 * @return {object}
 */
function getCompositionEventType(topLevelType) {
  switch (topLevelType) {
    case topLevelTypes.topCompositionStart:
      return eventTypes.compositionStart;
    case topLevelTypes.topCompositionEnd:
      return eventTypes.compositionEnd;
    case topLevelTypes.topCompositionUpdate:
      return eventTypes.compositionUpdate;
  }
}

/**
 * Does our fallback best-guess model think this event signifies that
 * composition has begun?
 *
 * @param {string} topLevelType
 * @param {object} nativeEvent
 * @return {boolean}
 */
function isFallbackCompositionStart(topLevelType, nativeEvent) {
  return topLevelType === topLevelTypes.topKeyDown && nativeEvent.keyCode === START_KEYCODE;
}

/**
 * Does our fallback mode think that this event is the end of composition?
 *
 * @param {string} topLevelType
 * @param {object} nativeEvent
 * @return {boolean}
 */
function isFallbackCompositionEnd(topLevelType, nativeEvent) {
  switch (topLevelType) {
    case topLevelTypes.topKeyUp:
      // Command keys insert or clear IME input.
      return END_KEYCODES.indexOf(nativeEvent.keyCode) !== -1;
    case topLevelTypes.topKeyDown:
      // Expect IME keyCode on each keydown. If we get any other
      // code we must have exited earlier.
      return nativeEvent.keyCode !== START_KEYCODE;
    case topLevelTypes.topKeyPress:
    case topLevelTypes.topMouseDown:
    case topLevelTypes.topBlur:
      // Events are not possible without cancelling IME.
      return true;
    default:
      return false;
  }
}

/**
 * Google Input Tools provides composition data via a CustomEvent,
 * with the `data` property populated in the `detail` object. If this
 * is available on the event object, use it. If not, this is a plain
 * composition event and we have nothing special to extract.
 *
 * @param {object} nativeEvent
 * @return {?string}
 */
function getDataFromCustomEvent(nativeEvent) {
  var detail = nativeEvent.detail;
  if (typeof detail === 'object' && 'data' in detail) {
    return detail.data;
  }
  return null;
}

// Track the current IME composition fallback object, if any.
var currentComposition = null;

/**
 * @param {string} topLevelType Record from `EventConstants`.
 * @param {DOMEventTarget} topLevelTarget The listening component root node.
 * @param {string} topLevelTargetID ID of `topLevelTarget`.
 * @param {object} nativeEvent Native browser event.
 * @return {?object} A SyntheticCompositionEvent.
 */
function extractCompositionEvent(topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget) {
  var eventType;
  var fallbackData;

  if (canUseCompositionEvent) {
    eventType = getCompositionEventType(topLevelType);
  } else if (!currentComposition) {
    if (isFallbackCompositionStart(topLevelType, nativeEvent)) {
      eventType = eventTypes.compositionStart;
    }
  } else if (isFallbackCompositionEnd(topLevelType, nativeEvent)) {
    eventType = eventTypes.compositionEnd;
  }

  if (!eventType) {
    return null;
  }

  if (useFallbackCompositionData) {
    // The current composition is stored statically and must not be
    // overwritten while composition continues.
    if (!currentComposition && eventType === eventTypes.compositionStart) {
      currentComposition = FallbackCompositionState.getPooled(topLevelTarget);
    } else if (eventType === eventTypes.compositionEnd) {
      if (currentComposition) {
        fallbackData = currentComposition.getData();
      }
    }
  }

  var event = SyntheticCompositionEvent.getPooled(eventType, topLevelTargetID, nativeEvent, nativeEventTarget);

  if (fallbackData) {
    // Inject data generated from fallback path into the synthetic event.
    // This matches the property of native CompositionEventInterface.
    event.data = fallbackData;
  } else {
    var customData = getDataFromCustomEvent(nativeEvent);
    if (customData !== null) {
      event.data = customData;
    }
  }

  EventPropagators.accumulateTwoPhaseDispatches(event);
  return event;
}

/**
 * @param {string} topLevelType Record from `EventConstants`.
 * @param {object} nativeEvent Native browser event.
 * @return {?string} The string corresponding to this `beforeInput` event.
 */
function getNativeBeforeInputChars(topLevelType, nativeEvent) {
  switch (topLevelType) {
    case topLevelTypes.topCompositionEnd:
      return getDataFromCustomEvent(nativeEvent);
    case topLevelTypes.topKeyPress:
      /**
       * If native `textInput` events are available, our goal is to make
       * use of them. However, there is a special case: the spacebar key.
       * In Webkit, preventing default on a spacebar `textInput` event
       * cancels character insertion, but it *also* causes the browser
       * to fall back to its default spacebar behavior of scrolling the
       * page.
       *
       * Tracking at:
       * https://code.google.com/p/chromium/issues/detail?id=355103
       *
       * To avoid this issue, use the keypress event as if no `textInput`
       * event is available.
       */
      var which = nativeEvent.which;
      if (which !== SPACEBAR_CODE) {
        return null;
      }

      hasSpaceKeypress = true;
      return SPACEBAR_CHAR;

    case topLevelTypes.topTextInput:
      // Record the characters to be added to the DOM.
      var chars = nativeEvent.data;

      // If it's a spacebar character, assume that we have already handled
      // it at the keypress level and bail immediately. Android Chrome
      // doesn't give us keycodes, so we need to blacklist it.
      if (chars === SPACEBAR_CHAR && hasSpaceKeypress) {
        return null;
      }

      return chars;

    default:
      // For other native event types, do nothing.
      return null;
  }
}

/**
 * For browsers that do not provide the `textInput` event, extract the
 * appropriate string to use for SyntheticInputEvent.
 *
 * @param {string} topLevelType Record from `EventConstants`.
 * @param {object} nativeEvent Native browser event.
 * @return {?string} The fallback string for this `beforeInput` event.
 */
function getFallbackBeforeInputChars(topLevelType, nativeEvent) {
  // If we are currently composing (IME) and using a fallback to do so,
  // try to extract the composed characters from the fallback object.
  if (currentComposition) {
    if (topLevelType === topLevelTypes.topCompositionEnd || isFallbackCompositionEnd(topLevelType, nativeEvent)) {
      var chars = currentComposition.getData();
      FallbackCompositionState.release(currentComposition);
      currentComposition = null;
      return chars;
    }
    return null;
  }

  switch (topLevelType) {
    case topLevelTypes.topPaste:
      // If a paste event occurs after a keypress, throw out the input
      // chars. Paste events should not lead to BeforeInput events.
      return null;
    case topLevelTypes.topKeyPress:
      /**
       * As of v27, Firefox may fire keypress events even when no character
       * will be inserted. A few possibilities:
       *
       * - `which` is `0`. Arrow keys, Esc key, etc.
       *
       * - `which` is the pressed key code, but no char is available.
       *   Ex: 'AltGr + d` in Polish. There is no modified character for
       *   this key combination and no character is inserted into the
       *   document, but FF fires the keypress for char code `100` anyway.
       *   No `input` event will occur.
       *
       * - `which` is the pressed key code, but a command combination is
       *   being used. Ex: `Cmd+C`. No character is inserted, and no
       *   `input` event will occur.
       */
      if (nativeEvent.which && !isKeypressCommand(nativeEvent)) {
        return String.fromCharCode(nativeEvent.which);
      }
      return null;
    case topLevelTypes.topCompositionEnd:
      return useFallbackCompositionData ? null : nativeEvent.data;
    default:
      return null;
  }
}

/**
 * Extract a SyntheticInputEvent for `beforeInput`, based on either native
 * `textInput` or fallback behavior.
 *
 * @param {string} topLevelType Record from `EventConstants`.
 * @param {DOMEventTarget} topLevelTarget The listening component root node.
 * @param {string} topLevelTargetID ID of `topLevelTarget`.
 * @param {object} nativeEvent Native browser event.
 * @return {?object} A SyntheticInputEvent.
 */
function extractBeforeInputEvent(topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget) {
  var chars;

  if (canUseTextInputEvent) {
    chars = getNativeBeforeInputChars(topLevelType, nativeEvent);
  } else {
    chars = getFallbackBeforeInputChars(topLevelType, nativeEvent);
  }

  // If no characters are being inserted, no BeforeInput event should
  // be fired.
  if (!chars) {
    return null;
  }

  var event = SyntheticInputEvent.getPooled(eventTypes.beforeInput, topLevelTargetID, nativeEvent, nativeEventTarget);

  event.data = chars;
  EventPropagators.accumulateTwoPhaseDispatches(event);
  return event;
}

/**
 * Create an `onBeforeInput` event to match
 * http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105/#events-inputevents.
 *
 * This event plugin is based on the native `textInput` event
 * available in Chrome, Safari, Opera, and IE. This event fires after
 * `onKeyPress` and `onCompositionEnd`, but before `onInput`.
 *
 * `beforeInput` is spec'd but not implemented in any browsers, and
 * the `input` event does not provide any useful information about what has
 * actually been added, contrary to the spec. Thus, `textInput` is the best
 * available event to identify the characters that have actually been inserted
 * into the target node.
 *
 * This plugin is also responsible for emitting `composition` events, thus
 * allowing us to share composition fallback code for both `beforeInput` and
 * `composition` event types.
 */
var BeforeInputEventPlugin = {

  eventTypes: eventTypes,

  /**
   * @param {string} topLevelType Record from `EventConstants`.
   * @param {DOMEventTarget} topLevelTarget The listening component root node.
   * @param {string} topLevelTargetID ID of `topLevelTarget`.
   * @param {object} nativeEvent Native browser event.
   * @return {*} An accumulation of synthetic events.
   * @see {EventPluginHub.extractEvents}
   */
  extractEvents: function (topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget) {
    return [extractCompositionEvent(topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget), extractBeforeInputEvent(topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget)];
  }
};

module.exports = BeforeInputEventPlugin;
},{"./EventConstants":319,"./EventPropagators":323,"./FallbackCompositionState":324,"./SyntheticCompositionEvent":390,"./SyntheticInputEvent":394,"fbjs/lib/ExecutionEnvironment":3,"fbjs/lib/keyOf":21}],308:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule CSSProperty
 */

'use strict';

/**
 * CSS properties which accept numbers but are not in units of "px".
 */
var isUnitlessNumber = {
  animationIterationCount: true,
  boxFlex: true,
  boxFlexGroup: true,
  boxOrdinalGroup: true,
  columnCount: true,
  flex: true,
  flexGrow: true,
  flexPositive: true,
  flexShrink: true,
  flexNegative: true,
  flexOrder: true,
  fontWeight: true,
  lineClamp: true,
  lineHeight: true,
  opacity: true,
  order: true,
  orphans: true,
  tabSize: true,
  widows: true,
  zIndex: true,
  zoom: true,

  // SVG-related properties
  fillOpacity: true,
  stopOpacity: true,
  strokeDashoffset: true,
  strokeOpacity: true,
  strokeWidth: true
};

/**
 * @param {string} prefix vendor-specific prefix, eg: Webkit
 * @param {string} key style name, eg: transitionDuration
 * @return {string} style name prefixed with `prefix`, properly camelCased, eg:
 * WebkitTransitionDuration
 */
function prefixKey(prefix, key) {
  return prefix + key.charAt(0).toUpperCase() + key.substring(1);
}

/**
 * Support style names that may come passed in prefixed by adding permutations
 * of vendor prefixes.
 */
var prefixes = ['Webkit', 'ms', 'Moz', 'O'];

// Using Object.keys here, or else the vanilla for-in loop makes IE8 go into an
// infinite loop, because it iterates over the newly added props too.
Object.keys(isUnitlessNumber).forEach(function (prop) {
  prefixes.forEach(function (prefix) {
    isUnitlessNumber[prefixKey(prefix, prop)] = isUnitlessNumber[prop];
  });
});

/**
 * Most style properties can be unset by doing .style[prop] = '' but IE8
 * doesn't like doing that with shorthand properties so for the properties that
 * IE8 breaks on, which are listed here, we instead unset each of the
 * individual properties. See http://bugs.jquery.com/ticket/12385.
 * The 4-value 'clock' properties like margin, padding, border-width seem to
 * behave without any problems. Curiously, list-style works too without any
 * special prodding.
 */
var shorthandPropertyExpansions = {
  background: {
    backgroundAttachment: true,
    backgroundColor: true,
    backgroundImage: true,
    backgroundPositionX: true,
    backgroundPositionY: true,
    backgroundRepeat: true
  },
  backgroundPosition: {
    backgroundPositionX: true,
    backgroundPositionY: true
  },
  border: {
    borderWidth: true,
    borderStyle: true,
    borderColor: true
  },
  borderBottom: {
    borderBottomWidth: true,
    borderBottomStyle: true,
    borderBottomColor: true
  },
  borderLeft: {
    borderLeftWidth: true,
    borderLeftStyle: true,
    borderLeftColor: true
  },
  borderRight: {
    borderRightWidth: true,
    borderRightStyle: true,
    borderRightColor: true
  },
  borderTop: {
    borderTopWidth: true,
    borderTopStyle: true,
    borderTopColor: true
  },
  font: {
    fontStyle: true,
    fontVariant: true,
    fontWeight: true,
    fontSize: true,
    lineHeight: true,
    fontFamily: true
  },
  outline: {
    outlineWidth: true,
    outlineStyle: true,
    outlineColor: true
  }
};

var CSSProperty = {
  isUnitlessNumber: isUnitlessNumber,
  shorthandPropertyExpansions: shorthandPropertyExpansions
};

module.exports = CSSProperty;
},{}],309:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule CSSPropertyOperations
 * @typechecks static-only
 */

'use strict';

var CSSProperty = require('./CSSProperty');
var ExecutionEnvironment = require('fbjs/lib/ExecutionEnvironment');
var ReactPerf = require('./ReactPerf');

var camelizeStyleName = require('fbjs/lib/camelizeStyleName');
var dangerousStyleValue = require('./dangerousStyleValue');
var hyphenateStyleName = require('fbjs/lib/hyphenateStyleName');
var memoizeStringOnly = require('fbjs/lib/memoizeStringOnly');
var warning = require('fbjs/lib/warning');

var processStyleName = memoizeStringOnly(function (styleName) {
  return hyphenateStyleName(styleName);
});

var hasShorthandPropertyBug = false;
var styleFloatAccessor = 'cssFloat';
if (ExecutionEnvironment.canUseDOM) {
  var tempStyle = document.createElement('div').style;
  try {
    // IE8 throws "Invalid argument." if resetting shorthand style properties.
    tempStyle.font = '';
  } catch (e) {
    hasShorthandPropertyBug = true;
  }
  // IE8 only supports accessing cssFloat (standard) as styleFloat
  if (document.documentElement.style.cssFloat === undefined) {
    styleFloatAccessor = 'styleFloat';
  }
}

if ("production" !== 'production') {
  // 'msTransform' is correct, but the other prefixes should be capitalized
  var badVendoredStyleNamePattern = /^(?:webkit|moz|o)[A-Z]/;

  // style values shouldn't contain a semicolon
  var badStyleValueWithSemicolonPattern = /;\s*$/;

  var warnedStyleNames = {};
  var warnedStyleValues = {};

  var warnHyphenatedStyleName = function (name) {
    if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
      return;
    }

    warnedStyleNames[name] = true;
    "production" !== 'production' ? warning(false, 'Unsupported style property %s. Did you mean %s?', name, camelizeStyleName(name)) : undefined;
  };

  var warnBadVendoredStyleName = function (name) {
    if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
      return;
    }

    warnedStyleNames[name] = true;
    "production" !== 'production' ? warning(false, 'Unsupported vendor-prefixed style property %s. Did you mean %s?', name, name.charAt(0).toUpperCase() + name.slice(1)) : undefined;
  };

  var warnStyleValueWithSemicolon = function (name, value) {
    if (warnedStyleValues.hasOwnProperty(value) && warnedStyleValues[value]) {
      return;
    }

    warnedStyleValues[value] = true;
    "production" !== 'production' ? warning(false, 'Style property values shouldn\'t contain a semicolon. ' + 'Try "%s: %s" instead.', name, value.replace(badStyleValueWithSemicolonPattern, '')) : undefined;
  };

  /**
   * @param {string} name
   * @param {*} value
   */
  var warnValidStyle = function (name, value) {
    if (name.indexOf('-') > -1) {
      warnHyphenatedStyleName(name);
    } else if (badVendoredStyleNamePattern.test(name)) {
      warnBadVendoredStyleName(name);
    } else if (badStyleValueWithSemicolonPattern.test(value)) {
      warnStyleValueWithSemicolon(name, value);
    }
  };
}

/**
 * Operations for dealing with CSS properties.
 */
var CSSPropertyOperations = {

  /**
   * Serializes a mapping of style properties for use as inline styles:
   *
   *   > createMarkupForStyles({width: '200px', height: 0})
   *   "width:200px;height:0;"
   *
   * Undefined values are ignored so that declarative programming is easier.
   * The result should be HTML-escaped before insertion into the DOM.
   *
   * @param {object} styles
   * @return {?string}
   */
  createMarkupForStyles: function (styles) {
    var serialized = '';
    for (var styleName in styles) {
      if (!styles.hasOwnProperty(styleName)) {
        continue;
      }
      var styleValue = styles[styleName];
      if ("production" !== 'production') {
        warnValidStyle(styleName, styleValue);
      }
      if (styleValue != null) {
        serialized += processStyleName(styleName) + ':';
        serialized += dangerousStyleValue(styleName, styleValue) + ';';
      }
    }
    return serialized || null;
  },

  /**
   * Sets the value for multiple styles on a node.  If a value is specified as
   * '' (empty string), the corresponding style property will be unset.
   *
   * @param {DOMElement} node
   * @param {object} styles
   */
  setValueForStyles: function (node, styles) {
    var style = node.style;
    for (var styleName in styles) {
      if (!styles.hasOwnProperty(styleName)) {
        continue;
      }
      if ("production" !== 'production') {
        warnValidStyle(styleName, styles[styleName]);
      }
      var styleValue = dangerousStyleValue(styleName, styles[styleName]);
      if (styleName === 'float') {
        styleName = styleFloatAccessor;
      }
      if (styleValue) {
        style[styleName] = styleValue;
      } else {
        var expansion = hasShorthandPropertyBug && CSSProperty.shorthandPropertyExpansions[styleName];
        if (expansion) {
          // Shorthand property that IE8 won't like unsetting, so unset each
          // component to placate it
          for (var individualStyleName in expansion) {
            style[individualStyleName] = '';
          }
        } else {
          style[styleName] = '';
        }
      }
    }
  }

};

ReactPerf.measureMethods(CSSPropertyOperations, 'CSSPropertyOperations', {
  setValueForStyles: 'setValueForStyles'
});

module.exports = CSSPropertyOperations;
},{"./CSSProperty":308,"./ReactPerf":371,"./dangerousStyleValue":405,"fbjs/lib/ExecutionEnvironment":3,"fbjs/lib/camelizeStyleName":5,"fbjs/lib/hyphenateStyleName":16,"fbjs/lib/memoizeStringOnly":22,"fbjs/lib/warning":27}],310:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule CallbackQueue
 */

'use strict';

var PooledClass = require('./PooledClass');

var assign = require('./Object.assign');
var invariant = require('fbjs/lib/invariant');

/**
 * A specialized pseudo-event module to help keep track of components waiting to
 * be notified when their DOM representations are available for use.
 *
 * This implements `PooledClass`, so you should never need to instantiate this.
 * Instead, use `CallbackQueue.getPooled()`.
 *
 * @class ReactMountReady
 * @implements PooledClass
 * @internal
 */
function CallbackQueue() {
  this._callbacks = null;
  this._contexts = null;
}

assign(CallbackQueue.prototype, {

  /**
   * Enqueues a callback to be invoked when `notifyAll` is invoked.
   *
   * @param {function} callback Invoked when `notifyAll` is invoked.
   * @param {?object} context Context to call `callback` with.
   * @internal
   */
  enqueue: function (callback, context) {
    this._callbacks = this._callbacks || [];
    this._contexts = this._contexts || [];
    this._callbacks.push(callback);
    this._contexts.push(context);
  },

  /**
   * Invokes all enqueued callbacks and clears the queue. This is invoked after
   * the DOM representation of a component has been created or updated.
   *
   * @internal
   */
  notifyAll: function () {
    var callbacks = this._callbacks;
    var contexts = this._contexts;
    if (callbacks) {
      !(callbacks.length === contexts.length) ? "production" !== 'production' ? invariant(false, 'Mismatched list of contexts in callback queue') : invariant(false) : undefined;
      this._callbacks = null;
      this._contexts = null;
      for (var i = 0; i < callbacks.length; i++) {
        callbacks[i].call(contexts[i]);
      }
      callbacks.length = 0;
      contexts.length = 0;
    }
  },

  /**
   * Resets the internal queue.
   *
   * @internal
   */
  reset: function () {
    this._callbacks = null;
    this._contexts = null;
  },

  /**
   * `PooledClass` looks for this.
   */
  destructor: function () {
    this.reset();
  }

});

PooledClass.addPoolingTo(CallbackQueue);

module.exports = CallbackQueue;
},{"./Object.assign":327,"./PooledClass":328,"fbjs/lib/invariant":17}],311:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ChangeEventPlugin
 */

'use strict';

var EventConstants = require('./EventConstants');
var EventPluginHub = require('./EventPluginHub');
var EventPropagators = require('./EventPropagators');
var ExecutionEnvironment = require('fbjs/lib/ExecutionEnvironment');
var ReactUpdates = require('./ReactUpdates');
var SyntheticEvent = require('./SyntheticEvent');

var getEventTarget = require('./getEventTarget');
var isEventSupported = require('./isEventSupported');
var isTextInputElement = require('./isTextInputElement');
var keyOf = require('fbjs/lib/keyOf');

var topLevelTypes = EventConstants.topLevelTypes;

var eventTypes = {
  change: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onChange: null }),
      captured: keyOf({ onChangeCapture: null })
    },
    dependencies: [topLevelTypes.topBlur, topLevelTypes.topChange, topLevelTypes.topClick, topLevelTypes.topFocus, topLevelTypes.topInput, topLevelTypes.topKeyDown, topLevelTypes.topKeyUp, topLevelTypes.topSelectionChange]
  }
};

/**
 * For IE shims
 */
var activeElement = null;
var activeElementID = null;
var activeElementValue = null;
var activeElementValueProp = null;

/**
 * SECTION: handle `change` event
 */
function shouldUseChangeEvent(elem) {
  var nodeName = elem.nodeName && elem.nodeName.toLowerCase();
  return nodeName === 'select' || nodeName === 'input' && elem.type === 'file';
}

var doesChangeEventBubble = false;
if (ExecutionEnvironment.canUseDOM) {
  // See `handleChange` comment below
  doesChangeEventBubble = isEventSupported('change') && (!('documentMode' in document) || document.documentMode > 8);
}

function manualDispatchChangeEvent(nativeEvent) {
  var event = SyntheticEvent.getPooled(eventTypes.change, activeElementID, nativeEvent, getEventTarget(nativeEvent));
  EventPropagators.accumulateTwoPhaseDispatches(event);

  // If change and propertychange bubbled, we'd just bind to it like all the
  // other events and have it go through ReactBrowserEventEmitter. Since it
  // doesn't, we manually listen for the events and so we have to enqueue and
  // process the abstract event manually.
  //
  // Batching is necessary here in order to ensure that all event handlers run
  // before the next rerender (including event handlers attached to ancestor
  // elements instead of directly on the input). Without this, controlled
  // components don't work properly in conjunction with event bubbling because
  // the component is rerendered and the value reverted before all the event
  // handlers can run. See https://github.com/facebook/react/issues/708.
  ReactUpdates.batchedUpdates(runEventInBatch, event);
}

function runEventInBatch(event) {
  EventPluginHub.enqueueEvents(event);
  EventPluginHub.processEventQueue(false);
}

function startWatchingForChangeEventIE8(target, targetID) {
  activeElement = target;
  activeElementID = targetID;
  activeElement.attachEvent('onchange', manualDispatchChangeEvent);
}

function stopWatchingForChangeEventIE8() {
  if (!activeElement) {
    return;
  }
  activeElement.detachEvent('onchange', manualDispatchChangeEvent);
  activeElement = null;
  activeElementID = null;
}

function getTargetIDForChangeEvent(topLevelType, topLevelTarget, topLevelTargetID) {
  if (topLevelType === topLevelTypes.topChange) {
    return topLevelTargetID;
  }
}
function handleEventsForChangeEventIE8(topLevelType, topLevelTarget, topLevelTargetID) {
  if (topLevelType === topLevelTypes.topFocus) {
    // stopWatching() should be a noop here but we call it just in case we
    // missed a blur event somehow.
    stopWatchingForChangeEventIE8();
    startWatchingForChangeEventIE8(topLevelTarget, topLevelTargetID);
  } else if (topLevelType === topLevelTypes.topBlur) {
    stopWatchingForChangeEventIE8();
  }
}

/**
 * SECTION: handle `input` event
 */
var isInputEventSupported = false;
if (ExecutionEnvironment.canUseDOM) {
  // IE9 claims to support the input event but fails to trigger it when
  // deleting text, so we ignore its input events
  isInputEventSupported = isEventSupported('input') && (!('documentMode' in document) || document.documentMode > 9);
}

/**
 * (For old IE.) Replacement getter/setter for the `value` property that gets
 * set on the active element.
 */
var newValueProp = {
  get: function () {
    return activeElementValueProp.get.call(this);
  },
  set: function (val) {
    // Cast to a string so we can do equality checks.
    activeElementValue = '' + val;
    activeElementValueProp.set.call(this, val);
  }
};

/**
 * (For old IE.) Starts tracking propertychange events on the passed-in element
 * and override the value property so that we can distinguish user events from
 * value changes in JS.
 */
function startWatchingForValueChange(target, targetID) {
  activeElement = target;
  activeElementID = targetID;
  activeElementValue = target.value;
  activeElementValueProp = Object.getOwnPropertyDescriptor(target.constructor.prototype, 'value');

  // Not guarded in a canDefineProperty check: IE8 supports defineProperty only
  // on DOM elements
  Object.defineProperty(activeElement, 'value', newValueProp);
  activeElement.attachEvent('onpropertychange', handlePropertyChange);
}

/**
 * (For old IE.) Removes the event listeners from the currently-tracked element,
 * if any exists.
 */
function stopWatchingForValueChange() {
  if (!activeElement) {
    return;
  }

  // delete restores the original property definition
  delete activeElement.value;
  activeElement.detachEvent('onpropertychange', handlePropertyChange);

  activeElement = null;
  activeElementID = null;
  activeElementValue = null;
  activeElementValueProp = null;
}

/**
 * (For old IE.) Handles a propertychange event, sending a `change` event if
 * the value of the active element has changed.
 */
function handlePropertyChange(nativeEvent) {
  if (nativeEvent.propertyName !== 'value') {
    return;
  }
  var value = nativeEvent.srcElement.value;
  if (value === activeElementValue) {
    return;
  }
  activeElementValue = value;

  manualDispatchChangeEvent(nativeEvent);
}

/**
 * If a `change` event should be fired, returns the target's ID.
 */
function getTargetIDForInputEvent(topLevelType, topLevelTarget, topLevelTargetID) {
  if (topLevelType === topLevelTypes.topInput) {
    // In modern browsers (i.e., not IE8 or IE9), the input event is exactly
    // what we want so fall through here and trigger an abstract event
    return topLevelTargetID;
  }
}

// For IE8 and IE9.
function handleEventsForInputEventIE(topLevelType, topLevelTarget, topLevelTargetID) {
  if (topLevelType === topLevelTypes.topFocus) {
    // In IE8, we can capture almost all .value changes by adding a
    // propertychange handler and looking for events with propertyName
    // equal to 'value'
    // In IE9, propertychange fires for most input events but is buggy and
    // doesn't fire when text is deleted, but conveniently, selectionchange
    // appears to fire in all of the remaining cases so we catch those and
    // forward the event if the value has changed
    // In either case, we don't want to call the event handler if the value
    // is changed from JS so we redefine a setter for `.value` that updates
    // our activeElementValue variable, allowing us to ignore those changes
    //
    // stopWatching() should be a noop here but we call it just in case we
    // missed a blur event somehow.
    stopWatchingForValueChange();
    startWatchingForValueChange(topLevelTarget, topLevelTargetID);
  } else if (topLevelType === topLevelTypes.topBlur) {
    stopWatchingForValueChange();
  }
}

// For IE8 and IE9.
function getTargetIDForInputEventIE(topLevelType, topLevelTarget, topLevelTargetID) {
  if (topLevelType === topLevelTypes.topSelectionChange || topLevelType === topLevelTypes.topKeyUp || topLevelType === topLevelTypes.topKeyDown) {
    // On the selectionchange event, the target is just document which isn't
    // helpful for us so just check activeElement instead.
    //
    // 99% of the time, keydown and keyup aren't necessary. IE8 fails to fire
    // propertychange on the first input event after setting `value` from a
    // script and fires only keydown, keypress, keyup. Catching keyup usually
    // gets it and catching keydown lets us fire an event for the first
    // keystroke if user does a key repeat (it'll be a little delayed: right
    // before the second keystroke). Other input methods (e.g., paste) seem to
    // fire selectionchange normally.
    if (activeElement && activeElement.value !== activeElementValue) {
      activeElementValue = activeElement.value;
      return activeElementID;
    }
  }
}

/**
 * SECTION: handle `click` event
 */
function shouldUseClickEvent(elem) {
  // Use the `click` event to detect changes to checkbox and radio inputs.
  // This approach works across all browsers, whereas `change` does not fire
  // until `blur` in IE8.
  return elem.nodeName && elem.nodeName.toLowerCase() === 'input' && (elem.type === 'checkbox' || elem.type === 'radio');
}

function getTargetIDForClickEvent(topLevelType, topLevelTarget, topLevelTargetID) {
  if (topLevelType === topLevelTypes.topClick) {
    return topLevelTargetID;
  }
}

/**
 * This plugin creates an `onChange` event that normalizes change events
 * across form elements. This event fires at a time when it's possible to
 * change the element's value without seeing a flicker.
 *
 * Supported elements are:
 * - input (see `isTextInputElement`)
 * - textarea
 * - select
 */
var ChangeEventPlugin = {

  eventTypes: eventTypes,

  /**
   * @param {string} topLevelType Record from `EventConstants`.
   * @param {DOMEventTarget} topLevelTarget The listening component root node.
   * @param {string} topLevelTargetID ID of `topLevelTarget`.
   * @param {object} nativeEvent Native browser event.
   * @return {*} An accumulation of synthetic events.
   * @see {EventPluginHub.extractEvents}
   */
  extractEvents: function (topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget) {

    var getTargetIDFunc, handleEventFunc;
    if (shouldUseChangeEvent(topLevelTarget)) {
      if (doesChangeEventBubble) {
        getTargetIDFunc = getTargetIDForChangeEvent;
      } else {
        handleEventFunc = handleEventsForChangeEventIE8;
      }
    } else if (isTextInputElement(topLevelTarget)) {
      if (isInputEventSupported) {
        getTargetIDFunc = getTargetIDForInputEvent;
      } else {
        getTargetIDFunc = getTargetIDForInputEventIE;
        handleEventFunc = handleEventsForInputEventIE;
      }
    } else if (shouldUseClickEvent(topLevelTarget)) {
      getTargetIDFunc = getTargetIDForClickEvent;
    }

    if (getTargetIDFunc) {
      var targetID = getTargetIDFunc(topLevelType, topLevelTarget, topLevelTargetID);
      if (targetID) {
        var event = SyntheticEvent.getPooled(eventTypes.change, targetID, nativeEvent, nativeEventTarget);
        event.type = 'change';
        EventPropagators.accumulateTwoPhaseDispatches(event);
        return event;
      }
    }

    if (handleEventFunc) {
      handleEventFunc(topLevelType, topLevelTarget, topLevelTargetID);
    }
  }

};

module.exports = ChangeEventPlugin;
},{"./EventConstants":319,"./EventPluginHub":320,"./EventPropagators":323,"./ReactUpdates":383,"./SyntheticEvent":392,"./getEventTarget":413,"./isEventSupported":418,"./isTextInputElement":419,"fbjs/lib/ExecutionEnvironment":3,"fbjs/lib/keyOf":21}],312:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ClientReactRootIndex
 * @typechecks
 */

'use strict';

var nextReactRootIndex = 0;

var ClientReactRootIndex = {
  createReactRootIndex: function () {
    return nextReactRootIndex++;
  }
};

module.exports = ClientReactRootIndex;
},{}],313:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule DOMChildrenOperations
 * @typechecks static-only
 */

'use strict';

var Danger = require('./Danger');
var ReactMultiChildUpdateTypes = require('./ReactMultiChildUpdateTypes');
var ReactPerf = require('./ReactPerf');

var setInnerHTML = require('./setInnerHTML');
var setTextContent = require('./setTextContent');
var invariant = require('fbjs/lib/invariant');

/**
 * Inserts `childNode` as a child of `parentNode` at the `index`.
 *
 * @param {DOMElement} parentNode Parent node in which to insert.
 * @param {DOMElement} childNode Child node to insert.
 * @param {number} index Index at which to insert the child.
 * @internal
 */
function insertChildAt(parentNode, childNode, index) {
  // By exploiting arrays returning `undefined` for an undefined index, we can
  // rely exclusively on `insertBefore(node, null)` instead of also using
  // `appendChild(node)`. However, using `undefined` is not allowed by all
  // browsers so we must replace it with `null`.

  // fix render order error in safari
  // IE8 will throw error when index out of list size.
  var beforeChild = index >= parentNode.childNodes.length ? null : parentNode.childNodes.item(index);

  parentNode.insertBefore(childNode, beforeChild);
}

/**
 * Operations for updating with DOM children.
 */
var DOMChildrenOperations = {

  dangerouslyReplaceNodeWithMarkup: Danger.dangerouslyReplaceNodeWithMarkup,

  updateTextContent: setTextContent,

  /**
   * Updates a component's children by processing a series of updates. The
   * update configurations are each expected to have a `parentNode` property.
   *
   * @param {array<object>} updates List of update configurations.
   * @param {array<string>} markupList List of markup strings.
   * @internal
   */
  processUpdates: function (updates, markupList) {
    var update;
    // Mapping from parent IDs to initial child orderings.
    var initialChildren = null;
    // List of children that will be moved or removed.
    var updatedChildren = null;

    for (var i = 0; i < updates.length; i++) {
      update = updates[i];
      if (update.type === ReactMultiChildUpdateTypes.MOVE_EXISTING || update.type === ReactMultiChildUpdateTypes.REMOVE_NODE) {
        var updatedIndex = update.fromIndex;
        var updatedChild = update.parentNode.childNodes[updatedIndex];
        var parentID = update.parentID;

        !updatedChild ? "production" !== 'production' ? invariant(false, 'processUpdates(): Unable to find child %s of element. This ' + 'probably means the DOM was unexpectedly mutated (e.g., by the ' + 'browser), usually due to forgetting a <tbody> when using tables, ' + 'nesting tags like <form>, <p>, or <a>, or using non-SVG elements ' + 'in an <svg> parent. Try inspecting the child nodes of the element ' + 'with React ID `%s`.', updatedIndex, parentID) : invariant(false) : undefined;

        initialChildren = initialChildren || {};
        initialChildren[parentID] = initialChildren[parentID] || [];
        initialChildren[parentID][updatedIndex] = updatedChild;

        updatedChildren = updatedChildren || [];
        updatedChildren.push(updatedChild);
      }
    }

    var renderedMarkup;
    // markupList is either a list of markup or just a list of elements
    if (markupList.length && typeof markupList[0] === 'string') {
      renderedMarkup = Danger.dangerouslyRenderMarkup(markupList);
    } else {
      renderedMarkup = markupList;
    }

    // Remove updated children first so that `toIndex` is consistent.
    if (updatedChildren) {
      for (var j = 0; j < updatedChildren.length; j++) {
        updatedChildren[j].parentNode.removeChild(updatedChildren[j]);
      }
    }

    for (var k = 0; k < updates.length; k++) {
      update = updates[k];
      switch (update.type) {
        case ReactMultiChildUpdateTypes.INSERT_MARKUP:
          insertChildAt(update.parentNode, renderedMarkup[update.markupIndex], update.toIndex);
          break;
        case ReactMultiChildUpdateTypes.MOVE_EXISTING:
          insertChildAt(update.parentNode, initialChildren[update.parentID][update.fromIndex], update.toIndex);
          break;
        case ReactMultiChildUpdateTypes.SET_MARKUP:
          setInnerHTML(update.parentNode, update.content);
          break;
        case ReactMultiChildUpdateTypes.TEXT_CONTENT:
          setTextContent(update.parentNode, update.content);
          break;
        case ReactMultiChildUpdateTypes.REMOVE_NODE:
          // Already removed by the for-loop above.
          break;
      }
    }
  }

};

ReactPerf.measureMethods(DOMChildrenOperations, 'DOMChildrenOperations', {
  updateTextContent: 'updateTextContent'
});

module.exports = DOMChildrenOperations;
},{"./Danger":316,"./ReactMultiChildUpdateTypes":367,"./ReactPerf":371,"./setInnerHTML":421,"./setTextContent":422,"fbjs/lib/invariant":17}],314:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule DOMProperty
 * @typechecks static-only
 */

'use strict';

var invariant = require('fbjs/lib/invariant');

function checkMask(value, bitmask) {
  return (value & bitmask) === bitmask;
}

var DOMPropertyInjection = {
  /**
   * Mapping from normalized, camelcased property names to a configuration that
   * specifies how the associated DOM property should be accessed or rendered.
   */
  MUST_USE_ATTRIBUTE: 0x1,
  MUST_USE_PROPERTY: 0x2,
  HAS_SIDE_EFFECTS: 0x4,
  HAS_BOOLEAN_VALUE: 0x8,
  HAS_NUMERIC_VALUE: 0x10,
  HAS_POSITIVE_NUMERIC_VALUE: 0x20 | 0x10,
  HAS_OVERLOADED_BOOLEAN_VALUE: 0x40,

  /**
   * Inject some specialized knowledge about the DOM. This takes a config object
   * with the following properties:
   *
   * isCustomAttribute: function that given an attribute name will return true
   * if it can be inserted into the DOM verbatim. Useful for data-* or aria-*
   * attributes where it's impossible to enumerate all of the possible
   * attribute names,
   *
   * Properties: object mapping DOM property name to one of the
   * DOMPropertyInjection constants or null. If your attribute isn't in here,
   * it won't get written to the DOM.
   *
   * DOMAttributeNames: object mapping React attribute name to the DOM
   * attribute name. Attribute names not specified use the **lowercase**
   * normalized name.
   *
   * DOMAttributeNamespaces: object mapping React attribute name to the DOM
   * attribute namespace URL. (Attribute names not specified use no namespace.)
   *
   * DOMPropertyNames: similar to DOMAttributeNames but for DOM properties.
   * Property names not specified use the normalized name.
   *
   * DOMMutationMethods: Properties that require special mutation methods. If
   * `value` is undefined, the mutation method should unset the property.
   *
   * @param {object} domPropertyConfig the config as described above.
   */
  injectDOMPropertyConfig: function (domPropertyConfig) {
    var Injection = DOMPropertyInjection;
    var Properties = domPropertyConfig.Properties || {};
    var DOMAttributeNamespaces = domPropertyConfig.DOMAttributeNamespaces || {};
    var DOMAttributeNames = domPropertyConfig.DOMAttributeNames || {};
    var DOMPropertyNames = domPropertyConfig.DOMPropertyNames || {};
    var DOMMutationMethods = domPropertyConfig.DOMMutationMethods || {};

    if (domPropertyConfig.isCustomAttribute) {
      DOMProperty._isCustomAttributeFunctions.push(domPropertyConfig.isCustomAttribute);
    }

    for (var propName in Properties) {
      !!DOMProperty.properties.hasOwnProperty(propName) ? "production" !== 'production' ? invariant(false, 'injectDOMPropertyConfig(...): You\'re trying to inject DOM property ' + '\'%s\' which has already been injected. You may be accidentally ' + 'injecting the same DOM property config twice, or you may be ' + 'injecting two configs that have conflicting property names.', propName) : invariant(false) : undefined;

      var lowerCased = propName.toLowerCase();
      var propConfig = Properties[propName];

      var propertyInfo = {
        attributeName: lowerCased,
        attributeNamespace: null,
        propertyName: propName,
        mutationMethod: null,

        mustUseAttribute: checkMask(propConfig, Injection.MUST_USE_ATTRIBUTE),
        mustUseProperty: checkMask(propConfig, Injection.MUST_USE_PROPERTY),
        hasSideEffects: checkMask(propConfig, Injection.HAS_SIDE_EFFECTS),
        hasBooleanValue: checkMask(propConfig, Injection.HAS_BOOLEAN_VALUE),
        hasNumericValue: checkMask(propConfig, Injection.HAS_NUMERIC_VALUE),
        hasPositiveNumericValue: checkMask(propConfig, Injection.HAS_POSITIVE_NUMERIC_VALUE),
        hasOverloadedBooleanValue: checkMask(propConfig, Injection.HAS_OVERLOADED_BOOLEAN_VALUE)
      };

      !(!propertyInfo.mustUseAttribute || !propertyInfo.mustUseProperty) ? "production" !== 'production' ? invariant(false, 'DOMProperty: Cannot require using both attribute and property: %s', propName) : invariant(false) : undefined;
      !(propertyInfo.mustUseProperty || !propertyInfo.hasSideEffects) ? "production" !== 'production' ? invariant(false, 'DOMProperty: Properties that have side effects must use property: %s', propName) : invariant(false) : undefined;
      !(propertyInfo.hasBooleanValue + propertyInfo.hasNumericValue + propertyInfo.hasOverloadedBooleanValue <= 1) ? "production" !== 'production' ? invariant(false, 'DOMProperty: Value can be one of boolean, overloaded boolean, or ' + 'numeric value, but not a combination: %s', propName) : invariant(false) : undefined;

      if ("production" !== 'production') {
        DOMProperty.getPossibleStandardName[lowerCased] = propName;
      }

      if (DOMAttributeNames.hasOwnProperty(propName)) {
        var attributeName = DOMAttributeNames[propName];
        propertyInfo.attributeName = attributeName;
        if ("production" !== 'production') {
          DOMProperty.getPossibleStandardName[attributeName] = propName;
        }
      }

      if (DOMAttributeNamespaces.hasOwnProperty(propName)) {
        propertyInfo.attributeNamespace = DOMAttributeNamespaces[propName];
      }

      if (DOMPropertyNames.hasOwnProperty(propName)) {
        propertyInfo.propertyName = DOMPropertyNames[propName];
      }

      if (DOMMutationMethods.hasOwnProperty(propName)) {
        propertyInfo.mutationMethod = DOMMutationMethods[propName];
      }

      DOMProperty.properties[propName] = propertyInfo;
    }
  }
};
var defaultValueCache = {};

/**
 * DOMProperty exports lookup objects that can be used like functions:
 *
 *   > DOMProperty.isValid['id']
 *   true
 *   > DOMProperty.isValid['foobar']
 *   undefined
 *
 * Although this may be confusing, it performs better in general.
 *
 * @see http://jsperf.com/key-exists
 * @see http://jsperf.com/key-missing
 */
var DOMProperty = {

  ID_ATTRIBUTE_NAME: 'data-reactid',

  /**
   * Map from property "standard name" to an object with info about how to set
   * the property in the DOM. Each object contains:
   *
   * attributeName:
   *   Used when rendering markup or with `*Attribute()`.
   * attributeNamespace
   * propertyName:
   *   Used on DOM node instances. (This includes properties that mutate due to
   *   external factors.)
   * mutationMethod:
   *   If non-null, used instead of the property or `setAttribute()` after
   *   initial render.
   * mustUseAttribute:
   *   Whether the property must be accessed and mutated using `*Attribute()`.
   *   (This includes anything that fails `<propName> in <element>`.)
   * mustUseProperty:
   *   Whether the property must be accessed and mutated as an object property.
   * hasSideEffects:
   *   Whether or not setting a value causes side effects such as triggering
   *   resources to be loaded or text selection changes. If true, we read from
   *   the DOM before updating to ensure that the value is only set if it has
   *   changed.
   * hasBooleanValue:
   *   Whether the property should be removed when set to a falsey value.
   * hasNumericValue:
   *   Whether the property must be numeric or parse as a numeric and should be
   *   removed when set to a falsey value.
   * hasPositiveNumericValue:
   *   Whether the property must be positive numeric or parse as a positive
   *   numeric and should be removed when set to a falsey value.
   * hasOverloadedBooleanValue:
   *   Whether the property can be used as a flag as well as with a value.
   *   Removed when strictly equal to false; present without a value when
   *   strictly equal to true; present with a value otherwise.
   */
  properties: {},

  /**
   * Mapping from lowercase property names to the properly cased version, used
   * to warn in the case of missing properties. Available only in __DEV__.
   * @type {Object}
   */
  getPossibleStandardName: "production" !== 'production' ? {} : null,

  /**
   * All of the isCustomAttribute() functions that have been injected.
   */
  _isCustomAttributeFunctions: [],

  /**
   * Checks whether a property name is a custom attribute.
   * @method
   */
  isCustomAttribute: function (attributeName) {
    for (var i = 0; i < DOMProperty._isCustomAttributeFunctions.length; i++) {
      var isCustomAttributeFn = DOMProperty._isCustomAttributeFunctions[i];
      if (isCustomAttributeFn(attributeName)) {
        return true;
      }
    }
    return false;
  },

  /**
   * Returns the default property value for a DOM property (i.e., not an
   * attribute). Most default values are '' or false, but not all. Worse yet,
   * some (in particular, `type`) vary depending on the type of element.
   *
   * TODO: Is it better to grab all the possible properties when creating an
   * element to avoid having to create the same element twice?
   */
  getDefaultValueForProperty: function (nodeName, prop) {
    var nodeDefaults = defaultValueCache[nodeName];
    var testElement;
    if (!nodeDefaults) {
      defaultValueCache[nodeName] = nodeDefaults = {};
    }
    if (!(prop in nodeDefaults)) {
      testElement = document.createElement(nodeName);
      nodeDefaults[prop] = testElement[prop];
    }
    return nodeDefaults[prop];
  },

  injection: DOMPropertyInjection
};

module.exports = DOMProperty;
},{"fbjs/lib/invariant":17}],315:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule DOMPropertyOperations
 * @typechecks static-only
 */

'use strict';

var DOMProperty = require('./DOMProperty');
var ReactPerf = require('./ReactPerf');

var quoteAttributeValueForBrowser = require('./quoteAttributeValueForBrowser');
var warning = require('fbjs/lib/warning');

// Simplified subset
var VALID_ATTRIBUTE_NAME_REGEX = /^[a-zA-Z_][\w\.\-]*$/;
var illegalAttributeNameCache = {};
var validatedAttributeNameCache = {};

function isAttributeNameSafe(attributeName) {
  if (validatedAttributeNameCache.hasOwnProperty(attributeName)) {
    return true;
  }
  if (illegalAttributeNameCache.hasOwnProperty(attributeName)) {
    return false;
  }
  if (VALID_ATTRIBUTE_NAME_REGEX.test(attributeName)) {
    validatedAttributeNameCache[attributeName] = true;
    return true;
  }
  illegalAttributeNameCache[attributeName] = true;
  "production" !== 'production' ? warning(false, 'Invalid attribute name: `%s`', attributeName) : undefined;
  return false;
}

function shouldIgnoreValue(propertyInfo, value) {
  return value == null || propertyInfo.hasBooleanValue && !value || propertyInfo.hasNumericValue && isNaN(value) || propertyInfo.hasPositiveNumericValue && value < 1 || propertyInfo.hasOverloadedBooleanValue && value === false;
}

if ("production" !== 'production') {
  var reactProps = {
    children: true,
    dangerouslySetInnerHTML: true,
    key: true,
    ref: true
  };
  var warnedProperties = {};

  var warnUnknownProperty = function (name) {
    if (reactProps.hasOwnProperty(name) && reactProps[name] || warnedProperties.hasOwnProperty(name) && warnedProperties[name]) {
      return;
    }

    warnedProperties[name] = true;
    var lowerCasedName = name.toLowerCase();

    // data-* attributes should be lowercase; suggest the lowercase version
    var standardName = DOMProperty.isCustomAttribute(lowerCasedName) ? lowerCasedName : DOMProperty.getPossibleStandardName.hasOwnProperty(lowerCasedName) ? DOMProperty.getPossibleStandardName[lowerCasedName] : null;

    // For now, only warn when we have a suggested correction. This prevents
    // logging too much when using transferPropsTo.
    "production" !== 'production' ? warning(standardName == null, 'Unknown DOM property %s. Did you mean %s?', name, standardName) : undefined;
  };
}

/**
 * Operations for dealing with DOM properties.
 */
var DOMPropertyOperations = {

  /**
   * Creates markup for the ID property.
   *
   * @param {string} id Unescaped ID.
   * @return {string} Markup string.
   */
  createMarkupForID: function (id) {
    return DOMProperty.ID_ATTRIBUTE_NAME + '=' + quoteAttributeValueForBrowser(id);
  },

  setAttributeForID: function (node, id) {
    node.setAttribute(DOMProperty.ID_ATTRIBUTE_NAME, id);
  },

  /**
   * Creates markup for a property.
   *
   * @param {string} name
   * @param {*} value
   * @return {?string} Markup string, or null if the property was invalid.
   */
  createMarkupForProperty: function (name, value) {
    var propertyInfo = DOMProperty.properties.hasOwnProperty(name) ? DOMProperty.properties[name] : null;
    if (propertyInfo) {
      if (shouldIgnoreValue(propertyInfo, value)) {
        return '';
      }
      var attributeName = propertyInfo.attributeName;
      if (propertyInfo.hasBooleanValue || propertyInfo.hasOverloadedBooleanValue && value === true) {
        return attributeName + '=""';
      }
      return attributeName + '=' + quoteAttributeValueForBrowser(value);
    } else if (DOMProperty.isCustomAttribute(name)) {
      if (value == null) {
        return '';
      }
      return name + '=' + quoteAttributeValueForBrowser(value);
    } else if ("production" !== 'production') {
      warnUnknownProperty(name);
    }
    return null;
  },

  /**
   * Creates markup for a custom property.
   *
   * @param {string} name
   * @param {*} value
   * @return {string} Markup string, or empty string if the property was invalid.
   */
  createMarkupForCustomAttribute: function (name, value) {
    if (!isAttributeNameSafe(name) || value == null) {
      return '';
    }
    return name + '=' + quoteAttributeValueForBrowser(value);
  },

  /**
   * Sets the value for a property on a node.
   *
   * @param {DOMElement} node
   * @param {string} name
   * @param {*} value
   */
  setValueForProperty: function (node, name, value) {
    var propertyInfo = DOMProperty.properties.hasOwnProperty(name) ? DOMProperty.properties[name] : null;
    if (propertyInfo) {
      var mutationMethod = propertyInfo.mutationMethod;
      if (mutationMethod) {
        mutationMethod(node, value);
      } else if (shouldIgnoreValue(propertyInfo, value)) {
        this.deleteValueForProperty(node, name);
      } else if (propertyInfo.mustUseAttribute) {
        var attributeName = propertyInfo.attributeName;
        var namespace = propertyInfo.attributeNamespace;
        // `setAttribute` with objects becomes only `[object]` in IE8/9,
        // ('' + value) makes it output the correct toString()-value.
        if (namespace) {
          node.setAttributeNS(namespace, attributeName, '' + value);
        } else if (propertyInfo.hasBooleanValue || propertyInfo.hasOverloadedBooleanValue && value === true) {
          node.setAttribute(attributeName, '');
        } else {
          node.setAttribute(attributeName, '' + value);
        }
      } else {
        var propName = propertyInfo.propertyName;
        // Must explicitly cast values for HAS_SIDE_EFFECTS-properties to the
        // property type before comparing; only `value` does and is string.
        if (!propertyInfo.hasSideEffects || '' + node[propName] !== '' + value) {
          // Contrary to `setAttribute`, object properties are properly
          // `toString`ed by IE8/9.
          node[propName] = value;
        }
      }
    } else if (DOMProperty.isCustomAttribute(name)) {
      DOMPropertyOperations.setValueForAttribute(node, name, value);
    } else if ("production" !== 'production') {
      warnUnknownProperty(name);
    }
  },

  setValueForAttribute: function (node, name, value) {
    if (!isAttributeNameSafe(name)) {
      return;
    }
    if (value == null) {
      node.removeAttribute(name);
    } else {
      node.setAttribute(name, '' + value);
    }
  },

  /**
   * Deletes the value for a property on a node.
   *
   * @param {DOMElement} node
   * @param {string} name
   */
  deleteValueForProperty: function (node, name) {
    var propertyInfo = DOMProperty.properties.hasOwnProperty(name) ? DOMProperty.properties[name] : null;
    if (propertyInfo) {
      var mutationMethod = propertyInfo.mutationMethod;
      if (mutationMethod) {
        mutationMethod(node, undefined);
      } else if (propertyInfo.mustUseAttribute) {
        node.removeAttribute(propertyInfo.attributeName);
      } else {
        var propName = propertyInfo.propertyName;
        var defaultValue = DOMProperty.getDefaultValueForProperty(node.nodeName, propName);
        if (!propertyInfo.hasSideEffects || '' + node[propName] !== defaultValue) {
          node[propName] = defaultValue;
        }
      }
    } else if (DOMProperty.isCustomAttribute(name)) {
      node.removeAttribute(name);
    } else if ("production" !== 'production') {
      warnUnknownProperty(name);
    }
  }

};

ReactPerf.measureMethods(DOMPropertyOperations, 'DOMPropertyOperations', {
  setValueForProperty: 'setValueForProperty',
  setValueForAttribute: 'setValueForAttribute',
  deleteValueForProperty: 'deleteValueForProperty'
});

module.exports = DOMPropertyOperations;
},{"./DOMProperty":314,"./ReactPerf":371,"./quoteAttributeValueForBrowser":420,"fbjs/lib/warning":27}],316:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule Danger
 * @typechecks static-only
 */

'use strict';

var ExecutionEnvironment = require('fbjs/lib/ExecutionEnvironment');

var createNodesFromMarkup = require('fbjs/lib/createNodesFromMarkup');
var emptyFunction = require('fbjs/lib/emptyFunction');
var getMarkupWrap = require('fbjs/lib/getMarkupWrap');
var invariant = require('fbjs/lib/invariant');

var OPEN_TAG_NAME_EXP = /^(<[^ \/>]+)/;
var RESULT_INDEX_ATTR = 'data-danger-index';

/**
 * Extracts the `nodeName` from a string of markup.
 *
 * NOTE: Extracting the `nodeName` does not require a regular expression match
 * because we make assumptions about React-generated markup (i.e. there are no
 * spaces surrounding the opening tag and there is at least one attribute).
 *
 * @param {string} markup String of markup.
 * @return {string} Node name of the supplied markup.
 * @see http://jsperf.com/extract-nodename
 */
function getNodeName(markup) {
  return markup.substring(1, markup.indexOf(' '));
}

var Danger = {

  /**
   * Renders markup into an array of nodes. The markup is expected to render
   * into a list of root nodes. Also, the length of `resultList` and
   * `markupList` should be the same.
   *
   * @param {array<string>} markupList List of markup strings to render.
   * @return {array<DOMElement>} List of rendered nodes.
   * @internal
   */
  dangerouslyRenderMarkup: function (markupList) {
    !ExecutionEnvironment.canUseDOM ? "production" !== 'production' ? invariant(false, 'dangerouslyRenderMarkup(...): Cannot render markup in a worker ' + 'thread. Make sure `window` and `document` are available globally ' + 'before requiring React when unit testing or use ' + 'ReactDOMServer.renderToString for server rendering.') : invariant(false) : undefined;
    var nodeName;
    var markupByNodeName = {};
    // Group markup by `nodeName` if a wrap is necessary, else by '*'.
    for (var i = 0; i < markupList.length; i++) {
      !markupList[i] ? "production" !== 'production' ? invariant(false, 'dangerouslyRenderMarkup(...): Missing markup.') : invariant(false) : undefined;
      nodeName = getNodeName(markupList[i]);
      nodeName = getMarkupWrap(nodeName) ? nodeName : '*';
      markupByNodeName[nodeName] = markupByNodeName[nodeName] || [];
      markupByNodeName[nodeName][i] = markupList[i];
    }
    var resultList = [];
    var resultListAssignmentCount = 0;
    for (nodeName in markupByNodeName) {
      if (!markupByNodeName.hasOwnProperty(nodeName)) {
        continue;
      }
      var markupListByNodeName = markupByNodeName[nodeName];

      // This for-in loop skips the holes of the sparse array. The order of
      // iteration should follow the order of assignment, which happens to match
      // numerical index order, but we don't rely on that.
      var resultIndex;
      for (resultIndex in markupListByNodeName) {
        if (markupListByNodeName.hasOwnProperty(resultIndex)) {
          var markup = markupListByNodeName[resultIndex];

          // Push the requested markup with an additional RESULT_INDEX_ATTR
          // attribute.  If the markup does not start with a < character, it
          // will be discarded below (with an appropriate console.error).
          markupListByNodeName[resultIndex] = markup.replace(OPEN_TAG_NAME_EXP,
          // This index will be parsed back out below.
          '$1 ' + RESULT_INDEX_ATTR + '="' + resultIndex + '" ');
        }
      }

      // Render each group of markup with similar wrapping `nodeName`.
      var renderNodes = createNodesFromMarkup(markupListByNodeName.join(''), emptyFunction // Do nothing special with <script> tags.
      );

      for (var j = 0; j < renderNodes.length; ++j) {
        var renderNode = renderNodes[j];
        if (renderNode.hasAttribute && renderNode.hasAttribute(RESULT_INDEX_ATTR)) {

          resultIndex = +renderNode.getAttribute(RESULT_INDEX_ATTR);
          renderNode.removeAttribute(RESULT_INDEX_ATTR);

          !!resultList.hasOwnProperty(resultIndex) ? "production" !== 'production' ? invariant(false, 'Danger: Assigning to an already-occupied result index.') : invariant(false) : undefined;

          resultList[resultIndex] = renderNode;

          // This should match resultList.length and markupList.length when
          // we're done.
          resultListAssignmentCount += 1;
        } else if ("production" !== 'production') {
          console.error('Danger: Discarding unexpected node:', renderNode);
        }
      }
    }

    // Although resultList was populated out of order, it should now be a dense
    // array.
    !(resultListAssignmentCount === resultList.length) ? "production" !== 'production' ? invariant(false, 'Danger: Did not assign to every index of resultList.') : invariant(false) : undefined;

    !(resultList.length === markupList.length) ? "production" !== 'production' ? invariant(false, 'Danger: Expected markup to render %s nodes, but rendered %s.', markupList.length, resultList.length) : invariant(false) : undefined;

    return resultList;
  },

  /**
   * Replaces a node with a string of markup at its current position within its
   * parent. The markup must render into a single root node.
   *
   * @param {DOMElement} oldChild Child node to replace.
   * @param {string} markup Markup to render in place of the child node.
   * @internal
   */
  dangerouslyReplaceNodeWithMarkup: function (oldChild, markup) {
    !ExecutionEnvironment.canUseDOM ? "production" !== 'production' ? invariant(false, 'dangerouslyReplaceNodeWithMarkup(...): Cannot render markup in a ' + 'worker thread. Make sure `window` and `document` are available ' + 'globally before requiring React when unit testing or use ' + 'ReactDOMServer.renderToString() for server rendering.') : invariant(false) : undefined;
    !markup ? "production" !== 'production' ? invariant(false, 'dangerouslyReplaceNodeWithMarkup(...): Missing markup.') : invariant(false) : undefined;
    !(oldChild.tagName.toLowerCase() !== 'html') ? "production" !== 'production' ? invariant(false, 'dangerouslyReplaceNodeWithMarkup(...): Cannot replace markup of the ' + '<html> node. This is because browser quirks make this unreliable ' + 'and/or slow. If you want to render to the root you must use ' + 'server rendering. See ReactDOMServer.renderToString().') : invariant(false) : undefined;

    var newChild;
    if (typeof markup === 'string') {
      newChild = createNodesFromMarkup(markup, emptyFunction)[0];
    } else {
      newChild = markup;
    }
    oldChild.parentNode.replaceChild(newChild, oldChild);
  }

};

module.exports = Danger;
},{"fbjs/lib/ExecutionEnvironment":3,"fbjs/lib/createNodesFromMarkup":8,"fbjs/lib/emptyFunction":9,"fbjs/lib/getMarkupWrap":13,"fbjs/lib/invariant":17}],317:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule DefaultEventPluginOrder
 */

'use strict';

var keyOf = require('fbjs/lib/keyOf');

/**
 * Module that is injectable into `EventPluginHub`, that specifies a
 * deterministic ordering of `EventPlugin`s. A convenient way to reason about
 * plugins, without having to package every one of them. This is better than
 * having plugins be ordered in the same order that they are injected because
 * that ordering would be influenced by the packaging order.
 * `ResponderEventPlugin` must occur before `SimpleEventPlugin` so that
 * preventing default on events is convenient in `SimpleEventPlugin` handlers.
 */
var DefaultEventPluginOrder = [keyOf({ ResponderEventPlugin: null }), keyOf({ SimpleEventPlugin: null }), keyOf({ TapEventPlugin: null }), keyOf({ EnterLeaveEventPlugin: null }), keyOf({ ChangeEventPlugin: null }), keyOf({ SelectEventPlugin: null }), keyOf({ BeforeInputEventPlugin: null })];

module.exports = DefaultEventPluginOrder;
},{"fbjs/lib/keyOf":21}],318:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule EnterLeaveEventPlugin
 * @typechecks static-only
 */

'use strict';

var EventConstants = require('./EventConstants');
var EventPropagators = require('./EventPropagators');
var SyntheticMouseEvent = require('./SyntheticMouseEvent');

var ReactMount = require('./ReactMount');
var keyOf = require('fbjs/lib/keyOf');

var topLevelTypes = EventConstants.topLevelTypes;
var getFirstReactDOM = ReactMount.getFirstReactDOM;

var eventTypes = {
  mouseEnter: {
    registrationName: keyOf({ onMouseEnter: null }),
    dependencies: [topLevelTypes.topMouseOut, topLevelTypes.topMouseOver]
  },
  mouseLeave: {
    registrationName: keyOf({ onMouseLeave: null }),
    dependencies: [topLevelTypes.topMouseOut, topLevelTypes.topMouseOver]
  }
};

var extractedEvents = [null, null];

var EnterLeaveEventPlugin = {

  eventTypes: eventTypes,

  /**
   * For almost every interaction we care about, there will be both a top-level
   * `mouseover` and `mouseout` event that occurs. Only use `mouseout` so that
   * we do not extract duplicate events. However, moving the mouse into the
   * browser from outside will not fire a `mouseout` event. In this case, we use
   * the `mouseover` top-level event.
   *
   * @param {string} topLevelType Record from `EventConstants`.
   * @param {DOMEventTarget} topLevelTarget The listening component root node.
   * @param {string} topLevelTargetID ID of `topLevelTarget`.
   * @param {object} nativeEvent Native browser event.
   * @return {*} An accumulation of synthetic events.
   * @see {EventPluginHub.extractEvents}
   */
  extractEvents: function (topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget) {
    if (topLevelType === topLevelTypes.topMouseOver && (nativeEvent.relatedTarget || nativeEvent.fromElement)) {
      return null;
    }
    if (topLevelType !== topLevelTypes.topMouseOut && topLevelType !== topLevelTypes.topMouseOver) {
      // Must not be a mouse in or mouse out - ignoring.
      return null;
    }

    var win;
    if (topLevelTarget.window === topLevelTarget) {
      // `topLevelTarget` is probably a window object.
      win = topLevelTarget;
    } else {
      // TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.
      var doc = topLevelTarget.ownerDocument;
      if (doc) {
        win = doc.defaultView || doc.parentWindow;
      } else {
        win = window;
      }
    }

    var from;
    var to;
    var fromID = '';
    var toID = '';
    if (topLevelType === topLevelTypes.topMouseOut) {
      from = topLevelTarget;
      fromID = topLevelTargetID;
      to = getFirstReactDOM(nativeEvent.relatedTarget || nativeEvent.toElement);
      if (to) {
        toID = ReactMount.getID(to);
      } else {
        to = win;
      }
      to = to || win;
    } else {
      from = win;
      to = topLevelTarget;
      toID = topLevelTargetID;
    }

    if (from === to) {
      // Nothing pertains to our managed components.
      return null;
    }

    var leave = SyntheticMouseEvent.getPooled(eventTypes.mouseLeave, fromID, nativeEvent, nativeEventTarget);
    leave.type = 'mouseleave';
    leave.target = from;
    leave.relatedTarget = to;

    var enter = SyntheticMouseEvent.getPooled(eventTypes.mouseEnter, toID, nativeEvent, nativeEventTarget);
    enter.type = 'mouseenter';
    enter.target = to;
    enter.relatedTarget = from;

    EventPropagators.accumulateEnterLeaveDispatches(leave, enter, fromID, toID);

    extractedEvents[0] = leave;
    extractedEvents[1] = enter;

    return extractedEvents;
  }

};

module.exports = EnterLeaveEventPlugin;
},{"./EventConstants":319,"./EventPropagators":323,"./ReactMount":365,"./SyntheticMouseEvent":396,"fbjs/lib/keyOf":21}],319:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule EventConstants
 */

'use strict';

var keyMirror = require('fbjs/lib/keyMirror');

var PropagationPhases = keyMirror({ bubbled: null, captured: null });

/**
 * Types of raw signals from the browser caught at the top level.
 */
var topLevelTypes = keyMirror({
  topAbort: null,
  topBlur: null,
  topCanPlay: null,
  topCanPlayThrough: null,
  topChange: null,
  topClick: null,
  topCompositionEnd: null,
  topCompositionStart: null,
  topCompositionUpdate: null,
  topContextMenu: null,
  topCopy: null,
  topCut: null,
  topDoubleClick: null,
  topDrag: null,
  topDragEnd: null,
  topDragEnter: null,
  topDragExit: null,
  topDragLeave: null,
  topDragOver: null,
  topDragStart: null,
  topDrop: null,
  topDurationChange: null,
  topEmptied: null,
  topEncrypted: null,
  topEnded: null,
  topError: null,
  topFocus: null,
  topInput: null,
  topKeyDown: null,
  topKeyPress: null,
  topKeyUp: null,
  topLoad: null,
  topLoadedData: null,
  topLoadedMetadata: null,
  topLoadStart: null,
  topMouseDown: null,
  topMouseMove: null,
  topMouseOut: null,
  topMouseOver: null,
  topMouseUp: null,
  topPaste: null,
  topPause: null,
  topPlay: null,
  topPlaying: null,
  topProgress: null,
  topRateChange: null,
  topReset: null,
  topScroll: null,
  topSeeked: null,
  topSeeking: null,
  topSelectionChange: null,
  topStalled: null,
  topSubmit: null,
  topSuspend: null,
  topTextInput: null,
  topTimeUpdate: null,
  topTouchCancel: null,
  topTouchEnd: null,
  topTouchMove: null,
  topTouchStart: null,
  topVolumeChange: null,
  topWaiting: null,
  topWheel: null
});

var EventConstants = {
  topLevelTypes: topLevelTypes,
  PropagationPhases: PropagationPhases
};

module.exports = EventConstants;
},{"fbjs/lib/keyMirror":20}],320:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule EventPluginHub
 */

'use strict';

var EventPluginRegistry = require('./EventPluginRegistry');
var EventPluginUtils = require('./EventPluginUtils');
var ReactErrorUtils = require('./ReactErrorUtils');

var accumulateInto = require('./accumulateInto');
var forEachAccumulated = require('./forEachAccumulated');
var invariant = require('fbjs/lib/invariant');
var warning = require('fbjs/lib/warning');

/**
 * Internal store for event listeners
 */
var listenerBank = {};

/**
 * Internal queue of events that have accumulated their dispatches and are
 * waiting to have their dispatches executed.
 */
var eventQueue = null;

/**
 * Dispatches an event and releases it back into the pool, unless persistent.
 *
 * @param {?object} event Synthetic event to be dispatched.
 * @param {boolean} simulated If the event is simulated (changes exn behavior)
 * @private
 */
var executeDispatchesAndRelease = function (event, simulated) {
  if (event) {
    EventPluginUtils.executeDispatchesInOrder(event, simulated);

    if (!event.isPersistent()) {
      event.constructor.release(event);
    }
  }
};
var executeDispatchesAndReleaseSimulated = function (e) {
  return executeDispatchesAndRelease(e, true);
};
var executeDispatchesAndReleaseTopLevel = function (e) {
  return executeDispatchesAndRelease(e, false);
};

/**
 * - `InstanceHandle`: [required] Module that performs logical traversals of DOM
 *   hierarchy given ids of the logical DOM elements involved.
 */
var InstanceHandle = null;

function validateInstanceHandle() {
  var valid = InstanceHandle && InstanceHandle.traverseTwoPhase && InstanceHandle.traverseEnterLeave;
  "production" !== 'production' ? warning(valid, 'InstanceHandle not injected before use!') : undefined;
}

/**
 * This is a unified interface for event plugins to be installed and configured.
 *
 * Event plugins can implement the following properties:
 *
 *   `extractEvents` {function(string, DOMEventTarget, string, object): *}
 *     Required. When a top-level event is fired, this method is expected to
 *     extract synthetic events that will in turn be queued and dispatched.
 *
 *   `eventTypes` {object}
 *     Optional, plugins that fire events must publish a mapping of registration
 *     names that are used to register listeners. Values of this mapping must
 *     be objects that contain `registrationName` or `phasedRegistrationNames`.
 *
 *   `executeDispatch` {function(object, function, string)}
 *     Optional, allows plugins to override how an event gets dispatched. By
 *     default, the listener is simply invoked.
 *
 * Each plugin that is injected into `EventsPluginHub` is immediately operable.
 *
 * @public
 */
var EventPluginHub = {

  /**
   * Methods for injecting dependencies.
   */
  injection: {

    /**
     * @param {object} InjectedMount
     * @public
     */
    injectMount: EventPluginUtils.injection.injectMount,

    /**
     * @param {object} InjectedInstanceHandle
     * @public
     */
    injectInstanceHandle: function (InjectedInstanceHandle) {
      InstanceHandle = InjectedInstanceHandle;
      if ("production" !== 'production') {
        validateInstanceHandle();
      }
    },

    getInstanceHandle: function () {
      if ("production" !== 'production') {
        validateInstanceHandle();
      }
      return InstanceHandle;
    },

    /**
     * @param {array} InjectedEventPluginOrder
     * @public
     */
    injectEventPluginOrder: EventPluginRegistry.injectEventPluginOrder,

    /**
     * @param {object} injectedNamesToPlugins Map from names to plugin modules.
     */
    injectEventPluginsByName: EventPluginRegistry.injectEventPluginsByName

  },

  eventNameDispatchConfigs: EventPluginRegistry.eventNameDispatchConfigs,

  registrationNameModules: EventPluginRegistry.registrationNameModules,

  /**
   * Stores `listener` at `listenerBank[registrationName][id]`. Is idempotent.
   *
   * @param {string} id ID of the DOM element.
   * @param {string} registrationName Name of listener (e.g. `onClick`).
   * @param {?function} listener The callback to store.
   */
  putListener: function (id, registrationName, listener) {
    !(typeof listener === 'function') ? "production" !== 'production' ? invariant(false, 'Expected %s listener to be a function, instead got type %s', registrationName, typeof listener) : invariant(false) : undefined;

    var bankForRegistrationName = listenerBank[registrationName] || (listenerBank[registrationName] = {});
    bankForRegistrationName[id] = listener;

    var PluginModule = EventPluginRegistry.registrationNameModules[registrationName];
    if (PluginModule && PluginModule.didPutListener) {
      PluginModule.didPutListener(id, registrationName, listener);
    }
  },

  /**
   * @param {string} id ID of the DOM element.
   * @param {string} registrationName Name of listener (e.g. `onClick`).
   * @return {?function} The stored callback.
   */
  getListener: function (id, registrationName) {
    var bankForRegistrationName = listenerBank[registrationName];
    return bankForRegistrationName && bankForRegistrationName[id];
  },

  /**
   * Deletes a listener from the registration bank.
   *
   * @param {string} id ID of the DOM element.
   * @param {string} registrationName Name of listener (e.g. `onClick`).
   */
  deleteListener: function (id, registrationName) {
    var PluginModule = EventPluginRegistry.registrationNameModules[registrationName];
    if (PluginModule && PluginModule.willDeleteListener) {
      PluginModule.willDeleteListener(id, registrationName);
    }

    var bankForRegistrationName = listenerBank[registrationName];
    // TODO: This should never be null -- when is it?
    if (bankForRegistrationName) {
      delete bankForRegistrationName[id];
    }
  },

  /**
   * Deletes all listeners for the DOM element with the supplied ID.
   *
   * @param {string} id ID of the DOM element.
   */
  deleteAllListeners: function (id) {
    for (var registrationName in listenerBank) {
      if (!listenerBank[registrationName][id]) {
        continue;
      }

      var PluginModule = EventPluginRegistry.registrationNameModules[registrationName];
      if (PluginModule && PluginModule.willDeleteListener) {
        PluginModule.willDeleteListener(id, registrationName);
      }

      delete listenerBank[registrationName][id];
    }
  },

  /**
   * Allows registered plugins an opportunity to extract events from top-level
   * native browser events.
   *
   * @param {string} topLevelType Record from `EventConstants`.
   * @param {DOMEventTarget} topLevelTarget The listening component root node.
   * @param {string} topLevelTargetID ID of `topLevelTarget`.
   * @param {object} nativeEvent Native browser event.
   * @return {*} An accumulation of synthetic events.
   * @internal
   */
  extractEvents: function (topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget) {
    var events;
    var plugins = EventPluginRegistry.plugins;
    for (var i = 0; i < plugins.length; i++) {
      // Not every plugin in the ordering may be loaded at runtime.
      var possiblePlugin = plugins[i];
      if (possiblePlugin) {
        var extractedEvents = possiblePlugin.extractEvents(topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget);
        if (extractedEvents) {
          events = accumulateInto(events, extractedEvents);
        }
      }
    }
    return events;
  },

  /**
   * Enqueues a synthetic event that should be dispatched when
   * `processEventQueue` is invoked.
   *
   * @param {*} events An accumulation of synthetic events.
   * @internal
   */
  enqueueEvents: function (events) {
    if (events) {
      eventQueue = accumulateInto(eventQueue, events);
    }
  },

  /**
   * Dispatches all synthetic events on the event queue.
   *
   * @internal
   */
  processEventQueue: function (simulated) {
    // Set `eventQueue` to null before processing it so that we can tell if more
    // events get enqueued while processing.
    var processingEventQueue = eventQueue;
    eventQueue = null;
    if (simulated) {
      forEachAccumulated(processingEventQueue, executeDispatchesAndReleaseSimulated);
    } else {
      forEachAccumulated(processingEventQueue, executeDispatchesAndReleaseTopLevel);
    }
    !!eventQueue ? "production" !== 'production' ? invariant(false, 'processEventQueue(): Additional events were enqueued while processing ' + 'an event queue. Support for this has not yet been implemented.') : invariant(false) : undefined;
    // This would be a good time to rethrow if any of the event handlers threw.
    ReactErrorUtils.rethrowCaughtError();
  },

  /**
   * These are needed for tests only. Do not use!
   */
  __purge: function () {
    listenerBank = {};
  },

  __getListenerBank: function () {
    return listenerBank;
  }

};

module.exports = EventPluginHub;
},{"./EventPluginRegistry":321,"./EventPluginUtils":322,"./ReactErrorUtils":357,"./accumulateInto":402,"./forEachAccumulated":409,"fbjs/lib/invariant":17,"fbjs/lib/warning":27}],321:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule EventPluginRegistry
 * @typechecks static-only
 */

'use strict';

var invariant = require('fbjs/lib/invariant');

/**
 * Injectable ordering of event plugins.
 */
var EventPluginOrder = null;

/**
 * Injectable mapping from names to event plugin modules.
 */
var namesToPlugins = {};

/**
 * Recomputes the plugin list using the injected plugins and plugin ordering.
 *
 * @private
 */
function recomputePluginOrdering() {
  if (!EventPluginOrder) {
    // Wait until an `EventPluginOrder` is injected.
    return;
  }
  for (var pluginName in namesToPlugins) {
    var PluginModule = namesToPlugins[pluginName];
    var pluginIndex = EventPluginOrder.indexOf(pluginName);
    !(pluginIndex > -1) ? "production" !== 'production' ? invariant(false, 'EventPluginRegistry: Cannot inject event plugins that do not exist in ' + 'the plugin ordering, `%s`.', pluginName) : invariant(false) : undefined;
    if (EventPluginRegistry.plugins[pluginIndex]) {
      continue;
    }
    !PluginModule.extractEvents ? "production" !== 'production' ? invariant(false, 'EventPluginRegistry: Event plugins must implement an `extractEvents` ' + 'method, but `%s` does not.', pluginName) : invariant(false) : undefined;
    EventPluginRegistry.plugins[pluginIndex] = PluginModule;
    var publishedEvents = PluginModule.eventTypes;
    for (var eventName in publishedEvents) {
      !publishEventForPlugin(publishedEvents[eventName], PluginModule, eventName) ? "production" !== 'production' ? invariant(false, 'EventPluginRegistry: Failed to publish event `%s` for plugin `%s`.', eventName, pluginName) : invariant(false) : undefined;
    }
  }
}

/**
 * Publishes an event so that it can be dispatched by the supplied plugin.
 *
 * @param {object} dispatchConfig Dispatch configuration for the event.
 * @param {object} PluginModule Plugin publishing the event.
 * @return {boolean} True if the event was successfully published.
 * @private
 */
function publishEventForPlugin(dispatchConfig, PluginModule, eventName) {
  !!EventPluginRegistry.eventNameDispatchConfigs.hasOwnProperty(eventName) ? "production" !== 'production' ? invariant(false, 'EventPluginHub: More than one plugin attempted to publish the same ' + 'event name, `%s`.', eventName) : invariant(false) : undefined;
  EventPluginRegistry.eventNameDispatchConfigs[eventName] = dispatchConfig;

  var phasedRegistrationNames = dispatchConfig.phasedRegistrationNames;
  if (phasedRegistrationNames) {
    for (var phaseName in phasedRegistrationNames) {
      if (phasedRegistrationNames.hasOwnProperty(phaseName)) {
        var phasedRegistrationName = phasedRegistrationNames[phaseName];
        publishRegistrationName(phasedRegistrationName, PluginModule, eventName);
      }
    }
    return true;
  } else if (dispatchConfig.registrationName) {
    publishRegistrationName(dispatchConfig.registrationName, PluginModule, eventName);
    return true;
  }
  return false;
}

/**
 * Publishes a registration name that is used to identify dispatched events and
 * can be used with `EventPluginHub.putListener` to register listeners.
 *
 * @param {string} registrationName Registration name to add.
 * @param {object} PluginModule Plugin publishing the event.
 * @private
 */
function publishRegistrationName(registrationName, PluginModule, eventName) {
  !!EventPluginRegistry.registrationNameModules[registrationName] ? "production" !== 'production' ? invariant(false, 'EventPluginHub: More than one plugin attempted to publish the same ' + 'registration name, `%s`.', registrationName) : invariant(false) : undefined;
  EventPluginRegistry.registrationNameModules[registrationName] = PluginModule;
  EventPluginRegistry.registrationNameDependencies[registrationName] = PluginModule.eventTypes[eventName].dependencies;
}

/**
 * Registers plugins so that they can extract and dispatch events.
 *
 * @see {EventPluginHub}
 */
var EventPluginRegistry = {

  /**
   * Ordered list of injected plugins.
   */
  plugins: [],

  /**
   * Mapping from event name to dispatch config
   */
  eventNameDispatchConfigs: {},

  /**
   * Mapping from registration name to plugin module
   */
  registrationNameModules: {},

  /**
   * Mapping from registration name to event name
   */
  registrationNameDependencies: {},

  /**
   * Injects an ordering of plugins (by plugin name). This allows the ordering
   * to be decoupled from injection of the actual plugins so that ordering is
   * always deterministic regardless of packaging, on-the-fly injection, etc.
   *
   * @param {array} InjectedEventPluginOrder
   * @internal
   * @see {EventPluginHub.injection.injectEventPluginOrder}
   */
  injectEventPluginOrder: function (InjectedEventPluginOrder) {
    !!EventPluginOrder ? "production" !== 'production' ? invariant(false, 'EventPluginRegistry: Cannot inject event plugin ordering more than ' + 'once. You are likely trying to load more than one copy of React.') : invariant(false) : undefined;
    // Clone the ordering so it cannot be dynamically mutated.
    EventPluginOrder = Array.prototype.slice.call(InjectedEventPluginOrder);
    recomputePluginOrdering();
  },

  /**
   * Injects plugins to be used by `EventPluginHub`. The plugin names must be
   * in the ordering injected by `injectEventPluginOrder`.
   *
   * Plugins can be injected as part of page initialization or on-the-fly.
   *
   * @param {object} injectedNamesToPlugins Map from names to plugin modules.
   * @internal
   * @see {EventPluginHub.injection.injectEventPluginsByName}
   */
  injectEventPluginsByName: function (injectedNamesToPlugins) {
    var isOrderingDirty = false;
    for (var pluginName in injectedNamesToPlugins) {
      if (!injectedNamesToPlugins.hasOwnProperty(pluginName)) {
        continue;
      }
      var PluginModule = injectedNamesToPlugins[pluginName];
      if (!namesToPlugins.hasOwnProperty(pluginName) || namesToPlugins[pluginName] !== PluginModule) {
        !!namesToPlugins[pluginName] ? "production" !== 'production' ? invariant(false, 'EventPluginRegistry: Cannot inject two different event plugins ' + 'using the same name, `%s`.', pluginName) : invariant(false) : undefined;
        namesToPlugins[pluginName] = PluginModule;
        isOrderingDirty = true;
      }
    }
    if (isOrderingDirty) {
      recomputePluginOrdering();
    }
  },

  /**
   * Looks up the plugin for the supplied event.
   *
   * @param {object} event A synthetic event.
   * @return {?object} The plugin that created the supplied event.
   * @internal
   */
  getPluginModuleForEvent: function (event) {
    var dispatchConfig = event.dispatchConfig;
    if (dispatchConfig.registrationName) {
      return EventPluginRegistry.registrationNameModules[dispatchConfig.registrationName] || null;
    }
    for (var phase in dispatchConfig.phasedRegistrationNames) {
      if (!dispatchConfig.phasedRegistrationNames.hasOwnProperty(phase)) {
        continue;
      }
      var PluginModule = EventPluginRegistry.registrationNameModules[dispatchConfig.phasedRegistrationNames[phase]];
      if (PluginModule) {
        return PluginModule;
      }
    }
    return null;
  },

  /**
   * Exposed for unit testing.
   * @private
   */
  _resetEventPlugins: function () {
    EventPluginOrder = null;
    for (var pluginName in namesToPlugins) {
      if (namesToPlugins.hasOwnProperty(pluginName)) {
        delete namesToPlugins[pluginName];
      }
    }
    EventPluginRegistry.plugins.length = 0;

    var eventNameDispatchConfigs = EventPluginRegistry.eventNameDispatchConfigs;
    for (var eventName in eventNameDispatchConfigs) {
      if (eventNameDispatchConfigs.hasOwnProperty(eventName)) {
        delete eventNameDispatchConfigs[eventName];
      }
    }

    var registrationNameModules = EventPluginRegistry.registrationNameModules;
    for (var registrationName in registrationNameModules) {
      if (registrationNameModules.hasOwnProperty(registrationName)) {
        delete registrationNameModules[registrationName];
      }
    }
  }

};

module.exports = EventPluginRegistry;
},{"fbjs/lib/invariant":17}],322:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule EventPluginUtils
 */

'use strict';

var EventConstants = require('./EventConstants');
var ReactErrorUtils = require('./ReactErrorUtils');

var invariant = require('fbjs/lib/invariant');
var warning = require('fbjs/lib/warning');

/**
 * Injected dependencies:
 */

/**
 * - `Mount`: [required] Module that can convert between React dom IDs and
 *   actual node references.
 */
var injection = {
  Mount: null,
  injectMount: function (InjectedMount) {
    injection.Mount = InjectedMount;
    if ("production" !== 'production') {
      "production" !== 'production' ? warning(InjectedMount && InjectedMount.getNode && InjectedMount.getID, 'EventPluginUtils.injection.injectMount(...): Injected Mount ' + 'module is missing getNode or getID.') : undefined;
    }
  }
};

var topLevelTypes = EventConstants.topLevelTypes;

function isEndish(topLevelType) {
  return topLevelType === topLevelTypes.topMouseUp || topLevelType === topLevelTypes.topTouchEnd || topLevelType === topLevelTypes.topTouchCancel;
}

function isMoveish(topLevelType) {
  return topLevelType === topLevelTypes.topMouseMove || topLevelType === topLevelTypes.topTouchMove;
}
function isStartish(topLevelType) {
  return topLevelType === topLevelTypes.topMouseDown || topLevelType === topLevelTypes.topTouchStart;
}

var validateEventDispatches;
if ("production" !== 'production') {
  validateEventDispatches = function (event) {
    var dispatchListeners = event._dispatchListeners;
    var dispatchIDs = event._dispatchIDs;

    var listenersIsArr = Array.isArray(dispatchListeners);
    var idsIsArr = Array.isArray(dispatchIDs);
    var IDsLen = idsIsArr ? dispatchIDs.length : dispatchIDs ? 1 : 0;
    var listenersLen = listenersIsArr ? dispatchListeners.length : dispatchListeners ? 1 : 0;

    "production" !== 'production' ? warning(idsIsArr === listenersIsArr && IDsLen === listenersLen, 'EventPluginUtils: Invalid `event`.') : undefined;
  };
}

/**
 * Dispatch the event to the listener.
 * @param {SyntheticEvent} event SyntheticEvent to handle
 * @param {boolean} simulated If the event is simulated (changes exn behavior)
 * @param {function} listener Application-level callback
 * @param {string} domID DOM id to pass to the callback.
 */
function executeDispatch(event, simulated, listener, domID) {
  var type = event.type || 'unknown-event';
  event.currentTarget = injection.Mount.getNode(domID);
  if (simulated) {
    ReactErrorUtils.invokeGuardedCallbackWithCatch(type, listener, event, domID);
  } else {
    ReactErrorUtils.invokeGuardedCallback(type, listener, event, domID);
  }
  event.currentTarget = null;
}

/**
 * Standard/simple iteration through an event's collected dispatches.
 */
function executeDispatchesInOrder(event, simulated) {
  var dispatchListeners = event._dispatchListeners;
  var dispatchIDs = event._dispatchIDs;
  if ("production" !== 'production') {
    validateEventDispatches(event);
  }
  if (Array.isArray(dispatchListeners)) {
    for (var i = 0; i < dispatchListeners.length; i++) {
      if (event.isPropagationStopped()) {
        break;
      }
      // Listeners and IDs are two parallel arrays that are always in sync.
      executeDispatch(event, simulated, dispatchListeners[i], dispatchIDs[i]);
    }
  } else if (dispatchListeners) {
    executeDispatch(event, simulated, dispatchListeners, dispatchIDs);
  }
  event._dispatchListeners = null;
  event._dispatchIDs = null;
}

/**
 * Standard/simple iteration through an event's collected dispatches, but stops
 * at the first dispatch execution returning true, and returns that id.
 *
 * @return {?string} id of the first dispatch execution who's listener returns
 * true, or null if no listener returned true.
 */
function executeDispatchesInOrderStopAtTrueImpl(event) {
  var dispatchListeners = event._dispatchListeners;
  var dispatchIDs = event._dispatchIDs;
  if ("production" !== 'production') {
    validateEventDispatches(event);
  }
  if (Array.isArray(dispatchListeners)) {
    for (var i = 0; i < dispatchListeners.length; i++) {
      if (event.isPropagationStopped()) {
        break;
      }
      // Listeners and IDs are two parallel arrays that are always in sync.
      if (dispatchListeners[i](event, dispatchIDs[i])) {
        return dispatchIDs[i];
      }
    }
  } else if (dispatchListeners) {
    if (dispatchListeners(event, dispatchIDs)) {
      return dispatchIDs;
    }
  }
  return null;
}

/**
 * @see executeDispatchesInOrderStopAtTrueImpl
 */
function executeDispatchesInOrderStopAtTrue(event) {
  var ret = executeDispatchesInOrderStopAtTrueImpl(event);
  event._dispatchIDs = null;
  event._dispatchListeners = null;
  return ret;
}

/**
 * Execution of a "direct" dispatch - there must be at most one dispatch
 * accumulated on the event or it is considered an error. It doesn't really make
 * sense for an event with multiple dispatches (bubbled) to keep track of the
 * return values at each dispatch execution, but it does tend to make sense when
 * dealing with "direct" dispatches.
 *
 * @return {*} The return value of executing the single dispatch.
 */
function executeDirectDispatch(event) {
  if ("production" !== 'production') {
    validateEventDispatches(event);
  }
  var dispatchListener = event._dispatchListeners;
  var dispatchID = event._dispatchIDs;
  !!Array.isArray(dispatchListener) ? "production" !== 'production' ? invariant(false, 'executeDirectDispatch(...): Invalid `event`.') : invariant(false) : undefined;
  var res = dispatchListener ? dispatchListener(event, dispatchID) : null;
  event._dispatchListeners = null;
  event._dispatchIDs = null;
  return res;
}

/**
 * @param {SyntheticEvent} event
 * @return {boolean} True iff number of dispatches accumulated is greater than 0.
 */
function hasDispatches(event) {
  return !!event._dispatchListeners;
}

/**
 * General utilities that are useful in creating custom Event Plugins.
 */
var EventPluginUtils = {
  isEndish: isEndish,
  isMoveish: isMoveish,
  isStartish: isStartish,

  executeDirectDispatch: executeDirectDispatch,
  executeDispatchesInOrder: executeDispatchesInOrder,
  executeDispatchesInOrderStopAtTrue: executeDispatchesInOrderStopAtTrue,
  hasDispatches: hasDispatches,

  getNode: function (id) {
    return injection.Mount.getNode(id);
  },
  getID: function (node) {
    return injection.Mount.getID(node);
  },

  injection: injection
};

module.exports = EventPluginUtils;
},{"./EventConstants":319,"./ReactErrorUtils":357,"fbjs/lib/invariant":17,"fbjs/lib/warning":27}],323:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule EventPropagators
 */

'use strict';

var EventConstants = require('./EventConstants');
var EventPluginHub = require('./EventPluginHub');

var warning = require('fbjs/lib/warning');

var accumulateInto = require('./accumulateInto');
var forEachAccumulated = require('./forEachAccumulated');

var PropagationPhases = EventConstants.PropagationPhases;
var getListener = EventPluginHub.getListener;

/**
 * Some event types have a notion of different registration names for different
 * "phases" of propagation. This finds listeners by a given phase.
 */
function listenerAtPhase(id, event, propagationPhase) {
  var registrationName = event.dispatchConfig.phasedRegistrationNames[propagationPhase];
  return getListener(id, registrationName);
}

/**
 * Tags a `SyntheticEvent` with dispatched listeners. Creating this function
 * here, allows us to not have to bind or create functions for each event.
 * Mutating the event's members allows us to not have to create a wrapping
 * "dispatch" object that pairs the event with the listener.
 */
function accumulateDirectionalDispatches(domID, upwards, event) {
  if ("production" !== 'production') {
    "production" !== 'production' ? warning(domID, 'Dispatching id must not be null') : undefined;
  }
  var phase = upwards ? PropagationPhases.bubbled : PropagationPhases.captured;
  var listener = listenerAtPhase(domID, event, phase);
  if (listener) {
    event._dispatchListeners = accumulateInto(event._dispatchListeners, listener);
    event._dispatchIDs = accumulateInto(event._dispatchIDs, domID);
  }
}

/**
 * Collect dispatches (must be entirely collected before dispatching - see unit
 * tests). Lazily allocate the array to conserve memory.  We must loop through
 * each event and perform the traversal for each one. We cannot perform a
 * single traversal for the entire collection of events because each event may
 * have a different target.
 */
function accumulateTwoPhaseDispatchesSingle(event) {
  if (event && event.dispatchConfig.phasedRegistrationNames) {
    EventPluginHub.injection.getInstanceHandle().traverseTwoPhase(event.dispatchMarker, accumulateDirectionalDispatches, event);
  }
}

/**
 * Same as `accumulateTwoPhaseDispatchesSingle`, but skips over the targetID.
 */
function accumulateTwoPhaseDispatchesSingleSkipTarget(event) {
  if (event && event.dispatchConfig.phasedRegistrationNames) {
    EventPluginHub.injection.getInstanceHandle().traverseTwoPhaseSkipTarget(event.dispatchMarker, accumulateDirectionalDispatches, event);
  }
}

/**
 * Accumulates without regard to direction, does not look for phased
 * registration names. Same as `accumulateDirectDispatchesSingle` but without
 * requiring that the `dispatchMarker` be the same as the dispatched ID.
 */
function accumulateDispatches(id, ignoredDirection, event) {
  if (event && event.dispatchConfig.registrationName) {
    var registrationName = event.dispatchConfig.registrationName;
    var listener = getListener(id, registrationName);
    if (listener) {
      event._dispatchListeners = accumulateInto(event._dispatchListeners, listener);
      event._dispatchIDs = accumulateInto(event._dispatchIDs, id);
    }
  }
}

/**
 * Accumulates dispatches on an `SyntheticEvent`, but only for the
 * `dispatchMarker`.
 * @param {SyntheticEvent} event
 */
function accumulateDirectDispatchesSingle(event) {
  if (event && event.dispatchConfig.registrationName) {
    accumulateDispatches(event.dispatchMarker, null, event);
  }
}

function accumulateTwoPhaseDispatches(events) {
  forEachAccumulated(events, accumulateTwoPhaseDispatchesSingle);
}

function accumulateTwoPhaseDispatchesSkipTarget(events) {
  forEachAccumulated(events, accumulateTwoPhaseDispatchesSingleSkipTarget);
}

function accumulateEnterLeaveDispatches(leave, enter, fromID, toID) {
  EventPluginHub.injection.getInstanceHandle().traverseEnterLeave(fromID, toID, accumulateDispatches, leave, enter);
}

function accumulateDirectDispatches(events) {
  forEachAccumulated(events, accumulateDirectDispatchesSingle);
}

/**
 * A small set of propagation patterns, each of which will accept a small amount
 * of information, and generate a set of "dispatch ready event objects" - which
 * are sets of events that have already been annotated with a set of dispatched
 * listener functions/ids. The API is designed this way to discourage these
 * propagation strategies from actually executing the dispatches, since we
 * always want to collect the entire set of dispatches before executing event a
 * single one.
 *
 * @constructor EventPropagators
 */
var EventPropagators = {
  accumulateTwoPhaseDispatches: accumulateTwoPhaseDispatches,
  accumulateTwoPhaseDispatchesSkipTarget: accumulateTwoPhaseDispatchesSkipTarget,
  accumulateDirectDispatches: accumulateDirectDispatches,
  accumulateEnterLeaveDispatches: accumulateEnterLeaveDispatches
};

module.exports = EventPropagators;
},{"./EventConstants":319,"./EventPluginHub":320,"./accumulateInto":402,"./forEachAccumulated":409,"fbjs/lib/warning":27}],324:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule FallbackCompositionState
 * @typechecks static-only
 */

'use strict';

var PooledClass = require('./PooledClass');

var assign = require('./Object.assign');
var getTextContentAccessor = require('./getTextContentAccessor');

/**
 * This helper class stores information about text content of a target node,
 * allowing comparison of content before and after a given event.
 *
 * Identify the node where selection currently begins, then observe
 * both its text content and its current position in the DOM. Since the
 * browser may natively replace the target node during composition, we can
 * use its position to find its replacement.
 *
 * @param {DOMEventTarget} root
 */
function FallbackCompositionState(root) {
  this._root = root;
  this._startText = this.getText();
  this._fallbackText = null;
}

assign(FallbackCompositionState.prototype, {
  destructor: function () {
    this._root = null;
    this._startText = null;
    this._fallbackText = null;
  },

  /**
   * Get current text of input.
   *
   * @return {string}
   */
  getText: function () {
    if ('value' in this._root) {
      return this._root.value;
    }
    return this._root[getTextContentAccessor()];
  },

  /**
   * Determine the differing substring between the initially stored
   * text content and the current content.
   *
   * @return {string}
   */
  getData: function () {
    if (this._fallbackText) {
      return this._fallbackText;
    }

    var start;
    var startValue = this._startText;
    var startLength = startValue.length;
    var end;
    var endValue = this.getText();
    var endLength = endValue.length;

    for (start = 0; start < startLength; start++) {
      if (startValue[start] !== endValue[start]) {
        break;
      }
    }

    var minEnd = startLength - start;
    for (end = 1; end <= minEnd; end++) {
      if (startValue[startLength - end] !== endValue[endLength - end]) {
        break;
      }
    }

    var sliceTail = end > 1 ? 1 - end : undefined;
    this._fallbackText = endValue.slice(start, sliceTail);
    return this._fallbackText;
  }
});

PooledClass.addPoolingTo(FallbackCompositionState);

module.exports = FallbackCompositionState;
},{"./Object.assign":327,"./PooledClass":328,"./getTextContentAccessor":416}],325:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule HTMLDOMPropertyConfig
 */

'use strict';

var DOMProperty = require('./DOMProperty');
var ExecutionEnvironment = require('fbjs/lib/ExecutionEnvironment');

var MUST_USE_ATTRIBUTE = DOMProperty.injection.MUST_USE_ATTRIBUTE;
var MUST_USE_PROPERTY = DOMProperty.injection.MUST_USE_PROPERTY;
var HAS_BOOLEAN_VALUE = DOMProperty.injection.HAS_BOOLEAN_VALUE;
var HAS_SIDE_EFFECTS = DOMProperty.injection.HAS_SIDE_EFFECTS;
var HAS_NUMERIC_VALUE = DOMProperty.injection.HAS_NUMERIC_VALUE;
var HAS_POSITIVE_NUMERIC_VALUE = DOMProperty.injection.HAS_POSITIVE_NUMERIC_VALUE;
var HAS_OVERLOADED_BOOLEAN_VALUE = DOMProperty.injection.HAS_OVERLOADED_BOOLEAN_VALUE;

var hasSVG;
if (ExecutionEnvironment.canUseDOM) {
  var implementation = document.implementation;
  hasSVG = implementation && implementation.hasFeature && implementation.hasFeature('http://www.w3.org/TR/SVG11/feature#BasicStructure', '1.1');
}

var HTMLDOMPropertyConfig = {
  isCustomAttribute: RegExp.prototype.test.bind(/^(data|aria)-[a-z_][a-z\d_.\-]*$/),
  Properties: {
    /**
     * Standard Properties
     */
    accept: null,
    acceptCharset: null,
    accessKey: null,
    action: null,
    allowFullScreen: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,
    allowTransparency: MUST_USE_ATTRIBUTE,
    alt: null,
    async: HAS_BOOLEAN_VALUE,
    autoComplete: null,
    // autoFocus is polyfilled/normalized by AutoFocusUtils
    // autoFocus: HAS_BOOLEAN_VALUE,
    autoPlay: HAS_BOOLEAN_VALUE,
    capture: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,
    cellPadding: null,
    cellSpacing: null,
    charSet: MUST_USE_ATTRIBUTE,
    challenge: MUST_USE_ATTRIBUTE,
    checked: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
    classID: MUST_USE_ATTRIBUTE,
    // To set className on SVG elements, it's necessary to use .setAttribute;
    // this works on HTML elements too in all browsers except IE8. Conveniently,
    // IE8 doesn't support SVG and so we can simply use the attribute in
    // browsers that support SVG and the property in browsers that don't,
    // regardless of whether the element is HTML or SVG.
    className: hasSVG ? MUST_USE_ATTRIBUTE : MUST_USE_PROPERTY,
    cols: MUST_USE_ATTRIBUTE | HAS_POSITIVE_NUMERIC_VALUE,
    colSpan: null,
    content: null,
    contentEditable: null,
    contextMenu: MUST_USE_ATTRIBUTE,
    controls: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
    coords: null,
    crossOrigin: null,
    data: null, // For `<object />` acts as `src`.
    dateTime: MUST_USE_ATTRIBUTE,
    'default': HAS_BOOLEAN_VALUE,
    defer: HAS_BOOLEAN_VALUE,
    dir: null,
    disabled: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,
    download: HAS_OVERLOADED_BOOLEAN_VALUE,
    draggable: null,
    encType: null,
    form: MUST_USE_ATTRIBUTE,
    formAction: MUST_USE_ATTRIBUTE,
    formEncType: MUST_USE_ATTRIBUTE,
    formMethod: MUST_USE_ATTRIBUTE,
    formNoValidate: HAS_BOOLEAN_VALUE,
    formTarget: MUST_USE_ATTRIBUTE,
    frameBorder: MUST_USE_ATTRIBUTE,
    headers: null,
    height: MUST_USE_ATTRIBUTE,
    hidden: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,
    high: null,
    href: null,
    hrefLang: null,
    htmlFor: null,
    httpEquiv: null,
    icon: null,
    id: MUST_USE_PROPERTY,
    inputMode: MUST_USE_ATTRIBUTE,
    integrity: null,
    is: MUST_USE_ATTRIBUTE,
    keyParams: MUST_USE_ATTRIBUTE,
    keyType: MUST_USE_ATTRIBUTE,
    kind: null,
    label: null,
    lang: null,
    list: MUST_USE_ATTRIBUTE,
    loop: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
    low: null,
    manifest: MUST_USE_ATTRIBUTE,
    marginHeight: null,
    marginWidth: null,
    max: null,
    maxLength: MUST_USE_ATTRIBUTE,
    media: MUST_USE_ATTRIBUTE,
    mediaGroup: null,
    method: null,
    min: null,
    minLength: MUST_USE_ATTRIBUTE,
    multiple: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
    muted: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
    name: null,
    nonce: MUST_USE_ATTRIBUTE,
    noValidate: HAS_BOOLEAN_VALUE,
    open: HAS_BOOLEAN_VALUE,
    optimum: null,
    pattern: null,
    placeholder: null,
    poster: null,
    preload: null,
    radioGroup: null,
    readOnly: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
    rel: null,
    required: HAS_BOOLEAN_VALUE,
    reversed: HAS_BOOLEAN_VALUE,
    role: MUST_USE_ATTRIBUTE,
    rows: MUST_USE_ATTRIBUTE | HAS_POSITIVE_NUMERIC_VALUE,
    rowSpan: null,
    sandbox: null,
    scope: null,
    scoped: HAS_BOOLEAN_VALUE,
    scrolling: null,
    seamless: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,
    selected: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
    shape: null,
    size: MUST_USE_ATTRIBUTE | HAS_POSITIVE_NUMERIC_VALUE,
    sizes: MUST_USE_ATTRIBUTE,
    span: HAS_POSITIVE_NUMERIC_VALUE,
    spellCheck: null,
    src: null,
    srcDoc: MUST_USE_PROPERTY,
    srcLang: null,
    srcSet: MUST_USE_ATTRIBUTE,
    start: HAS_NUMERIC_VALUE,
    step: null,
    style: null,
    summary: null,
    tabIndex: null,
    target: null,
    title: null,
    type: null,
    useMap: null,
    value: MUST_USE_PROPERTY | HAS_SIDE_EFFECTS,
    width: MUST_USE_ATTRIBUTE,
    wmode: MUST_USE_ATTRIBUTE,
    wrap: null,

    /**
     * RDFa Properties
     */
    about: MUST_USE_ATTRIBUTE,
    datatype: MUST_USE_ATTRIBUTE,
    inlist: MUST_USE_ATTRIBUTE,
    prefix: MUST_USE_ATTRIBUTE,
    // property is also supported for OpenGraph in meta tags.
    property: MUST_USE_ATTRIBUTE,
    resource: MUST_USE_ATTRIBUTE,
    'typeof': MUST_USE_ATTRIBUTE,
    vocab: MUST_USE_ATTRIBUTE,

    /**
     * Non-standard Properties
     */
    // autoCapitalize and autoCorrect are supported in Mobile Safari for
    // keyboard hints.
    autoCapitalize: MUST_USE_ATTRIBUTE,
    autoCorrect: MUST_USE_ATTRIBUTE,
    // autoSave allows WebKit/Blink to persist values of input fields on page reloads
    autoSave: null,
    // color is for Safari mask-icon link
    color: null,
    // itemProp, itemScope, itemType are for
    // Microdata support. See http://schema.org/docs/gs.html
    itemProp: MUST_USE_ATTRIBUTE,
    itemScope: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,
    itemType: MUST_USE_ATTRIBUTE,
    // itemID and itemRef are for Microdata support as well but
    // only specified in the the WHATWG spec document. See
    // https://html.spec.whatwg.org/multipage/microdata.html#microdata-dom-api
    itemID: MUST_USE_ATTRIBUTE,
    itemRef: MUST_USE_ATTRIBUTE,
    // results show looking glass icon and recent searches on input
    // search fields in WebKit/Blink
    results: null,
    // IE-only attribute that specifies security restrictions on an iframe
    // as an alternative to the sandbox attribute on IE<10
    security: MUST_USE_ATTRIBUTE,
    // IE-only attribute that controls focus behavior
    unselectable: MUST_USE_ATTRIBUTE
  },
  DOMAttributeNames: {
    acceptCharset: 'accept-charset',
    className: 'class',
    htmlFor: 'for',
    httpEquiv: 'http-equiv'
  },
  DOMPropertyNames: {
    autoComplete: 'autocomplete',
    autoFocus: 'autofocus',
    autoPlay: 'autoplay',
    autoSave: 'autosave',
    // `encoding` is equivalent to `enctype`, IE8 lacks an `enctype` setter.
    // http://www.w3.org/TR/html5/forms.html#dom-fs-encoding
    encType: 'encoding',
    hrefLang: 'hreflang',
    radioGroup: 'radiogroup',
    spellCheck: 'spellcheck',
    srcDoc: 'srcdoc',
    srcSet: 'srcset'
  }
};

module.exports = HTMLDOMPropertyConfig;
},{"./DOMProperty":314,"fbjs/lib/ExecutionEnvironment":3}],326:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule LinkedValueUtils
 * @typechecks static-only
 */

'use strict';

var ReactPropTypes = require('./ReactPropTypes');
var ReactPropTypeLocations = require('./ReactPropTypeLocations');

var invariant = require('fbjs/lib/invariant');
var warning = require('fbjs/lib/warning');

var hasReadOnlyValue = {
  'button': true,
  'checkbox': true,
  'image': true,
  'hidden': true,
  'radio': true,
  'reset': true,
  'submit': true
};

function _assertSingleLink(inputProps) {
  !(inputProps.checkedLink == null || inputProps.valueLink == null) ? "production" !== 'production' ? invariant(false, 'Cannot provide a checkedLink and a valueLink. If you want to use ' + 'checkedLink, you probably don\'t want to use valueLink and vice versa.') : invariant(false) : undefined;
}
function _assertValueLink(inputProps) {
  _assertSingleLink(inputProps);
  !(inputProps.value == null && inputProps.onChange == null) ? "production" !== 'production' ? invariant(false, 'Cannot provide a valueLink and a value or onChange event. If you want ' + 'to use value or onChange, you probably don\'t want to use valueLink.') : invariant(false) : undefined;
}

function _assertCheckedLink(inputProps) {
  _assertSingleLink(inputProps);
  !(inputProps.checked == null && inputProps.onChange == null) ? "production" !== 'production' ? invariant(false, 'Cannot provide a checkedLink and a checked property or onChange event. ' + 'If you want to use checked or onChange, you probably don\'t want to ' + 'use checkedLink') : invariant(false) : undefined;
}

var propTypes = {
  value: function (props, propName, componentName) {
    if (!props[propName] || hasReadOnlyValue[props.type] || props.onChange || props.readOnly || props.disabled) {
      return null;
    }
    return new Error('You provided a `value` prop to a form field without an ' + '`onChange` handler. This will render a read-only field. If ' + 'the field should be mutable use `defaultValue`. Otherwise, ' + 'set either `onChange` or `readOnly`.');
  },
  checked: function (props, propName, componentName) {
    if (!props[propName] || props.onChange || props.readOnly || props.disabled) {
      return null;
    }
    return new Error('You provided a `checked` prop to a form field without an ' + '`onChange` handler. This will render a read-only field. If ' + 'the field should be mutable use `defaultChecked`. Otherwise, ' + 'set either `onChange` or `readOnly`.');
  },
  onChange: ReactPropTypes.func
};

var loggedTypeFailures = {};
function getDeclarationErrorAddendum(owner) {
  if (owner) {
    var name = owner.getName();
    if (name) {
      return ' Check the render method of `' + name + '`.';
    }
  }
  return '';
}

/**
 * Provide a linked `value` attribute for controlled forms. You should not use
 * this outside of the ReactDOM controlled form components.
 */
var LinkedValueUtils = {
  checkPropTypes: function (tagName, props, owner) {
    for (var propName in propTypes) {
      if (propTypes.hasOwnProperty(propName)) {
        var error = propTypes[propName](props, propName, tagName, ReactPropTypeLocations.prop, null, 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED');
      }
      if (error instanceof Error && !(error.message in loggedTypeFailures)) {
        // Only monitor this failure once because there tends to be a lot of the
        // same error.
        loggedTypeFailures[error.message] = true;

        var addendum = getDeclarationErrorAddendum(owner);
        "production" !== 'production' ? warning(false, 'Failed form propType: %s%s', error.message, addendum) : undefined;
      }
    }
  },

  /**
   * @param {object} inputProps Props for form component
   * @return {*} current value of the input either from value prop or link.
   */
  getValue: function (inputProps) {
    if (inputProps.valueLink) {
      _assertValueLink(inputProps);
      return inputProps.valueLink.value;
    }
    return inputProps.value;
  },

  /**
   * @param {object} inputProps Props for form component
   * @return {*} current checked status of the input either from checked prop
   *             or link.
   */
  getChecked: function (inputProps) {
    if (inputProps.checkedLink) {
      _assertCheckedLink(inputProps);
      return inputProps.checkedLink.value;
    }
    return inputProps.checked;
  },

  /**
   * @param {object} inputProps Props for form component
   * @param {SyntheticEvent} event change event to handle
   */
  executeOnChange: function (inputProps, event) {
    if (inputProps.valueLink) {
      _assertValueLink(inputProps);
      return inputProps.valueLink.requestChange(event.target.value);
    } else if (inputProps.checkedLink) {
      _assertCheckedLink(inputProps);
      return inputProps.checkedLink.requestChange(event.target.checked);
    } else if (inputProps.onChange) {
      return inputProps.onChange.call(undefined, event);
    }
  }
};

module.exports = LinkedValueUtils;
},{"./ReactPropTypeLocations":373,"./ReactPropTypes":374,"fbjs/lib/invariant":17,"fbjs/lib/warning":27}],327:[function(require,module,exports){
/**
 * Copyright 2014-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule Object.assign
 */

// https://people.mozilla.org/~jorendorff/es6-draft.html#sec-object.assign

'use strict';

function assign(target, sources) {
  if (target == null) {
    throw new TypeError('Object.assign target cannot be null or undefined');
  }

  var to = Object(target);
  var hasOwnProperty = Object.prototype.hasOwnProperty;

  for (var nextIndex = 1; nextIndex < arguments.length; nextIndex++) {
    var nextSource = arguments[nextIndex];
    if (nextSource == null) {
      continue;
    }

    var from = Object(nextSource);

    // We don't currently support accessors nor proxies. Therefore this
    // copy cannot throw. If we ever supported this then we must handle
    // exceptions and side-effects. We don't support symbols so they won't
    // be transferred.

    for (var key in from) {
      if (hasOwnProperty.call(from, key)) {
        to[key] = from[key];
      }
    }
  }

  return to;
}

module.exports = assign;
},{}],328:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule PooledClass
 */

'use strict';

var invariant = require('fbjs/lib/invariant');

/**
 * Static poolers. Several custom versions for each potential number of
 * arguments. A completely generic pooler is easy to implement, but would
 * require accessing the `arguments` object. In each of these, `this` refers to
 * the Class itself, not an instance. If any others are needed, simply add them
 * here, or in their own files.
 */
var oneArgumentPooler = function (copyFieldsFrom) {
  var Klass = this;
  if (Klass.instancePool.length) {
    var instance = Klass.instancePool.pop();
    Klass.call(instance, copyFieldsFrom);
    return instance;
  } else {
    return new Klass(copyFieldsFrom);
  }
};

var twoArgumentPooler = function (a1, a2) {
  var Klass = this;
  if (Klass.instancePool.length) {
    var instance = Klass.instancePool.pop();
    Klass.call(instance, a1, a2);
    return instance;
  } else {
    return new Klass(a1, a2);
  }
};

var threeArgumentPooler = function (a1, a2, a3) {
  var Klass = this;
  if (Klass.instancePool.length) {
    var instance = Klass.instancePool.pop();
    Klass.call(instance, a1, a2, a3);
    return instance;
  } else {
    return new Klass(a1, a2, a3);
  }
};

var fourArgumentPooler = function (a1, a2, a3, a4) {
  var Klass = this;
  if (Klass.instancePool.length) {
    var instance = Klass.instancePool.pop();
    Klass.call(instance, a1, a2, a3, a4);
    return instance;
  } else {
    return new Klass(a1, a2, a3, a4);
  }
};

var fiveArgumentPooler = function (a1, a2, a3, a4, a5) {
  var Klass = this;
  if (Klass.instancePool.length) {
    var instance = Klass.instancePool.pop();
    Klass.call(instance, a1, a2, a3, a4, a5);
    return instance;
  } else {
    return new Klass(a1, a2, a3, a4, a5);
  }
};

var standardReleaser = function (instance) {
  var Klass = this;
  !(instance instanceof Klass) ? "production" !== 'production' ? invariant(false, 'Trying to release an instance into a pool of a different type.') : invariant(false) : undefined;
  instance.destructor();
  if (Klass.instancePool.length < Klass.poolSize) {
    Klass.instancePool.push(instance);
  }
};

var DEFAULT_POOL_SIZE = 10;
var DEFAULT_POOLER = oneArgumentPooler;

/**
 * Augments `CopyConstructor` to be a poolable class, augmenting only the class
 * itself (statically) not adding any prototypical fields. Any CopyConstructor
 * you give this may have a `poolSize` property, and will look for a
 * prototypical `destructor` on instances (optional).
 *
 * @param {Function} CopyConstructor Constructor that can be used to reset.
 * @param {Function} pooler Customizable pooler.
 */
var addPoolingTo = function (CopyConstructor, pooler) {
  var NewKlass = CopyConstructor;
  NewKlass.instancePool = [];
  NewKlass.getPooled = pooler || DEFAULT_POOLER;
  if (!NewKlass.poolSize) {
    NewKlass.poolSize = DEFAULT_POOL_SIZE;
  }
  NewKlass.release = standardReleaser;
  return NewKlass;
};

var PooledClass = {
  addPoolingTo: addPoolingTo,
  oneArgumentPooler: oneArgumentPooler,
  twoArgumentPooler: twoArgumentPooler,
  threeArgumentPooler: threeArgumentPooler,
  fourArgumentPooler: fourArgumentPooler,
  fiveArgumentPooler: fiveArgumentPooler
};

module.exports = PooledClass;
},{"fbjs/lib/invariant":17}],329:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactBrowserComponentMixin
 */

'use strict';

var ReactInstanceMap = require('./ReactInstanceMap');

var findDOMNode = require('./findDOMNode');
var warning = require('fbjs/lib/warning');

var didWarnKey = '_getDOMNodeDidWarn';

var ReactBrowserComponentMixin = {
  /**
   * Returns the DOM node rendered by this component.
   *
   * @return {DOMElement} The root node of this component.
   * @final
   * @protected
   */
  getDOMNode: function () {
    "production" !== 'production' ? warning(this.constructor[didWarnKey], '%s.getDOMNode(...) is deprecated. Please use ' + 'ReactDOM.findDOMNode(instance) instead.', ReactInstanceMap.get(this).getName() || this.tagName || 'Unknown') : undefined;
    this.constructor[didWarnKey] = true;
    return findDOMNode(this);
  }
};

module.exports = ReactBrowserComponentMixin;
},{"./ReactInstanceMap":363,"./findDOMNode":407,"fbjs/lib/warning":27}],330:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactBrowserEventEmitter
 * @typechecks static-only
 */

'use strict';

var EventConstants = require('./EventConstants');
var EventPluginHub = require('./EventPluginHub');
var EventPluginRegistry = require('./EventPluginRegistry');
var ReactEventEmitterMixin = require('./ReactEventEmitterMixin');
var ReactPerf = require('./ReactPerf');
var ViewportMetrics = require('./ViewportMetrics');

var assign = require('./Object.assign');
var isEventSupported = require('./isEventSupported');

/**
 * Summary of `ReactBrowserEventEmitter` event handling:
 *
 *  - Top-level delegation is used to trap most native browser events. This
 *    may only occur in the main thread and is the responsibility of
 *    ReactEventListener, which is injected and can therefore support pluggable
 *    event sources. This is the only work that occurs in the main thread.
 *
 *  - We normalize and de-duplicate events to account for browser quirks. This
 *    may be done in the worker thread.
 *
 *  - Forward these native events (with the associated top-level type used to
 *    trap it) to `EventPluginHub`, which in turn will ask plugins if they want
 *    to extract any synthetic events.
 *
 *  - The `EventPluginHub` will then process each event by annotating them with
 *    "dispatches", a sequence of listeners and IDs that care about that event.
 *
 *  - The `EventPluginHub` then dispatches the events.
 *
 * Overview of React and the event system:
 *
 * +------------+    .
 * |    DOM     |    .
 * +------------+    .
 *       |           .
 *       v           .
 * +------------+    .
 * | ReactEvent |    .
 * |  Listener  |    .
 * +------------+    .                         +-----------+
 *       |           .               +--------+|SimpleEvent|
 *       |           .               |         |Plugin     |
 * +-----|------+    .               v         +-----------+
 * |     |      |    .    +--------------+                    +------------+
 * |     +-----------.--->|EventPluginHub|                    |    Event   |
 * |            |    .    |              |     +-----------+  | Propagators|
 * | ReactEvent |    .    |              |     |TapEvent   |  |------------|
 * |  Emitter   |    .    |              |<---+|Plugin     |  |other plugin|
 * |            |    .    |              |     +-----------+  |  utilities |
 * |     +-----------.--->|              |                    +------------+
 * |     |      |    .    +--------------+
 * +-----|------+    .                ^        +-----------+
 *       |           .                |        |Enter/Leave|
 *       +           .                +-------+|Plugin     |
 * +-------------+   .                         +-----------+
 * | application |   .
 * |-------------|   .
 * |             |   .
 * |             |   .
 * +-------------+   .
 *                   .
 *    React Core     .  General Purpose Event Plugin System
 */

var alreadyListeningTo = {};
var isMonitoringScrollValue = false;
var reactTopListenersCounter = 0;

// For events like 'submit' which don't consistently bubble (which we trap at a
// lower node than `document`), binding at `document` would cause duplicate
// events so we don't include them here
var topEventMapping = {
  topAbort: 'abort',
  topBlur: 'blur',
  topCanPlay: 'canplay',
  topCanPlayThrough: 'canplaythrough',
  topChange: 'change',
  topClick: 'click',
  topCompositionEnd: 'compositionend',
  topCompositionStart: 'compositionstart',
  topCompositionUpdate: 'compositionupdate',
  topContextMenu: 'contextmenu',
  topCopy: 'copy',
  topCut: 'cut',
  topDoubleClick: 'dblclick',
  topDrag: 'drag',
  topDragEnd: 'dragend',
  topDragEnter: 'dragenter',
  topDragExit: 'dragexit',
  topDragLeave: 'dragleave',
  topDragOver: 'dragover',
  topDragStart: 'dragstart',
  topDrop: 'drop',
  topDurationChange: 'durationchange',
  topEmptied: 'emptied',
  topEncrypted: 'encrypted',
  topEnded: 'ended',
  topError: 'error',
  topFocus: 'focus',
  topInput: 'input',
  topKeyDown: 'keydown',
  topKeyPress: 'keypress',
  topKeyUp: 'keyup',
  topLoadedData: 'loadeddata',
  topLoadedMetadata: 'loadedmetadata',
  topLoadStart: 'loadstart',
  topMouseDown: 'mousedown',
  topMouseMove: 'mousemove',
  topMouseOut: 'mouseout',
  topMouseOver: 'mouseover',
  topMouseUp: 'mouseup',
  topPaste: 'paste',
  topPause: 'pause',
  topPlay: 'play',
  topPlaying: 'playing',
  topProgress: 'progress',
  topRateChange: 'ratechange',
  topScroll: 'scroll',
  topSeeked: 'seeked',
  topSeeking: 'seeking',
  topSelectionChange: 'selectionchange',
  topStalled: 'stalled',
  topSuspend: 'suspend',
  topTextInput: 'textInput',
  topTimeUpdate: 'timeupdate',
  topTouchCancel: 'touchcancel',
  topTouchEnd: 'touchend',
  topTouchMove: 'touchmove',
  topTouchStart: 'touchstart',
  topVolumeChange: 'volumechange',
  topWaiting: 'waiting',
  topWheel: 'wheel'
};

/**
 * To ensure no conflicts with other potential React instances on the page
 */
var topListenersIDKey = '_reactListenersID' + String(Math.random()).slice(2);

function getListeningForDocument(mountAt) {
  // In IE8, `mountAt` is a host object and doesn't have `hasOwnProperty`
  // directly.
  if (!Object.prototype.hasOwnProperty.call(mountAt, topListenersIDKey)) {
    mountAt[topListenersIDKey] = reactTopListenersCounter++;
    alreadyListeningTo[mountAt[topListenersIDKey]] = {};
  }
  return alreadyListeningTo[mountAt[topListenersIDKey]];
}

/**
 * `ReactBrowserEventEmitter` is used to attach top-level event listeners. For
 * example:
 *
 *   ReactBrowserEventEmitter.putListener('myID', 'onClick', myFunction);
 *
 * This would allocate a "registration" of `('onClick', myFunction)` on 'myID'.
 *
 * @internal
 */
var ReactBrowserEventEmitter = assign({}, ReactEventEmitterMixin, {

  /**
   * Injectable event backend
   */
  ReactEventListener: null,

  injection: {
    /**
     * @param {object} ReactEventListener
     */
    injectReactEventListener: function (ReactEventListener) {
      ReactEventListener.setHandleTopLevel(ReactBrowserEventEmitter.handleTopLevel);
      ReactBrowserEventEmitter.ReactEventListener = ReactEventListener;
    }
  },

  /**
   * Sets whether or not any created callbacks should be enabled.
   *
   * @param {boolean} enabled True if callbacks should be enabled.
   */
  setEnabled: function (enabled) {
    if (ReactBrowserEventEmitter.ReactEventListener) {
      ReactBrowserEventEmitter.ReactEventListener.setEnabled(enabled);
    }
  },

  /**
   * @return {boolean} True if callbacks are enabled.
   */
  isEnabled: function () {
    return !!(ReactBrowserEventEmitter.ReactEventListener && ReactBrowserEventEmitter.ReactEventListener.isEnabled());
  },

  /**
   * We listen for bubbled touch events on the document object.
   *
   * Firefox v8.01 (and possibly others) exhibited strange behavior when
   * mounting `onmousemove` events at some node that was not the document
   * element. The symptoms were that if your mouse is not moving over something
   * contained within that mount point (for example on the background) the
   * top-level listeners for `onmousemove` won't be called. However, if you
   * register the `mousemove` on the document object, then it will of course
   * catch all `mousemove`s. This along with iOS quirks, justifies restricting
   * top-level listeners to the document object only, at least for these
   * movement types of events and possibly all events.
   *
   * @see http://www.quirksmode.org/blog/archives/2010/09/click_event_del.html
   *
   * Also, `keyup`/`keypress`/`keydown` do not bubble to the window on IE, but
   * they bubble to document.
   *
   * @param {string} registrationName Name of listener (e.g. `onClick`).
   * @param {object} contentDocumentHandle Document which owns the container
   */
  listenTo: function (registrationName, contentDocumentHandle) {
    var mountAt = contentDocumentHandle;
    var isListening = getListeningForDocument(mountAt);
    var dependencies = EventPluginRegistry.registrationNameDependencies[registrationName];

    var topLevelTypes = EventConstants.topLevelTypes;
    for (var i = 0; i < dependencies.length; i++) {
      var dependency = dependencies[i];
      if (!(isListening.hasOwnProperty(dependency) && isListening[dependency])) {
        if (dependency === topLevelTypes.topWheel) {
          if (isEventSupported('wheel')) {
            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(topLevelTypes.topWheel, 'wheel', mountAt);
          } else if (isEventSupported('mousewheel')) {
            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(topLevelTypes.topWheel, 'mousewheel', mountAt);
          } else {
            // Firefox needs to capture a different mouse scroll event.
            // @see http://www.quirksmode.org/dom/events/tests/scroll.html
            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(topLevelTypes.topWheel, 'DOMMouseScroll', mountAt);
          }
        } else if (dependency === topLevelTypes.topScroll) {

          if (isEventSupported('scroll', true)) {
            ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(topLevelTypes.topScroll, 'scroll', mountAt);
          } else {
            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(topLevelTypes.topScroll, 'scroll', ReactBrowserEventEmitter.ReactEventListener.WINDOW_HANDLE);
          }
        } else if (dependency === topLevelTypes.topFocus || dependency === topLevelTypes.topBlur) {

          if (isEventSupported('focus', true)) {
            ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(topLevelTypes.topFocus, 'focus', mountAt);
            ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(topLevelTypes.topBlur, 'blur', mountAt);
          } else if (isEventSupported('focusin')) {
            // IE has `focusin` and `focusout` events which bubble.
            // @see http://www.quirksmode.org/blog/archives/2008/04/delegating_the.html
            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(topLevelTypes.topFocus, 'focusin', mountAt);
            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(topLevelTypes.topBlur, 'focusout', mountAt);
          }

          // to make sure blur and focus event listeners are only attached once
          isListening[topLevelTypes.topBlur] = true;
          isListening[topLevelTypes.topFocus] = true;
        } else if (topEventMapping.hasOwnProperty(dependency)) {
          ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(dependency, topEventMapping[dependency], mountAt);
        }

        isListening[dependency] = true;
      }
    }
  },

  trapBubbledEvent: function (topLevelType, handlerBaseName, handle) {
    return ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(topLevelType, handlerBaseName, handle);
  },

  trapCapturedEvent: function (topLevelType, handlerBaseName, handle) {
    return ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(topLevelType, handlerBaseName, handle);
  },

  /**
   * Listens to window scroll and resize events. We cache scroll values so that
   * application code can access them without triggering reflows.
   *
   * NOTE: Scroll events do not bubble.
   *
   * @see http://www.quirksmode.org/dom/events/scroll.html
   */
  ensureScrollValueMonitoring: function () {
    if (!isMonitoringScrollValue) {
      var refresh = ViewportMetrics.refreshScrollValues;
      ReactBrowserEventEmitter.ReactEventListener.monitorScrollValue(refresh);
      isMonitoringScrollValue = true;
    }
  },

  eventNameDispatchConfigs: EventPluginHub.eventNameDispatchConfigs,

  registrationNameModules: EventPluginHub.registrationNameModules,

  putListener: EventPluginHub.putListener,

  getListener: EventPluginHub.getListener,

  deleteListener: EventPluginHub.deleteListener,

  deleteAllListeners: EventPluginHub.deleteAllListeners

});

ReactPerf.measureMethods(ReactBrowserEventEmitter, 'ReactBrowserEventEmitter', {
  putListener: 'putListener',
  deleteListener: 'deleteListener'
});

module.exports = ReactBrowserEventEmitter;
},{"./EventConstants":319,"./EventPluginHub":320,"./EventPluginRegistry":321,"./Object.assign":327,"./ReactEventEmitterMixin":358,"./ReactPerf":371,"./ViewportMetrics":401,"./isEventSupported":418}],331:[function(require,module,exports){
/**
 * Copyright 2014-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactChildReconciler
 * @typechecks static-only
 */

'use strict';

var ReactReconciler = require('./ReactReconciler');

var instantiateReactComponent = require('./instantiateReactComponent');
var shouldUpdateReactComponent = require('./shouldUpdateReactComponent');
var traverseAllChildren = require('./traverseAllChildren');
var warning = require('fbjs/lib/warning');

function instantiateChild(childInstances, child, name) {
  // We found a component instance.
  var keyUnique = childInstances[name] === undefined;
  if ("production" !== 'production') {
    "production" !== 'production' ? warning(keyUnique, 'flattenChildren(...): Encountered two children with the same key, ' + '`%s`. Child keys must be unique; when two children share a key, only ' + 'the first child will be used.', name) : undefined;
  }
  if (child != null && keyUnique) {
    childInstances[name] = instantiateReactComponent(child, null);
  }
}

/**
 * ReactChildReconciler provides helpers for initializing or updating a set of
 * children. Its output is suitable for passing it onto ReactMultiChild which
 * does diffed reordering and insertion.
 */
var ReactChildReconciler = {
  /**
   * Generates a "mount image" for each of the supplied children. In the case
   * of `ReactDOMComponent`, a mount image is a string of markup.
   *
   * @param {?object} nestedChildNodes Nested child maps.
   * @return {?object} A set of child instances.
   * @internal
   */
  instantiateChildren: function (nestedChildNodes, transaction, context) {
    if (nestedChildNodes == null) {
      return null;
    }
    var childInstances = {};
    traverseAllChildren(nestedChildNodes, instantiateChild, childInstances);
    return childInstances;
  },

  /**
   * Updates the rendered children and returns a new set of children.
   *
   * @param {?object} prevChildren Previously initialized set of children.
   * @param {?object} nextChildren Flat child element maps.
   * @param {ReactReconcileTransaction} transaction
   * @param {object} context
   * @return {?object} A new set of child instances.
   * @internal
   */
  updateChildren: function (prevChildren, nextChildren, transaction, context) {
    // We currently don't have a way to track moves here but if we use iterators
    // instead of for..in we can zip the iterators and check if an item has
    // moved.
    // TODO: If nothing has changed, return the prevChildren object so that we
    // can quickly bailout if nothing has changed.
    if (!nextChildren && !prevChildren) {
      return null;
    }
    var name;
    for (name in nextChildren) {
      if (!nextChildren.hasOwnProperty(name)) {
        continue;
      }
      var prevChild = prevChildren && prevChildren[name];
      var prevElement = prevChild && prevChild._currentElement;
      var nextElement = nextChildren[name];
      if (prevChild != null && shouldUpdateReactComponent(prevElement, nextElement)) {
        ReactReconciler.receiveComponent(prevChild, nextElement, transaction, context);
        nextChildren[name] = prevChild;
      } else {
        if (prevChild) {
          ReactReconciler.unmountComponent(prevChild, name);
        }
        // The child must be instantiated before it's mounted.
        var nextChildInstance = instantiateReactComponent(nextElement, null);
        nextChildren[name] = nextChildInstance;
      }
    }
    // Unmount children that are no longer present.
    for (name in prevChildren) {
      if (prevChildren.hasOwnProperty(name) && !(nextChildren && nextChildren.hasOwnProperty(name))) {
        ReactReconciler.unmountComponent(prevChildren[name]);
      }
    }
    return nextChildren;
  },

  /**
   * Unmounts all rendered children. This should be used to clean up children
   * when this component is unmounted.
   *
   * @param {?object} renderedChildren Previously initialized set of children.
   * @internal
   */
  unmountChildren: function (renderedChildren) {
    for (var name in renderedChildren) {
      if (renderedChildren.hasOwnProperty(name)) {
        var renderedChild = renderedChildren[name];
        ReactReconciler.unmountComponent(renderedChild);
      }
    }
  }

};

module.exports = ReactChildReconciler;
},{"./ReactReconciler":376,"./instantiateReactComponent":417,"./shouldUpdateReactComponent":423,"./traverseAllChildren":424,"fbjs/lib/warning":27}],332:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactChildren
 */

'use strict';

var PooledClass = require('./PooledClass');
var ReactElement = require('./ReactElement');

var emptyFunction = require('fbjs/lib/emptyFunction');
var traverseAllChildren = require('./traverseAllChildren');

var twoArgumentPooler = PooledClass.twoArgumentPooler;
var fourArgumentPooler = PooledClass.fourArgumentPooler;

var userProvidedKeyEscapeRegex = /\/(?!\/)/g;
function escapeUserProvidedKey(text) {
  return ('' + text).replace(userProvidedKeyEscapeRegex, '//');
}

/**
 * PooledClass representing the bookkeeping associated with performing a child
 * traversal. Allows avoiding binding callbacks.
 *
 * @constructor ForEachBookKeeping
 * @param {!function} forEachFunction Function to perform traversal with.
 * @param {?*} forEachContext Context to perform context with.
 */
function ForEachBookKeeping(forEachFunction, forEachContext) {
  this.func = forEachFunction;
  this.context = forEachContext;
  this.count = 0;
}
ForEachBookKeeping.prototype.destructor = function () {
  this.func = null;
  this.context = null;
  this.count = 0;
};
PooledClass.addPoolingTo(ForEachBookKeeping, twoArgumentPooler);

function forEachSingleChild(bookKeeping, child, name) {
  var func = bookKeeping.func;
  var context = bookKeeping.context;

  func.call(context, child, bookKeeping.count++);
}

/**
 * Iterates through children that are typically specified as `props.children`.
 *
 * The provided forEachFunc(child, index) will be called for each
 * leaf child.
 *
 * @param {?*} children Children tree container.
 * @param {function(*, int)} forEachFunc
 * @param {*} forEachContext Context for forEachContext.
 */
function forEachChildren(children, forEachFunc, forEachContext) {
  if (children == null) {
    return children;
  }
  var traverseContext = ForEachBookKeeping.getPooled(forEachFunc, forEachContext);
  traverseAllChildren(children, forEachSingleChild, traverseContext);
  ForEachBookKeeping.release(traverseContext);
}

/**
 * PooledClass representing the bookkeeping associated with performing a child
 * mapping. Allows avoiding binding callbacks.
 *
 * @constructor MapBookKeeping
 * @param {!*} mapResult Object containing the ordered map of results.
 * @param {!function} mapFunction Function to perform mapping with.
 * @param {?*} mapContext Context to perform mapping with.
 */
function MapBookKeeping(mapResult, keyPrefix, mapFunction, mapContext) {
  this.result = mapResult;
  this.keyPrefix = keyPrefix;
  this.func = mapFunction;
  this.context = mapContext;
  this.count = 0;
}
MapBookKeeping.prototype.destructor = function () {
  this.result = null;
  this.keyPrefix = null;
  this.func = null;
  this.context = null;
  this.count = 0;
};
PooledClass.addPoolingTo(MapBookKeeping, fourArgumentPooler);

function mapSingleChildIntoContext(bookKeeping, child, childKey) {
  var result = bookKeeping.result;
  var keyPrefix = bookKeeping.keyPrefix;
  var func = bookKeeping.func;
  var context = bookKeeping.context;

  var mappedChild = func.call(context, child, bookKeeping.count++);
  if (Array.isArray(mappedChild)) {
    mapIntoWithKeyPrefixInternal(mappedChild, result, childKey, emptyFunction.thatReturnsArgument);
  } else if (mappedChild != null) {
    if (ReactElement.isValidElement(mappedChild)) {
      mappedChild = ReactElement.cloneAndReplaceKey(mappedChild,
      // Keep both the (mapped) and old keys if they differ, just as
      // traverseAllChildren used to do for objects as children
      keyPrefix + (mappedChild !== child ? escapeUserProvidedKey(mappedChild.key || '') + '/' : '') + childKey);
    }
    result.push(mappedChild);
  }
}

function mapIntoWithKeyPrefixInternal(children, array, prefix, func, context) {
  var escapedPrefix = '';
  if (prefix != null) {
    escapedPrefix = escapeUserProvidedKey(prefix) + '/';
  }
  var traverseContext = MapBookKeeping.getPooled(array, escapedPrefix, func, context);
  traverseAllChildren(children, mapSingleChildIntoContext, traverseContext);
  MapBookKeeping.release(traverseContext);
}

/**
 * Maps children that are typically specified as `props.children`.
 *
 * The provided mapFunction(child, key, index) will be called for each
 * leaf child.
 *
 * @param {?*} children Children tree container.
 * @param {function(*, int)} func The map function.
 * @param {*} context Context for mapFunction.
 * @return {object} Object containing the ordered map of results.
 */
function mapChildren(children, func, context) {
  if (children == null) {
    return children;
  }
  var result = [];
  mapIntoWithKeyPrefixInternal(children, result, null, func, context);
  return result;
}

function forEachSingleChildDummy(traverseContext, child, name) {
  return null;
}

/**
 * Count the number of children that are typically specified as
 * `props.children`.
 *
 * @param {?*} children Children tree container.
 * @return {number} The number of children.
 */
function countChildren(children, context) {
  return traverseAllChildren(children, forEachSingleChildDummy, null);
}

/**
 * Flatten a children object (typically specified as `props.children`) and
 * return an array with appropriately re-keyed children.
 */
function toArray(children) {
  var result = [];
  mapIntoWithKeyPrefixInternal(children, result, null, emptyFunction.thatReturnsArgument);
  return result;
}

var ReactChildren = {
  forEach: forEachChildren,
  map: mapChildren,
  mapIntoWithKeyPrefixInternal: mapIntoWithKeyPrefixInternal,
  count: countChildren,
  toArray: toArray
};

module.exports = ReactChildren;
},{"./PooledClass":328,"./ReactElement":354,"./traverseAllChildren":424,"fbjs/lib/emptyFunction":9}],333:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactClass
 */

'use strict';

var ReactComponent = require('./ReactComponent');
var ReactElement = require('./ReactElement');
var ReactPropTypeLocations = require('./ReactPropTypeLocations');
var ReactPropTypeLocationNames = require('./ReactPropTypeLocationNames');
var ReactNoopUpdateQueue = require('./ReactNoopUpdateQueue');

var assign = require('./Object.assign');
var emptyObject = require('fbjs/lib/emptyObject');
var invariant = require('fbjs/lib/invariant');
var keyMirror = require('fbjs/lib/keyMirror');
var keyOf = require('fbjs/lib/keyOf');
var warning = require('fbjs/lib/warning');

var MIXINS_KEY = keyOf({ mixins: null });

/**
 * Policies that describe methods in `ReactClassInterface`.
 */
var SpecPolicy = keyMirror({
  /**
   * These methods may be defined only once by the class specification or mixin.
   */
  DEFINE_ONCE: null,
  /**
   * These methods may be defined by both the class specification and mixins.
   * Subsequent definitions will be chained. These methods must return void.
   */
  DEFINE_MANY: null,
  /**
   * These methods are overriding the base class.
   */
  OVERRIDE_BASE: null,
  /**
   * These methods are similar to DEFINE_MANY, except we assume they return
   * objects. We try to merge the keys of the return values of all the mixed in
   * functions. If there is a key conflict we throw.
   */
  DEFINE_MANY_MERGED: null
});

var injectedMixins = [];

var warnedSetProps = false;
function warnSetProps() {
  if (!warnedSetProps) {
    warnedSetProps = true;
    "production" !== 'production' ? warning(false, 'setProps(...) and replaceProps(...) are deprecated. ' + 'Instead, call render again at the top level.') : undefined;
  }
}

/**
 * Composite components are higher-level components that compose other composite
 * or native components.
 *
 * To create a new type of `ReactClass`, pass a specification of
 * your new class to `React.createClass`. The only requirement of your class
 * specification is that you implement a `render` method.
 *
 *   var MyComponent = React.createClass({
 *     render: function() {
 *       return <div>Hello World</div>;
 *     }
 *   });
 *
 * The class specification supports a specific protocol of methods that have
 * special meaning (e.g. `render`). See `ReactClassInterface` for
 * more the comprehensive protocol. Any other properties and methods in the
 * class specification will be available on the prototype.
 *
 * @interface ReactClassInterface
 * @internal
 */
var ReactClassInterface = {

  /**
   * An array of Mixin objects to include when defining your component.
   *
   * @type {array}
   * @optional
   */
  mixins: SpecPolicy.DEFINE_MANY,

  /**
   * An object containing properties and methods that should be defined on
   * the component's constructor instead of its prototype (static methods).
   *
   * @type {object}
   * @optional
   */
  statics: SpecPolicy.DEFINE_MANY,

  /**
   * Definition of prop types for this component.
   *
   * @type {object}
   * @optional
   */
  propTypes: SpecPolicy.DEFINE_MANY,

  /**
   * Definition of context types for this component.
   *
   * @type {object}
   * @optional
   */
  contextTypes: SpecPolicy.DEFINE_MANY,

  /**
   * Definition of context types this component sets for its children.
   *
   * @type {object}
   * @optional
   */
  childContextTypes: SpecPolicy.DEFINE_MANY,

  // ==== Definition methods ====

  /**
   * Invoked when the component is mounted. Values in the mapping will be set on
   * `this.props` if that prop is not specified (i.e. using an `in` check).
   *
   * This method is invoked before `getInitialState` and therefore cannot rely
   * on `this.state` or use `this.setState`.
   *
   * @return {object}
   * @optional
   */
  getDefaultProps: SpecPolicy.DEFINE_MANY_MERGED,

  /**
   * Invoked once before the component is mounted. The return value will be used
   * as the initial value of `this.state`.
   *
   *   getInitialState: function() {
   *     return {
   *       isOn: false,
   *       fooBaz: new BazFoo()
   *     }
   *   }
   *
   * @return {object}
   * @optional
   */
  getInitialState: SpecPolicy.DEFINE_MANY_MERGED,

  /**
   * @return {object}
   * @optional
   */
  getChildContext: SpecPolicy.DEFINE_MANY_MERGED,

  /**
   * Uses props from `this.props` and state from `this.state` to render the
   * structure of the component.
   *
   * No guarantees are made about when or how often this method is invoked, so
   * it must not have side effects.
   *
   *   render: function() {
   *     var name = this.props.name;
   *     return <div>Hello, {name}!</div>;
   *   }
   *
   * @return {ReactComponent}
   * @nosideeffects
   * @required
   */
  render: SpecPolicy.DEFINE_ONCE,

  // ==== Delegate methods ====

  /**
   * Invoked when the component is initially created and about to be mounted.
   * This may have side effects, but any external subscriptions or data created
   * by this method must be cleaned up in `componentWillUnmount`.
   *
   * @optional
   */
  componentWillMount: SpecPolicy.DEFINE_MANY,

  /**
   * Invoked when the component has been mounted and has a DOM representation.
   * However, there is no guarantee that the DOM node is in the document.
   *
   * Use this as an opportunity to operate on the DOM when the component has
   * been mounted (initialized and rendered) for the first time.
   *
   * @param {DOMElement} rootNode DOM element representing the component.
   * @optional
   */
  componentDidMount: SpecPolicy.DEFINE_MANY,

  /**
   * Invoked before the component receives new props.
   *
   * Use this as an opportunity to react to a prop transition by updating the
   * state using `this.setState`. Current props are accessed via `this.props`.
   *
   *   componentWillReceiveProps: function(nextProps, nextContext) {
   *     this.setState({
   *       likesIncreasing: nextProps.likeCount > this.props.likeCount
   *     });
   *   }
   *
   * NOTE: There is no equivalent `componentWillReceiveState`. An incoming prop
   * transition may cause a state change, but the opposite is not true. If you
   * need it, you are probably looking for `componentWillUpdate`.
   *
   * @param {object} nextProps
   * @optional
   */
  componentWillReceiveProps: SpecPolicy.DEFINE_MANY,

  /**
   * Invoked while deciding if the component should be updated as a result of
   * receiving new props, state and/or context.
   *
   * Use this as an opportunity to `return false` when you're certain that the
   * transition to the new props/state/context will not require a component
   * update.
   *
   *   shouldComponentUpdate: function(nextProps, nextState, nextContext) {
   *     return !equal(nextProps, this.props) ||
   *       !equal(nextState, this.state) ||
   *       !equal(nextContext, this.context);
   *   }
   *
   * @param {object} nextProps
   * @param {?object} nextState
   * @param {?object} nextContext
   * @return {boolean} True if the component should update.
   * @optional
   */
  shouldComponentUpdate: SpecPolicy.DEFINE_ONCE,

  /**
   * Invoked when the component is about to update due to a transition from
   * `this.props`, `this.state` and `this.context` to `nextProps`, `nextState`
   * and `nextContext`.
   *
   * Use this as an opportunity to perform preparation before an update occurs.
   *
   * NOTE: You **cannot** use `this.setState()` in this method.
   *
   * @param {object} nextProps
   * @param {?object} nextState
   * @param {?object} nextContext
   * @param {ReactReconcileTransaction} transaction
   * @optional
   */
  componentWillUpdate: SpecPolicy.DEFINE_MANY,

  /**
   * Invoked when the component's DOM representation has been updated.
   *
   * Use this as an opportunity to operate on the DOM when the component has
   * been updated.
   *
   * @param {object} prevProps
   * @param {?object} prevState
   * @param {?object} prevContext
   * @param {DOMElement} rootNode DOM element representing the component.
   * @optional
   */
  componentDidUpdate: SpecPolicy.DEFINE_MANY,

  /**
   * Invoked when the component is about to be removed from its parent and have
   * its DOM representation destroyed.
   *
   * Use this as an opportunity to deallocate any external resources.
   *
   * NOTE: There is no `componentDidUnmount` since your component will have been
   * destroyed by that point.
   *
   * @optional
   */
  componentWillUnmount: SpecPolicy.DEFINE_MANY,

  // ==== Advanced methods ====

  /**
   * Updates the component's currently mounted DOM representation.
   *
   * By default, this implements React's rendering and reconciliation algorithm.
   * Sophisticated clients may wish to override this.
   *
   * @param {ReactReconcileTransaction} transaction
   * @internal
   * @overridable
   */
  updateComponent: SpecPolicy.OVERRIDE_BASE

};

/**
 * Mapping from class specification keys to special processing functions.
 *
 * Although these are declared like instance properties in the specification
 * when defining classes using `React.createClass`, they are actually static
 * and are accessible on the constructor instead of the prototype. Despite
 * being static, they must be defined outside of the "statics" key under
 * which all other static methods are defined.
 */
var RESERVED_SPEC_KEYS = {
  displayName: function (Constructor, displayName) {
    Constructor.displayName = displayName;
  },
  mixins: function (Constructor, mixins) {
    if (mixins) {
      for (var i = 0; i < mixins.length; i++) {
        mixSpecIntoComponent(Constructor, mixins[i]);
      }
    }
  },
  childContextTypes: function (Constructor, childContextTypes) {
    if ("production" !== 'production') {
      validateTypeDef(Constructor, childContextTypes, ReactPropTypeLocations.childContext);
    }
    Constructor.childContextTypes = assign({}, Constructor.childContextTypes, childContextTypes);
  },
  contextTypes: function (Constructor, contextTypes) {
    if ("production" !== 'production') {
      validateTypeDef(Constructor, contextTypes, ReactPropTypeLocations.context);
    }
    Constructor.contextTypes = assign({}, Constructor.contextTypes, contextTypes);
  },
  /**
   * Special case getDefaultProps which should move into statics but requires
   * automatic merging.
   */
  getDefaultProps: function (Constructor, getDefaultProps) {
    if (Constructor.getDefaultProps) {
      Constructor.getDefaultProps = createMergedResultFunction(Constructor.getDefaultProps, getDefaultProps);
    } else {
      Constructor.getDefaultProps = getDefaultProps;
    }
  },
  propTypes: function (Constructor, propTypes) {
    if ("production" !== 'production') {
      validateTypeDef(Constructor, propTypes, ReactPropTypeLocations.prop);
    }
    Constructor.propTypes = assign({}, Constructor.propTypes, propTypes);
  },
  statics: function (Constructor, statics) {
    mixStaticSpecIntoComponent(Constructor, statics);
  },
  autobind: function () {} };

// noop
function validateTypeDef(Constructor, typeDef, location) {
  for (var propName in typeDef) {
    if (typeDef.hasOwnProperty(propName)) {
      // use a warning instead of an invariant so components
      // don't show up in prod but not in __DEV__
      "production" !== 'production' ? warning(typeof typeDef[propName] === 'function', '%s: %s type `%s` is invalid; it must be a function, usually from ' + 'React.PropTypes.', Constructor.displayName || 'ReactClass', ReactPropTypeLocationNames[location], propName) : undefined;
    }
  }
}

function validateMethodOverride(proto, name) {
  var specPolicy = ReactClassInterface.hasOwnProperty(name) ? ReactClassInterface[name] : null;

  // Disallow overriding of base class methods unless explicitly allowed.
  if (ReactClassMixin.hasOwnProperty(name)) {
    !(specPolicy === SpecPolicy.OVERRIDE_BASE) ? "production" !== 'production' ? invariant(false, 'ReactClassInterface: You are attempting to override ' + '`%s` from your class specification. Ensure that your method names ' + 'do not overlap with React methods.', name) : invariant(false) : undefined;
  }

  // Disallow defining methods more than once unless explicitly allowed.
  if (proto.hasOwnProperty(name)) {
    !(specPolicy === SpecPolicy.DEFINE_MANY || specPolicy === SpecPolicy.DEFINE_MANY_MERGED) ? "production" !== 'production' ? invariant(false, 'ReactClassInterface: You are attempting to define ' + '`%s` on your component more than once. This conflict may be due ' + 'to a mixin.', name) : invariant(false) : undefined;
  }
}

/**
 * Mixin helper which handles policy validation and reserved
 * specification keys when building React classses.
 */
function mixSpecIntoComponent(Constructor, spec) {
  if (!spec) {
    return;
  }

  !(typeof spec !== 'function') ? "production" !== 'production' ? invariant(false, 'ReactClass: You\'re attempting to ' + 'use a component class as a mixin. Instead, just use a regular object.') : invariant(false) : undefined;
  !!ReactElement.isValidElement(spec) ? "production" !== 'production' ? invariant(false, 'ReactClass: You\'re attempting to ' + 'use a component as a mixin. Instead, just use a regular object.') : invariant(false) : undefined;

  var proto = Constructor.prototype;

  // By handling mixins before any other properties, we ensure the same
  // chaining order is applied to methods with DEFINE_MANY policy, whether
  // mixins are listed before or after these methods in the spec.
  if (spec.hasOwnProperty(MIXINS_KEY)) {
    RESERVED_SPEC_KEYS.mixins(Constructor, spec.mixins);
  }

  for (var name in spec) {
    if (!spec.hasOwnProperty(name)) {
      continue;
    }

    if (name === MIXINS_KEY) {
      // We have already handled mixins in a special case above.
      continue;
    }

    var property = spec[name];
    validateMethodOverride(proto, name);

    if (RESERVED_SPEC_KEYS.hasOwnProperty(name)) {
      RESERVED_SPEC_KEYS[name](Constructor, property);
    } else {
      // Setup methods on prototype:
      // The following member methods should not be automatically bound:
      // 1. Expected ReactClass methods (in the "interface").
      // 2. Overridden methods (that were mixed in).
      var isReactClassMethod = ReactClassInterface.hasOwnProperty(name);
      var isAlreadyDefined = proto.hasOwnProperty(name);
      var isFunction = typeof property === 'function';
      var shouldAutoBind = isFunction && !isReactClassMethod && !isAlreadyDefined && spec.autobind !== false;

      if (shouldAutoBind) {
        if (!proto.__reactAutoBindMap) {
          proto.__reactAutoBindMap = {};
        }
        proto.__reactAutoBindMap[name] = property;
        proto[name] = property;
      } else {
        if (isAlreadyDefined) {
          var specPolicy = ReactClassInterface[name];

          // These cases should already be caught by validateMethodOverride.
          !(isReactClassMethod && (specPolicy === SpecPolicy.DEFINE_MANY_MERGED || specPolicy === SpecPolicy.DEFINE_MANY)) ? "production" !== 'production' ? invariant(false, 'ReactClass: Unexpected spec policy %s for key %s ' + 'when mixing in component specs.', specPolicy, name) : invariant(false) : undefined;

          // For methods which are defined more than once, call the existing
          // methods before calling the new property, merging if appropriate.
          if (specPolicy === SpecPolicy.DEFINE_MANY_MERGED) {
            proto[name] = createMergedResultFunction(proto[name], property);
          } else if (specPolicy === SpecPolicy.DEFINE_MANY) {
            proto[name] = createChainedFunction(proto[name], property);
          }
        } else {
          proto[name] = property;
          if ("production" !== 'production') {
            // Add verbose displayName to the function, which helps when looking
            // at profiling tools.
            if (typeof property === 'function' && spec.displayName) {
              proto[name].displayName = spec.displayName + '_' + name;
            }
          }
        }
      }
    }
  }
}

function mixStaticSpecIntoComponent(Constructor, statics) {
  if (!statics) {
    return;
  }
  for (var name in statics) {
    var property = statics[name];
    if (!statics.hasOwnProperty(name)) {
      continue;
    }

    var isReserved = (name in RESERVED_SPEC_KEYS);
    !!isReserved ? "production" !== 'production' ? invariant(false, 'ReactClass: You are attempting to define a reserved ' + 'property, `%s`, that shouldn\'t be on the "statics" key. Define it ' + 'as an instance property instead; it will still be accessible on the ' + 'constructor.', name) : invariant(false) : undefined;

    var isInherited = (name in Constructor);
    !!isInherited ? "production" !== 'production' ? invariant(false, 'ReactClass: You are attempting to define ' + '`%s` on your component more than once. This conflict may be ' + 'due to a mixin.', name) : invariant(false) : undefined;
    Constructor[name] = property;
  }
}

/**
 * Merge two objects, but throw if both contain the same key.
 *
 * @param {object} one The first object, which is mutated.
 * @param {object} two The second object
 * @return {object} one after it has been mutated to contain everything in two.
 */
function mergeIntoWithNoDuplicateKeys(one, two) {
  !(one && two && typeof one === 'object' && typeof two === 'object') ? "production" !== 'production' ? invariant(false, 'mergeIntoWithNoDuplicateKeys(): Cannot merge non-objects.') : invariant(false) : undefined;

  for (var key in two) {
    if (two.hasOwnProperty(key)) {
      !(one[key] === undefined) ? "production" !== 'production' ? invariant(false, 'mergeIntoWithNoDuplicateKeys(): ' + 'Tried to merge two objects with the same key: `%s`. This conflict ' + 'may be due to a mixin; in particular, this may be caused by two ' + 'getInitialState() or getDefaultProps() methods returning objects ' + 'with clashing keys.', key) : invariant(false) : undefined;
      one[key] = two[key];
    }
  }
  return one;
}

/**
 * Creates a function that invokes two functions and merges their return values.
 *
 * @param {function} one Function to invoke first.
 * @param {function} two Function to invoke second.
 * @return {function} Function that invokes the two argument functions.
 * @private
 */
function createMergedResultFunction(one, two) {
  return function mergedResult() {
    var a = one.apply(this, arguments);
    var b = two.apply(this, arguments);
    if (a == null) {
      return b;
    } else if (b == null) {
      return a;
    }
    var c = {};
    mergeIntoWithNoDuplicateKeys(c, a);
    mergeIntoWithNoDuplicateKeys(c, b);
    return c;
  };
}

/**
 * Creates a function that invokes two functions and ignores their return vales.
 *
 * @param {function} one Function to invoke first.
 * @param {function} two Function to invoke second.
 * @return {function} Function that invokes the two argument functions.
 * @private
 */
function createChainedFunction(one, two) {
  return function chainedFunction() {
    one.apply(this, arguments);
    two.apply(this, arguments);
  };
}

/**
 * Binds a method to the component.
 *
 * @param {object} component Component whose method is going to be bound.
 * @param {function} method Method to be bound.
 * @return {function} The bound method.
 */
function bindAutoBindMethod(component, method) {
  var boundMethod = method.bind(component);
  if ("production" !== 'production') {
    boundMethod.__reactBoundContext = component;
    boundMethod.__reactBoundMethod = method;
    boundMethod.__reactBoundArguments = null;
    var componentName = component.constructor.displayName;
    var _bind = boundMethod.bind;
    /* eslint-disable block-scoped-var, no-undef */
    boundMethod.bind = function (newThis) {
      for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        args[_key - 1] = arguments[_key];
      }

      // User is trying to bind() an autobound method; we effectively will
      // ignore the value of "this" that the user is trying to use, so
      // let's warn.
      if (newThis !== component && newThis !== null) {
        "production" !== 'production' ? warning(false, 'bind(): React component methods may only be bound to the ' + 'component instance. See %s', componentName) : undefined;
      } else if (!args.length) {
        "production" !== 'production' ? warning(false, 'bind(): You are binding a component method to the component. ' + 'React does this for you automatically in a high-performance ' + 'way, so you can safely remove this call. See %s', componentName) : undefined;
        return boundMethod;
      }
      var reboundMethod = _bind.apply(boundMethod, arguments);
      reboundMethod.__reactBoundContext = component;
      reboundMethod.__reactBoundMethod = method;
      reboundMethod.__reactBoundArguments = args;
      return reboundMethod;
      /* eslint-enable */
    };
  }
  return boundMethod;
}

/**
 * Binds all auto-bound methods in a component.
 *
 * @param {object} component Component whose method is going to be bound.
 */
function bindAutoBindMethods(component) {
  for (var autoBindKey in component.__reactAutoBindMap) {
    if (component.__reactAutoBindMap.hasOwnProperty(autoBindKey)) {
      var method = component.__reactAutoBindMap[autoBindKey];
      component[autoBindKey] = bindAutoBindMethod(component, method);
    }
  }
}

/**
 * Add more to the ReactClass base class. These are all legacy features and
 * therefore not already part of the modern ReactComponent.
 */
var ReactClassMixin = {

  /**
   * TODO: This will be deprecated because state should always keep a consistent
   * type signature and the only use case for this, is to avoid that.
   */
  replaceState: function (newState, callback) {
    this.updater.enqueueReplaceState(this, newState);
    if (callback) {
      this.updater.enqueueCallback(this, callback);
    }
  },

  /**
   * Checks whether or not this composite component is mounted.
   * @return {boolean} True if mounted, false otherwise.
   * @protected
   * @final
   */
  isMounted: function () {
    return this.updater.isMounted(this);
  },

  /**
   * Sets a subset of the props.
   *
   * @param {object} partialProps Subset of the next props.
   * @param {?function} callback Called after props are updated.
   * @final
   * @public
   * @deprecated
   */
  setProps: function (partialProps, callback) {
    if ("production" !== 'production') {
      warnSetProps();
    }
    this.updater.enqueueSetProps(this, partialProps);
    if (callback) {
      this.updater.enqueueCallback(this, callback);
    }
  },

  /**
   * Replace all the props.
   *
   * @param {object} newProps Subset of the next props.
   * @param {?function} callback Called after props are updated.
   * @final
   * @public
   * @deprecated
   */
  replaceProps: function (newProps, callback) {
    if ("production" !== 'production') {
      warnSetProps();
    }
    this.updater.enqueueReplaceProps(this, newProps);
    if (callback) {
      this.updater.enqueueCallback(this, callback);
    }
  }
};

var ReactClassComponent = function () {};
assign(ReactClassComponent.prototype, ReactComponent.prototype, ReactClassMixin);

/**
 * Module for creating composite components.
 *
 * @class ReactClass
 */
var ReactClass = {

  /**
   * Creates a composite component class given a class specification.
   *
   * @param {object} spec Class specification (which must define `render`).
   * @return {function} Component constructor function.
   * @public
   */
  createClass: function (spec) {
    var Constructor = function (props, context, updater) {
      // This constructor is overridden by mocks. The argument is used
      // by mocks to assert on what gets mounted.

      if ("production" !== 'production') {
        "production" !== 'production' ? warning(this instanceof Constructor, 'Something is calling a React component directly. Use a factory or ' + 'JSX instead. See: https://fb.me/react-legacyfactory') : undefined;
      }

      // Wire up auto-binding
      if (this.__reactAutoBindMap) {
        bindAutoBindMethods(this);
      }

      this.props = props;
      this.context = context;
      this.refs = emptyObject;
      this.updater = updater || ReactNoopUpdateQueue;

      this.state = null;

      // ReactClasses doesn't have constructors. Instead, they use the
      // getInitialState and componentWillMount methods for initialization.

      var initialState = this.getInitialState ? this.getInitialState() : null;
      if ("production" !== 'production') {
        // We allow auto-mocks to proceed as if they're returning null.
        if (typeof initialState === 'undefined' && this.getInitialState._isMockFunction) {
          // This is probably bad practice. Consider warning here and
          // deprecating this convenience.
          initialState = null;
        }
      }
      !(typeof initialState === 'object' && !Array.isArray(initialState)) ? "production" !== 'production' ? invariant(false, '%s.getInitialState(): must return an object or null', Constructor.displayName || 'ReactCompositeComponent') : invariant(false) : undefined;

      this.state = initialState;
    };
    Constructor.prototype = new ReactClassComponent();
    Constructor.prototype.constructor = Constructor;

    injectedMixins.forEach(mixSpecIntoComponent.bind(null, Constructor));

    mixSpecIntoComponent(Constructor, spec);

    // Initialize the defaultProps property after all mixins have been merged.
    if (Constructor.getDefaultProps) {
      Constructor.defaultProps = Constructor.getDefaultProps();
    }

    if ("production" !== 'production') {
      // This is a tag to indicate that the use of these method names is ok,
      // since it's used with createClass. If it's not, then it's likely a
      // mistake so we'll warn you to use the static property, property
      // initializer or constructor respectively.
      if (Constructor.getDefaultProps) {
        Constructor.getDefaultProps.isReactClassApproved = {};
      }
      if (Constructor.prototype.getInitialState) {
        Constructor.prototype.getInitialState.isReactClassApproved = {};
      }
    }

    !Constructor.prototype.render ? "production" !== 'production' ? invariant(false, 'createClass(...): Class specification must implement a `render` method.') : invariant(false) : undefined;

    if ("production" !== 'production') {
      "production" !== 'production' ? warning(!Constructor.prototype.componentShouldUpdate, '%s has a method called ' + 'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' + 'The name is phrased as a question because the function is ' + 'expected to return a value.', spec.displayName || 'A component') : undefined;
      "production" !== 'production' ? warning(!Constructor.prototype.componentWillRecieveProps, '%s has a method called ' + 'componentWillRecieveProps(). Did you mean componentWillReceiveProps()?', spec.displayName || 'A component') : undefined;
    }

    // Reduce time spent doing lookups by setting these on the prototype.
    for (var methodName in ReactClassInterface) {
      if (!Constructor.prototype[methodName]) {
        Constructor.prototype[methodName] = null;
      }
    }

    return Constructor;
  },

  injection: {
    injectMixin: function (mixin) {
      injectedMixins.push(mixin);
    }
  }

};

module.exports = ReactClass;
},{"./Object.assign":327,"./ReactComponent":334,"./ReactElement":354,"./ReactNoopUpdateQueue":369,"./ReactPropTypeLocationNames":372,"./ReactPropTypeLocations":373,"fbjs/lib/emptyObject":10,"fbjs/lib/invariant":17,"fbjs/lib/keyMirror":20,"fbjs/lib/keyOf":21,"fbjs/lib/warning":27}],334:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactComponent
 */

'use strict';

var ReactNoopUpdateQueue = require('./ReactNoopUpdateQueue');

var canDefineProperty = require('./canDefineProperty');
var emptyObject = require('fbjs/lib/emptyObject');
var invariant = require('fbjs/lib/invariant');
var warning = require('fbjs/lib/warning');

/**
 * Base class helpers for the updating state of a component.
 */
function ReactComponent(props, context, updater) {
  this.props = props;
  this.context = context;
  this.refs = emptyObject;
  // We initialize the default updater but the real one gets injected by the
  // renderer.
  this.updater = updater || ReactNoopUpdateQueue;
}

ReactComponent.prototype.isReactComponent = {};

/**
 * Sets a subset of the state. Always use this to mutate
 * state. You should treat `this.state` as immutable.
 *
 * There is no guarantee that `this.state` will be immediately updated, so
 * accessing `this.state` after calling this method may return the old value.
 *
 * There is no guarantee that calls to `setState` will run synchronously,
 * as they may eventually be batched together.  You can provide an optional
 * callback that will be executed when the call to setState is actually
 * completed.
 *
 * When a function is provided to setState, it will be called at some point in
 * the future (not synchronously). It will be called with the up to date
 * component arguments (state, props, context). These values can be different
 * from this.* because your function may be called after receiveProps but before
 * shouldComponentUpdate, and this new state, props, and context will not yet be
 * assigned to this.
 *
 * @param {object|function} partialState Next partial state or function to
 *        produce next partial state to be merged with current state.
 * @param {?function} callback Called after state is updated.
 * @final
 * @protected
 */
ReactComponent.prototype.setState = function (partialState, callback) {
  !(typeof partialState === 'object' || typeof partialState === 'function' || partialState == null) ? "production" !== 'production' ? invariant(false, 'setState(...): takes an object of state variables to update or a ' + 'function which returns an object of state variables.') : invariant(false) : undefined;
  if ("production" !== 'production') {
    "production" !== 'production' ? warning(partialState != null, 'setState(...): You passed an undefined or null state object; ' + 'instead, use forceUpdate().') : undefined;
  }
  this.updater.enqueueSetState(this, partialState);
  if (callback) {
    this.updater.enqueueCallback(this, callback);
  }
};

/**
 * Forces an update. This should only be invoked when it is known with
 * certainty that we are **not** in a DOM transaction.
 *
 * You may want to call this when you know that some deeper aspect of the
 * component's state has changed but `setState` was not called.
 *
 * This will not invoke `shouldComponentUpdate`, but it will invoke
 * `componentWillUpdate` and `componentDidUpdate`.
 *
 * @param {?function} callback Called after update is complete.
 * @final
 * @protected
 */
ReactComponent.prototype.forceUpdate = function (callback) {
  this.updater.enqueueForceUpdate(this);
  if (callback) {
    this.updater.enqueueCallback(this, callback);
  }
};

/**
 * Deprecated APIs. These APIs used to exist on classic React classes but since
 * we would like to deprecate them, we're not going to move them over to this
 * modern base class. Instead, we define a getter that warns if it's accessed.
 */
if ("production" !== 'production') {
  var deprecatedAPIs = {
    getDOMNode: ['getDOMNode', 'Use ReactDOM.findDOMNode(component) instead.'],
    isMounted: ['isMounted', 'Instead, make sure to clean up subscriptions and pending requests in ' + 'componentWillUnmount to prevent memory leaks.'],
    replaceProps: ['replaceProps', 'Instead, call render again at the top level.'],
    replaceState: ['replaceState', 'Refactor your code to use setState instead (see ' + 'https://github.com/facebook/react/issues/3236).'],
    setProps: ['setProps', 'Instead, call render again at the top level.']
  };
  var defineDeprecationWarning = function (methodName, info) {
    if (canDefineProperty) {
      Object.defineProperty(ReactComponent.prototype, methodName, {
        get: function () {
          "production" !== 'production' ? warning(false, '%s(...) is deprecated in plain JavaScript React classes. %s', info[0], info[1]) : undefined;
          return undefined;
        }
      });
    }
  };
  for (var fnName in deprecatedAPIs) {
    if (deprecatedAPIs.hasOwnProperty(fnName)) {
      defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);
    }
  }
}

module.exports = ReactComponent;
},{"./ReactNoopUpdateQueue":369,"./canDefineProperty":404,"fbjs/lib/emptyObject":10,"fbjs/lib/invariant":17,"fbjs/lib/warning":27}],335:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactComponentBrowserEnvironment
 */

'use strict';

var ReactDOMIDOperations = require('./ReactDOMIDOperations');
var ReactMount = require('./ReactMount');

/**
 * Abstracts away all functionality of the reconciler that requires knowledge of
 * the browser context. TODO: These callers should be refactored to avoid the
 * need for this injection.
 */
var ReactComponentBrowserEnvironment = {

  processChildrenUpdates: ReactDOMIDOperations.dangerouslyProcessChildrenUpdates,

  replaceNodeWithMarkupByID: ReactDOMIDOperations.dangerouslyReplaceNodeWithMarkupByID,

  /**
   * If a particular environment requires that some resources be cleaned up,
   * specify this in the injected Mixin. In the DOM, we would likely want to
   * purge any cached node ID lookups.
   *
   * @private
   */
  unmountIDFromEnvironment: function (rootNodeID) {
    ReactMount.purgeID(rootNodeID);
  }

};

module.exports = ReactComponentBrowserEnvironment;
},{"./ReactDOMIDOperations":342,"./ReactMount":365}],336:[function(require,module,exports){
/**
 * Copyright 2014-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactComponentEnvironment
 */

'use strict';

var invariant = require('fbjs/lib/invariant');

var injected = false;

var ReactComponentEnvironment = {

  /**
   * Optionally injectable environment dependent cleanup hook. (server vs.
   * browser etc). Example: A browser system caches DOM nodes based on component
   * ID and must remove that cache entry when this instance is unmounted.
   */
  unmountIDFromEnvironment: null,

  /**
   * Optionally injectable hook for swapping out mount images in the middle of
   * the tree.
   */
  replaceNodeWithMarkupByID: null,

  /**
   * Optionally injectable hook for processing a queue of child updates. Will
   * later move into MultiChildComponents.
   */
  processChildrenUpdates: null,

  injection: {
    injectEnvironment: function (environment) {
      !!injected ? "production" !== 'production' ? invariant(false, 'ReactCompositeComponent: injectEnvironment() can only be called once.') : invariant(false) : undefined;
      ReactComponentEnvironment.unmountIDFromEnvironment = environment.unmountIDFromEnvironment;
      ReactComponentEnvironment.replaceNodeWithMarkupByID = environment.replaceNodeWithMarkupByID;
      ReactComponentEnvironment.processChildrenUpdates = environment.processChildrenUpdates;
      injected = true;
    }
  }

};

module.exports = ReactComponentEnvironment;
},{"fbjs/lib/invariant":17}],337:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactCompositeComponent
 */

'use strict';

var ReactComponentEnvironment = require('./ReactComponentEnvironment');
var ReactCurrentOwner = require('./ReactCurrentOwner');
var ReactElement = require('./ReactElement');
var ReactInstanceMap = require('./ReactInstanceMap');
var ReactPerf = require('./ReactPerf');
var ReactPropTypeLocations = require('./ReactPropTypeLocations');
var ReactPropTypeLocationNames = require('./ReactPropTypeLocationNames');
var ReactReconciler = require('./ReactReconciler');
var ReactUpdateQueue = require('./ReactUpdateQueue');

var assign = require('./Object.assign');
var emptyObject = require('fbjs/lib/emptyObject');
var invariant = require('fbjs/lib/invariant');
var shouldUpdateReactComponent = require('./shouldUpdateReactComponent');
var warning = require('fbjs/lib/warning');

function getDeclarationErrorAddendum(component) {
  var owner = component._currentElement._owner || null;
  if (owner) {
    var name = owner.getName();
    if (name) {
      return ' Check the render method of `' + name + '`.';
    }
  }
  return '';
}

function StatelessComponent(Component) {}
StatelessComponent.prototype.render = function () {
  var Component = ReactInstanceMap.get(this)._currentElement.type;
  return Component(this.props, this.context, this.updater);
};

/**
 * ------------------ The Life-Cycle of a Composite Component ------------------
 *
 * - constructor: Initialization of state. The instance is now retained.
 *   - componentWillMount
 *   - render
 *   - [children's constructors]
 *     - [children's componentWillMount and render]
 *     - [children's componentDidMount]
 *     - componentDidMount
 *
 *       Update Phases:
 *       - componentWillReceiveProps (only called if parent updated)
 *       - shouldComponentUpdate
 *         - componentWillUpdate
 *           - render
 *           - [children's constructors or receive props phases]
 *         - componentDidUpdate
 *
 *     - componentWillUnmount
 *     - [children's componentWillUnmount]
 *   - [children destroyed]
 * - (destroyed): The instance is now blank, released by React and ready for GC.
 *
 * -----------------------------------------------------------------------------
 */

/**
 * An incrementing ID assigned to each component when it is mounted. This is
 * used to enforce the order in which `ReactUpdates` updates dirty components.
 *
 * @private
 */
var nextMountID = 1;

/**
 * @lends {ReactCompositeComponent.prototype}
 */
var ReactCompositeComponentMixin = {

  /**
   * Base constructor for all composite component.
   *
   * @param {ReactElement} element
   * @final
   * @internal
   */
  construct: function (element) {
    this._currentElement = element;
    this._rootNodeID = null;
    this._instance = null;

    // See ReactUpdateQueue
    this._pendingElement = null;
    this._pendingStateQueue = null;
    this._pendingReplaceState = false;
    this._pendingForceUpdate = false;

    this._renderedComponent = null;

    this._context = null;
    this._mountOrder = 0;
    this._topLevelWrapper = null;

    // See ReactUpdates and ReactUpdateQueue.
    this._pendingCallbacks = null;
  },

  /**
   * Initializes the component, renders markup, and registers event listeners.
   *
   * @param {string} rootID DOM ID of the root node.
   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
   * @return {?string} Rendered markup to be inserted into the DOM.
   * @final
   * @internal
   */
  mountComponent: function (rootID, transaction, context) {
    this._context = context;
    this._mountOrder = nextMountID++;
    this._rootNodeID = rootID;

    var publicProps = this._processProps(this._currentElement.props);
    var publicContext = this._processContext(context);

    var Component = this._currentElement.type;

    // Initialize the public class
    var inst;
    var renderedElement;

    // This is a way to detect if Component is a stateless arrow function
    // component, which is not newable. It might not be 100% reliable but is
    // something we can do until we start detecting that Component extends
    // React.Component. We already assume that typeof Component === 'function'.
    var canInstantiate = ('prototype' in Component);

    if (canInstantiate) {
      if ("production" !== 'production') {
        ReactCurrentOwner.current = this;
        try {
          inst = new Component(publicProps, publicContext, ReactUpdateQueue);
        } finally {
          ReactCurrentOwner.current = null;
        }
      } else {
        inst = new Component(publicProps, publicContext, ReactUpdateQueue);
      }
    }

    if (!canInstantiate || inst === null || inst === false || ReactElement.isValidElement(inst)) {
      renderedElement = inst;
      inst = new StatelessComponent(Component);
    }

    if ("production" !== 'production') {
      // This will throw later in _renderValidatedComponent, but add an early
      // warning now to help debugging
      if (inst.render == null) {
        "production" !== 'production' ? warning(false, '%s(...): No `render` method found on the returned component ' + 'instance: you may have forgotten to define `render`, returned ' + 'null/false from a stateless component, or tried to render an ' + 'element whose type is a function that isn\'t a React component.', Component.displayName || Component.name || 'Component') : undefined;
      } else {
        // We support ES6 inheriting from React.Component, the module pattern,
        // and stateless components, but not ES6 classes that don't extend
        "production" !== 'production' ? warning(Component.prototype && Component.prototype.isReactComponent || !canInstantiate || !(inst instanceof Component), '%s(...): React component classes must extend React.Component.', Component.displayName || Component.name || 'Component') : undefined;
      }
    }

    // These should be set up in the constructor, but as a convenience for
    // simpler class abstractions, we set them up after the fact.
    inst.props = publicProps;
    inst.context = publicContext;
    inst.refs = emptyObject;
    inst.updater = ReactUpdateQueue;

    this._instance = inst;

    // Store a reference from the instance back to the internal representation
    ReactInstanceMap.set(inst, this);

    if ("production" !== 'production') {
      // Since plain JS classes are defined without any special initialization
      // logic, we can not catch common errors early. Therefore, we have to
      // catch them here, at initialization time, instead.
      "production" !== 'production' ? warning(!inst.getInitialState || inst.getInitialState.isReactClassApproved, 'getInitialState was defined on %s, a plain JavaScript class. ' + 'This is only supported for classes created using React.createClass. ' + 'Did you mean to define a state property instead?', this.getName() || 'a component') : undefined;
      "production" !== 'production' ? warning(!inst.getDefaultProps || inst.getDefaultProps.isReactClassApproved, 'getDefaultProps was defined on %s, a plain JavaScript class. ' + 'This is only supported for classes created using React.createClass. ' + 'Use a static property to define defaultProps instead.', this.getName() || 'a component') : undefined;
      "production" !== 'production' ? warning(!inst.propTypes, 'propTypes was defined as an instance property on %s. Use a static ' + 'property to define propTypes instead.', this.getName() || 'a component') : undefined;
      "production" !== 'production' ? warning(!inst.contextTypes, 'contextTypes was defined as an instance property on %s. Use a ' + 'static property to define contextTypes instead.', this.getName() || 'a component') : undefined;
      "production" !== 'production' ? warning(typeof inst.componentShouldUpdate !== 'function', '%s has a method called ' + 'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' + 'The name is phrased as a question because the function is ' + 'expected to return a value.', this.getName() || 'A component') : undefined;
      "production" !== 'production' ? warning(typeof inst.componentDidUnmount !== 'function', '%s has a method called ' + 'componentDidUnmount(). But there is no such lifecycle method. ' + 'Did you mean componentWillUnmount()?', this.getName() || 'A component') : undefined;
      "production" !== 'production' ? warning(typeof inst.componentWillRecieveProps !== 'function', '%s has a method called ' + 'componentWillRecieveProps(). Did you mean componentWillReceiveProps()?', this.getName() || 'A component') : undefined;
    }

    var initialState = inst.state;
    if (initialState === undefined) {
      inst.state = initialState = null;
    }
    !(typeof initialState === 'object' && !Array.isArray(initialState)) ? "production" !== 'production' ? invariant(false, '%s.state: must be set to an object or null', this.getName() || 'ReactCompositeComponent') : invariant(false) : undefined;

    this._pendingStateQueue = null;
    this._pendingReplaceState = false;
    this._pendingForceUpdate = false;

    if (inst.componentWillMount) {
      inst.componentWillMount();
      // When mounting, calls to `setState` by `componentWillMount` will set
      // `this._pendingStateQueue` without triggering a re-render.
      if (this._pendingStateQueue) {
        inst.state = this._processPendingState(inst.props, inst.context);
      }
    }

    // If not a stateless component, we now render
    if (renderedElement === undefined) {
      renderedElement = this._renderValidatedComponent();
    }

    this._renderedComponent = this._instantiateReactComponent(renderedElement);

    var markup = ReactReconciler.mountComponent(this._renderedComponent, rootID, transaction, this._processChildContext(context));
    if (inst.componentDidMount) {
      transaction.getReactMountReady().enqueue(inst.componentDidMount, inst);
    }

    return markup;
  },

  /**
   * Releases any resources allocated by `mountComponent`.
   *
   * @final
   * @internal
   */
  unmountComponent: function () {
    var inst = this._instance;

    if (inst.componentWillUnmount) {
      inst.componentWillUnmount();
    }

    ReactReconciler.unmountComponent(this._renderedComponent);
    this._renderedComponent = null;
    this._instance = null;

    // Reset pending fields
    // Even if this component is scheduled for another update in ReactUpdates,
    // it would still be ignored because these fields are reset.
    this._pendingStateQueue = null;
    this._pendingReplaceState = false;
    this._pendingForceUpdate = false;
    this._pendingCallbacks = null;
    this._pendingElement = null;

    // These fields do not really need to be reset since this object is no
    // longer accessible.
    this._context = null;
    this._rootNodeID = null;
    this._topLevelWrapper = null;

    // Delete the reference from the instance to this internal representation
    // which allow the internals to be properly cleaned up even if the user
    // leaks a reference to the public instance.
    ReactInstanceMap.remove(inst);

    // Some existing components rely on inst.props even after they've been
    // destroyed (in event handlers).
    // TODO: inst.props = null;
    // TODO: inst.state = null;
    // TODO: inst.context = null;
  },

  /**
   * Filters the context object to only contain keys specified in
   * `contextTypes`
   *
   * @param {object} context
   * @return {?object}
   * @private
   */
  _maskContext: function (context) {
    var maskedContext = null;
    var Component = this._currentElement.type;
    var contextTypes = Component.contextTypes;
    if (!contextTypes) {
      return emptyObject;
    }
    maskedContext = {};
    for (var contextName in contextTypes) {
      maskedContext[contextName] = context[contextName];
    }
    return maskedContext;
  },

  /**
   * Filters the context object to only contain keys specified in
   * `contextTypes`, and asserts that they are valid.
   *
   * @param {object} context
   * @return {?object}
   * @private
   */
  _processContext: function (context) {
    var maskedContext = this._maskContext(context);
    if ("production" !== 'production') {
      var Component = this._currentElement.type;
      if (Component.contextTypes) {
        this._checkPropTypes(Component.contextTypes, maskedContext, ReactPropTypeLocations.context);
      }
    }
    return maskedContext;
  },

  /**
   * @param {object} currentContext
   * @return {object}
   * @private
   */
  _processChildContext: function (currentContext) {
    var Component = this._currentElement.type;
    var inst = this._instance;
    var childContext = inst.getChildContext && inst.getChildContext();
    if (childContext) {
      !(typeof Component.childContextTypes === 'object') ? "production" !== 'production' ? invariant(false, '%s.getChildContext(): childContextTypes must be defined in order to ' + 'use getChildContext().', this.getName() || 'ReactCompositeComponent') : invariant(false) : undefined;
      if ("production" !== 'production') {
        this._checkPropTypes(Component.childContextTypes, childContext, ReactPropTypeLocations.childContext);
      }
      for (var name in childContext) {
        !(name in Component.childContextTypes) ? "production" !== 'production' ? invariant(false, '%s.getChildContext(): key "%s" is not defined in childContextTypes.', this.getName() || 'ReactCompositeComponent', name) : invariant(false) : undefined;
      }
      return assign({}, currentContext, childContext);
    }
    return currentContext;
  },

  /**
   * Processes props by setting default values for unspecified props and
   * asserting that the props are valid. Does not mutate its argument; returns
   * a new props object with defaults merged in.
   *
   * @param {object} newProps
   * @return {object}
   * @private
   */
  _processProps: function (newProps) {
    if ("production" !== 'production') {
      var Component = this._currentElement.type;
      if (Component.propTypes) {
        this._checkPropTypes(Component.propTypes, newProps, ReactPropTypeLocations.prop);
      }
    }
    return newProps;
  },

  /**
   * Assert that the props are valid
   *
   * @param {object} propTypes Map of prop name to a ReactPropType
   * @param {object} props
   * @param {string} location e.g. "prop", "context", "child context"
   * @private
   */
  _checkPropTypes: function (propTypes, props, location) {
    // TODO: Stop validating prop types here and only use the element
    // validation.
    var componentName = this.getName();
    for (var propName in propTypes) {
      if (propTypes.hasOwnProperty(propName)) {
        var error;
        try {
          // This is intentionally an invariant that gets caught. It's the same
          // behavior as without this statement except with a better message.
          !(typeof propTypes[propName] === 'function') ? "production" !== 'production' ? invariant(false, '%s: %s type `%s` is invalid; it must be a function, usually ' + 'from React.PropTypes.', componentName || 'React class', ReactPropTypeLocationNames[location], propName) : invariant(false) : undefined;
          error = propTypes[propName](props, propName, componentName, location, null, 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED');
        } catch (ex) {
          error = ex;
        }
        if (error instanceof Error) {
          // We may want to extend this logic for similar errors in
          // top-level render calls, so I'm abstracting it away into
          // a function to minimize refactoring in the future
          var addendum = getDeclarationErrorAddendum(this);

          if (location === ReactPropTypeLocations.prop) {
            // Preface gives us something to blacklist in warning module
            "production" !== 'production' ? warning(false, 'Failed Composite propType: %s%s', error.message, addendum) : undefined;
          } else {
            "production" !== 'production' ? warning(false, 'Failed Context Types: %s%s', error.message, addendum) : undefined;
          }
        }
      }
    }
  },

  receiveComponent: function (nextElement, transaction, nextContext) {
    var prevElement = this._currentElement;
    var prevContext = this._context;

    this._pendingElement = null;

    this.updateComponent(transaction, prevElement, nextElement, prevContext, nextContext);
  },

  /**
   * If any of `_pendingElement`, `_pendingStateQueue`, or `_pendingForceUpdate`
   * is set, update the component.
   *
   * @param {ReactReconcileTransaction} transaction
   * @internal
   */
  performUpdateIfNecessary: function (transaction) {
    if (this._pendingElement != null) {
      ReactReconciler.receiveComponent(this, this._pendingElement || this._currentElement, transaction, this._context);
    }

    if (this._pendingStateQueue !== null || this._pendingForceUpdate) {
      this.updateComponent(transaction, this._currentElement, this._currentElement, this._context, this._context);
    }
  },

  /**
   * Perform an update to a mounted component. The componentWillReceiveProps and
   * shouldComponentUpdate methods are called, then (assuming the update isn't
   * skipped) the remaining update lifecycle methods are called and the DOM
   * representation is updated.
   *
   * By default, this implements React's rendering and reconciliation algorithm.
   * Sophisticated clients may wish to override this.
   *
   * @param {ReactReconcileTransaction} transaction
   * @param {ReactElement} prevParentElement
   * @param {ReactElement} nextParentElement
   * @internal
   * @overridable
   */
  updateComponent: function (transaction, prevParentElement, nextParentElement, prevUnmaskedContext, nextUnmaskedContext) {
    var inst = this._instance;

    var nextContext = this._context === nextUnmaskedContext ? inst.context : this._processContext(nextUnmaskedContext);
    var nextProps;

    // Distinguish between a props update versus a simple state update
    if (prevParentElement === nextParentElement) {
      // Skip checking prop types again -- we don't read inst.props to avoid
      // warning for DOM component props in this upgrade
      nextProps = nextParentElement.props;
    } else {
      nextProps = this._processProps(nextParentElement.props);
      // An update here will schedule an update but immediately set
      // _pendingStateQueue which will ensure that any state updates gets
      // immediately reconciled instead of waiting for the next batch.

      if (inst.componentWillReceiveProps) {
        inst.componentWillReceiveProps(nextProps, nextContext);
      }
    }

    var nextState = this._processPendingState(nextProps, nextContext);

    var shouldUpdate = this._pendingForceUpdate || !inst.shouldComponentUpdate || inst.shouldComponentUpdate(nextProps, nextState, nextContext);

    if ("production" !== 'production') {
      "production" !== 'production' ? warning(typeof shouldUpdate !== 'undefined', '%s.shouldComponentUpdate(): Returned undefined instead of a ' + 'boolean value. Make sure to return true or false.', this.getName() || 'ReactCompositeComponent') : undefined;
    }

    if (shouldUpdate) {
      this._pendingForceUpdate = false;
      // Will set `this.props`, `this.state` and `this.context`.
      this._performComponentUpdate(nextParentElement, nextProps, nextState, nextContext, transaction, nextUnmaskedContext);
    } else {
      // If it's determined that a component should not update, we still want
      // to set props and state but we shortcut the rest of the update.
      this._currentElement = nextParentElement;
      this._context = nextUnmaskedContext;
      inst.props = nextProps;
      inst.state = nextState;
      inst.context = nextContext;
    }
  },

  _processPendingState: function (props, context) {
    var inst = this._instance;
    var queue = this._pendingStateQueue;
    var replace = this._pendingReplaceState;
    this._pendingReplaceState = false;
    this._pendingStateQueue = null;

    if (!queue) {
      return inst.state;
    }

    if (replace && queue.length === 1) {
      return queue[0];
    }

    var nextState = assign({}, replace ? queue[0] : inst.state);
    for (var i = replace ? 1 : 0; i < queue.length; i++) {
      var partial = queue[i];
      assign(nextState, typeof partial === 'function' ? partial.call(inst, nextState, props, context) : partial);
    }

    return nextState;
  },

  /**
   * Merges new props and state, notifies delegate methods of update and
   * performs update.
   *
   * @param {ReactElement} nextElement Next element
   * @param {object} nextProps Next public object to set as properties.
   * @param {?object} nextState Next object to set as state.
   * @param {?object} nextContext Next public object to set as context.
   * @param {ReactReconcileTransaction} transaction
   * @param {?object} unmaskedContext
   * @private
   */
  _performComponentUpdate: function (nextElement, nextProps, nextState, nextContext, transaction, unmaskedContext) {
    var inst = this._instance;

    var hasComponentDidUpdate = Boolean(inst.componentDidUpdate);
    var prevProps;
    var prevState;
    var prevContext;
    if (hasComponentDidUpdate) {
      prevProps = inst.props;
      prevState = inst.state;
      prevContext = inst.context;
    }

    if (inst.componentWillUpdate) {
      inst.componentWillUpdate(nextProps, nextState, nextContext);
    }

    this._currentElement = nextElement;
    this._context = unmaskedContext;
    inst.props = nextProps;
    inst.state = nextState;
    inst.context = nextContext;

    this._updateRenderedComponent(transaction, unmaskedContext);

    if (hasComponentDidUpdate) {
      transaction.getReactMountReady().enqueue(inst.componentDidUpdate.bind(inst, prevProps, prevState, prevContext), inst);
    }
  },

  /**
   * Call the component's `render` method and update the DOM accordingly.
   *
   * @param {ReactReconcileTransaction} transaction
   * @internal
   */
  _updateRenderedComponent: function (transaction, context) {
    var prevComponentInstance = this._renderedComponent;
    var prevRenderedElement = prevComponentInstance._currentElement;
    var nextRenderedElement = this._renderValidatedComponent();
    if (shouldUpdateReactComponent(prevRenderedElement, nextRenderedElement)) {
      ReactReconciler.receiveComponent(prevComponentInstance, nextRenderedElement, transaction, this._processChildContext(context));
    } else {
      // These two IDs are actually the same! But nothing should rely on that.
      var thisID = this._rootNodeID;
      var prevComponentID = prevComponentInstance._rootNodeID;
      ReactReconciler.unmountComponent(prevComponentInstance);

      this._renderedComponent = this._instantiateReactComponent(nextRenderedElement);
      var nextMarkup = ReactReconciler.mountComponent(this._renderedComponent, thisID, transaction, this._processChildContext(context));
      this._replaceNodeWithMarkupByID(prevComponentID, nextMarkup);
    }
  },

  /**
   * @protected
   */
  _replaceNodeWithMarkupByID: function (prevComponentID, nextMarkup) {
    ReactComponentEnvironment.replaceNodeWithMarkupByID(prevComponentID, nextMarkup);
  },

  /**
   * @protected
   */
  _renderValidatedComponentWithoutOwnerOrContext: function () {
    var inst = this._instance;
    var renderedComponent = inst.render();
    if ("production" !== 'production') {
      // We allow auto-mocks to proceed as if they're returning null.
      if (typeof renderedComponent === 'undefined' && inst.render._isMockFunction) {
        // This is probably bad practice. Consider warning here and
        // deprecating this convenience.
        renderedComponent = null;
      }
    }

    return renderedComponent;
  },

  /**
   * @private
   */
  _renderValidatedComponent: function () {
    var renderedComponent;
    ReactCurrentOwner.current = this;
    try {
      renderedComponent = this._renderValidatedComponentWithoutOwnerOrContext();
    } finally {
      ReactCurrentOwner.current = null;
    }
    !(
    // TODO: An `isValidNode` function would probably be more appropriate
    renderedComponent === null || renderedComponent === false || ReactElement.isValidElement(renderedComponent)) ? "production" !== 'production' ? invariant(false, '%s.render(): A valid ReactComponent must be returned. You may have ' + 'returned undefined, an array or some other invalid object.', this.getName() || 'ReactCompositeComponent') : invariant(false) : undefined;
    return renderedComponent;
  },

  /**
   * Lazily allocates the refs object and stores `component` as `ref`.
   *
   * @param {string} ref Reference name.
   * @param {component} component Component to store as `ref`.
   * @final
   * @private
   */
  attachRef: function (ref, component) {
    var inst = this.getPublicInstance();
    !(inst != null) ? "production" !== 'production' ? invariant(false, 'Stateless function components cannot have refs.') : invariant(false) : undefined;
    var publicComponentInstance = component.getPublicInstance();
    if ("production" !== 'production') {
      var componentName = component && component.getName ? component.getName() : 'a component';
      "production" !== 'production' ? warning(publicComponentInstance != null, 'Stateless function components cannot be given refs ' + '(See ref "%s" in %s created by %s). ' + 'Attempts to access this ref will fail.', ref, componentName, this.getName()) : undefined;
    }
    var refs = inst.refs === emptyObject ? inst.refs = {} : inst.refs;
    refs[ref] = publicComponentInstance;
  },

  /**
   * Detaches a reference name.
   *
   * @param {string} ref Name to dereference.
   * @final
   * @private
   */
  detachRef: function (ref) {
    var refs = this.getPublicInstance().refs;
    delete refs[ref];
  },

  /**
   * Get a text description of the component that can be used to identify it
   * in error messages.
   * @return {string} The name or null.
   * @internal
   */
  getName: function () {
    var type = this._currentElement.type;
    var constructor = this._instance && this._instance.constructor;
    return type.displayName || constructor && constructor.displayName || type.name || constructor && constructor.name || null;
  },

  /**
   * Get the publicly accessible representation of this component - i.e. what
   * is exposed by refs and returned by render. Can be null for stateless
   * components.
   *
   * @return {ReactComponent} the public component instance.
   * @internal
   */
  getPublicInstance: function () {
    var inst = this._instance;
    if (inst instanceof StatelessComponent) {
      return null;
    }
    return inst;
  },

  // Stub
  _instantiateReactComponent: null

};

ReactPerf.measureMethods(ReactCompositeComponentMixin, 'ReactCompositeComponent', {
  mountComponent: 'mountComponent',
  updateComponent: 'updateComponent',
  _renderValidatedComponent: '_renderValidatedComponent'
});

var ReactCompositeComponent = {

  Mixin: ReactCompositeComponentMixin

};

module.exports = ReactCompositeComponent;
},{"./Object.assign":327,"./ReactComponentEnvironment":336,"./ReactCurrentOwner":338,"./ReactElement":354,"./ReactInstanceMap":363,"./ReactPerf":371,"./ReactPropTypeLocationNames":372,"./ReactPropTypeLocations":373,"./ReactReconciler":376,"./ReactUpdateQueue":382,"./shouldUpdateReactComponent":423,"fbjs/lib/emptyObject":10,"fbjs/lib/invariant":17,"fbjs/lib/warning":27}],338:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactCurrentOwner
 */

'use strict';

/**
 * Keeps track of the current owner.
 *
 * The current owner is the component who should own any components that are
 * currently being constructed.
 */
var ReactCurrentOwner = {

  /**
   * @internal
   * @type {ReactComponent}
   */
  current: null

};

module.exports = ReactCurrentOwner;
},{}],339:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDOMButton
 */

'use strict';

var mouseListenerNames = {
  onClick: true,
  onDoubleClick: true,
  onMouseDown: true,
  onMouseMove: true,
  onMouseUp: true,

  onClickCapture: true,
  onDoubleClickCapture: true,
  onMouseDownCapture: true,
  onMouseMoveCapture: true,
  onMouseUpCapture: true
};

/**
 * Implements a <button> native component that does not receive mouse events
 * when `disabled` is set.
 */
var ReactDOMButton = {
  getNativeProps: function (inst, props, context) {
    if (!props.disabled) {
      return props;
    }

    // Copy the props, except the mouse listeners
    var nativeProps = {};
    for (var key in props) {
      if (props.hasOwnProperty(key) && !mouseListenerNames[key]) {
        nativeProps[key] = props[key];
      }
    }

    return nativeProps;
  }
};

module.exports = ReactDOMButton;
},{}],340:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDOMComponent
 * @typechecks static-only
 */

/* global hasOwnProperty:true */

'use strict';

var AutoFocusUtils = require('./AutoFocusUtils');
var CSSPropertyOperations = require('./CSSPropertyOperations');
var DOMProperty = require('./DOMProperty');
var DOMPropertyOperations = require('./DOMPropertyOperations');
var EventConstants = require('./EventConstants');
var ReactBrowserEventEmitter = require('./ReactBrowserEventEmitter');
var ReactComponentBrowserEnvironment = require('./ReactComponentBrowserEnvironment');
var ReactDOMButton = require('./ReactDOMButton');
var ReactDOMInput = require('./ReactDOMInput');
var ReactDOMOption = require('./ReactDOMOption');
var ReactDOMSelect = require('./ReactDOMSelect');
var ReactDOMTextarea = require('./ReactDOMTextarea');
var ReactMount = require('./ReactMount');
var ReactMultiChild = require('./ReactMultiChild');
var ReactPerf = require('./ReactPerf');
var ReactUpdateQueue = require('./ReactUpdateQueue');

var assign = require('./Object.assign');
var canDefineProperty = require('./canDefineProperty');
var escapeTextContentForBrowser = require('./escapeTextContentForBrowser');
var invariant = require('fbjs/lib/invariant');
var isEventSupported = require('./isEventSupported');
var keyOf = require('fbjs/lib/keyOf');
var setInnerHTML = require('./setInnerHTML');
var setTextContent = require('./setTextContent');
var shallowEqual = require('fbjs/lib/shallowEqual');
var validateDOMNesting = require('./validateDOMNesting');
var warning = require('fbjs/lib/warning');

var deleteListener = ReactBrowserEventEmitter.deleteListener;
var listenTo = ReactBrowserEventEmitter.listenTo;
var registrationNameModules = ReactBrowserEventEmitter.registrationNameModules;

// For quickly matching children type, to test if can be treated as content.
var CONTENT_TYPES = { 'string': true, 'number': true };

var CHILDREN = keyOf({ children: null });
var STYLE = keyOf({ style: null });
var HTML = keyOf({ __html: null });

var ELEMENT_NODE_TYPE = 1;

function getDeclarationErrorAddendum(internalInstance) {
  if (internalInstance) {
    var owner = internalInstance._currentElement._owner || null;
    if (owner) {
      var name = owner.getName();
      if (name) {
        return ' This DOM node was rendered by `' + name + '`.';
      }
    }
  }
  return '';
}

var legacyPropsDescriptor;
if ("production" !== 'production') {
  legacyPropsDescriptor = {
    props: {
      enumerable: false,
      get: function () {
        var component = this._reactInternalComponent;
        "production" !== 'production' ? warning(false, 'ReactDOMComponent: Do not access .props of a DOM node; instead, ' + 'recreate the props as `render` did originally or read the DOM ' + 'properties/attributes directly from this node (e.g., ' + 'this.refs.box.className).%s', getDeclarationErrorAddendum(component)) : undefined;
        return component._currentElement.props;
      }
    }
  };
}

function legacyGetDOMNode() {
  if ("production" !== 'production') {
    var component = this._reactInternalComponent;
    "production" !== 'production' ? warning(false, 'ReactDOMComponent: Do not access .getDOMNode() of a DOM node; ' + 'instead, use the node directly.%s', getDeclarationErrorAddendum(component)) : undefined;
  }
  return this;
}

function legacyIsMounted() {
  var component = this._reactInternalComponent;
  if ("production" !== 'production') {
    "production" !== 'production' ? warning(false, 'ReactDOMComponent: Do not access .isMounted() of a DOM node.%s', getDeclarationErrorAddendum(component)) : undefined;
  }
  return !!component;
}

function legacySetStateEtc() {
  if ("production" !== 'production') {
    var component = this._reactInternalComponent;
    "production" !== 'production' ? warning(false, 'ReactDOMComponent: Do not access .setState(), .replaceState(), or ' + '.forceUpdate() of a DOM node. This is a no-op.%s', getDeclarationErrorAddendum(component)) : undefined;
  }
}

function legacySetProps(partialProps, callback) {
  var component = this._reactInternalComponent;
  if ("production" !== 'production') {
    "production" !== 'production' ? warning(false, 'ReactDOMComponent: Do not access .setProps() of a DOM node. ' + 'Instead, call ReactDOM.render again at the top level.%s', getDeclarationErrorAddendum(component)) : undefined;
  }
  if (!component) {
    return;
  }
  ReactUpdateQueue.enqueueSetPropsInternal(component, partialProps);
  if (callback) {
    ReactUpdateQueue.enqueueCallbackInternal(component, callback);
  }
}

function legacyReplaceProps(partialProps, callback) {
  var component = this._reactInternalComponent;
  if ("production" !== 'production') {
    "production" !== 'production' ? warning(false, 'ReactDOMComponent: Do not access .replaceProps() of a DOM node. ' + 'Instead, call ReactDOM.render again at the top level.%s', getDeclarationErrorAddendum(component)) : undefined;
  }
  if (!component) {
    return;
  }
  ReactUpdateQueue.enqueueReplacePropsInternal(component, partialProps);
  if (callback) {
    ReactUpdateQueue.enqueueCallbackInternal(component, callback);
  }
}

function friendlyStringify(obj) {
  if (typeof obj === 'object') {
    if (Array.isArray(obj)) {
      return '[' + obj.map(friendlyStringify).join(', ') + ']';
    } else {
      var pairs = [];
      for (var key in obj) {
        if (Object.prototype.hasOwnProperty.call(obj, key)) {
          var keyEscaped = /^[a-z$_][\w$_]*$/i.test(key) ? key : JSON.stringify(key);
          pairs.push(keyEscaped + ': ' + friendlyStringify(obj[key]));
        }
      }
      return '{' + pairs.join(', ') + '}';
    }
  } else if (typeof obj === 'string') {
    return JSON.stringify(obj);
  } else if (typeof obj === 'function') {
    return '[function object]';
  }
  // Differs from JSON.stringify in that undefined becauses undefined and that
  // inf and nan don't become null
  return String(obj);
}

var styleMutationWarning = {};

function checkAndWarnForMutatedStyle(style1, style2, component) {
  if (style1 == null || style2 == null) {
    return;
  }
  if (shallowEqual(style1, style2)) {
    return;
  }

  var componentName = component._tag;
  var owner = component._currentElement._owner;
  var ownerName;
  if (owner) {
    ownerName = owner.getName();
  }

  var hash = ownerName + '|' + componentName;

  if (styleMutationWarning.hasOwnProperty(hash)) {
    return;
  }

  styleMutationWarning[hash] = true;

  "production" !== 'production' ? warning(false, '`%s` was passed a style object that has previously been mutated. ' + 'Mutating `style` is deprecated. Consider cloning it beforehand. Check ' + 'the `render` %s. Previous style: %s. Mutated style: %s.', componentName, owner ? 'of `' + ownerName + '`' : 'using <' + componentName + '>', friendlyStringify(style1), friendlyStringify(style2)) : undefined;
}

/**
 * @param {object} component
 * @param {?object} props
 */
function assertValidProps(component, props) {
  if (!props) {
    return;
  }
  // Note the use of `==` which checks for null or undefined.
  if ("production" !== 'production') {
    if (voidElementTags[component._tag]) {
      "production" !== 'production' ? warning(props.children == null && props.dangerouslySetInnerHTML == null, '%s is a void element tag and must not have `children` or ' + 'use `props.dangerouslySetInnerHTML`.%s', component._tag, component._currentElement._owner ? ' Check the render method of ' + component._currentElement._owner.getName() + '.' : '') : undefined;
    }
  }
  if (props.dangerouslySetInnerHTML != null) {
    !(props.children == null) ? "production" !== 'production' ? invariant(false, 'Can only set one of `children` or `props.dangerouslySetInnerHTML`.') : invariant(false) : undefined;
    !(typeof props.dangerouslySetInnerHTML === 'object' && HTML in props.dangerouslySetInnerHTML) ? "production" !== 'production' ? invariant(false, '`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. ' + 'Please visit https://fb.me/react-invariant-dangerously-set-inner-html ' + 'for more information.') : invariant(false) : undefined;
  }
  if ("production" !== 'production') {
    "production" !== 'production' ? warning(props.innerHTML == null, 'Directly setting property `innerHTML` is not permitted. ' + 'For more information, lookup documentation on `dangerouslySetInnerHTML`.') : undefined;
    "production" !== 'production' ? warning(!props.contentEditable || props.children == null, 'A component is `contentEditable` and contains `children` managed by ' + 'React. It is now your responsibility to guarantee that none of ' + 'those nodes are unexpectedly modified or duplicated. This is ' + 'probably not intentional.') : undefined;
  }
  !(props.style == null || typeof props.style === 'object') ? "production" !== 'production' ? invariant(false, 'The `style` prop expects a mapping from style properties to values, ' + 'not a string. For example, style={{marginRight: spacing + \'em\'}} when ' + 'using JSX.%s', getDeclarationErrorAddendum(component)) : invariant(false) : undefined;
}

function enqueuePutListener(id, registrationName, listener, transaction) {
  if ("production" !== 'production') {
    // IE8 has no API for event capturing and the `onScroll` event doesn't
    // bubble.
    "production" !== 'production' ? warning(registrationName !== 'onScroll' || isEventSupported('scroll', true), 'This browser doesn\'t support the `onScroll` event') : undefined;
  }
  var container = ReactMount.findReactContainerForID(id);
  if (container) {
    var doc = container.nodeType === ELEMENT_NODE_TYPE ? container.ownerDocument : container;
    listenTo(registrationName, doc);
  }
  transaction.getReactMountReady().enqueue(putListener, {
    id: id,
    registrationName: registrationName,
    listener: listener
  });
}

function putListener() {
  var listenerToPut = this;
  ReactBrowserEventEmitter.putListener(listenerToPut.id, listenerToPut.registrationName, listenerToPut.listener);
}

// There are so many media events, it makes sense to just
// maintain a list rather than create a `trapBubbledEvent` for each
var mediaEvents = {
  topAbort: 'abort',
  topCanPlay: 'canplay',
  topCanPlayThrough: 'canplaythrough',
  topDurationChange: 'durationchange',
  topEmptied: 'emptied',
  topEncrypted: 'encrypted',
  topEnded: 'ended',
  topError: 'error',
  topLoadedData: 'loadeddata',
  topLoadedMetadata: 'loadedmetadata',
  topLoadStart: 'loadstart',
  topPause: 'pause',
  topPlay: 'play',
  topPlaying: 'playing',
  topProgress: 'progress',
  topRateChange: 'ratechange',
  topSeeked: 'seeked',
  topSeeking: 'seeking',
  topStalled: 'stalled',
  topSuspend: 'suspend',
  topTimeUpdate: 'timeupdate',
  topVolumeChange: 'volumechange',
  topWaiting: 'waiting'
};

function trapBubbledEventsLocal() {
  var inst = this;
  // If a component renders to null or if another component fatals and causes
  // the state of the tree to be corrupted, `node` here can be null.
  !inst._rootNodeID ? "production" !== 'production' ? invariant(false, 'Must be mounted to trap events') : invariant(false) : undefined;
  var node = ReactMount.getNode(inst._rootNodeID);
  !node ? "production" !== 'production' ? invariant(false, 'trapBubbledEvent(...): Requires node to be rendered.') : invariant(false) : undefined;

  switch (inst._tag) {
    case 'iframe':
      inst._wrapperState.listeners = [ReactBrowserEventEmitter.trapBubbledEvent(EventConstants.topLevelTypes.topLoad, 'load', node)];
      break;
    case 'video':
    case 'audio':

      inst._wrapperState.listeners = [];
      // create listener for each media event
      for (var event in mediaEvents) {
        if (mediaEvents.hasOwnProperty(event)) {
          inst._wrapperState.listeners.push(ReactBrowserEventEmitter.trapBubbledEvent(EventConstants.topLevelTypes[event], mediaEvents[event], node));
        }
      }

      break;
    case 'img':
      inst._wrapperState.listeners = [ReactBrowserEventEmitter.trapBubbledEvent(EventConstants.topLevelTypes.topError, 'error', node), ReactBrowserEventEmitter.trapBubbledEvent(EventConstants.topLevelTypes.topLoad, 'load', node)];
      break;
    case 'form':
      inst._wrapperState.listeners = [ReactBrowserEventEmitter.trapBubbledEvent(EventConstants.topLevelTypes.topReset, 'reset', node), ReactBrowserEventEmitter.trapBubbledEvent(EventConstants.topLevelTypes.topSubmit, 'submit', node)];
      break;
  }
}

function mountReadyInputWrapper() {
  ReactDOMInput.mountReadyWrapper(this);
}

function postUpdateSelectWrapper() {
  ReactDOMSelect.postUpdateWrapper(this);
}

// For HTML, certain tags should omit their close tag. We keep a whitelist for
// those special cased tags.

var omittedCloseTags = {
  'area': true,
  'base': true,
  'br': true,
  'col': true,
  'embed': true,
  'hr': true,
  'img': true,
  'input': true,
  'keygen': true,
  'link': true,
  'meta': true,
  'param': true,
  'source': true,
  'track': true,
  'wbr': true
};

// NOTE: menuitem's close tag should be omitted, but that causes problems.
var newlineEatingTags = {
  'listing': true,
  'pre': true,
  'textarea': true
};

// For HTML, certain tags cannot have children. This has the same purpose as
// `omittedCloseTags` except that `menuitem` should still have its closing tag.

var voidElementTags = assign({
  'menuitem': true
}, omittedCloseTags);

// We accept any tag to be rendered but since this gets injected into arbitrary
// HTML, we want to make sure that it's a safe tag.
// http://www.w3.org/TR/REC-xml/#NT-Name

var VALID_TAG_REGEX = /^[a-zA-Z][a-zA-Z:_\.\-\d]*$/; // Simplified subset
var validatedTagCache = {};
var hasOwnProperty = ({}).hasOwnProperty;

function validateDangerousTag(tag) {
  if (!hasOwnProperty.call(validatedTagCache, tag)) {
    !VALID_TAG_REGEX.test(tag) ? "production" !== 'production' ? invariant(false, 'Invalid tag: %s', tag) : invariant(false) : undefined;
    validatedTagCache[tag] = true;
  }
}

function processChildContextDev(context, inst) {
  // Pass down our tag name to child components for validation purposes
  context = assign({}, context);
  var info = context[validateDOMNesting.ancestorInfoContextKey];
  context[validateDOMNesting.ancestorInfoContextKey] = validateDOMNesting.updatedAncestorInfo(info, inst._tag, inst);
  return context;
}

function isCustomComponent(tagName, props) {
  return tagName.indexOf('-') >= 0 || props.is != null;
}

/**
 * Creates a new React class that is idempotent and capable of containing other
 * React components. It accepts event listeners and DOM properties that are
 * valid according to `DOMProperty`.
 *
 *  - Event listeners: `onClick`, `onMouseDown`, etc.
 *  - DOM properties: `className`, `name`, `title`, etc.
 *
 * The `style` property functions differently from the DOM API. It accepts an
 * object mapping of style properties to values.
 *
 * @constructor ReactDOMComponent
 * @extends ReactMultiChild
 */
function ReactDOMComponent(tag) {
  validateDangerousTag(tag);
  this._tag = tag.toLowerCase();
  this._renderedChildren = null;
  this._previousStyle = null;
  this._previousStyleCopy = null;
  this._rootNodeID = null;
  this._wrapperState = null;
  this._topLevelWrapper = null;
  this._nodeWithLegacyProperties = null;
  if ("production" !== 'production') {
    this._unprocessedContextDev = null;
    this._processedContextDev = null;
  }
}

ReactDOMComponent.displayName = 'ReactDOMComponent';

ReactDOMComponent.Mixin = {

  construct: function (element) {
    this._currentElement = element;
  },

  /**
   * Generates root tag markup then recurses. This method has side effects and
   * is not idempotent.
   *
   * @internal
   * @param {string} rootID The root DOM ID for this node.
   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
   * @param {object} context
   * @return {string} The computed markup.
   */
  mountComponent: function (rootID, transaction, context) {
    this._rootNodeID = rootID;

    var props = this._currentElement.props;

    switch (this._tag) {
      case 'iframe':
      case 'img':
      case 'form':
      case 'video':
      case 'audio':
        this._wrapperState = {
          listeners: null
        };
        transaction.getReactMountReady().enqueue(trapBubbledEventsLocal, this);
        break;
      case 'button':
        props = ReactDOMButton.getNativeProps(this, props, context);
        break;
      case 'input':
        ReactDOMInput.mountWrapper(this, props, context);
        props = ReactDOMInput.getNativeProps(this, props, context);
        break;
      case 'option':
        ReactDOMOption.mountWrapper(this, props, context);
        props = ReactDOMOption.getNativeProps(this, props, context);
        break;
      case 'select':
        ReactDOMSelect.mountWrapper(this, props, context);
        props = ReactDOMSelect.getNativeProps(this, props, context);
        context = ReactDOMSelect.processChildContext(this, props, context);
        break;
      case 'textarea':
        ReactDOMTextarea.mountWrapper(this, props, context);
        props = ReactDOMTextarea.getNativeProps(this, props, context);
        break;
    }

    assertValidProps(this, props);
    if ("production" !== 'production') {
      if (context[validateDOMNesting.ancestorInfoContextKey]) {
        validateDOMNesting(this._tag, this, context[validateDOMNesting.ancestorInfoContextKey]);
      }
    }

    if ("production" !== 'production') {
      this._unprocessedContextDev = context;
      this._processedContextDev = processChildContextDev(context, this);
      context = this._processedContextDev;
    }

    var mountImage;
    if (transaction.useCreateElement) {
      var ownerDocument = context[ReactMount.ownerDocumentContextKey];
      var el = ownerDocument.createElement(this._currentElement.type);
      DOMPropertyOperations.setAttributeForID(el, this._rootNodeID);
      // Populate node cache
      ReactMount.getID(el);
      this._updateDOMProperties({}, props, transaction, el);
      this._createInitialChildren(transaction, props, context, el);
      mountImage = el;
    } else {
      var tagOpen = this._createOpenTagMarkupAndPutListeners(transaction, props);
      var tagContent = this._createContentMarkup(transaction, props, context);
      if (!tagContent && omittedCloseTags[this._tag]) {
        mountImage = tagOpen + '/>';
      } else {
        mountImage = tagOpen + '>' + tagContent + '</' + this._currentElement.type + '>';
      }
    }

    switch (this._tag) {
      case 'input':
        transaction.getReactMountReady().enqueue(mountReadyInputWrapper, this);
      // falls through
      case 'button':
      case 'select':
      case 'textarea':
        if (props.autoFocus) {
          transaction.getReactMountReady().enqueue(AutoFocusUtils.focusDOMComponent, this);
        }
        break;
    }

    return mountImage;
  },

  /**
   * Creates markup for the open tag and all attributes.
   *
   * This method has side effects because events get registered.
   *
   * Iterating over object properties is faster than iterating over arrays.
   * @see http://jsperf.com/obj-vs-arr-iteration
   *
   * @private
   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
   * @param {object} props
   * @return {string} Markup of opening tag.
   */
  _createOpenTagMarkupAndPutListeners: function (transaction, props) {
    var ret = '<' + this._currentElement.type;

    for (var propKey in props) {
      if (!props.hasOwnProperty(propKey)) {
        continue;
      }
      var propValue = props[propKey];
      if (propValue == null) {
        continue;
      }
      if (registrationNameModules.hasOwnProperty(propKey)) {
        if (propValue) {
          enqueuePutListener(this._rootNodeID, propKey, propValue, transaction);
        }
      } else {
        if (propKey === STYLE) {
          if (propValue) {
            if ("production" !== 'production') {
              // See `_updateDOMProperties`. style block
              this._previousStyle = propValue;
            }
            propValue = this._previousStyleCopy = assign({}, props.style);
          }
          propValue = CSSPropertyOperations.createMarkupForStyles(propValue);
        }
        var markup = null;
        if (this._tag != null && isCustomComponent(this._tag, props)) {
          if (propKey !== CHILDREN) {
            markup = DOMPropertyOperations.createMarkupForCustomAttribute(propKey, propValue);
          }
        } else {
          markup = DOMPropertyOperations.createMarkupForProperty(propKey, propValue);
        }
        if (markup) {
          ret += ' ' + markup;
        }
      }
    }

    // For static pages, no need to put React ID and checksum. Saves lots of
    // bytes.
    if (transaction.renderToStaticMarkup) {
      return ret;
    }

    var markupForID = DOMPropertyOperations.createMarkupForID(this._rootNodeID);
    return ret + ' ' + markupForID;
  },

  /**
   * Creates markup for the content between the tags.
   *
   * @private
   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
   * @param {object} props
   * @param {object} context
   * @return {string} Content markup.
   */
  _createContentMarkup: function (transaction, props, context) {
    var ret = '';

    // Intentional use of != to avoid catching zero/false.
    var innerHTML = props.dangerouslySetInnerHTML;
    if (innerHTML != null) {
      if (innerHTML.__html != null) {
        ret = innerHTML.__html;
      }
    } else {
      var contentToUse = CONTENT_TYPES[typeof props.children] ? props.children : null;
      var childrenToUse = contentToUse != null ? null : props.children;
      if (contentToUse != null) {
        // TODO: Validate that text is allowed as a child of this node
        ret = escapeTextContentForBrowser(contentToUse);
      } else if (childrenToUse != null) {
        var mountImages = this.mountChildren(childrenToUse, transaction, context);
        ret = mountImages.join('');
      }
    }
    if (newlineEatingTags[this._tag] && ret.charAt(0) === '\n') {
      // text/html ignores the first character in these tags if it's a newline
      // Prefer to break application/xml over text/html (for now) by adding
      // a newline specifically to get eaten by the parser. (Alternately for
      // textareas, replacing "^\n" with "\r\n" doesn't get eaten, and the first
      // \r is normalized out by HTMLTextAreaElement#value.)
      // See: <http://www.w3.org/TR/html-polyglot/#newlines-in-textarea-and-pre>
      // See: <http://www.w3.org/TR/html5/syntax.html#element-restrictions>
      // See: <http://www.w3.org/TR/html5/syntax.html#newlines>
      // See: Parsing of "textarea" "listing" and "pre" elements
      //  from <http://www.w3.org/TR/html5/syntax.html#parsing-main-inbody>
      return '\n' + ret;
    } else {
      return ret;
    }
  },

  _createInitialChildren: function (transaction, props, context, el) {
    // Intentional use of != to avoid catching zero/false.
    var innerHTML = props.dangerouslySetInnerHTML;
    if (innerHTML != null) {
      if (innerHTML.__html != null) {
        setInnerHTML(el, innerHTML.__html);
      }
    } else {
      var contentToUse = CONTENT_TYPES[typeof props.children] ? props.children : null;
      var childrenToUse = contentToUse != null ? null : props.children;
      if (contentToUse != null) {
        // TODO: Validate that text is allowed as a child of this node
        setTextContent(el, contentToUse);
      } else if (childrenToUse != null) {
        var mountImages = this.mountChildren(childrenToUse, transaction, context);
        for (var i = 0; i < mountImages.length; i++) {
          el.appendChild(mountImages[i]);
        }
      }
    }
  },

  /**
   * Receives a next element and updates the component.
   *
   * @internal
   * @param {ReactElement} nextElement
   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
   * @param {object} context
   */
  receiveComponent: function (nextElement, transaction, context) {
    var prevElement = this._currentElement;
    this._currentElement = nextElement;
    this.updateComponent(transaction, prevElement, nextElement, context);
  },

  /**
   * Updates a native DOM component after it has already been allocated and
   * attached to the DOM. Reconciles the root DOM node, then recurses.
   *
   * @param {ReactReconcileTransaction} transaction
   * @param {ReactElement} prevElement
   * @param {ReactElement} nextElement
   * @internal
   * @overridable
   */
  updateComponent: function (transaction, prevElement, nextElement, context) {
    var lastProps = prevElement.props;
    var nextProps = this._currentElement.props;

    switch (this._tag) {
      case 'button':
        lastProps = ReactDOMButton.getNativeProps(this, lastProps);
        nextProps = ReactDOMButton.getNativeProps(this, nextProps);
        break;
      case 'input':
        ReactDOMInput.updateWrapper(this);
        lastProps = ReactDOMInput.getNativeProps(this, lastProps);
        nextProps = ReactDOMInput.getNativeProps(this, nextProps);
        break;
      case 'option':
        lastProps = ReactDOMOption.getNativeProps(this, lastProps);
        nextProps = ReactDOMOption.getNativeProps(this, nextProps);
        break;
      case 'select':
        lastProps = ReactDOMSelect.getNativeProps(this, lastProps);
        nextProps = ReactDOMSelect.getNativeProps(this, nextProps);
        break;
      case 'textarea':
        ReactDOMTextarea.updateWrapper(this);
        lastProps = ReactDOMTextarea.getNativeProps(this, lastProps);
        nextProps = ReactDOMTextarea.getNativeProps(this, nextProps);
        break;
    }

    if ("production" !== 'production') {
      // If the context is reference-equal to the old one, pass down the same
      // processed object so the update bailout in ReactReconciler behaves
      // correctly (and identically in dev and prod). See #5005.
      if (this._unprocessedContextDev !== context) {
        this._unprocessedContextDev = context;
        this._processedContextDev = processChildContextDev(context, this);
      }
      context = this._processedContextDev;
    }

    assertValidProps(this, nextProps);
    this._updateDOMProperties(lastProps, nextProps, transaction, null);
    this._updateDOMChildren(lastProps, nextProps, transaction, context);

    if (!canDefineProperty && this._nodeWithLegacyProperties) {
      this._nodeWithLegacyProperties.props = nextProps;
    }

    if (this._tag === 'select') {
      // <select> value update needs to occur after <option> children
      // reconciliation
      transaction.getReactMountReady().enqueue(postUpdateSelectWrapper, this);
    }
  },

  /**
   * Reconciles the properties by detecting differences in property values and
   * updating the DOM as necessary. This function is probably the single most
   * critical path for performance optimization.
   *
   * TODO: Benchmark whether checking for changed values in memory actually
   *       improves performance (especially statically positioned elements).
   * TODO: Benchmark the effects of putting this at the top since 99% of props
   *       do not change for a given reconciliation.
   * TODO: Benchmark areas that can be improved with caching.
   *
   * @private
   * @param {object} lastProps
   * @param {object} nextProps
   * @param {ReactReconcileTransaction} transaction
   * @param {?DOMElement} node
   */
  _updateDOMProperties: function (lastProps, nextProps, transaction, node) {
    var propKey;
    var styleName;
    var styleUpdates;
    for (propKey in lastProps) {
      if (nextProps.hasOwnProperty(propKey) || !lastProps.hasOwnProperty(propKey)) {
        continue;
      }
      if (propKey === STYLE) {
        var lastStyle = this._previousStyleCopy;
        for (styleName in lastStyle) {
          if (lastStyle.hasOwnProperty(styleName)) {
            styleUpdates = styleUpdates || {};
            styleUpdates[styleName] = '';
          }
        }
        this._previousStyleCopy = null;
      } else if (registrationNameModules.hasOwnProperty(propKey)) {
        if (lastProps[propKey]) {
          // Only call deleteListener if there was a listener previously or
          // else willDeleteListener gets called when there wasn't actually a
          // listener (e.g., onClick={null})
          deleteListener(this._rootNodeID, propKey);
        }
      } else if (DOMProperty.properties[propKey] || DOMProperty.isCustomAttribute(propKey)) {
        if (!node) {
          node = ReactMount.getNode(this._rootNodeID);
        }
        DOMPropertyOperations.deleteValueForProperty(node, propKey);
      }
    }
    for (propKey in nextProps) {
      var nextProp = nextProps[propKey];
      var lastProp = propKey === STYLE ? this._previousStyleCopy : lastProps[propKey];
      if (!nextProps.hasOwnProperty(propKey) || nextProp === lastProp) {
        continue;
      }
      if (propKey === STYLE) {
        if (nextProp) {
          if ("production" !== 'production') {
            checkAndWarnForMutatedStyle(this._previousStyleCopy, this._previousStyle, this);
            this._previousStyle = nextProp;
          }
          nextProp = this._previousStyleCopy = assign({}, nextProp);
        } else {
          this._previousStyleCopy = null;
        }
        if (lastProp) {
          // Unset styles on `lastProp` but not on `nextProp`.
          for (styleName in lastProp) {
            if (lastProp.hasOwnProperty(styleName) && (!nextProp || !nextProp.hasOwnProperty(styleName))) {
              styleUpdates = styleUpdates || {};
              styleUpdates[styleName] = '';
            }
          }
          // Update styles that changed since `lastProp`.
          for (styleName in nextProp) {
            if (nextProp.hasOwnProperty(styleName) && lastProp[styleName] !== nextProp[styleName]) {
              styleUpdates = styleUpdates || {};
              styleUpdates[styleName] = nextProp[styleName];
            }
          }
        } else {
          // Relies on `updateStylesByID` not mutating `styleUpdates`.
          styleUpdates = nextProp;
        }
      } else if (registrationNameModules.hasOwnProperty(propKey)) {
        if (nextProp) {
          enqueuePutListener(this._rootNodeID, propKey, nextProp, transaction);
        } else if (lastProp) {
          deleteListener(this._rootNodeID, propKey);
        }
      } else if (isCustomComponent(this._tag, nextProps)) {
        if (!node) {
          node = ReactMount.getNode(this._rootNodeID);
        }
        if (propKey === CHILDREN) {
          nextProp = null;
        }
        DOMPropertyOperations.setValueForAttribute(node, propKey, nextProp);
      } else if (DOMProperty.properties[propKey] || DOMProperty.isCustomAttribute(propKey)) {
        if (!node) {
          node = ReactMount.getNode(this._rootNodeID);
        }
        // If we're updating to null or undefined, we should remove the property
        // from the DOM node instead of inadvertantly setting to a string. This
        // brings us in line with the same behavior we have on initial render.
        if (nextProp != null) {
          DOMPropertyOperations.setValueForProperty(node, propKey, nextProp);
        } else {
          DOMPropertyOperations.deleteValueForProperty(node, propKey);
        }
      }
    }
    if (styleUpdates) {
      if (!node) {
        node = ReactMount.getNode(this._rootNodeID);
      }
      CSSPropertyOperations.setValueForStyles(node, styleUpdates);
    }
  },

  /**
   * Reconciles the children with the various properties that affect the
   * children content.
   *
   * @param {object} lastProps
   * @param {object} nextProps
   * @param {ReactReconcileTransaction} transaction
   * @param {object} context
   */
  _updateDOMChildren: function (lastProps, nextProps, transaction, context) {
    var lastContent = CONTENT_TYPES[typeof lastProps.children] ? lastProps.children : null;
    var nextContent = CONTENT_TYPES[typeof nextProps.children] ? nextProps.children : null;

    var lastHtml = lastProps.dangerouslySetInnerHTML && lastProps.dangerouslySetInnerHTML.__html;
    var nextHtml = nextProps.dangerouslySetInnerHTML && nextProps.dangerouslySetInnerHTML.__html;

    // Note the use of `!=` which checks for null or undefined.
    var lastChildren = lastContent != null ? null : lastProps.children;
    var nextChildren = nextContent != null ? null : nextProps.children;

    // If we're switching from children to content/html or vice versa, remove
    // the old content
    var lastHasContentOrHtml = lastContent != null || lastHtml != null;
    var nextHasContentOrHtml = nextContent != null || nextHtml != null;
    if (lastChildren != null && nextChildren == null) {
      this.updateChildren(null, transaction, context);
    } else if (lastHasContentOrHtml && !nextHasContentOrHtml) {
      this.updateTextContent('');
    }

    if (nextContent != null) {
      if (lastContent !== nextContent) {
        this.updateTextContent('' + nextContent);
      }
    } else if (nextHtml != null) {
      if (lastHtml !== nextHtml) {
        this.updateMarkup('' + nextHtml);
      }
    } else if (nextChildren != null) {
      this.updateChildren(nextChildren, transaction, context);
    }
  },

  /**
   * Destroys all event registrations for this instance. Does not remove from
   * the DOM. That must be done by the parent.
   *
   * @internal
   */
  unmountComponent: function () {
    switch (this._tag) {
      case 'iframe':
      case 'img':
      case 'form':
      case 'video':
      case 'audio':
        var listeners = this._wrapperState.listeners;
        if (listeners) {
          for (var i = 0; i < listeners.length; i++) {
            listeners[i].remove();
          }
        }
        break;
      case 'input':
        ReactDOMInput.unmountWrapper(this);
        break;
      case 'html':
      case 'head':
      case 'body':
        /**
         * Components like <html> <head> and <body> can't be removed or added
         * easily in a cross-browser way, however it's valuable to be able to
         * take advantage of React's reconciliation for styling and <title>
         * management. So we just document it and throw in dangerous cases.
         */
        !false ? "production" !== 'production' ? invariant(false, '<%s> tried to unmount. Because of cross-browser quirks it is ' + 'impossible to unmount some top-level components (eg <html>, ' + '<head>, and <body>) reliably and efficiently. To fix this, have a ' + 'single top-level component that never unmounts render these ' + 'elements.', this._tag) : invariant(false) : undefined;
        break;
    }

    this.unmountChildren();
    ReactBrowserEventEmitter.deleteAllListeners(this._rootNodeID);
    ReactComponentBrowserEnvironment.unmountIDFromEnvironment(this._rootNodeID);
    this._rootNodeID = null;
    this._wrapperState = null;
    if (this._nodeWithLegacyProperties) {
      var node = this._nodeWithLegacyProperties;
      node._reactInternalComponent = null;
      this._nodeWithLegacyProperties = null;
    }
  },

  getPublicInstance: function () {
    if (!this._nodeWithLegacyProperties) {
      var node = ReactMount.getNode(this._rootNodeID);

      node._reactInternalComponent = this;
      node.getDOMNode = legacyGetDOMNode;
      node.isMounted = legacyIsMounted;
      node.setState = legacySetStateEtc;
      node.replaceState = legacySetStateEtc;
      node.forceUpdate = legacySetStateEtc;
      node.setProps = legacySetProps;
      node.replaceProps = legacyReplaceProps;

      if ("production" !== 'production') {
        if (canDefineProperty) {
          Object.defineProperties(node, legacyPropsDescriptor);
        } else {
          // updateComponent will update this property on subsequent renders
          node.props = this._currentElement.props;
        }
      } else {
        // updateComponent will update this property on subsequent renders
        node.props = this._currentElement.props;
      }

      this._nodeWithLegacyProperties = node;
    }
    return this._nodeWithLegacyProperties;
  }

};

ReactPerf.measureMethods(ReactDOMComponent, 'ReactDOMComponent', {
  mountComponent: 'mountComponent',
  updateComponent: 'updateComponent'
});

assign(ReactDOMComponent.prototype, ReactDOMComponent.Mixin, ReactMultiChild.Mixin);

module.exports = ReactDOMComponent;
},{"./AutoFocusUtils":306,"./CSSPropertyOperations":309,"./DOMProperty":314,"./DOMPropertyOperations":315,"./EventConstants":319,"./Object.assign":327,"./ReactBrowserEventEmitter":330,"./ReactComponentBrowserEnvironment":335,"./ReactDOMButton":339,"./ReactDOMInput":343,"./ReactDOMOption":344,"./ReactDOMSelect":345,"./ReactDOMTextarea":349,"./ReactMount":365,"./ReactMultiChild":366,"./ReactPerf":371,"./ReactUpdateQueue":382,"./canDefineProperty":404,"./escapeTextContentForBrowser":406,"./isEventSupported":418,"./setInnerHTML":421,"./setTextContent":422,"./validateDOMNesting":425,"fbjs/lib/invariant":17,"fbjs/lib/keyOf":21,"fbjs/lib/shallowEqual":25,"fbjs/lib/warning":27}],341:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDOMFeatureFlags
 */

'use strict';

var ReactDOMFeatureFlags = {
  useCreateElement: false
};

module.exports = ReactDOMFeatureFlags;
},{}],342:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDOMIDOperations
 * @typechecks static-only
 */

'use strict';

var DOMChildrenOperations = require('./DOMChildrenOperations');
var DOMPropertyOperations = require('./DOMPropertyOperations');
var ReactMount = require('./ReactMount');
var ReactPerf = require('./ReactPerf');

var invariant = require('fbjs/lib/invariant');

/**
 * Errors for properties that should not be updated with `updatePropertyByID()`.
 *
 * @type {object}
 * @private
 */
var INVALID_PROPERTY_ERRORS = {
  dangerouslySetInnerHTML: '`dangerouslySetInnerHTML` must be set using `updateInnerHTMLByID()`.',
  style: '`style` must be set using `updateStylesByID()`.'
};

/**
 * Operations used to process updates to DOM nodes.
 */
var ReactDOMIDOperations = {

  /**
   * Updates a DOM node with new property values. This should only be used to
   * update DOM properties in `DOMProperty`.
   *
   * @param {string} id ID of the node to update.
   * @param {string} name A valid property name, see `DOMProperty`.
   * @param {*} value New value of the property.
   * @internal
   */
  updatePropertyByID: function (id, name, value) {
    var node = ReactMount.getNode(id);
    !!INVALID_PROPERTY_ERRORS.hasOwnProperty(name) ? "production" !== 'production' ? invariant(false, 'updatePropertyByID(...): %s', INVALID_PROPERTY_ERRORS[name]) : invariant(false) : undefined;

    // If we're updating to null or undefined, we should remove the property
    // from the DOM node instead of inadvertantly setting to a string. This
    // brings us in line with the same behavior we have on initial render.
    if (value != null) {
      DOMPropertyOperations.setValueForProperty(node, name, value);
    } else {
      DOMPropertyOperations.deleteValueForProperty(node, name);
    }
  },

  /**
   * Replaces a DOM node that exists in the document with markup.
   *
   * @param {string} id ID of child to be replaced.
   * @param {string} markup Dangerous markup to inject in place of child.
   * @internal
   * @see {Danger.dangerouslyReplaceNodeWithMarkup}
   */
  dangerouslyReplaceNodeWithMarkupByID: function (id, markup) {
    var node = ReactMount.getNode(id);
    DOMChildrenOperations.dangerouslyReplaceNodeWithMarkup(node, markup);
  },

  /**
   * Updates a component's children by processing a series of updates.
   *
   * @param {array<object>} updates List of update configurations.
   * @param {array<string>} markup List of markup strings.
   * @internal
   */
  dangerouslyProcessChildrenUpdates: function (updates, markup) {
    for (var i = 0; i < updates.length; i++) {
      updates[i].parentNode = ReactMount.getNode(updates[i].parentID);
    }
    DOMChildrenOperations.processUpdates(updates, markup);
  }
};

ReactPerf.measureMethods(ReactDOMIDOperations, 'ReactDOMIDOperations', {
  dangerouslyReplaceNodeWithMarkupByID: 'dangerouslyReplaceNodeWithMarkupByID',
  dangerouslyProcessChildrenUpdates: 'dangerouslyProcessChildrenUpdates'
});

module.exports = ReactDOMIDOperations;
},{"./DOMChildrenOperations":313,"./DOMPropertyOperations":315,"./ReactMount":365,"./ReactPerf":371,"fbjs/lib/invariant":17}],343:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDOMInput
 */

'use strict';

var ReactDOMIDOperations = require('./ReactDOMIDOperations');
var LinkedValueUtils = require('./LinkedValueUtils');
var ReactMount = require('./ReactMount');
var ReactUpdates = require('./ReactUpdates');

var assign = require('./Object.assign');
var invariant = require('fbjs/lib/invariant');

var instancesByReactID = {};

function forceUpdateIfMounted() {
  if (this._rootNodeID) {
    // DOM component is still mounted; update
    ReactDOMInput.updateWrapper(this);
  }
}

/**
 * Implements an <input> native component that allows setting these optional
 * props: `checked`, `value`, `defaultChecked`, and `defaultValue`.
 *
 * If `checked` or `value` are not supplied (or null/undefined), user actions
 * that affect the checked state or value will trigger updates to the element.
 *
 * If they are supplied (and not null/undefined), the rendered element will not
 * trigger updates to the element. Instead, the props must change in order for
 * the rendered element to be updated.
 *
 * The rendered element will be initialized as unchecked (or `defaultChecked`)
 * with an empty value (or `defaultValue`).
 *
 * @see http://www.w3.org/TR/2012/WD-html5-20121025/the-input-element.html
 */
var ReactDOMInput = {
  getNativeProps: function (inst, props, context) {
    var value = LinkedValueUtils.getValue(props);
    var checked = LinkedValueUtils.getChecked(props);

    var nativeProps = assign({}, props, {
      defaultChecked: undefined,
      defaultValue: undefined,
      value: value != null ? value : inst._wrapperState.initialValue,
      checked: checked != null ? checked : inst._wrapperState.initialChecked,
      onChange: inst._wrapperState.onChange
    });

    return nativeProps;
  },

  mountWrapper: function (inst, props) {
    if ("production" !== 'production') {
      LinkedValueUtils.checkPropTypes('input', props, inst._currentElement._owner);
    }

    var defaultValue = props.defaultValue;
    inst._wrapperState = {
      initialChecked: props.defaultChecked || false,
      initialValue: defaultValue != null ? defaultValue : null,
      onChange: _handleChange.bind(inst)
    };
  },

  mountReadyWrapper: function (inst) {
    // Can't be in mountWrapper or else server rendering leaks.
    instancesByReactID[inst._rootNodeID] = inst;
  },

  unmountWrapper: function (inst) {
    delete instancesByReactID[inst._rootNodeID];
  },

  updateWrapper: function (inst) {
    var props = inst._currentElement.props;

    // TODO: Shouldn't this be getChecked(props)?
    var checked = props.checked;
    if (checked != null) {
      ReactDOMIDOperations.updatePropertyByID(inst._rootNodeID, 'checked', checked || false);
    }

    var value = LinkedValueUtils.getValue(props);
    if (value != null) {
      // Cast `value` to a string to ensure the value is set correctly. While
      // browsers typically do this as necessary, jsdom doesn't.
      ReactDOMIDOperations.updatePropertyByID(inst._rootNodeID, 'value', '' + value);
    }
  }
};

function _handleChange(event) {
  var props = this._currentElement.props;

  var returnValue = LinkedValueUtils.executeOnChange(props, event);

  // Here we use asap to wait until all updates have propagated, which
  // is important when using controlled components within layers:
  // https://github.com/facebook/react/issues/1698
  ReactUpdates.asap(forceUpdateIfMounted, this);

  var name = props.name;
  if (props.type === 'radio' && name != null) {
    var rootNode = ReactMount.getNode(this._rootNodeID);
    var queryRoot = rootNode;

    while (queryRoot.parentNode) {
      queryRoot = queryRoot.parentNode;
    }

    // If `rootNode.form` was non-null, then we could try `form.elements`,
    // but that sometimes behaves strangely in IE8. We could also try using
    // `form.getElementsByName`, but that will only return direct children
    // and won't include inputs that use the HTML5 `form=` attribute. Since
    // the input might not even be in a form, let's just use the global
    // `querySelectorAll` to ensure we don't miss anything.
    var group = queryRoot.querySelectorAll('input[name=' + JSON.stringify('' + name) + '][type="radio"]');

    for (var i = 0; i < group.length; i++) {
      var otherNode = group[i];
      if (otherNode === rootNode || otherNode.form !== rootNode.form) {
        continue;
      }
      // This will throw if radio buttons rendered by different copies of React
      // and the same name are rendered into the same form (same as #1939).
      // That's probably okay; we don't support it just as we don't support
      // mixing React with non-React.
      var otherID = ReactMount.getID(otherNode);
      !otherID ? "production" !== 'production' ? invariant(false, 'ReactDOMInput: Mixing React and non-React radio inputs with the ' + 'same `name` is not supported.') : invariant(false) : undefined;
      var otherInstance = instancesByReactID[otherID];
      !otherInstance ? "production" !== 'production' ? invariant(false, 'ReactDOMInput: Unknown radio button ID %s.', otherID) : invariant(false) : undefined;
      // If this is a controlled radio button group, forcing the input that
      // was previously checked to update will cause it to be come re-checked
      // as appropriate.
      ReactUpdates.asap(forceUpdateIfMounted, otherInstance);
    }
  }

  return returnValue;
}

module.exports = ReactDOMInput;
},{"./LinkedValueUtils":326,"./Object.assign":327,"./ReactDOMIDOperations":342,"./ReactMount":365,"./ReactUpdates":383,"fbjs/lib/invariant":17}],344:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDOMOption
 */

'use strict';

var ReactChildren = require('./ReactChildren');
var ReactDOMSelect = require('./ReactDOMSelect');

var assign = require('./Object.assign');
var warning = require('fbjs/lib/warning');

var valueContextKey = ReactDOMSelect.valueContextKey;

/**
 * Implements an <option> native component that warns when `selected` is set.
 */
var ReactDOMOption = {
  mountWrapper: function (inst, props, context) {
    // TODO (yungsters): Remove support for `selected` in <option>.
    if ("production" !== 'production') {
      "production" !== 'production' ? warning(props.selected == null, 'Use the `defaultValue` or `value` props on <select> instead of ' + 'setting `selected` on <option>.') : undefined;
    }

    // Look up whether this option is 'selected' via context
    var selectValue = context[valueContextKey];

    // If context key is null (e.g., no specified value or after initial mount)
    // or missing (e.g., for <datalist>), we don't change props.selected
    var selected = null;
    if (selectValue != null) {
      selected = false;
      if (Array.isArray(selectValue)) {
        // multiple
        for (var i = 0; i < selectValue.length; i++) {
          if ('' + selectValue[i] === '' + props.value) {
            selected = true;
            break;
          }
        }
      } else {
        selected = '' + selectValue === '' + props.value;
      }
    }

    inst._wrapperState = { selected: selected };
  },

  getNativeProps: function (inst, props, context) {
    var nativeProps = assign({ selected: undefined, children: undefined }, props);

    // Read state only from initial mount because <select> updates value
    // manually; we need the initial state only for server rendering
    if (inst._wrapperState.selected != null) {
      nativeProps.selected = inst._wrapperState.selected;
    }

    var content = '';

    // Flatten children and warn if they aren't strings or numbers;
    // invalid types are ignored.
    ReactChildren.forEach(props.children, function (child) {
      if (child == null) {
        return;
      }
      if (typeof child === 'string' || typeof child === 'number') {
        content += child;
      } else {
        "production" !== 'production' ? warning(false, 'Only strings and numbers are supported as <option> children.') : undefined;
      }
    });

    if (content) {
      nativeProps.children = content;
    }

    return nativeProps;
  }

};

module.exports = ReactDOMOption;
},{"./Object.assign":327,"./ReactChildren":332,"./ReactDOMSelect":345,"fbjs/lib/warning":27}],345:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDOMSelect
 */

'use strict';

var LinkedValueUtils = require('./LinkedValueUtils');
var ReactMount = require('./ReactMount');
var ReactUpdates = require('./ReactUpdates');

var assign = require('./Object.assign');
var warning = require('fbjs/lib/warning');

var valueContextKey = '__ReactDOMSelect_value$' + Math.random().toString(36).slice(2);

function updateOptionsIfPendingUpdateAndMounted() {
  if (this._rootNodeID && this._wrapperState.pendingUpdate) {
    this._wrapperState.pendingUpdate = false;

    var props = this._currentElement.props;
    var value = LinkedValueUtils.getValue(props);

    if (value != null) {
      updateOptions(this, Boolean(props.multiple), value);
    }
  }
}

function getDeclarationErrorAddendum(owner) {
  if (owner) {
    var name = owner.getName();
    if (name) {
      return ' Check the render method of `' + name + '`.';
    }
  }
  return '';
}

var valuePropNames = ['value', 'defaultValue'];

/**
 * Validation function for `value` and `defaultValue`.
 * @private
 */
function checkSelectPropTypes(inst, props) {
  var owner = inst._currentElement._owner;
  LinkedValueUtils.checkPropTypes('select', props, owner);

  for (var i = 0; i < valuePropNames.length; i++) {
    var propName = valuePropNames[i];
    if (props[propName] == null) {
      continue;
    }
    if (props.multiple) {
      "production" !== 'production' ? warning(Array.isArray(props[propName]), 'The `%s` prop supplied to <select> must be an array if ' + '`multiple` is true.%s', propName, getDeclarationErrorAddendum(owner)) : undefined;
    } else {
      "production" !== 'production' ? warning(!Array.isArray(props[propName]), 'The `%s` prop supplied to <select> must be a scalar ' + 'value if `multiple` is false.%s', propName, getDeclarationErrorAddendum(owner)) : undefined;
    }
  }
}

/**
 * @param {ReactDOMComponent} inst
 * @param {boolean} multiple
 * @param {*} propValue A stringable (with `multiple`, a list of stringables).
 * @private
 */
function updateOptions(inst, multiple, propValue) {
  var selectedValue, i;
  var options = ReactMount.getNode(inst._rootNodeID).options;

  if (multiple) {
    selectedValue = {};
    for (i = 0; i < propValue.length; i++) {
      selectedValue['' + propValue[i]] = true;
    }
    for (i = 0; i < options.length; i++) {
      var selected = selectedValue.hasOwnProperty(options[i].value);
      if (options[i].selected !== selected) {
        options[i].selected = selected;
      }
    }
  } else {
    // Do not set `select.value` as exact behavior isn't consistent across all
    // browsers for all cases.
    selectedValue = '' + propValue;
    for (i = 0; i < options.length; i++) {
      if (options[i].value === selectedValue) {
        options[i].selected = true;
        return;
      }
    }
    if (options.length) {
      options[0].selected = true;
    }
  }
}

/**
 * Implements a <select> native component that allows optionally setting the
 * props `value` and `defaultValue`. If `multiple` is false, the prop must be a
 * stringable. If `multiple` is true, the prop must be an array of stringables.
 *
 * If `value` is not supplied (or null/undefined), user actions that change the
 * selected option will trigger updates to the rendered options.
 *
 * If it is supplied (and not null/undefined), the rendered options will not
 * update in response to user actions. Instead, the `value` prop must change in
 * order for the rendered options to update.
 *
 * If `defaultValue` is provided, any options with the supplied values will be
 * selected.
 */
var ReactDOMSelect = {
  valueContextKey: valueContextKey,

  getNativeProps: function (inst, props, context) {
    return assign({}, props, {
      onChange: inst._wrapperState.onChange,
      value: undefined
    });
  },

  mountWrapper: function (inst, props) {
    if ("production" !== 'production') {
      checkSelectPropTypes(inst, props);
    }

    var value = LinkedValueUtils.getValue(props);
    inst._wrapperState = {
      pendingUpdate: false,
      initialValue: value != null ? value : props.defaultValue,
      onChange: _handleChange.bind(inst),
      wasMultiple: Boolean(props.multiple)
    };
  },

  processChildContext: function (inst, props, context) {
    // Pass down initial value so initial generated markup has correct
    // `selected` attributes
    var childContext = assign({}, context);
    childContext[valueContextKey] = inst._wrapperState.initialValue;
    return childContext;
  },

  postUpdateWrapper: function (inst) {
    var props = inst._currentElement.props;

    // After the initial mount, we control selected-ness manually so don't pass
    // the context value down
    inst._wrapperState.initialValue = undefined;

    var wasMultiple = inst._wrapperState.wasMultiple;
    inst._wrapperState.wasMultiple = Boolean(props.multiple);

    var value = LinkedValueUtils.getValue(props);
    if (value != null) {
      inst._wrapperState.pendingUpdate = false;
      updateOptions(inst, Boolean(props.multiple), value);
    } else if (wasMultiple !== Boolean(props.multiple)) {
      // For simplicity, reapply `defaultValue` if `multiple` is toggled.
      if (props.defaultValue != null) {
        updateOptions(inst, Boolean(props.multiple), props.defaultValue);
      } else {
        // Revert the select back to its default unselected state.
        updateOptions(inst, Boolean(props.multiple), props.multiple ? [] : '');
      }
    }
  }
};

function _handleChange(event) {
  var props = this._currentElement.props;
  var returnValue = LinkedValueUtils.executeOnChange(props, event);

  this._wrapperState.pendingUpdate = true;
  ReactUpdates.asap(updateOptionsIfPendingUpdateAndMounted, this);
  return returnValue;
}

module.exports = ReactDOMSelect;
},{"./LinkedValueUtils":326,"./Object.assign":327,"./ReactMount":365,"./ReactUpdates":383,"fbjs/lib/warning":27}],346:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDOMSelection
 */

'use strict';

var ExecutionEnvironment = require('fbjs/lib/ExecutionEnvironment');

var getNodeForCharacterOffset = require('./getNodeForCharacterOffset');
var getTextContentAccessor = require('./getTextContentAccessor');

/**
 * While `isCollapsed` is available on the Selection object and `collapsed`
 * is available on the Range object, IE11 sometimes gets them wrong.
 * If the anchor/focus nodes and offsets are the same, the range is collapsed.
 */
function isCollapsed(anchorNode, anchorOffset, focusNode, focusOffset) {
  return anchorNode === focusNode && anchorOffset === focusOffset;
}

/**
 * Get the appropriate anchor and focus node/offset pairs for IE.
 *
 * The catch here is that IE's selection API doesn't provide information
 * about whether the selection is forward or backward, so we have to
 * behave as though it's always forward.
 *
 * IE text differs from modern selection in that it behaves as though
 * block elements end with a new line. This means character offsets will
 * differ between the two APIs.
 *
 * @param {DOMElement} node
 * @return {object}
 */
function getIEOffsets(node) {
  var selection = document.selection;
  var selectedRange = selection.createRange();
  var selectedLength = selectedRange.text.length;

  // Duplicate selection so we can move range without breaking user selection.
  var fromStart = selectedRange.duplicate();
  fromStart.moveToElementText(node);
  fromStart.setEndPoint('EndToStart', selectedRange);

  var startOffset = fromStart.text.length;
  var endOffset = startOffset + selectedLength;

  return {
    start: startOffset,
    end: endOffset
  };
}

/**
 * @param {DOMElement} node
 * @return {?object}
 */
function getModernOffsets(node) {
  var selection = window.getSelection && window.getSelection();

  if (!selection || selection.rangeCount === 0) {
    return null;
  }

  var anchorNode = selection.anchorNode;
  var anchorOffset = selection.anchorOffset;
  var focusNode = selection.focusNode;
  var focusOffset = selection.focusOffset;

  var currentRange = selection.getRangeAt(0);

  // In Firefox, range.startContainer and range.endContainer can be "anonymous
  // divs", e.g. the up/down buttons on an <input type="number">. Anonymous
  // divs do not seem to expose properties, triggering a "Permission denied
  // error" if any of its properties are accessed. The only seemingly possible
  // way to avoid erroring is to access a property that typically works for
  // non-anonymous divs and catch any error that may otherwise arise. See
  // https://bugzilla.mozilla.org/show_bug.cgi?id=208427
  try {
    /* eslint-disable no-unused-expressions */
    currentRange.startContainer.nodeType;
    currentRange.endContainer.nodeType;
    /* eslint-enable no-unused-expressions */
  } catch (e) {
    return null;
  }

  // If the node and offset values are the same, the selection is collapsed.
  // `Selection.isCollapsed` is available natively, but IE sometimes gets
  // this value wrong.
  var isSelectionCollapsed = isCollapsed(selection.anchorNode, selection.anchorOffset, selection.focusNode, selection.focusOffset);

  var rangeLength = isSelectionCollapsed ? 0 : currentRange.toString().length;

  var tempRange = currentRange.cloneRange();
  tempRange.selectNodeContents(node);
  tempRange.setEnd(currentRange.startContainer, currentRange.startOffset);

  var isTempRangeCollapsed = isCollapsed(tempRange.startContainer, tempRange.startOffset, tempRange.endContainer, tempRange.endOffset);

  var start = isTempRangeCollapsed ? 0 : tempRange.toString().length;
  var end = start + rangeLength;

  // Detect whether the selection is backward.
  var detectionRange = document.createRange();
  detectionRange.setStart(anchorNode, anchorOffset);
  detectionRange.setEnd(focusNode, focusOffset);
  var isBackward = detectionRange.collapsed;

  return {
    start: isBackward ? end : start,
    end: isBackward ? start : end
  };
}

/**
 * @param {DOMElement|DOMTextNode} node
 * @param {object} offsets
 */
function setIEOffsets(node, offsets) {
  var range = document.selection.createRange().duplicate();
  var start, end;

  if (typeof offsets.end === 'undefined') {
    start = offsets.start;
    end = start;
  } else if (offsets.start > offsets.end) {
    start = offsets.end;
    end = offsets.start;
  } else {
    start = offsets.start;
    end = offsets.end;
  }

  range.moveToElementText(node);
  range.moveStart('character', start);
  range.setEndPoint('EndToStart', range);
  range.moveEnd('character', end - start);
  range.select();
}

/**
 * In modern non-IE browsers, we can support both forward and backward
 * selections.
 *
 * Note: IE10+ supports the Selection object, but it does not support
 * the `extend` method, which means that even in modern IE, it's not possible
 * to programatically create a backward selection. Thus, for all IE
 * versions, we use the old IE API to create our selections.
 *
 * @param {DOMElement|DOMTextNode} node
 * @param {object} offsets
 */
function setModernOffsets(node, offsets) {
  if (!window.getSelection) {
    return;
  }

  var selection = window.getSelection();
  var length = node[getTextContentAccessor()].length;
  var start = Math.min(offsets.start, length);
  var end = typeof offsets.end === 'undefined' ? start : Math.min(offsets.end, length);

  // IE 11 uses modern selection, but doesn't support the extend method.
  // Flip backward selections, so we can set with a single range.
  if (!selection.extend && start > end) {
    var temp = end;
    end = start;
    start = temp;
  }

  var startMarker = getNodeForCharacterOffset(node, start);
  var endMarker = getNodeForCharacterOffset(node, end);

  if (startMarker && endMarker) {
    var range = document.createRange();
    range.setStart(startMarker.node, startMarker.offset);
    selection.removeAllRanges();

    if (start > end) {
      selection.addRange(range);
      selection.extend(endMarker.node, endMarker.offset);
    } else {
      range.setEnd(endMarker.node, endMarker.offset);
      selection.addRange(range);
    }
  }
}

var useIEOffsets = ExecutionEnvironment.canUseDOM && 'selection' in document && !('getSelection' in window);

var ReactDOMSelection = {
  /**
   * @param {DOMElement} node
   */
  getOffsets: useIEOffsets ? getIEOffsets : getModernOffsets,

  /**
   * @param {DOMElement|DOMTextNode} node
   * @param {object} offsets
   */
  setOffsets: useIEOffsets ? setIEOffsets : setModernOffsets
};

module.exports = ReactDOMSelection;
},{"./getNodeForCharacterOffset":415,"./getTextContentAccessor":416,"fbjs/lib/ExecutionEnvironment":3}],347:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDOMServer
 */

'use strict';

var ReactDefaultInjection = require('./ReactDefaultInjection');
var ReactServerRendering = require('./ReactServerRendering');
var ReactVersion = require('./ReactVersion');

ReactDefaultInjection.inject();

var ReactDOMServer = {
  renderToString: ReactServerRendering.renderToString,
  renderToStaticMarkup: ReactServerRendering.renderToStaticMarkup,
  version: ReactVersion
};

module.exports = ReactDOMServer;
},{"./ReactDefaultInjection":351,"./ReactServerRendering":380,"./ReactVersion":384}],348:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDOMTextComponent
 * @typechecks static-only
 */

'use strict';

var DOMChildrenOperations = require('./DOMChildrenOperations');
var DOMPropertyOperations = require('./DOMPropertyOperations');
var ReactComponentBrowserEnvironment = require('./ReactComponentBrowserEnvironment');
var ReactMount = require('./ReactMount');

var assign = require('./Object.assign');
var escapeTextContentForBrowser = require('./escapeTextContentForBrowser');
var setTextContent = require('./setTextContent');
var validateDOMNesting = require('./validateDOMNesting');

/**
 * Text nodes violate a couple assumptions that React makes about components:
 *
 *  - When mounting text into the DOM, adjacent text nodes are merged.
 *  - Text nodes cannot be assigned a React root ID.
 *
 * This component is used to wrap strings in elements so that they can undergo
 * the same reconciliation that is applied to elements.
 *
 * TODO: Investigate representing React components in the DOM with text nodes.
 *
 * @class ReactDOMTextComponent
 * @extends ReactComponent
 * @internal
 */
var ReactDOMTextComponent = function (props) {
  // This constructor and its argument is currently used by mocks.
};

assign(ReactDOMTextComponent.prototype, {

  /**
   * @param {ReactText} text
   * @internal
   */
  construct: function (text) {
    // TODO: This is really a ReactText (ReactNode), not a ReactElement
    this._currentElement = text;
    this._stringText = '' + text;

    // Properties
    this._rootNodeID = null;
    this._mountIndex = 0;
  },

  /**
   * Creates the markup for this text node. This node is not intended to have
   * any features besides containing text content.
   *
   * @param {string} rootID DOM ID of the root node.
   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
   * @return {string} Markup for this text node.
   * @internal
   */
  mountComponent: function (rootID, transaction, context) {
    if ("production" !== 'production') {
      if (context[validateDOMNesting.ancestorInfoContextKey]) {
        validateDOMNesting('span', null, context[validateDOMNesting.ancestorInfoContextKey]);
      }
    }

    this._rootNodeID = rootID;
    if (transaction.useCreateElement) {
      var ownerDocument = context[ReactMount.ownerDocumentContextKey];
      var el = ownerDocument.createElement('span');
      DOMPropertyOperations.setAttributeForID(el, rootID);
      // Populate node cache
      ReactMount.getID(el);
      setTextContent(el, this._stringText);
      return el;
    } else {
      var escapedText = escapeTextContentForBrowser(this._stringText);

      if (transaction.renderToStaticMarkup) {
        // Normally we'd wrap this in a `span` for the reasons stated above, but
        // since this is a situation where React won't take over (static pages),
        // we can simply return the text as it is.
        return escapedText;
      }

      return '<span ' + DOMPropertyOperations.createMarkupForID(rootID) + '>' + escapedText + '</span>';
    }
  },

  /**
   * Updates this component by updating the text content.
   *
   * @param {ReactText} nextText The next text content
   * @param {ReactReconcileTransaction} transaction
   * @internal
   */
  receiveComponent: function (nextText, transaction) {
    if (nextText !== this._currentElement) {
      this._currentElement = nextText;
      var nextStringText = '' + nextText;
      if (nextStringText !== this._stringText) {
        // TODO: Save this as pending props and use performUpdateIfNecessary
        // and/or updateComponent to do the actual update for consistency with
        // other component types?
        this._stringText = nextStringText;
        var node = ReactMount.getNode(this._rootNodeID);
        DOMChildrenOperations.updateTextContent(node, nextStringText);
      }
    }
  },

  unmountComponent: function () {
    ReactComponentBrowserEnvironment.unmountIDFromEnvironment(this._rootNodeID);
  }

});

module.exports = ReactDOMTextComponent;
},{"./DOMChildrenOperations":313,"./DOMPropertyOperations":315,"./Object.assign":327,"./ReactComponentBrowserEnvironment":335,"./ReactMount":365,"./escapeTextContentForBrowser":406,"./setTextContent":422,"./validateDOMNesting":425}],349:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDOMTextarea
 */

'use strict';

var LinkedValueUtils = require('./LinkedValueUtils');
var ReactDOMIDOperations = require('./ReactDOMIDOperations');
var ReactUpdates = require('./ReactUpdates');

var assign = require('./Object.assign');
var invariant = require('fbjs/lib/invariant');
var warning = require('fbjs/lib/warning');

function forceUpdateIfMounted() {
  if (this._rootNodeID) {
    // DOM component is still mounted; update
    ReactDOMTextarea.updateWrapper(this);
  }
}

/**
 * Implements a <textarea> native component that allows setting `value`, and
 * `defaultValue`. This differs from the traditional DOM API because value is
 * usually set as PCDATA children.
 *
 * If `value` is not supplied (or null/undefined), user actions that affect the
 * value will trigger updates to the element.
 *
 * If `value` is supplied (and not null/undefined), the rendered element will
 * not trigger updates to the element. Instead, the `value` prop must change in
 * order for the rendered element to be updated.
 *
 * The rendered element will be initialized with an empty value, the prop
 * `defaultValue` if specified, or the children content (deprecated).
 */
var ReactDOMTextarea = {
  getNativeProps: function (inst, props, context) {
    !(props.dangerouslySetInnerHTML == null) ? "production" !== 'production' ? invariant(false, '`dangerouslySetInnerHTML` does not make sense on <textarea>.') : invariant(false) : undefined;

    // Always set children to the same thing. In IE9, the selection range will
    // get reset if `textContent` is mutated.
    var nativeProps = assign({}, props, {
      defaultValue: undefined,
      value: undefined,
      children: inst._wrapperState.initialValue,
      onChange: inst._wrapperState.onChange
    });

    return nativeProps;
  },

  mountWrapper: function (inst, props) {
    if ("production" !== 'production') {
      LinkedValueUtils.checkPropTypes('textarea', props, inst._currentElement._owner);
    }

    var defaultValue = props.defaultValue;
    // TODO (yungsters): Remove support for children content in <textarea>.
    var children = props.children;
    if (children != null) {
      if ("production" !== 'production') {
        "production" !== 'production' ? warning(false, 'Use the `defaultValue` or `value` props instead of setting ' + 'children on <textarea>.') : undefined;
      }
      !(defaultValue == null) ? "production" !== 'production' ? invariant(false, 'If you supply `defaultValue` on a <textarea>, do not pass children.') : invariant(false) : undefined;
      if (Array.isArray(children)) {
        !(children.length <= 1) ? "production" !== 'production' ? invariant(false, '<textarea> can only have at most one child.') : invariant(false) : undefined;
        children = children[0];
      }

      defaultValue = '' + children;
    }
    if (defaultValue == null) {
      defaultValue = '';
    }
    var value = LinkedValueUtils.getValue(props);

    inst._wrapperState = {
      // We save the initial value so that `ReactDOMComponent` doesn't update
      // `textContent` (unnecessary since we update value).
      // The initial value can be a boolean or object so that's why it's
      // forced to be a string.
      initialValue: '' + (value != null ? value : defaultValue),
      onChange: _handleChange.bind(inst)
    };
  },

  updateWrapper: function (inst) {
    var props = inst._currentElement.props;
    var value = LinkedValueUtils.getValue(props);
    if (value != null) {
      // Cast `value` to a string to ensure the value is set correctly. While
      // browsers typically do this as necessary, jsdom doesn't.
      ReactDOMIDOperations.updatePropertyByID(inst._rootNodeID, 'value', '' + value);
    }
  }
};

function _handleChange(event) {
  var props = this._currentElement.props;
  var returnValue = LinkedValueUtils.executeOnChange(props, event);
  ReactUpdates.asap(forceUpdateIfMounted, this);
  return returnValue;
}

module.exports = ReactDOMTextarea;
},{"./LinkedValueUtils":326,"./Object.assign":327,"./ReactDOMIDOperations":342,"./ReactUpdates":383,"fbjs/lib/invariant":17,"fbjs/lib/warning":27}],350:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDefaultBatchingStrategy
 */

'use strict';

var ReactUpdates = require('./ReactUpdates');
var Transaction = require('./Transaction');

var assign = require('./Object.assign');
var emptyFunction = require('fbjs/lib/emptyFunction');

var RESET_BATCHED_UPDATES = {
  initialize: emptyFunction,
  close: function () {
    ReactDefaultBatchingStrategy.isBatchingUpdates = false;
  }
};

var FLUSH_BATCHED_UPDATES = {
  initialize: emptyFunction,
  close: ReactUpdates.flushBatchedUpdates.bind(ReactUpdates)
};

var TRANSACTION_WRAPPERS = [FLUSH_BATCHED_UPDATES, RESET_BATCHED_UPDATES];

function ReactDefaultBatchingStrategyTransaction() {
  this.reinitializeTransaction();
}

assign(ReactDefaultBatchingStrategyTransaction.prototype, Transaction.Mixin, {
  getTransactionWrappers: function () {
    return TRANSACTION_WRAPPERS;
  }
});

var transaction = new ReactDefaultBatchingStrategyTransaction();

var ReactDefaultBatchingStrategy = {
  isBatchingUpdates: false,

  /**
   * Call the provided function in a context within which calls to `setState`
   * and friends are batched such that components aren't updated unnecessarily.
   */
  batchedUpdates: function (callback, a, b, c, d, e) {
    var alreadyBatchingUpdates = ReactDefaultBatchingStrategy.isBatchingUpdates;

    ReactDefaultBatchingStrategy.isBatchingUpdates = true;

    // The code is written this way to avoid extra allocations
    if (alreadyBatchingUpdates) {
      callback(a, b, c, d, e);
    } else {
      transaction.perform(callback, null, a, b, c, d, e);
    }
  }
};

module.exports = ReactDefaultBatchingStrategy;
},{"./Object.assign":327,"./ReactUpdates":383,"./Transaction":400,"fbjs/lib/emptyFunction":9}],351:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDefaultInjection
 */

'use strict';

var BeforeInputEventPlugin = require('./BeforeInputEventPlugin');
var ChangeEventPlugin = require('./ChangeEventPlugin');
var ClientReactRootIndex = require('./ClientReactRootIndex');
var DefaultEventPluginOrder = require('./DefaultEventPluginOrder');
var EnterLeaveEventPlugin = require('./EnterLeaveEventPlugin');
var ExecutionEnvironment = require('fbjs/lib/ExecutionEnvironment');
var HTMLDOMPropertyConfig = require('./HTMLDOMPropertyConfig');
var ReactBrowserComponentMixin = require('./ReactBrowserComponentMixin');
var ReactComponentBrowserEnvironment = require('./ReactComponentBrowserEnvironment');
var ReactDefaultBatchingStrategy = require('./ReactDefaultBatchingStrategy');
var ReactDOMComponent = require('./ReactDOMComponent');
var ReactDOMTextComponent = require('./ReactDOMTextComponent');
var ReactEventListener = require('./ReactEventListener');
var ReactInjection = require('./ReactInjection');
var ReactInstanceHandles = require('./ReactInstanceHandles');
var ReactMount = require('./ReactMount');
var ReactReconcileTransaction = require('./ReactReconcileTransaction');
var SelectEventPlugin = require('./SelectEventPlugin');
var ServerReactRootIndex = require('./ServerReactRootIndex');
var SimpleEventPlugin = require('./SimpleEventPlugin');
var SVGDOMPropertyConfig = require('./SVGDOMPropertyConfig');

var alreadyInjected = false;

function inject() {
  if (alreadyInjected) {
    // TODO: This is currently true because these injections are shared between
    // the client and the server package. They should be built independently
    // and not share any injection state. Then this problem will be solved.
    return;
  }
  alreadyInjected = true;

  ReactInjection.EventEmitter.injectReactEventListener(ReactEventListener);

  /**
   * Inject modules for resolving DOM hierarchy and plugin ordering.
   */
  ReactInjection.EventPluginHub.injectEventPluginOrder(DefaultEventPluginOrder);
  ReactInjection.EventPluginHub.injectInstanceHandle(ReactInstanceHandles);
  ReactInjection.EventPluginHub.injectMount(ReactMount);

  /**
   * Some important event plugins included by default (without having to require
   * them).
   */
  ReactInjection.EventPluginHub.injectEventPluginsByName({
    SimpleEventPlugin: SimpleEventPlugin,
    EnterLeaveEventPlugin: EnterLeaveEventPlugin,
    ChangeEventPlugin: ChangeEventPlugin,
    SelectEventPlugin: SelectEventPlugin,
    BeforeInputEventPlugin: BeforeInputEventPlugin
  });

  ReactInjection.NativeComponent.injectGenericComponentClass(ReactDOMComponent);

  ReactInjection.NativeComponent.injectTextComponentClass(ReactDOMTextComponent);

  ReactInjection.Class.injectMixin(ReactBrowserComponentMixin);

  ReactInjection.DOMProperty.injectDOMPropertyConfig(HTMLDOMPropertyConfig);
  ReactInjection.DOMProperty.injectDOMPropertyConfig(SVGDOMPropertyConfig);

  ReactInjection.EmptyComponent.injectEmptyComponent('noscript');

  ReactInjection.Updates.injectReconcileTransaction(ReactReconcileTransaction);
  ReactInjection.Updates.injectBatchingStrategy(ReactDefaultBatchingStrategy);

  ReactInjection.RootIndex.injectCreateReactRootIndex(ExecutionEnvironment.canUseDOM ? ClientReactRootIndex.createReactRootIndex : ServerReactRootIndex.createReactRootIndex);

  ReactInjection.Component.injectEnvironment(ReactComponentBrowserEnvironment);

  if ("production" !== 'production') {
    var url = ExecutionEnvironment.canUseDOM && window.location.href || '';
    if (/[?&]react_perf\b/.test(url)) {
      var ReactDefaultPerf = require('./ReactDefaultPerf');
      ReactDefaultPerf.start();
    }
  }
}

module.exports = {
  inject: inject
};
},{"./BeforeInputEventPlugin":307,"./ChangeEventPlugin":311,"./ClientReactRootIndex":312,"./DefaultEventPluginOrder":317,"./EnterLeaveEventPlugin":318,"./HTMLDOMPropertyConfig":325,"./ReactBrowserComponentMixin":329,"./ReactComponentBrowserEnvironment":335,"./ReactDOMComponent":340,"./ReactDOMTextComponent":348,"./ReactDefaultBatchingStrategy":350,"./ReactDefaultPerf":352,"./ReactEventListener":359,"./ReactInjection":360,"./ReactInstanceHandles":362,"./ReactMount":365,"./ReactReconcileTransaction":375,"./SVGDOMPropertyConfig":385,"./SelectEventPlugin":386,"./ServerReactRootIndex":387,"./SimpleEventPlugin":388,"fbjs/lib/ExecutionEnvironment":3}],352:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDefaultPerf
 * @typechecks static-only
 */

'use strict';

var DOMProperty = require('./DOMProperty');
var ReactDefaultPerfAnalysis = require('./ReactDefaultPerfAnalysis');
var ReactMount = require('./ReactMount');
var ReactPerf = require('./ReactPerf');

var performanceNow = require('fbjs/lib/performanceNow');

function roundFloat(val) {
  return Math.floor(val * 100) / 100;
}

function addValue(obj, key, val) {
  obj[key] = (obj[key] || 0) + val;
}

var ReactDefaultPerf = {
  _allMeasurements: [], // last item in the list is the current one
  _mountStack: [0],
  _injected: false,

  start: function () {
    if (!ReactDefaultPerf._injected) {
      ReactPerf.injection.injectMeasure(ReactDefaultPerf.measure);
    }

    ReactDefaultPerf._allMeasurements.length = 0;
    ReactPerf.enableMeasure = true;
  },

  stop: function () {
    ReactPerf.enableMeasure = false;
  },

  getLastMeasurements: function () {
    return ReactDefaultPerf._allMeasurements;
  },

  printExclusive: function (measurements) {
    measurements = measurements || ReactDefaultPerf._allMeasurements;
    var summary = ReactDefaultPerfAnalysis.getExclusiveSummary(measurements);
    console.table(summary.map(function (item) {
      return {
        'Component class name': item.componentName,
        'Total inclusive time (ms)': roundFloat(item.inclusive),
        'Exclusive mount time (ms)': roundFloat(item.exclusive),
        'Exclusive render time (ms)': roundFloat(item.render),
        'Mount time per instance (ms)': roundFloat(item.exclusive / item.count),
        'Render time per instance (ms)': roundFloat(item.render / item.count),
        'Instances': item.count
      };
    }));
    // TODO: ReactDefaultPerfAnalysis.getTotalTime() does not return the correct
    // number.
  },

  printInclusive: function (measurements) {
    measurements = measurements || ReactDefaultPerf._allMeasurements;
    var summary = ReactDefaultPerfAnalysis.getInclusiveSummary(measurements);
    console.table(summary.map(function (item) {
      return {
        'Owner > component': item.componentName,
        'Inclusive time (ms)': roundFloat(item.time),
        'Instances': item.count
      };
    }));
    console.log('Total time:', ReactDefaultPerfAnalysis.getTotalTime(measurements).toFixed(2) + ' ms');
  },

  getMeasurementsSummaryMap: function (measurements) {
    var summary = ReactDefaultPerfAnalysis.getInclusiveSummary(measurements, true);
    return summary.map(function (item) {
      return {
        'Owner > component': item.componentName,
        'Wasted time (ms)': item.time,
        'Instances': item.count
      };
    });
  },

  printWasted: function (measurements) {
    measurements = measurements || ReactDefaultPerf._allMeasurements;
    console.table(ReactDefaultPerf.getMeasurementsSummaryMap(measurements));
    console.log('Total time:', ReactDefaultPerfAnalysis.getTotalTime(measurements).toFixed(2) + ' ms');
  },

  printDOM: function (measurements) {
    measurements = measurements || ReactDefaultPerf._allMeasurements;
    var summary = ReactDefaultPerfAnalysis.getDOMSummary(measurements);
    console.table(summary.map(function (item) {
      var result = {};
      result[DOMProperty.ID_ATTRIBUTE_NAME] = item.id;
      result.type = item.type;
      result.args = JSON.stringify(item.args);
      return result;
    }));
    console.log('Total time:', ReactDefaultPerfAnalysis.getTotalTime(measurements).toFixed(2) + ' ms');
  },

  _recordWrite: function (id, fnName, totalTime, args) {
    // TODO: totalTime isn't that useful since it doesn't count paints/reflows
    var writes = ReactDefaultPerf._allMeasurements[ReactDefaultPerf._allMeasurements.length - 1].writes;
    writes[id] = writes[id] || [];
    writes[id].push({
      type: fnName,
      time: totalTime,
      args: args
    });
  },

  measure: function (moduleName, fnName, func) {
    return function () {
      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      var totalTime;
      var rv;
      var start;

      if (fnName === '_renderNewRootComponent' || fnName === 'flushBatchedUpdates') {
        // A "measurement" is a set of metrics recorded for each flush. We want
        // to group the metrics for a given flush together so we can look at the
        // components that rendered and the DOM operations that actually
        // happened to determine the amount of "wasted work" performed.
        ReactDefaultPerf._allMeasurements.push({
          exclusive: {},
          inclusive: {},
          render: {},
          counts: {},
          writes: {},
          displayNames: {},
          totalTime: 0,
          created: {}
        });
        start = performanceNow();
        rv = func.apply(this, args);
        ReactDefaultPerf._allMeasurements[ReactDefaultPerf._allMeasurements.length - 1].totalTime = performanceNow() - start;
        return rv;
      } else if (fnName === '_mountImageIntoNode' || moduleName === 'ReactBrowserEventEmitter' || moduleName === 'ReactDOMIDOperations' || moduleName === 'CSSPropertyOperations' || moduleName === 'DOMChildrenOperations' || moduleName === 'DOMPropertyOperations') {
        start = performanceNow();
        rv = func.apply(this, args);
        totalTime = performanceNow() - start;

        if (fnName === '_mountImageIntoNode') {
          var mountID = ReactMount.getID(args[1]);
          ReactDefaultPerf._recordWrite(mountID, fnName, totalTime, args[0]);
        } else if (fnName === 'dangerouslyProcessChildrenUpdates') {
          // special format
          args[0].forEach(function (update) {
            var writeArgs = {};
            if (update.fromIndex !== null) {
              writeArgs.fromIndex = update.fromIndex;
            }
            if (update.toIndex !== null) {
              writeArgs.toIndex = update.toIndex;
            }
            if (update.textContent !== null) {
              writeArgs.textContent = update.textContent;
            }
            if (update.markupIndex !== null) {
              writeArgs.markup = args[1][update.markupIndex];
            }
            ReactDefaultPerf._recordWrite(update.parentID, update.type, totalTime, writeArgs);
          });
        } else {
          // basic format
          var id = args[0];
          if (typeof id === 'object') {
            id = ReactMount.getID(args[0]);
          }
          ReactDefaultPerf._recordWrite(id, fnName, totalTime, Array.prototype.slice.call(args, 1));
        }
        return rv;
      } else if (moduleName === 'ReactCompositeComponent' && (fnName === 'mountComponent' || fnName === 'updateComponent' || // TODO: receiveComponent()?
      fnName === '_renderValidatedComponent')) {

        if (this._currentElement.type === ReactMount.TopLevelWrapper) {
          return func.apply(this, args);
        }

        var rootNodeID = fnName === 'mountComponent' ? args[0] : this._rootNodeID;
        var isRender = fnName === '_renderValidatedComponent';
        var isMount = fnName === 'mountComponent';

        var mountStack = ReactDefaultPerf._mountStack;
        var entry = ReactDefaultPerf._allMeasurements[ReactDefaultPerf._allMeasurements.length - 1];

        if (isRender) {
          addValue(entry.counts, rootNodeID, 1);
        } else if (isMount) {
          entry.created[rootNodeID] = true;
          mountStack.push(0);
        }

        start = performanceNow();
        rv = func.apply(this, args);
        totalTime = performanceNow() - start;

        if (isRender) {
          addValue(entry.render, rootNodeID, totalTime);
        } else if (isMount) {
          var subMountTime = mountStack.pop();
          mountStack[mountStack.length - 1] += totalTime;
          addValue(entry.exclusive, rootNodeID, totalTime - subMountTime);
          addValue(entry.inclusive, rootNodeID, totalTime);
        } else {
          addValue(entry.inclusive, rootNodeID, totalTime);
        }

        entry.displayNames[rootNodeID] = {
          current: this.getName(),
          owner: this._currentElement._owner ? this._currentElement._owner.getName() : '<root>'
        };

        return rv;
      } else {
        return func.apply(this, args);
      }
    };
  }
};

module.exports = ReactDefaultPerf;
},{"./DOMProperty":314,"./ReactDefaultPerfAnalysis":353,"./ReactMount":365,"./ReactPerf":371,"fbjs/lib/performanceNow":24}],353:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDefaultPerfAnalysis
 */

'use strict';

var assign = require('./Object.assign');

// Don't try to save users less than 1.2ms (a number I made up)
var DONT_CARE_THRESHOLD = 1.2;
var DOM_OPERATION_TYPES = {
  '_mountImageIntoNode': 'set innerHTML',
  INSERT_MARKUP: 'set innerHTML',
  MOVE_EXISTING: 'move',
  REMOVE_NODE: 'remove',
  SET_MARKUP: 'set innerHTML',
  TEXT_CONTENT: 'set textContent',
  'setValueForProperty': 'update attribute',
  'setValueForAttribute': 'update attribute',
  'deleteValueForProperty': 'remove attribute',
  'setValueForStyles': 'update styles',
  'replaceNodeWithMarkup': 'replace',
  'updateTextContent': 'set textContent'
};

function getTotalTime(measurements) {
  // TODO: return number of DOM ops? could be misleading.
  // TODO: measure dropped frames after reconcile?
  // TODO: log total time of each reconcile and the top-level component
  // class that triggered it.
  var totalTime = 0;
  for (var i = 0; i < measurements.length; i++) {
    var measurement = measurements[i];
    totalTime += measurement.totalTime;
  }
  return totalTime;
}

function getDOMSummary(measurements) {
  var items = [];
  measurements.forEach(function (measurement) {
    Object.keys(measurement.writes).forEach(function (id) {
      measurement.writes[id].forEach(function (write) {
        items.push({
          id: id,
          type: DOM_OPERATION_TYPES[write.type] || write.type,
          args: write.args
        });
      });
    });
  });
  return items;
}

function getExclusiveSummary(measurements) {
  var candidates = {};
  var displayName;

  for (var i = 0; i < measurements.length; i++) {
    var measurement = measurements[i];
    var allIDs = assign({}, measurement.exclusive, measurement.inclusive);

    for (var id in allIDs) {
      displayName = measurement.displayNames[id].current;

      candidates[displayName] = candidates[displayName] || {
        componentName: displayName,
        inclusive: 0,
        exclusive: 0,
        render: 0,
        count: 0
      };
      if (measurement.render[id]) {
        candidates[displayName].render += measurement.render[id];
      }
      if (measurement.exclusive[id]) {
        candidates[displayName].exclusive += measurement.exclusive[id];
      }
      if (measurement.inclusive[id]) {
        candidates[displayName].inclusive += measurement.inclusive[id];
      }
      if (measurement.counts[id]) {
        candidates[displayName].count += measurement.counts[id];
      }
    }
  }

  // Now make a sorted array with the results.
  var arr = [];
  for (displayName in candidates) {
    if (candidates[displayName].exclusive >= DONT_CARE_THRESHOLD) {
      arr.push(candidates[displayName]);
    }
  }

  arr.sort(function (a, b) {
    return b.exclusive - a.exclusive;
  });

  return arr;
}

function getInclusiveSummary(measurements, onlyClean) {
  var candidates = {};
  var inclusiveKey;

  for (var i = 0; i < measurements.length; i++) {
    var measurement = measurements[i];
    var allIDs = assign({}, measurement.exclusive, measurement.inclusive);
    var cleanComponents;

    if (onlyClean) {
      cleanComponents = getUnchangedComponents(measurement);
    }

    for (var id in allIDs) {
      if (onlyClean && !cleanComponents[id]) {
        continue;
      }

      var displayName = measurement.displayNames[id];

      // Inclusive time is not useful for many components without knowing where
      // they are instantiated. So we aggregate inclusive time with both the
      // owner and current displayName as the key.
      inclusiveKey = displayName.owner + ' > ' + displayName.current;

      candidates[inclusiveKey] = candidates[inclusiveKey] || {
        componentName: inclusiveKey,
        time: 0,
        count: 0
      };

      if (measurement.inclusive[id]) {
        candidates[inclusiveKey].time += measurement.inclusive[id];
      }
      if (measurement.counts[id]) {
        candidates[inclusiveKey].count += measurement.counts[id];
      }
    }
  }

  // Now make a sorted array with the results.
  var arr = [];
  for (inclusiveKey in candidates) {
    if (candidates[inclusiveKey].time >= DONT_CARE_THRESHOLD) {
      arr.push(candidates[inclusiveKey]);
    }
  }

  arr.sort(function (a, b) {
    return b.time - a.time;
  });

  return arr;
}

function getUnchangedComponents(measurement) {
  // For a given reconcile, look at which components did not actually
  // render anything to the DOM and return a mapping of their ID to
  // the amount of time it took to render the entire subtree.
  var cleanComponents = {};
  var dirtyLeafIDs = Object.keys(measurement.writes);
  var allIDs = assign({}, measurement.exclusive, measurement.inclusive);

  for (var id in allIDs) {
    var isDirty = false;
    // For each component that rendered, see if a component that triggered
    // a DOM op is in its subtree.
    for (var i = 0; i < dirtyLeafIDs.length; i++) {
      if (dirtyLeafIDs[i].indexOf(id) === 0) {
        isDirty = true;
        break;
      }
    }
    // check if component newly created
    if (measurement.created[id]) {
      isDirty = true;
    }
    if (!isDirty && measurement.counts[id] > 0) {
      cleanComponents[id] = true;
    }
  }
  return cleanComponents;
}

var ReactDefaultPerfAnalysis = {
  getExclusiveSummary: getExclusiveSummary,
  getInclusiveSummary: getInclusiveSummary,
  getDOMSummary: getDOMSummary,
  getTotalTime: getTotalTime
};

module.exports = ReactDefaultPerfAnalysis;
},{"./Object.assign":327}],354:[function(require,module,exports){
/**
 * Copyright 2014-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactElement
 */

'use strict';

var ReactCurrentOwner = require('./ReactCurrentOwner');

var assign = require('./Object.assign');
var canDefineProperty = require('./canDefineProperty');

// The Symbol used to tag the ReactElement type. If there is no native Symbol
// nor polyfill, then a plain number is used for performance.
var REACT_ELEMENT_TYPE = typeof Symbol === 'function' && Symbol['for'] && Symbol['for']('react.element') || 0xeac7;

var RESERVED_PROPS = {
  key: true,
  ref: true,
  __self: true,
  __source: true
};

/**
 * Base constructor for all React elements. This is only used to make this
 * work with a dynamic instanceof check. Nothing should live on this prototype.
 *
 * @param {*} type
 * @param {*} key
 * @param {string|object} ref
 * @param {*} self A *temporary* helper to detect places where `this` is
 * different from the `owner` when React.createElement is called, so that we
 * can warn. We want to get rid of owner and replace string `ref`s with arrow
 * functions, and as long as `this` and owner are the same, there will be no
 * change in behavior.
 * @param {*} source An annotation object (added by a transpiler or otherwise)
 * indicating filename, line number, and/or other information.
 * @param {*} owner
 * @param {*} props
 * @internal
 */
var ReactElement = function (type, key, ref, self, source, owner, props) {
  var element = {
    // This tag allow us to uniquely identify this as a React Element
    $$typeof: REACT_ELEMENT_TYPE,

    // Built-in properties that belong on the element
    type: type,
    key: key,
    ref: ref,
    props: props,

    // Record the component responsible for creating this element.
    _owner: owner
  };

  if ("production" !== 'production') {
    // The validation flag is currently mutative. We put it on
    // an external backing store so that we can freeze the whole object.
    // This can be replaced with a WeakMap once they are implemented in
    // commonly used development environments.
    element._store = {};

    // To make comparing ReactElements easier for testing purposes, we make
    // the validation flag non-enumerable (where possible, which should
    // include every environment we run tests in), so the test framework
    // ignores it.
    if (canDefineProperty) {
      Object.defineProperty(element._store, 'validated', {
        configurable: false,
        enumerable: false,
        writable: true,
        value: false
      });
      // self and source are DEV only properties.
      Object.defineProperty(element, '_self', {
        configurable: false,
        enumerable: false,
        writable: false,
        value: self
      });
      // Two elements created in two different places should be considered
      // equal for testing purposes and therefore we hide it from enumeration.
      Object.defineProperty(element, '_source', {
        configurable: false,
        enumerable: false,
        writable: false,
        value: source
      });
    } else {
      element._store.validated = false;
      element._self = self;
      element._source = source;
    }
    Object.freeze(element.props);
    Object.freeze(element);
  }

  return element;
};

ReactElement.createElement = function (type, config, children) {
  var propName;

  // Reserved names are extracted
  var props = {};

  var key = null;
  var ref = null;
  var self = null;
  var source = null;

  if (config != null) {
    ref = config.ref === undefined ? null : config.ref;
    key = config.key === undefined ? null : '' + config.key;
    self = config.__self === undefined ? null : config.__self;
    source = config.__source === undefined ? null : config.__source;
    // Remaining properties are added to a new props object
    for (propName in config) {
      if (config.hasOwnProperty(propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
        props[propName] = config[propName];
      }
    }
  }

  // Children can be more than one argument, and those are transferred onto
  // the newly allocated props object.
  var childrenLength = arguments.length - 2;
  if (childrenLength === 1) {
    props.children = children;
  } else if (childrenLength > 1) {
    var childArray = Array(childrenLength);
    for (var i = 0; i < childrenLength; i++) {
      childArray[i] = arguments[i + 2];
    }
    props.children = childArray;
  }

  // Resolve default props
  if (type && type.defaultProps) {
    var defaultProps = type.defaultProps;
    for (propName in defaultProps) {
      if (typeof props[propName] === 'undefined') {
        props[propName] = defaultProps[propName];
      }
    }
  }

  return ReactElement(type, key, ref, self, source, ReactCurrentOwner.current, props);
};

ReactElement.createFactory = function (type) {
  var factory = ReactElement.createElement.bind(null, type);
  // Expose the type on the factory and the prototype so that it can be
  // easily accessed on elements. E.g. `<Foo />.type === Foo`.
  // This should not be named `constructor` since this may not be the function
  // that created the element, and it may not even be a constructor.
  // Legacy hook TODO: Warn if this is accessed
  factory.type = type;
  return factory;
};

ReactElement.cloneAndReplaceKey = function (oldElement, newKey) {
  var newElement = ReactElement(oldElement.type, newKey, oldElement.ref, oldElement._self, oldElement._source, oldElement._owner, oldElement.props);

  return newElement;
};

ReactElement.cloneAndReplaceProps = function (oldElement, newProps) {
  var newElement = ReactElement(oldElement.type, oldElement.key, oldElement.ref, oldElement._self, oldElement._source, oldElement._owner, newProps);

  if ("production" !== 'production') {
    // If the key on the original is valid, then the clone is valid
    newElement._store.validated = oldElement._store.validated;
  }

  return newElement;
};

ReactElement.cloneElement = function (element, config, children) {
  var propName;

  // Original props are copied
  var props = assign({}, element.props);

  // Reserved names are extracted
  var key = element.key;
  var ref = element.ref;
  // Self is preserved since the owner is preserved.
  var self = element._self;
  // Source is preserved since cloneElement is unlikely to be targeted by a
  // transpiler, and the original source is probably a better indicator of the
  // true owner.
  var source = element._source;

  // Owner will be preserved, unless ref is overridden
  var owner = element._owner;

  if (config != null) {
    if (config.ref !== undefined) {
      // Silently steal the ref from the parent.
      ref = config.ref;
      owner = ReactCurrentOwner.current;
    }
    if (config.key !== undefined) {
      key = '' + config.key;
    }
    // Remaining properties override existing props
    for (propName in config) {
      if (config.hasOwnProperty(propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
        props[propName] = config[propName];
      }
    }
  }

  // Children can be more than one argument, and those are transferred onto
  // the newly allocated props object.
  var childrenLength = arguments.length - 2;
  if (childrenLength === 1) {
    props.children = children;
  } else if (childrenLength > 1) {
    var childArray = Array(childrenLength);
    for (var i = 0; i < childrenLength; i++) {
      childArray[i] = arguments[i + 2];
    }
    props.children = childArray;
  }

  return ReactElement(element.type, key, ref, self, source, owner, props);
};

/**
 * @param {?object} object
 * @return {boolean} True if `object` is a valid component.
 * @final
 */
ReactElement.isValidElement = function (object) {
  return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
};

module.exports = ReactElement;
},{"./Object.assign":327,"./ReactCurrentOwner":338,"./canDefineProperty":404}],355:[function(require,module,exports){
/**
 * Copyright 2014-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactEmptyComponent
 */

'use strict';

var ReactElement = require('./ReactElement');
var ReactEmptyComponentRegistry = require('./ReactEmptyComponentRegistry');
var ReactReconciler = require('./ReactReconciler');

var assign = require('./Object.assign');

var placeholderElement;

var ReactEmptyComponentInjection = {
  injectEmptyComponent: function (component) {
    placeholderElement = ReactElement.createElement(component);
  }
};

function registerNullComponentID() {
  ReactEmptyComponentRegistry.registerNullComponentID(this._rootNodeID);
}

var ReactEmptyComponent = function (instantiate) {
  this._currentElement = null;
  this._rootNodeID = null;
  this._renderedComponent = instantiate(placeholderElement);
};
assign(ReactEmptyComponent.prototype, {
  construct: function (element) {},
  mountComponent: function (rootID, transaction, context) {
    transaction.getReactMountReady().enqueue(registerNullComponentID, this);
    this._rootNodeID = rootID;
    return ReactReconciler.mountComponent(this._renderedComponent, rootID, transaction, context);
  },
  receiveComponent: function () {},
  unmountComponent: function (rootID, transaction, context) {
    ReactReconciler.unmountComponent(this._renderedComponent);
    ReactEmptyComponentRegistry.deregisterNullComponentID(this._rootNodeID);
    this._rootNodeID = null;
    this._renderedComponent = null;
  }
});

ReactEmptyComponent.injection = ReactEmptyComponentInjection;

module.exports = ReactEmptyComponent;
},{"./Object.assign":327,"./ReactElement":354,"./ReactEmptyComponentRegistry":356,"./ReactReconciler":376}],356:[function(require,module,exports){
/**
 * Copyright 2014-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactEmptyComponentRegistry
 */

'use strict';

// This registry keeps track of the React IDs of the components that rendered to
// `null` (in reality a placeholder such as `noscript`)
var nullComponentIDsRegistry = {};

/**
 * @param {string} id Component's `_rootNodeID`.
 * @return {boolean} True if the component is rendered to null.
 */
function isNullComponentID(id) {
  return !!nullComponentIDsRegistry[id];
}

/**
 * Mark the component as having rendered to null.
 * @param {string} id Component's `_rootNodeID`.
 */
function registerNullComponentID(id) {
  nullComponentIDsRegistry[id] = true;
}

/**
 * Unmark the component as having rendered to null: it renders to something now.
 * @param {string} id Component's `_rootNodeID`.
 */
function deregisterNullComponentID(id) {
  delete nullComponentIDsRegistry[id];
}

var ReactEmptyComponentRegistry = {
  isNullComponentID: isNullComponentID,
  registerNullComponentID: registerNullComponentID,
  deregisterNullComponentID: deregisterNullComponentID
};

module.exports = ReactEmptyComponentRegistry;
},{}],357:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactErrorUtils
 * @typechecks
 */

'use strict';

var caughtError = null;

/**
 * Call a function while guarding against errors that happens within it.
 *
 * @param {?String} name of the guard to use for logging or debugging
 * @param {Function} func The function to invoke
 * @param {*} a First argument
 * @param {*} b Second argument
 */
function invokeGuardedCallback(name, func, a, b) {
  try {
    return func(a, b);
  } catch (x) {
    if (caughtError === null) {
      caughtError = x;
    }
    return undefined;
  }
}

var ReactErrorUtils = {
  invokeGuardedCallback: invokeGuardedCallback,

  /**
   * Invoked by ReactTestUtils.Simulate so that any errors thrown by the event
   * handler are sure to be rethrown by rethrowCaughtError.
   */
  invokeGuardedCallbackWithCatch: invokeGuardedCallback,

  /**
   * During execution of guarded functions we will capture the first error which
   * we will rethrow to be handled by the top level error handler.
   */
  rethrowCaughtError: function () {
    if (caughtError) {
      var error = caughtError;
      caughtError = null;
      throw error;
    }
  }
};

if ("production" !== 'production') {
  /**
   * To help development we can get better devtools integration by simulating a
   * real browser event.
   */
  if (typeof window !== 'undefined' && typeof window.dispatchEvent === 'function' && typeof document !== 'undefined' && typeof document.createEvent === 'function') {
    var fakeNode = document.createElement('react');
    ReactErrorUtils.invokeGuardedCallback = function (name, func, a, b) {
      var boundFunc = func.bind(null, a, b);
      var evtType = 'react-' + name;
      fakeNode.addEventListener(evtType, boundFunc, false);
      var evt = document.createEvent('Event');
      evt.initEvent(evtType, false, false);
      fakeNode.dispatchEvent(evt);
      fakeNode.removeEventListener(evtType, boundFunc, false);
    };
  }
}

module.exports = ReactErrorUtils;
},{}],358:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactEventEmitterMixin
 */

'use strict';

var EventPluginHub = require('./EventPluginHub');

function runEventQueueInBatch(events) {
  EventPluginHub.enqueueEvents(events);
  EventPluginHub.processEventQueue(false);
}

var ReactEventEmitterMixin = {

  /**
   * Streams a fired top-level event to `EventPluginHub` where plugins have the
   * opportunity to create `ReactEvent`s to be dispatched.
   *
   * @param {string} topLevelType Record from `EventConstants`.
   * @param {object} topLevelTarget The listening component root node.
   * @param {string} topLevelTargetID ID of `topLevelTarget`.
   * @param {object} nativeEvent Native environment event.
   */
  handleTopLevel: function (topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget) {
    var events = EventPluginHub.extractEvents(topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget);
    runEventQueueInBatch(events);
  }
};

module.exports = ReactEventEmitterMixin;
},{"./EventPluginHub":320}],359:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactEventListener
 * @typechecks static-only
 */

'use strict';

var EventListener = require('fbjs/lib/EventListener');
var ExecutionEnvironment = require('fbjs/lib/ExecutionEnvironment');
var PooledClass = require('./PooledClass');
var ReactInstanceHandles = require('./ReactInstanceHandles');
var ReactMount = require('./ReactMount');
var ReactUpdates = require('./ReactUpdates');

var assign = require('./Object.assign');
var getEventTarget = require('./getEventTarget');
var getUnboundedScrollPosition = require('fbjs/lib/getUnboundedScrollPosition');

var DOCUMENT_FRAGMENT_NODE_TYPE = 11;

/**
 * Finds the parent React component of `node`.
 *
 * @param {*} node
 * @return {?DOMEventTarget} Parent container, or `null` if the specified node
 *                           is not nested.
 */
function findParent(node) {
  // TODO: It may be a good idea to cache this to prevent unnecessary DOM
  // traversal, but caching is difficult to do correctly without using a
  // mutation observer to listen for all DOM changes.
  var nodeID = ReactMount.getID(node);
  var rootID = ReactInstanceHandles.getReactRootIDFromNodeID(nodeID);
  var container = ReactMount.findReactContainerForID(rootID);
  var parent = ReactMount.getFirstReactDOM(container);
  return parent;
}

// Used to store ancestor hierarchy in top level callback
function TopLevelCallbackBookKeeping(topLevelType, nativeEvent) {
  this.topLevelType = topLevelType;
  this.nativeEvent = nativeEvent;
  this.ancestors = [];
}
assign(TopLevelCallbackBookKeeping.prototype, {
  destructor: function () {
    this.topLevelType = null;
    this.nativeEvent = null;
    this.ancestors.length = 0;
  }
});
PooledClass.addPoolingTo(TopLevelCallbackBookKeeping, PooledClass.twoArgumentPooler);

function handleTopLevelImpl(bookKeeping) {
  // TODO: Re-enable event.path handling
  //
  // if (bookKeeping.nativeEvent.path && bookKeeping.nativeEvent.path.length > 1) {
  //   // New browsers have a path attribute on native events
  //   handleTopLevelWithPath(bookKeeping);
  // } else {
  //   // Legacy browsers don't have a path attribute on native events
  //   handleTopLevelWithoutPath(bookKeeping);
  // }

  void handleTopLevelWithPath; // temporarily unused
  handleTopLevelWithoutPath(bookKeeping);
}

// Legacy browsers don't have a path attribute on native events
function handleTopLevelWithoutPath(bookKeeping) {
  var topLevelTarget = ReactMount.getFirstReactDOM(getEventTarget(bookKeeping.nativeEvent)) || window;

  // Loop through the hierarchy, in case there's any nested components.
  // It's important that we build the array of ancestors before calling any
  // event handlers, because event handlers can modify the DOM, leading to
  // inconsistencies with ReactMount's node cache. See #1105.
  var ancestor = topLevelTarget;
  while (ancestor) {
    bookKeeping.ancestors.push(ancestor);
    ancestor = findParent(ancestor);
  }

  for (var i = 0; i < bookKeeping.ancestors.length; i++) {
    topLevelTarget = bookKeeping.ancestors[i];
    var topLevelTargetID = ReactMount.getID(topLevelTarget) || '';
    ReactEventListener._handleTopLevel(bookKeeping.topLevelType, topLevelTarget, topLevelTargetID, bookKeeping.nativeEvent, getEventTarget(bookKeeping.nativeEvent));
  }
}

// New browsers have a path attribute on native events
function handleTopLevelWithPath(bookKeeping) {
  var path = bookKeeping.nativeEvent.path;
  var currentNativeTarget = path[0];
  var eventsFired = 0;
  for (var i = 0; i < path.length; i++) {
    var currentPathElement = path[i];
    if (currentPathElement.nodeType === DOCUMENT_FRAGMENT_NODE_TYPE) {
      currentNativeTarget = path[i + 1];
    }
    // TODO: slow
    var reactParent = ReactMount.getFirstReactDOM(currentPathElement);
    if (reactParent === currentPathElement) {
      var currentPathElementID = ReactMount.getID(currentPathElement);
      var newRootID = ReactInstanceHandles.getReactRootIDFromNodeID(currentPathElementID);
      bookKeeping.ancestors.push(currentPathElement);

      var topLevelTargetID = ReactMount.getID(currentPathElement) || '';
      eventsFired++;
      ReactEventListener._handleTopLevel(bookKeeping.topLevelType, currentPathElement, topLevelTargetID, bookKeeping.nativeEvent, currentNativeTarget);

      // Jump to the root of this React render tree
      while (currentPathElementID !== newRootID) {
        i++;
        currentPathElement = path[i];
        currentPathElementID = ReactMount.getID(currentPathElement);
      }
    }
  }
  if (eventsFired === 0) {
    ReactEventListener._handleTopLevel(bookKeeping.topLevelType, window, '', bookKeeping.nativeEvent, getEventTarget(bookKeeping.nativeEvent));
  }
}

function scrollValueMonitor(cb) {
  var scrollPosition = getUnboundedScrollPosition(window);
  cb(scrollPosition);
}

var ReactEventListener = {
  _enabled: true,
  _handleTopLevel: null,

  WINDOW_HANDLE: ExecutionEnvironment.canUseDOM ? window : null,

  setHandleTopLevel: function (handleTopLevel) {
    ReactEventListener._handleTopLevel = handleTopLevel;
  },

  setEnabled: function (enabled) {
    ReactEventListener._enabled = !!enabled;
  },

  isEnabled: function () {
    return ReactEventListener._enabled;
  },

  /**
   * Traps top-level events by using event bubbling.
   *
   * @param {string} topLevelType Record from `EventConstants`.
   * @param {string} handlerBaseName Event name (e.g. "click").
   * @param {object} handle Element on which to attach listener.
   * @return {?object} An object with a remove function which will forcefully
   *                  remove the listener.
   * @internal
   */
  trapBubbledEvent: function (topLevelType, handlerBaseName, handle) {
    var element = handle;
    if (!element) {
      return null;
    }
    return EventListener.listen(element, handlerBaseName, ReactEventListener.dispatchEvent.bind(null, topLevelType));
  },

  /**
   * Traps a top-level event by using event capturing.
   *
   * @param {string} topLevelType Record from `EventConstants`.
   * @param {string} handlerBaseName Event name (e.g. "click").
   * @param {object} handle Element on which to attach listener.
   * @return {?object} An object with a remove function which will forcefully
   *                  remove the listener.
   * @internal
   */
  trapCapturedEvent: function (topLevelType, handlerBaseName, handle) {
    var element = handle;
    if (!element) {
      return null;
    }
    return EventListener.capture(element, handlerBaseName, ReactEventListener.dispatchEvent.bind(null, topLevelType));
  },

  monitorScrollValue: function (refresh) {
    var callback = scrollValueMonitor.bind(null, refresh);
    EventListener.listen(window, 'scroll', callback);
  },

  dispatchEvent: function (topLevelType, nativeEvent) {
    if (!ReactEventListener._enabled) {
      return;
    }

    var bookKeeping = TopLevelCallbackBookKeeping.getPooled(topLevelType, nativeEvent);
    try {
      // Event queue being processed in the same cycle allows
      // `preventDefault`.
      ReactUpdates.batchedUpdates(handleTopLevelImpl, bookKeeping);
    } finally {
      TopLevelCallbackBookKeeping.release(bookKeeping);
    }
  }
};

module.exports = ReactEventListener;
},{"./Object.assign":327,"./PooledClass":328,"./ReactInstanceHandles":362,"./ReactMount":365,"./ReactUpdates":383,"./getEventTarget":413,"fbjs/lib/EventListener":2,"fbjs/lib/ExecutionEnvironment":3,"fbjs/lib/getUnboundedScrollPosition":14}],360:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactInjection
 */

'use strict';

var DOMProperty = require('./DOMProperty');
var EventPluginHub = require('./EventPluginHub');
var ReactComponentEnvironment = require('./ReactComponentEnvironment');
var ReactClass = require('./ReactClass');
var ReactEmptyComponent = require('./ReactEmptyComponent');
var ReactBrowserEventEmitter = require('./ReactBrowserEventEmitter');
var ReactNativeComponent = require('./ReactNativeComponent');
var ReactPerf = require('./ReactPerf');
var ReactRootIndex = require('./ReactRootIndex');
var ReactUpdates = require('./ReactUpdates');

var ReactInjection = {
  Component: ReactComponentEnvironment.injection,
  Class: ReactClass.injection,
  DOMProperty: DOMProperty.injection,
  EmptyComponent: ReactEmptyComponent.injection,
  EventPluginHub: EventPluginHub.injection,
  EventEmitter: ReactBrowserEventEmitter.injection,
  NativeComponent: ReactNativeComponent.injection,
  Perf: ReactPerf.injection,
  RootIndex: ReactRootIndex.injection,
  Updates: ReactUpdates.injection
};

module.exports = ReactInjection;
},{"./DOMProperty":314,"./EventPluginHub":320,"./ReactBrowserEventEmitter":330,"./ReactClass":333,"./ReactComponentEnvironment":336,"./ReactEmptyComponent":355,"./ReactNativeComponent":368,"./ReactPerf":371,"./ReactRootIndex":378,"./ReactUpdates":383}],361:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactInputSelection
 */

'use strict';

var ReactDOMSelection = require('./ReactDOMSelection');

var containsNode = require('fbjs/lib/containsNode');
var focusNode = require('fbjs/lib/focusNode');
var getActiveElement = require('fbjs/lib/getActiveElement');

function isInDocument(node) {
  return containsNode(document.documentElement, node);
}

/**
 * @ReactInputSelection: React input selection module. Based on Selection.js,
 * but modified to be suitable for react and has a couple of bug fixes (doesn't
 * assume buttons have range selections allowed).
 * Input selection module for React.
 */
var ReactInputSelection = {

  hasSelectionCapabilities: function (elem) {
    var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
    return nodeName && (nodeName === 'input' && elem.type === 'text' || nodeName === 'textarea' || elem.contentEditable === 'true');
  },

  getSelectionInformation: function () {
    var focusedElem = getActiveElement();
    return {
      focusedElem: focusedElem,
      selectionRange: ReactInputSelection.hasSelectionCapabilities(focusedElem) ? ReactInputSelection.getSelection(focusedElem) : null
    };
  },

  /**
   * @restoreSelection: If any selection information was potentially lost,
   * restore it. This is useful when performing operations that could remove dom
   * nodes and place them back in, resulting in focus being lost.
   */
  restoreSelection: function (priorSelectionInformation) {
    var curFocusedElem = getActiveElement();
    var priorFocusedElem = priorSelectionInformation.focusedElem;
    var priorSelectionRange = priorSelectionInformation.selectionRange;
    if (curFocusedElem !== priorFocusedElem && isInDocument(priorFocusedElem)) {
      if (ReactInputSelection.hasSelectionCapabilities(priorFocusedElem)) {
        ReactInputSelection.setSelection(priorFocusedElem, priorSelectionRange);
      }
      focusNode(priorFocusedElem);
    }
  },

  /**
   * @getSelection: Gets the selection bounds of a focused textarea, input or
   * contentEditable node.
   * -@input: Look up selection bounds of this input
   * -@return {start: selectionStart, end: selectionEnd}
   */
  getSelection: function (input) {
    var selection;

    if ('selectionStart' in input) {
      // Modern browser with input or textarea.
      selection = {
        start: input.selectionStart,
        end: input.selectionEnd
      };
    } else if (document.selection && (input.nodeName && input.nodeName.toLowerCase() === 'input')) {
      // IE8 input.
      var range = document.selection.createRange();
      // There can only be one selection per document in IE, so it must
      // be in our element.
      if (range.parentElement() === input) {
        selection = {
          start: -range.moveStart('character', -input.value.length),
          end: -range.moveEnd('character', -input.value.length)
        };
      }
    } else {
      // Content editable or old IE textarea.
      selection = ReactDOMSelection.getOffsets(input);
    }

    return selection || { start: 0, end: 0 };
  },

  /**
   * @setSelection: Sets the selection bounds of a textarea or input and focuses
   * the input.
   * -@input     Set selection bounds of this input or textarea
   * -@offsets   Object of same form that is returned from get*
   */
  setSelection: function (input, offsets) {
    var start = offsets.start;
    var end = offsets.end;
    if (typeof end === 'undefined') {
      end = start;
    }

    if ('selectionStart' in input) {
      input.selectionStart = start;
      input.selectionEnd = Math.min(end, input.value.length);
    } else if (document.selection && (input.nodeName && input.nodeName.toLowerCase() === 'input')) {
      var range = input.createTextRange();
      range.collapse(true);
      range.moveStart('character', start);
      range.moveEnd('character', end - start);
      range.select();
    } else {
      ReactDOMSelection.setOffsets(input, offsets);
    }
  }
};

module.exports = ReactInputSelection;
},{"./ReactDOMSelection":346,"fbjs/lib/containsNode":6,"fbjs/lib/focusNode":11,"fbjs/lib/getActiveElement":12}],362:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactInstanceHandles
 * @typechecks static-only
 */

'use strict';

var ReactRootIndex = require('./ReactRootIndex');

var invariant = require('fbjs/lib/invariant');

var SEPARATOR = '.';
var SEPARATOR_LENGTH = SEPARATOR.length;

/**
 * Maximum depth of traversals before we consider the possibility of a bad ID.
 */
var MAX_TREE_DEPTH = 10000;

/**
 * Creates a DOM ID prefix to use when mounting React components.
 *
 * @param {number} index A unique integer
 * @return {string} React root ID.
 * @internal
 */
function getReactRootIDString(index) {
  return SEPARATOR + index.toString(36);
}

/**
 * Checks if a character in the supplied ID is a separator or the end.
 *
 * @param {string} id A React DOM ID.
 * @param {number} index Index of the character to check.
 * @return {boolean} True if the character is a separator or end of the ID.
 * @private
 */
function isBoundary(id, index) {
  return id.charAt(index) === SEPARATOR || index === id.length;
}

/**
 * Checks if the supplied string is a valid React DOM ID.
 *
 * @param {string} id A React DOM ID, maybe.
 * @return {boolean} True if the string is a valid React DOM ID.
 * @private
 */
function isValidID(id) {
  return id === '' || id.charAt(0) === SEPARATOR && id.charAt(id.length - 1) !== SEPARATOR;
}

/**
 * Checks if the first ID is an ancestor of or equal to the second ID.
 *
 * @param {string} ancestorID
 * @param {string} descendantID
 * @return {boolean} True if `ancestorID` is an ancestor of `descendantID`.
 * @internal
 */
function isAncestorIDOf(ancestorID, descendantID) {
  return descendantID.indexOf(ancestorID) === 0 && isBoundary(descendantID, ancestorID.length);
}

/**
 * Gets the parent ID of the supplied React DOM ID, `id`.
 *
 * @param {string} id ID of a component.
 * @return {string} ID of the parent, or an empty string.
 * @private
 */
function getParentID(id) {
  return id ? id.substr(0, id.lastIndexOf(SEPARATOR)) : '';
}

/**
 * Gets the next DOM ID on the tree path from the supplied `ancestorID` to the
 * supplied `destinationID`. If they are equal, the ID is returned.
 *
 * @param {string} ancestorID ID of an ancestor node of `destinationID`.
 * @param {string} destinationID ID of the destination node.
 * @return {string} Next ID on the path from `ancestorID` to `destinationID`.
 * @private
 */
function getNextDescendantID(ancestorID, destinationID) {
  !(isValidID(ancestorID) && isValidID(destinationID)) ? "production" !== 'production' ? invariant(false, 'getNextDescendantID(%s, %s): Received an invalid React DOM ID.', ancestorID, destinationID) : invariant(false) : undefined;
  !isAncestorIDOf(ancestorID, destinationID) ? "production" !== 'production' ? invariant(false, 'getNextDescendantID(...): React has made an invalid assumption about ' + 'the DOM hierarchy. Expected `%s` to be an ancestor of `%s`.', ancestorID, destinationID) : invariant(false) : undefined;
  if (ancestorID === destinationID) {
    return ancestorID;
  }
  // Skip over the ancestor and the immediate separator. Traverse until we hit
  // another separator or we reach the end of `destinationID`.
  var start = ancestorID.length + SEPARATOR_LENGTH;
  var i;
  for (i = start; i < destinationID.length; i++) {
    if (isBoundary(destinationID, i)) {
      break;
    }
  }
  return destinationID.substr(0, i);
}

/**
 * Gets the nearest common ancestor ID of two IDs.
 *
 * Using this ID scheme, the nearest common ancestor ID is the longest common
 * prefix of the two IDs that immediately preceded a "marker" in both strings.
 *
 * @param {string} oneID
 * @param {string} twoID
 * @return {string} Nearest common ancestor ID, or the empty string if none.
 * @private
 */
function getFirstCommonAncestorID(oneID, twoID) {
  var minLength = Math.min(oneID.length, twoID.length);
  if (minLength === 0) {
    return '';
  }
  var lastCommonMarkerIndex = 0;
  // Use `<=` to traverse until the "EOL" of the shorter string.
  for (var i = 0; i <= minLength; i++) {
    if (isBoundary(oneID, i) && isBoundary(twoID, i)) {
      lastCommonMarkerIndex = i;
    } else if (oneID.charAt(i) !== twoID.charAt(i)) {
      break;
    }
  }
  var longestCommonID = oneID.substr(0, lastCommonMarkerIndex);
  !isValidID(longestCommonID) ? "production" !== 'production' ? invariant(false, 'getFirstCommonAncestorID(%s, %s): Expected a valid React DOM ID: %s', oneID, twoID, longestCommonID) : invariant(false) : undefined;
  return longestCommonID;
}

/**
 * Traverses the parent path between two IDs (either up or down). The IDs must
 * not be the same, and there must exist a parent path between them. If the
 * callback returns `false`, traversal is stopped.
 *
 * @param {?string} start ID at which to start traversal.
 * @param {?string} stop ID at which to end traversal.
 * @param {function} cb Callback to invoke each ID with.
 * @param {*} arg Argument to invoke the callback with.
 * @param {?boolean} skipFirst Whether or not to skip the first node.
 * @param {?boolean} skipLast Whether or not to skip the last node.
 * @private
 */
function traverseParentPath(start, stop, cb, arg, skipFirst, skipLast) {
  start = start || '';
  stop = stop || '';
  !(start !== stop) ? "production" !== 'production' ? invariant(false, 'traverseParentPath(...): Cannot traverse from and to the same ID, `%s`.', start) : invariant(false) : undefined;
  var traverseUp = isAncestorIDOf(stop, start);
  !(traverseUp || isAncestorIDOf(start, stop)) ? "production" !== 'production' ? invariant(false, 'traverseParentPath(%s, %s, ...): Cannot traverse from two IDs that do ' + 'not have a parent path.', start, stop) : invariant(false) : undefined;
  // Traverse from `start` to `stop` one depth at a time.
  var depth = 0;
  var traverse = traverseUp ? getParentID : getNextDescendantID;
  for (var id = start;; /* until break */id = traverse(id, stop)) {
    var ret;
    if ((!skipFirst || id !== start) && (!skipLast || id !== stop)) {
      ret = cb(id, traverseUp, arg);
    }
    if (ret === false || id === stop) {
      // Only break //after// visiting `stop`.
      break;
    }
    !(depth++ < MAX_TREE_DEPTH) ? "production" !== 'production' ? invariant(false, 'traverseParentPath(%s, %s, ...): Detected an infinite loop while ' + 'traversing the React DOM ID tree. This may be due to malformed IDs: %s', start, stop, id) : invariant(false) : undefined;
  }
}

/**
 * Manages the IDs assigned to DOM representations of React components. This
 * uses a specific scheme in order to traverse the DOM efficiently (e.g. in
 * order to simulate events).
 *
 * @internal
 */
var ReactInstanceHandles = {

  /**
   * Constructs a React root ID
   * @return {string} A React root ID.
   */
  createReactRootID: function () {
    return getReactRootIDString(ReactRootIndex.createReactRootIndex());
  },

  /**
   * Constructs a React ID by joining a root ID with a name.
   *
   * @param {string} rootID Root ID of a parent component.
   * @param {string} name A component's name (as flattened children).
   * @return {string} A React ID.
   * @internal
   */
  createReactID: function (rootID, name) {
    return rootID + name;
  },

  /**
   * Gets the DOM ID of the React component that is the root of the tree that
   * contains the React component with the supplied DOM ID.
   *
   * @param {string} id DOM ID of a React component.
   * @return {?string} DOM ID of the React component that is the root.
   * @internal
   */
  getReactRootIDFromNodeID: function (id) {
    if (id && id.charAt(0) === SEPARATOR && id.length > 1) {
      var index = id.indexOf(SEPARATOR, 1);
      return index > -1 ? id.substr(0, index) : id;
    }
    return null;
  },

  /**
   * Traverses the ID hierarchy and invokes the supplied `cb` on any IDs that
   * should would receive a `mouseEnter` or `mouseLeave` event.
   *
   * NOTE: Does not invoke the callback on the nearest common ancestor because
   * nothing "entered" or "left" that element.
   *
   * @param {string} leaveID ID being left.
   * @param {string} enterID ID being entered.
   * @param {function} cb Callback to invoke on each entered/left ID.
   * @param {*} upArg Argument to invoke the callback with on left IDs.
   * @param {*} downArg Argument to invoke the callback with on entered IDs.
   * @internal
   */
  traverseEnterLeave: function (leaveID, enterID, cb, upArg, downArg) {
    var ancestorID = getFirstCommonAncestorID(leaveID, enterID);
    if (ancestorID !== leaveID) {
      traverseParentPath(leaveID, ancestorID, cb, upArg, false, true);
    }
    if (ancestorID !== enterID) {
      traverseParentPath(ancestorID, enterID, cb, downArg, true, false);
    }
  },

  /**
   * Simulates the traversal of a two-phase, capture/bubble event dispatch.
   *
   * NOTE: This traversal happens on IDs without touching the DOM.
   *
   * @param {string} targetID ID of the target node.
   * @param {function} cb Callback to invoke.
   * @param {*} arg Argument to invoke the callback with.
   * @internal
   */
  traverseTwoPhase: function (targetID, cb, arg) {
    if (targetID) {
      traverseParentPath('', targetID, cb, arg, true, false);
      traverseParentPath(targetID, '', cb, arg, false, true);
    }
  },

  /**
   * Same as `traverseTwoPhase` but skips the `targetID`.
   */
  traverseTwoPhaseSkipTarget: function (targetID, cb, arg) {
    if (targetID) {
      traverseParentPath('', targetID, cb, arg, true, true);
      traverseParentPath(targetID, '', cb, arg, true, true);
    }
  },

  /**
   * Traverse a node ID, calling the supplied `cb` for each ancestor ID. For
   * example, passing `.0.$row-0.1` would result in `cb` getting called
   * with `.0`, `.0.$row-0`, and `.0.$row-0.1`.
   *
   * NOTE: This traversal happens on IDs without touching the DOM.
   *
   * @param {string} targetID ID of the target node.
   * @param {function} cb Callback to invoke.
   * @param {*} arg Argument to invoke the callback with.
   * @internal
   */
  traverseAncestors: function (targetID, cb, arg) {
    traverseParentPath('', targetID, cb, arg, true, false);
  },

  getFirstCommonAncestorID: getFirstCommonAncestorID,

  /**
   * Exposed for unit testing.
   * @private
   */
  _getNextDescendantID: getNextDescendantID,

  isAncestorIDOf: isAncestorIDOf,

  SEPARATOR: SEPARATOR

};

module.exports = ReactInstanceHandles;
},{"./ReactRootIndex":378,"fbjs/lib/invariant":17}],363:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactInstanceMap
 */

'use strict';

/**
 * `ReactInstanceMap` maintains a mapping from a public facing stateful
 * instance (key) and the internal representation (value). This allows public
 * methods to accept the user facing instance as an argument and map them back
 * to internal methods.
 */

// TODO: Replace this with ES6: var ReactInstanceMap = new Map();
var ReactInstanceMap = {

  /**
   * This API should be called `delete` but we'd have to make sure to always
   * transform these to strings for IE support. When this transform is fully
   * supported we can rename it.
   */
  remove: function (key) {
    key._reactInternalInstance = undefined;
  },

  get: function (key) {
    return key._reactInternalInstance;
  },

  has: function (key) {
    return key._reactInternalInstance !== undefined;
  },

  set: function (key, value) {
    key._reactInternalInstance = value;
  }

};

module.exports = ReactInstanceMap;
},{}],364:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactMarkupChecksum
 */

'use strict';

var adler32 = require('./adler32');

var TAG_END = /\/?>/;

var ReactMarkupChecksum = {
  CHECKSUM_ATTR_NAME: 'data-react-checksum',

  /**
   * @param {string} markup Markup string
   * @return {string} Markup string with checksum attribute attached
   */
  addChecksumToMarkup: function (markup) {
    var checksum = adler32(markup);

    // Add checksum (handle both parent tags and self-closing tags)
    return markup.replace(TAG_END, ' ' + ReactMarkupChecksum.CHECKSUM_ATTR_NAME + '="' + checksum + '"$&');
  },

  /**
   * @param {string} markup to use
   * @param {DOMElement} element root React element
   * @returns {boolean} whether or not the markup is the same
   */
  canReuseMarkup: function (markup, element) {
    var existingChecksum = element.getAttribute(ReactMarkupChecksum.CHECKSUM_ATTR_NAME);
    existingChecksum = existingChecksum && parseInt(existingChecksum, 10);
    var markupChecksum = adler32(markup);
    return markupChecksum === existingChecksum;
  }
};

module.exports = ReactMarkupChecksum;
},{"./adler32":403}],365:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactMount
 */

'use strict';

var DOMProperty = require('./DOMProperty');
var ReactBrowserEventEmitter = require('./ReactBrowserEventEmitter');
var ReactCurrentOwner = require('./ReactCurrentOwner');
var ReactDOMFeatureFlags = require('./ReactDOMFeatureFlags');
var ReactElement = require('./ReactElement');
var ReactEmptyComponentRegistry = require('./ReactEmptyComponentRegistry');
var ReactInstanceHandles = require('./ReactInstanceHandles');
var ReactInstanceMap = require('./ReactInstanceMap');
var ReactMarkupChecksum = require('./ReactMarkupChecksum');
var ReactPerf = require('./ReactPerf');
var ReactReconciler = require('./ReactReconciler');
var ReactUpdateQueue = require('./ReactUpdateQueue');
var ReactUpdates = require('./ReactUpdates');

var assign = require('./Object.assign');
var emptyObject = require('fbjs/lib/emptyObject');
var containsNode = require('fbjs/lib/containsNode');
var instantiateReactComponent = require('./instantiateReactComponent');
var invariant = require('fbjs/lib/invariant');
var setInnerHTML = require('./setInnerHTML');
var shouldUpdateReactComponent = require('./shouldUpdateReactComponent');
var validateDOMNesting = require('./validateDOMNesting');
var warning = require('fbjs/lib/warning');

var ATTR_NAME = DOMProperty.ID_ATTRIBUTE_NAME;
var nodeCache = {};

var ELEMENT_NODE_TYPE = 1;
var DOC_NODE_TYPE = 9;
var DOCUMENT_FRAGMENT_NODE_TYPE = 11;

var ownerDocumentContextKey = '__ReactMount_ownerDocument$' + Math.random().toString(36).slice(2);

/** Mapping from reactRootID to React component instance. */
var instancesByReactRootID = {};

/** Mapping from reactRootID to `container` nodes. */
var containersByReactRootID = {};

if ("production" !== 'production') {
  /** __DEV__-only mapping from reactRootID to root elements. */
  var rootElementsByReactRootID = {};
}

// Used to store breadth-first search state in findComponentRoot.
var findComponentRootReusableArray = [];

/**
 * Finds the index of the first character
 * that's not common between the two given strings.
 *
 * @return {number} the index of the character where the strings diverge
 */
function firstDifferenceIndex(string1, string2) {
  var minLen = Math.min(string1.length, string2.length);
  for (var i = 0; i < minLen; i++) {
    if (string1.charAt(i) !== string2.charAt(i)) {
      return i;
    }
  }
  return string1.length === string2.length ? -1 : minLen;
}

/**
 * @param {DOMElement|DOMDocument} container DOM element that may contain
 * a React component
 * @return {?*} DOM element that may have the reactRoot ID, or null.
 */
function getReactRootElementInContainer(container) {
  if (!container) {
    return null;
  }

  if (container.nodeType === DOC_NODE_TYPE) {
    return container.documentElement;
  } else {
    return container.firstChild;
  }
}

/**
 * @param {DOMElement} container DOM element that may contain a React component.
 * @return {?string} A "reactRoot" ID, if a React component is rendered.
 */
function getReactRootID(container) {
  var rootElement = getReactRootElementInContainer(container);
  return rootElement && ReactMount.getID(rootElement);
}

/**
 * Accessing node[ATTR_NAME] or calling getAttribute(ATTR_NAME) on a form
 * element can return its control whose name or ID equals ATTR_NAME. All
 * DOM nodes support `getAttributeNode` but this can also get called on
 * other objects so just return '' if we're given something other than a
 * DOM node (such as window).
 *
 * @param {?DOMElement|DOMWindow|DOMDocument|DOMTextNode} node DOM node.
 * @return {string} ID of the supplied `domNode`.
 */
function getID(node) {
  var id = internalGetID(node);
  if (id) {
    if (nodeCache.hasOwnProperty(id)) {
      var cached = nodeCache[id];
      if (cached !== node) {
        !!isValid(cached, id) ? "production" !== 'production' ? invariant(false, 'ReactMount: Two valid but unequal nodes with the same `%s`: %s', ATTR_NAME, id) : invariant(false) : undefined;

        nodeCache[id] = node;
      }
    } else {
      nodeCache[id] = node;
    }
  }

  return id;
}

function internalGetID(node) {
  // If node is something like a window, document, or text node, none of
  // which support attributes or a .getAttribute method, gracefully return
  // the empty string, as if the attribute were missing.
  return node && node.getAttribute && node.getAttribute(ATTR_NAME) || '';
}

/**
 * Sets the React-specific ID of the given node.
 *
 * @param {DOMElement} node The DOM node whose ID will be set.
 * @param {string} id The value of the ID attribute.
 */
function setID(node, id) {
  var oldID = internalGetID(node);
  if (oldID !== id) {
    delete nodeCache[oldID];
  }
  node.setAttribute(ATTR_NAME, id);
  nodeCache[id] = node;
}

/**
 * Finds the node with the supplied React-generated DOM ID.
 *
 * @param {string} id A React-generated DOM ID.
 * @return {DOMElement} DOM node with the suppled `id`.
 * @internal
 */
function getNode(id) {
  if (!nodeCache.hasOwnProperty(id) || !isValid(nodeCache[id], id)) {
    nodeCache[id] = ReactMount.findReactNodeByID(id);
  }
  return nodeCache[id];
}

/**
 * Finds the node with the supplied public React instance.
 *
 * @param {*} instance A public React instance.
 * @return {?DOMElement} DOM node with the suppled `id`.
 * @internal
 */
function getNodeFromInstance(instance) {
  var id = ReactInstanceMap.get(instance)._rootNodeID;
  if (ReactEmptyComponentRegistry.isNullComponentID(id)) {
    return null;
  }
  if (!nodeCache.hasOwnProperty(id) || !isValid(nodeCache[id], id)) {
    nodeCache[id] = ReactMount.findReactNodeByID(id);
  }
  return nodeCache[id];
}

/**
 * A node is "valid" if it is contained by a currently mounted container.
 *
 * This means that the node does not have to be contained by a document in
 * order to be considered valid.
 *
 * @param {?DOMElement} node The candidate DOM node.
 * @param {string} id The expected ID of the node.
 * @return {boolean} Whether the node is contained by a mounted container.
 */
function isValid(node, id) {
  if (node) {
    !(internalGetID(node) === id) ? "production" !== 'production' ? invariant(false, 'ReactMount: Unexpected modification of `%s`', ATTR_NAME) : invariant(false) : undefined;

    var container = ReactMount.findReactContainerForID(id);
    if (container && containsNode(container, node)) {
      return true;
    }
  }

  return false;
}

/**
 * Causes the cache to forget about one React-specific ID.
 *
 * @param {string} id The ID to forget.
 */
function purgeID(id) {
  delete nodeCache[id];
}

var deepestNodeSoFar = null;
function findDeepestCachedAncestorImpl(ancestorID) {
  var ancestor = nodeCache[ancestorID];
  if (ancestor && isValid(ancestor, ancestorID)) {
    deepestNodeSoFar = ancestor;
  } else {
    // This node isn't populated in the cache, so presumably none of its
    // descendants are. Break out of the loop.
    return false;
  }
}

/**
 * Return the deepest cached node whose ID is a prefix of `targetID`.
 */
function findDeepestCachedAncestor(targetID) {
  deepestNodeSoFar = null;
  ReactInstanceHandles.traverseAncestors(targetID, findDeepestCachedAncestorImpl);

  var foundNode = deepestNodeSoFar;
  deepestNodeSoFar = null;
  return foundNode;
}

/**
 * Mounts this component and inserts it into the DOM.
 *
 * @param {ReactComponent} componentInstance The instance to mount.
 * @param {string} rootID DOM ID of the root node.
 * @param {DOMElement} container DOM element to mount into.
 * @param {ReactReconcileTransaction} transaction
 * @param {boolean} shouldReuseMarkup If true, do not insert markup
 */
function mountComponentIntoNode(componentInstance, rootID, container, transaction, shouldReuseMarkup, context) {
  if (ReactDOMFeatureFlags.useCreateElement) {
    context = assign({}, context);
    if (container.nodeType === DOC_NODE_TYPE) {
      context[ownerDocumentContextKey] = container;
    } else {
      context[ownerDocumentContextKey] = container.ownerDocument;
    }
  }
  if ("production" !== 'production') {
    if (context === emptyObject) {
      context = {};
    }
    var tag = container.nodeName.toLowerCase();
    context[validateDOMNesting.ancestorInfoContextKey] = validateDOMNesting.updatedAncestorInfo(null, tag, null);
  }
  var markup = ReactReconciler.mountComponent(componentInstance, rootID, transaction, context);
  componentInstance._renderedComponent._topLevelWrapper = componentInstance;
  ReactMount._mountImageIntoNode(markup, container, shouldReuseMarkup, transaction);
}

/**
 * Batched mount.
 *
 * @param {ReactComponent} componentInstance The instance to mount.
 * @param {string} rootID DOM ID of the root node.
 * @param {DOMElement} container DOM element to mount into.
 * @param {boolean} shouldReuseMarkup If true, do not insert markup
 */
function batchedMountComponentIntoNode(componentInstance, rootID, container, shouldReuseMarkup, context) {
  var transaction = ReactUpdates.ReactReconcileTransaction.getPooled(
  /* forceHTML */shouldReuseMarkup);
  transaction.perform(mountComponentIntoNode, null, componentInstance, rootID, container, transaction, shouldReuseMarkup, context);
  ReactUpdates.ReactReconcileTransaction.release(transaction);
}

/**
 * Unmounts a component and removes it from the DOM.
 *
 * @param {ReactComponent} instance React component instance.
 * @param {DOMElement} container DOM element to unmount from.
 * @final
 * @internal
 * @see {ReactMount.unmountComponentAtNode}
 */
function unmountComponentFromNode(instance, container) {
  ReactReconciler.unmountComponent(instance);

  if (container.nodeType === DOC_NODE_TYPE) {
    container = container.documentElement;
  }

  // http://jsperf.com/emptying-a-node
  while (container.lastChild) {
    container.removeChild(container.lastChild);
  }
}

/**
 * True if the supplied DOM node has a direct React-rendered child that is
 * not a React root element. Useful for warning in `render`,
 * `unmountComponentAtNode`, etc.
 *
 * @param {?DOMElement} node The candidate DOM node.
 * @return {boolean} True if the DOM element contains a direct child that was
 * rendered by React but is not a root element.
 * @internal
 */
function hasNonRootReactChild(node) {
  var reactRootID = getReactRootID(node);
  return reactRootID ? reactRootID !== ReactInstanceHandles.getReactRootIDFromNodeID(reactRootID) : false;
}

/**
 * Returns the first (deepest) ancestor of a node which is rendered by this copy
 * of React.
 */
function findFirstReactDOMImpl(node) {
  // This node might be from another React instance, so we make sure not to
  // examine the node cache here
  for (; node && node.parentNode !== node; node = node.parentNode) {
    if (node.nodeType !== 1) {
      // Not a DOMElement, therefore not a React component
      continue;
    }
    var nodeID = internalGetID(node);
    if (!nodeID) {
      continue;
    }
    var reactRootID = ReactInstanceHandles.getReactRootIDFromNodeID(nodeID);

    // If containersByReactRootID contains the container we find by crawling up
    // the tree, we know that this instance of React rendered the node.
    // nb. isValid's strategy (with containsNode) does not work because render
    // trees may be nested and we don't want a false positive in that case.
    var current = node;
    var lastID;
    do {
      lastID = internalGetID(current);
      current = current.parentNode;
      if (current == null) {
        // The passed-in node has been detached from the container it was
        // originally rendered into.
        return null;
      }
    } while (lastID !== reactRootID);

    if (current === containersByReactRootID[reactRootID]) {
      return node;
    }
  }
  return null;
}

/**
 * Temporary (?) hack so that we can store all top-level pending updates on
 * composites instead of having to worry about different types of components
 * here.
 */
var TopLevelWrapper = function () {};
TopLevelWrapper.prototype.isReactComponent = {};
if ("production" !== 'production') {
  TopLevelWrapper.displayName = 'TopLevelWrapper';
}
TopLevelWrapper.prototype.render = function () {
  // this.props is actually a ReactElement
  return this.props;
};

/**
 * Mounting is the process of initializing a React component by creating its
 * representative DOM elements and inserting them into a supplied `container`.
 * Any prior content inside `container` is destroyed in the process.
 *
 *   ReactMount.render(
 *     component,
 *     document.getElementById('container')
 *   );
 *
 *   <div id="container">                   <-- Supplied `container`.
 *     <div data-reactid=".3">              <-- Rendered reactRoot of React
 *       // ...                                 component.
 *     </div>
 *   </div>
 *
 * Inside of `container`, the first element rendered is the "reactRoot".
 */
var ReactMount = {

  TopLevelWrapper: TopLevelWrapper,

  /** Exposed for debugging purposes **/
  _instancesByReactRootID: instancesByReactRootID,

  /**
   * This is a hook provided to support rendering React components while
   * ensuring that the apparent scroll position of its `container` does not
   * change.
   *
   * @param {DOMElement} container The `container` being rendered into.
   * @param {function} renderCallback This must be called once to do the render.
   */
  scrollMonitor: function (container, renderCallback) {
    renderCallback();
  },

  /**
   * Take a component that's already mounted into the DOM and replace its props
   * @param {ReactComponent} prevComponent component instance already in the DOM
   * @param {ReactElement} nextElement component instance to render
   * @param {DOMElement} container container to render into
   * @param {?function} callback function triggered on completion
   */
  _updateRootComponent: function (prevComponent, nextElement, container, callback) {
    ReactMount.scrollMonitor(container, function () {
      ReactUpdateQueue.enqueueElementInternal(prevComponent, nextElement);
      if (callback) {
        ReactUpdateQueue.enqueueCallbackInternal(prevComponent, callback);
      }
    });

    if ("production" !== 'production') {
      // Record the root element in case it later gets transplanted.
      rootElementsByReactRootID[getReactRootID(container)] = getReactRootElementInContainer(container);
    }

    return prevComponent;
  },

  /**
   * Register a component into the instance map and starts scroll value
   * monitoring
   * @param {ReactComponent} nextComponent component instance to render
   * @param {DOMElement} container container to render into
   * @return {string} reactRoot ID prefix
   */
  _registerComponent: function (nextComponent, container) {
    !(container && (container.nodeType === ELEMENT_NODE_TYPE || container.nodeType === DOC_NODE_TYPE || container.nodeType === DOCUMENT_FRAGMENT_NODE_TYPE)) ? "production" !== 'production' ? invariant(false, '_registerComponent(...): Target container is not a DOM element.') : invariant(false) : undefined;

    ReactBrowserEventEmitter.ensureScrollValueMonitoring();

    var reactRootID = ReactMount.registerContainer(container);
    instancesByReactRootID[reactRootID] = nextComponent;
    return reactRootID;
  },

  /**
   * Render a new component into the DOM.
   * @param {ReactElement} nextElement element to render
   * @param {DOMElement} container container to render into
   * @param {boolean} shouldReuseMarkup if we should skip the markup insertion
   * @return {ReactComponent} nextComponent
   */
  _renderNewRootComponent: function (nextElement, container, shouldReuseMarkup, context) {
    // Various parts of our code (such as ReactCompositeComponent's
    // _renderValidatedComponent) assume that calls to render aren't nested;
    // verify that that's the case.
    "production" !== 'production' ? warning(ReactCurrentOwner.current == null, '_renderNewRootComponent(): Render methods should be a pure function ' + 'of props and state; triggering nested component updates from ' + 'render is not allowed. If necessary, trigger nested updates in ' + 'componentDidUpdate. Check the render method of %s.', ReactCurrentOwner.current && ReactCurrentOwner.current.getName() || 'ReactCompositeComponent') : undefined;

    var componentInstance = instantiateReactComponent(nextElement, null);
    var reactRootID = ReactMount._registerComponent(componentInstance, container);

    // The initial render is synchronous but any updates that happen during
    // rendering, in componentWillMount or componentDidMount, will be batched
    // according to the current batching strategy.

    ReactUpdates.batchedUpdates(batchedMountComponentIntoNode, componentInstance, reactRootID, container, shouldReuseMarkup, context);

    if ("production" !== 'production') {
      // Record the root element in case it later gets transplanted.
      rootElementsByReactRootID[reactRootID] = getReactRootElementInContainer(container);
    }

    return componentInstance;
  },

  /**
   * Renders a React component into the DOM in the supplied `container`.
   *
   * If the React component was previously rendered into `container`, this will
   * perform an update on it and only mutate the DOM as necessary to reflect the
   * latest React component.
   *
   * @param {ReactComponent} parentComponent The conceptual parent of this render tree.
   * @param {ReactElement} nextElement Component element to render.
   * @param {DOMElement} container DOM element to render into.
   * @param {?function} callback function triggered on completion
   * @return {ReactComponent} Component instance rendered in `container`.
   */
  renderSubtreeIntoContainer: function (parentComponent, nextElement, container, callback) {
    !(parentComponent != null && parentComponent._reactInternalInstance != null) ? "production" !== 'production' ? invariant(false, 'parentComponent must be a valid React Component') : invariant(false) : undefined;
    return ReactMount._renderSubtreeIntoContainer(parentComponent, nextElement, container, callback);
  },

  _renderSubtreeIntoContainer: function (parentComponent, nextElement, container, callback) {
    !ReactElement.isValidElement(nextElement) ? "production" !== 'production' ? invariant(false, 'ReactDOM.render(): Invalid component element.%s', typeof nextElement === 'string' ? ' Instead of passing an element string, make sure to instantiate ' + 'it by passing it to React.createElement.' : typeof nextElement === 'function' ? ' Instead of passing a component class, make sure to instantiate ' + 'it by passing it to React.createElement.' :
    // Check if it quacks like an element
    nextElement != null && nextElement.props !== undefined ? ' This may be caused by unintentionally loading two independent ' + 'copies of React.' : '') : invariant(false) : undefined;

    "production" !== 'production' ? warning(!container || !container.tagName || container.tagName.toUpperCase() !== 'BODY', 'render(): Rendering components directly into document.body is ' + 'discouraged, since its children are often manipulated by third-party ' + 'scripts and browser extensions. This may lead to subtle ' + 'reconciliation issues. Try rendering into a container element created ' + 'for your app.') : undefined;

    var nextWrappedElement = new ReactElement(TopLevelWrapper, null, null, null, null, null, nextElement);

    var prevComponent = instancesByReactRootID[getReactRootID(container)];

    if (prevComponent) {
      var prevWrappedElement = prevComponent._currentElement;
      var prevElement = prevWrappedElement.props;
      if (shouldUpdateReactComponent(prevElement, nextElement)) {
        var publicInst = prevComponent._renderedComponent.getPublicInstance();
        var updatedCallback = callback && function () {
          callback.call(publicInst);
        };
        ReactMount._updateRootComponent(prevComponent, nextWrappedElement, container, updatedCallback);
        return publicInst;
      } else {
        ReactMount.unmountComponentAtNode(container);
      }
    }

    var reactRootElement = getReactRootElementInContainer(container);
    var containerHasReactMarkup = reactRootElement && !!internalGetID(reactRootElement);
    var containerHasNonRootReactChild = hasNonRootReactChild(container);

    if ("production" !== 'production') {
      "production" !== 'production' ? warning(!containerHasNonRootReactChild, 'render(...): Replacing React-rendered children with a new root ' + 'component. If you intended to update the children of this node, ' + 'you should instead have the existing children update their state ' + 'and render the new components instead of calling ReactDOM.render.') : undefined;

      if (!containerHasReactMarkup || reactRootElement.nextSibling) {
        var rootElementSibling = reactRootElement;
        while (rootElementSibling) {
          if (internalGetID(rootElementSibling)) {
            "production" !== 'production' ? warning(false, 'render(): Target node has markup rendered by React, but there ' + 'are unrelated nodes as well. This is most commonly caused by ' + 'white-space inserted around server-rendered markup.') : undefined;
            break;
          }
          rootElementSibling = rootElementSibling.nextSibling;
        }
      }
    }

    var shouldReuseMarkup = containerHasReactMarkup && !prevComponent && !containerHasNonRootReactChild;
    var component = ReactMount._renderNewRootComponent(nextWrappedElement, container, shouldReuseMarkup, parentComponent != null ? parentComponent._reactInternalInstance._processChildContext(parentComponent._reactInternalInstance._context) : emptyObject)._renderedComponent.getPublicInstance();
    if (callback) {
      callback.call(component);
    }
    return component;
  },

  /**
   * Renders a React component into the DOM in the supplied `container`.
   *
   * If the React component was previously rendered into `container`, this will
   * perform an update on it and only mutate the DOM as necessary to reflect the
   * latest React component.
   *
   * @param {ReactElement} nextElement Component element to render.
   * @param {DOMElement} container DOM element to render into.
   * @param {?function} callback function triggered on completion
   * @return {ReactComponent} Component instance rendered in `container`.
   */
  render: function (nextElement, container, callback) {
    return ReactMount._renderSubtreeIntoContainer(null, nextElement, container, callback);
  },

  /**
   * Registers a container node into which React components will be rendered.
   * This also creates the "reactRoot" ID that will be assigned to the element
   * rendered within.
   *
   * @param {DOMElement} container DOM element to register as a container.
   * @return {string} The "reactRoot" ID of elements rendered within.
   */
  registerContainer: function (container) {
    var reactRootID = getReactRootID(container);
    if (reactRootID) {
      // If one exists, make sure it is a valid "reactRoot" ID.
      reactRootID = ReactInstanceHandles.getReactRootIDFromNodeID(reactRootID);
    }
    if (!reactRootID) {
      // No valid "reactRoot" ID found, create one.
      reactRootID = ReactInstanceHandles.createReactRootID();
    }
    containersByReactRootID[reactRootID] = container;
    return reactRootID;
  },

  /**
   * Unmounts and destroys the React component rendered in the `container`.
   *
   * @param {DOMElement} container DOM element containing a React component.
   * @return {boolean} True if a component was found in and unmounted from
   *                   `container`
   */
  unmountComponentAtNode: function (container) {
    // Various parts of our code (such as ReactCompositeComponent's
    // _renderValidatedComponent) assume that calls to render aren't nested;
    // verify that that's the case. (Strictly speaking, unmounting won't cause a
    // render but we still don't expect to be in a render call here.)
    "production" !== 'production' ? warning(ReactCurrentOwner.current == null, 'unmountComponentAtNode(): Render methods should be a pure function ' + 'of props and state; triggering nested component updates from render ' + 'is not allowed. If necessary, trigger nested updates in ' + 'componentDidUpdate. Check the render method of %s.', ReactCurrentOwner.current && ReactCurrentOwner.current.getName() || 'ReactCompositeComponent') : undefined;

    !(container && (container.nodeType === ELEMENT_NODE_TYPE || container.nodeType === DOC_NODE_TYPE || container.nodeType === DOCUMENT_FRAGMENT_NODE_TYPE)) ? "production" !== 'production' ? invariant(false, 'unmountComponentAtNode(...): Target container is not a DOM element.') : invariant(false) : undefined;

    var reactRootID = getReactRootID(container);
    var component = instancesByReactRootID[reactRootID];
    if (!component) {
      // Check if the node being unmounted was rendered by React, but isn't a
      // root node.
      var containerHasNonRootReactChild = hasNonRootReactChild(container);

      // Check if the container itself is a React root node.
      var containerID = internalGetID(container);
      var isContainerReactRoot = containerID && containerID === ReactInstanceHandles.getReactRootIDFromNodeID(containerID);

      if ("production" !== 'production') {
        "production" !== 'production' ? warning(!containerHasNonRootReactChild, 'unmountComponentAtNode(): The node you\'re attempting to unmount ' + 'was rendered by React and is not a top-level container. %s', isContainerReactRoot ? 'You may have accidentally passed in a React root node instead ' + 'of its container.' : 'Instead, have the parent component update its state and ' + 'rerender in order to remove this component.') : undefined;
      }

      return false;
    }
    ReactUpdates.batchedUpdates(unmountComponentFromNode, component, container);
    delete instancesByReactRootID[reactRootID];
    delete containersByReactRootID[reactRootID];
    if ("production" !== 'production') {
      delete rootElementsByReactRootID[reactRootID];
    }
    return true;
  },

  /**
   * Finds the container DOM element that contains React component to which the
   * supplied DOM `id` belongs.
   *
   * @param {string} id The ID of an element rendered by a React component.
   * @return {?DOMElement} DOM element that contains the `id`.
   */
  findReactContainerForID: function (id) {
    var reactRootID = ReactInstanceHandles.getReactRootIDFromNodeID(id);
    var container = containersByReactRootID[reactRootID];

    if ("production" !== 'production') {
      var rootElement = rootElementsByReactRootID[reactRootID];
      if (rootElement && rootElement.parentNode !== container) {
        "production" !== 'production' ? warning(
        // Call internalGetID here because getID calls isValid which calls
        // findReactContainerForID (this function).
        internalGetID(rootElement) === reactRootID, 'ReactMount: Root element ID differed from reactRootID.') : undefined;
        var containerChild = container.firstChild;
        if (containerChild && reactRootID === internalGetID(containerChild)) {
          // If the container has a new child with the same ID as the old
          // root element, then rootElementsByReactRootID[reactRootID] is
          // just stale and needs to be updated. The case that deserves a
          // warning is when the container is empty.
          rootElementsByReactRootID[reactRootID] = containerChild;
        } else {
          "production" !== 'production' ? warning(false, 'ReactMount: Root element has been removed from its original ' + 'container. New container: %s', rootElement.parentNode) : undefined;
        }
      }
    }

    return container;
  },

  /**
   * Finds an element rendered by React with the supplied ID.
   *
   * @param {string} id ID of a DOM node in the React component.
   * @return {DOMElement} Root DOM node of the React component.
   */
  findReactNodeByID: function (id) {
    var reactRoot = ReactMount.findReactContainerForID(id);
    return ReactMount.findComponentRoot(reactRoot, id);
  },

  /**
   * Traverses up the ancestors of the supplied node to find a node that is a
   * DOM representation of a React component rendered by this copy of React.
   *
   * @param {*} node
   * @return {?DOMEventTarget}
   * @internal
   */
  getFirstReactDOM: function (node) {
    return findFirstReactDOMImpl(node);
  },

  /**
   * Finds a node with the supplied `targetID` inside of the supplied
   * `ancestorNode`.  Exploits the ID naming scheme to perform the search
   * quickly.
   *
   * @param {DOMEventTarget} ancestorNode Search from this root.
   * @pararm {string} targetID ID of the DOM representation of the component.
   * @return {DOMEventTarget} DOM node with the supplied `targetID`.
   * @internal
   */
  findComponentRoot: function (ancestorNode, targetID) {
    var firstChildren = findComponentRootReusableArray;
    var childIndex = 0;

    var deepestAncestor = findDeepestCachedAncestor(targetID) || ancestorNode;

    if ("production" !== 'production') {
      // This will throw on the next line; give an early warning
      "production" !== 'production' ? warning(deepestAncestor != null, 'React can\'t find the root component node for data-reactid value ' + '`%s`. If you\'re seeing this message, it probably means that ' + 'you\'ve loaded two copies of React on the page. At this time, only ' + 'a single copy of React can be loaded at a time.', targetID) : undefined;
    }

    firstChildren[0] = deepestAncestor.firstChild;
    firstChildren.length = 1;

    while (childIndex < firstChildren.length) {
      var child = firstChildren[childIndex++];
      var targetChild;

      while (child) {
        var childID = ReactMount.getID(child);
        if (childID) {
          // Even if we find the node we're looking for, we finish looping
          // through its siblings to ensure they're cached so that we don't have
          // to revisit this node again. Otherwise, we make n^2 calls to getID
          // when visiting the many children of a single node in order.

          if (targetID === childID) {
            targetChild = child;
          } else if (ReactInstanceHandles.isAncestorIDOf(childID, targetID)) {
            // If we find a child whose ID is an ancestor of the given ID,
            // then we can be sure that we only want to search the subtree
            // rooted at this child, so we can throw out the rest of the
            // search state.
            firstChildren.length = childIndex = 0;
            firstChildren.push(child.firstChild);
          }
        } else {
          // If this child had no ID, then there's a chance that it was
          // injected automatically by the browser, as when a `<table>`
          // element sprouts an extra `<tbody>` child as a side effect of
          // `.innerHTML` parsing. Optimistically continue down this
          // branch, but not before examining the other siblings.
          firstChildren.push(child.firstChild);
        }

        child = child.nextSibling;
      }

      if (targetChild) {
        // Emptying firstChildren/findComponentRootReusableArray is
        // not necessary for correctness, but it helps the GC reclaim
        // any nodes that were left at the end of the search.
        firstChildren.length = 0;

        return targetChild;
      }
    }

    firstChildren.length = 0;

    !false ? "production" !== 'production' ? invariant(false, 'findComponentRoot(..., %s): Unable to find element. This probably ' + 'means the DOM was unexpectedly mutated (e.g., by the browser), ' + 'usually due to forgetting a <tbody> when using tables, nesting tags ' + 'like <form>, <p>, or <a>, or using non-SVG elements in an <svg> ' + 'parent. ' + 'Try inspecting the child nodes of the element with React ID `%s`.', targetID, ReactMount.getID(ancestorNode)) : invariant(false) : undefined;
  },

  _mountImageIntoNode: function (markup, container, shouldReuseMarkup, transaction) {
    !(container && (container.nodeType === ELEMENT_NODE_TYPE || container.nodeType === DOC_NODE_TYPE || container.nodeType === DOCUMENT_FRAGMENT_NODE_TYPE)) ? "production" !== 'production' ? invariant(false, 'mountComponentIntoNode(...): Target container is not valid.') : invariant(false) : undefined;

    if (shouldReuseMarkup) {
      var rootElement = getReactRootElementInContainer(container);
      if (ReactMarkupChecksum.canReuseMarkup(markup, rootElement)) {
        return;
      } else {
        var checksum = rootElement.getAttribute(ReactMarkupChecksum.CHECKSUM_ATTR_NAME);
        rootElement.removeAttribute(ReactMarkupChecksum.CHECKSUM_ATTR_NAME);

        var rootMarkup = rootElement.outerHTML;
        rootElement.setAttribute(ReactMarkupChecksum.CHECKSUM_ATTR_NAME, checksum);

        var normalizedMarkup = markup;
        if ("production" !== 'production') {
          // because rootMarkup is retrieved from the DOM, various normalizations
          // will have occurred which will not be present in `markup`. Here,
          // insert markup into a <div> or <iframe> depending on the container
          // type to perform the same normalizations before comparing.
          var normalizer;
          if (container.nodeType === ELEMENT_NODE_TYPE) {
            normalizer = document.createElement('div');
            normalizer.innerHTML = markup;
            normalizedMarkup = normalizer.innerHTML;
          } else {
            normalizer = document.createElement('iframe');
            document.body.appendChild(normalizer);
            normalizer.contentDocument.write(markup);
            normalizedMarkup = normalizer.contentDocument.documentElement.outerHTML;
            document.body.removeChild(normalizer);
          }
        }

        var diffIndex = firstDifferenceIndex(normalizedMarkup, rootMarkup);
        var difference = ' (client) ' + normalizedMarkup.substring(diffIndex - 20, diffIndex + 20) + '\n (server) ' + rootMarkup.substring(diffIndex - 20, diffIndex + 20);

        !(container.nodeType !== DOC_NODE_TYPE) ? "production" !== 'production' ? invariant(false, 'You\'re trying to render a component to the document using ' + 'server rendering but the checksum was invalid. This usually ' + 'means you rendered a different component type or props on ' + 'the client from the one on the server, or your render() ' + 'methods are impure. React cannot handle this case due to ' + 'cross-browser quirks by rendering at the document root. You ' + 'should look for environment dependent code in your components ' + 'and ensure the props are the same client and server side:\n%s', difference) : invariant(false) : undefined;

        if ("production" !== 'production') {
          "production" !== 'production' ? warning(false, 'React attempted to reuse markup in a container but the ' + 'checksum was invalid. This generally means that you are ' + 'using server rendering and the markup generated on the ' + 'server was not what the client was expecting. React injected ' + 'new markup to compensate which works but you have lost many ' + 'of the benefits of server rendering. Instead, figure out ' + 'why the markup being generated is different on the client ' + 'or server:\n%s', difference) : undefined;
        }
      }
    }

    !(container.nodeType !== DOC_NODE_TYPE) ? "production" !== 'production' ? invariant(false, 'You\'re trying to render a component to the document but ' + 'you didn\'t use server rendering. We can\'t do this ' + 'without using server rendering due to cross-browser quirks. ' + 'See ReactDOMServer.renderToString() for server rendering.') : invariant(false) : undefined;

    if (transaction.useCreateElement) {
      while (container.lastChild) {
        container.removeChild(container.lastChild);
      }
      container.appendChild(markup);
    } else {
      setInnerHTML(container, markup);
    }
  },

  ownerDocumentContextKey: ownerDocumentContextKey,

  /**
   * React ID utilities.
   */

  getReactRootID: getReactRootID,

  getID: getID,

  setID: setID,

  getNode: getNode,

  getNodeFromInstance: getNodeFromInstance,

  isValid: isValid,

  purgeID: purgeID
};

ReactPerf.measureMethods(ReactMount, 'ReactMount', {
  _renderNewRootComponent: '_renderNewRootComponent',
  _mountImageIntoNode: '_mountImageIntoNode'
});

module.exports = ReactMount;
},{"./DOMProperty":314,"./Object.assign":327,"./ReactBrowserEventEmitter":330,"./ReactCurrentOwner":338,"./ReactDOMFeatureFlags":341,"./ReactElement":354,"./ReactEmptyComponentRegistry":356,"./ReactInstanceHandles":362,"./ReactInstanceMap":363,"./ReactMarkupChecksum":364,"./ReactPerf":371,"./ReactReconciler":376,"./ReactUpdateQueue":382,"./ReactUpdates":383,"./instantiateReactComponent":417,"./setInnerHTML":421,"./shouldUpdateReactComponent":423,"./validateDOMNesting":425,"fbjs/lib/containsNode":6,"fbjs/lib/emptyObject":10,"fbjs/lib/invariant":17,"fbjs/lib/warning":27}],366:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactMultiChild
 * @typechecks static-only
 */

'use strict';

var ReactComponentEnvironment = require('./ReactComponentEnvironment');
var ReactMultiChildUpdateTypes = require('./ReactMultiChildUpdateTypes');

var ReactCurrentOwner = require('./ReactCurrentOwner');
var ReactReconciler = require('./ReactReconciler');
var ReactChildReconciler = require('./ReactChildReconciler');

var flattenChildren = require('./flattenChildren');

/**
 * Updating children of a component may trigger recursive updates. The depth is
 * used to batch recursive updates to render markup more efficiently.
 *
 * @type {number}
 * @private
 */
var updateDepth = 0;

/**
 * Queue of update configuration objects.
 *
 * Each object has a `type` property that is in `ReactMultiChildUpdateTypes`.
 *
 * @type {array<object>}
 * @private
 */
var updateQueue = [];

/**
 * Queue of markup to be rendered.
 *
 * @type {array<string>}
 * @private
 */
var markupQueue = [];

/**
 * Enqueues markup to be rendered and inserted at a supplied index.
 *
 * @param {string} parentID ID of the parent component.
 * @param {string} markup Markup that renders into an element.
 * @param {number} toIndex Destination index.
 * @private
 */
function enqueueInsertMarkup(parentID, markup, toIndex) {
  // NOTE: Null values reduce hidden classes.
  updateQueue.push({
    parentID: parentID,
    parentNode: null,
    type: ReactMultiChildUpdateTypes.INSERT_MARKUP,
    markupIndex: markupQueue.push(markup) - 1,
    content: null,
    fromIndex: null,
    toIndex: toIndex
  });
}

/**
 * Enqueues moving an existing element to another index.
 *
 * @param {string} parentID ID of the parent component.
 * @param {number} fromIndex Source index of the existing element.
 * @param {number} toIndex Destination index of the element.
 * @private
 */
function enqueueMove(parentID, fromIndex, toIndex) {
  // NOTE: Null values reduce hidden classes.
  updateQueue.push({
    parentID: parentID,
    parentNode: null,
    type: ReactMultiChildUpdateTypes.MOVE_EXISTING,
    markupIndex: null,
    content: null,
    fromIndex: fromIndex,
    toIndex: toIndex
  });
}

/**
 * Enqueues removing an element at an index.
 *
 * @param {string} parentID ID of the parent component.
 * @param {number} fromIndex Index of the element to remove.
 * @private
 */
function enqueueRemove(parentID, fromIndex) {
  // NOTE: Null values reduce hidden classes.
  updateQueue.push({
    parentID: parentID,
    parentNode: null,
    type: ReactMultiChildUpdateTypes.REMOVE_NODE,
    markupIndex: null,
    content: null,
    fromIndex: fromIndex,
    toIndex: null
  });
}

/**
 * Enqueues setting the markup of a node.
 *
 * @param {string} parentID ID of the parent component.
 * @param {string} markup Markup that renders into an element.
 * @private
 */
function enqueueSetMarkup(parentID, markup) {
  // NOTE: Null values reduce hidden classes.
  updateQueue.push({
    parentID: parentID,
    parentNode: null,
    type: ReactMultiChildUpdateTypes.SET_MARKUP,
    markupIndex: null,
    content: markup,
    fromIndex: null,
    toIndex: null
  });
}

/**
 * Enqueues setting the text content.
 *
 * @param {string} parentID ID of the parent component.
 * @param {string} textContent Text content to set.
 * @private
 */
function enqueueTextContent(parentID, textContent) {
  // NOTE: Null values reduce hidden classes.
  updateQueue.push({
    parentID: parentID,
    parentNode: null,
    type: ReactMultiChildUpdateTypes.TEXT_CONTENT,
    markupIndex: null,
    content: textContent,
    fromIndex: null,
    toIndex: null
  });
}

/**
 * Processes any enqueued updates.
 *
 * @private
 */
function processQueue() {
  if (updateQueue.length) {
    ReactComponentEnvironment.processChildrenUpdates(updateQueue, markupQueue);
    clearQueue();
  }
}

/**
 * Clears any enqueued updates.
 *
 * @private
 */
function clearQueue() {
  updateQueue.length = 0;
  markupQueue.length = 0;
}

/**
 * ReactMultiChild are capable of reconciling multiple children.
 *
 * @class ReactMultiChild
 * @internal
 */
var ReactMultiChild = {

  /**
   * Provides common functionality for components that must reconcile multiple
   * children. This is used by `ReactDOMComponent` to mount, update, and
   * unmount child components.
   *
   * @lends {ReactMultiChild.prototype}
   */
  Mixin: {

    _reconcilerInstantiateChildren: function (nestedChildren, transaction, context) {
      if ("production" !== 'production') {
        if (this._currentElement) {
          try {
            ReactCurrentOwner.current = this._currentElement._owner;
            return ReactChildReconciler.instantiateChildren(nestedChildren, transaction, context);
          } finally {
            ReactCurrentOwner.current = null;
          }
        }
      }
      return ReactChildReconciler.instantiateChildren(nestedChildren, transaction, context);
    },

    _reconcilerUpdateChildren: function (prevChildren, nextNestedChildrenElements, transaction, context) {
      var nextChildren;
      if ("production" !== 'production') {
        if (this._currentElement) {
          try {
            ReactCurrentOwner.current = this._currentElement._owner;
            nextChildren = flattenChildren(nextNestedChildrenElements);
          } finally {
            ReactCurrentOwner.current = null;
          }
          return ReactChildReconciler.updateChildren(prevChildren, nextChildren, transaction, context);
        }
      }
      nextChildren = flattenChildren(nextNestedChildrenElements);
      return ReactChildReconciler.updateChildren(prevChildren, nextChildren, transaction, context);
    },

    /**
     * Generates a "mount image" for each of the supplied children. In the case
     * of `ReactDOMComponent`, a mount image is a string of markup.
     *
     * @param {?object} nestedChildren Nested child maps.
     * @return {array} An array of mounted representations.
     * @internal
     */
    mountChildren: function (nestedChildren, transaction, context) {
      var children = this._reconcilerInstantiateChildren(nestedChildren, transaction, context);
      this._renderedChildren = children;
      var mountImages = [];
      var index = 0;
      for (var name in children) {
        if (children.hasOwnProperty(name)) {
          var child = children[name];
          // Inlined for performance, see `ReactInstanceHandles.createReactID`.
          var rootID = this._rootNodeID + name;
          var mountImage = ReactReconciler.mountComponent(child, rootID, transaction, context);
          child._mountIndex = index++;
          mountImages.push(mountImage);
        }
      }
      return mountImages;
    },

    /**
     * Replaces any rendered children with a text content string.
     *
     * @param {string} nextContent String of content.
     * @internal
     */
    updateTextContent: function (nextContent) {
      updateDepth++;
      var errorThrown = true;
      try {
        var prevChildren = this._renderedChildren;
        // Remove any rendered children.
        ReactChildReconciler.unmountChildren(prevChildren);
        // TODO: The setTextContent operation should be enough
        for (var name in prevChildren) {
          if (prevChildren.hasOwnProperty(name)) {
            this._unmountChild(prevChildren[name]);
          }
        }
        // Set new text content.
        this.setTextContent(nextContent);
        errorThrown = false;
      } finally {
        updateDepth--;
        if (!updateDepth) {
          if (errorThrown) {
            clearQueue();
          } else {
            processQueue();
          }
        }
      }
    },

    /**
     * Replaces any rendered children with a markup string.
     *
     * @param {string} nextMarkup String of markup.
     * @internal
     */
    updateMarkup: function (nextMarkup) {
      updateDepth++;
      var errorThrown = true;
      try {
        var prevChildren = this._renderedChildren;
        // Remove any rendered children.
        ReactChildReconciler.unmountChildren(prevChildren);
        for (var name in prevChildren) {
          if (prevChildren.hasOwnProperty(name)) {
            this._unmountChildByName(prevChildren[name], name);
          }
        }
        this.setMarkup(nextMarkup);
        errorThrown = false;
      } finally {
        updateDepth--;
        if (!updateDepth) {
          if (errorThrown) {
            clearQueue();
          } else {
            processQueue();
          }
        }
      }
    },

    /**
     * Updates the rendered children with new children.
     *
     * @param {?object} nextNestedChildrenElements Nested child element maps.
     * @param {ReactReconcileTransaction} transaction
     * @internal
     */
    updateChildren: function (nextNestedChildrenElements, transaction, context) {
      updateDepth++;
      var errorThrown = true;
      try {
        this._updateChildren(nextNestedChildrenElements, transaction, context);
        errorThrown = false;
      } finally {
        updateDepth--;
        if (!updateDepth) {
          if (errorThrown) {
            clearQueue();
          } else {
            processQueue();
          }
        }
      }
    },

    /**
     * Improve performance by isolating this hot code path from the try/catch
     * block in `updateChildren`.
     *
     * @param {?object} nextNestedChildrenElements Nested child element maps.
     * @param {ReactReconcileTransaction} transaction
     * @final
     * @protected
     */
    _updateChildren: function (nextNestedChildrenElements, transaction, context) {
      var prevChildren = this._renderedChildren;
      var nextChildren = this._reconcilerUpdateChildren(prevChildren, nextNestedChildrenElements, transaction, context);
      this._renderedChildren = nextChildren;
      if (!nextChildren && !prevChildren) {
        return;
      }
      var name;
      // `nextIndex` will increment for each child in `nextChildren`, but
      // `lastIndex` will be the last index visited in `prevChildren`.
      var lastIndex = 0;
      var nextIndex = 0;
      for (name in nextChildren) {
        if (!nextChildren.hasOwnProperty(name)) {
          continue;
        }
        var prevChild = prevChildren && prevChildren[name];
        var nextChild = nextChildren[name];
        if (prevChild === nextChild) {
          this.moveChild(prevChild, nextIndex, lastIndex);
          lastIndex = Math.max(prevChild._mountIndex, lastIndex);
          prevChild._mountIndex = nextIndex;
        } else {
          if (prevChild) {
            // Update `lastIndex` before `_mountIndex` gets unset by unmounting.
            lastIndex = Math.max(prevChild._mountIndex, lastIndex);
            this._unmountChild(prevChild);
          }
          // The child must be instantiated before it's mounted.
          this._mountChildByNameAtIndex(nextChild, name, nextIndex, transaction, context);
        }
        nextIndex++;
      }
      // Remove children that are no longer present.
      for (name in prevChildren) {
        if (prevChildren.hasOwnProperty(name) && !(nextChildren && nextChildren.hasOwnProperty(name))) {
          this._unmountChild(prevChildren[name]);
        }
      }
    },

    /**
     * Unmounts all rendered children. This should be used to clean up children
     * when this component is unmounted.
     *
     * @internal
     */
    unmountChildren: function () {
      var renderedChildren = this._renderedChildren;
      ReactChildReconciler.unmountChildren(renderedChildren);
      this._renderedChildren = null;
    },

    /**
     * Moves a child component to the supplied index.
     *
     * @param {ReactComponent} child Component to move.
     * @param {number} toIndex Destination index of the element.
     * @param {number} lastIndex Last index visited of the siblings of `child`.
     * @protected
     */
    moveChild: function (child, toIndex, lastIndex) {
      // If the index of `child` is less than `lastIndex`, then it needs to
      // be moved. Otherwise, we do not need to move it because a child will be
      // inserted or moved before `child`.
      if (child._mountIndex < lastIndex) {
        enqueueMove(this._rootNodeID, child._mountIndex, toIndex);
      }
    },

    /**
     * Creates a child component.
     *
     * @param {ReactComponent} child Component to create.
     * @param {string} mountImage Markup to insert.
     * @protected
     */
    createChild: function (child, mountImage) {
      enqueueInsertMarkup(this._rootNodeID, mountImage, child._mountIndex);
    },

    /**
     * Removes a child component.
     *
     * @param {ReactComponent} child Child to remove.
     * @protected
     */
    removeChild: function (child) {
      enqueueRemove(this._rootNodeID, child._mountIndex);
    },

    /**
     * Sets this text content string.
     *
     * @param {string} textContent Text content to set.
     * @protected
     */
    setTextContent: function (textContent) {
      enqueueTextContent(this._rootNodeID, textContent);
    },

    /**
     * Sets this markup string.
     *
     * @param {string} markup Markup to set.
     * @protected
     */
    setMarkup: function (markup) {
      enqueueSetMarkup(this._rootNodeID, markup);
    },

    /**
     * Mounts a child with the supplied name.
     *
     * NOTE: This is part of `updateChildren` and is here for readability.
     *
     * @param {ReactComponent} child Component to mount.
     * @param {string} name Name of the child.
     * @param {number} index Index at which to insert the child.
     * @param {ReactReconcileTransaction} transaction
     * @private
     */
    _mountChildByNameAtIndex: function (child, name, index, transaction, context) {
      // Inlined for performance, see `ReactInstanceHandles.createReactID`.
      var rootID = this._rootNodeID + name;
      var mountImage = ReactReconciler.mountComponent(child, rootID, transaction, context);
      child._mountIndex = index;
      this.createChild(child, mountImage);
    },

    /**
     * Unmounts a rendered child.
     *
     * NOTE: This is part of `updateChildren` and is here for readability.
     *
     * @param {ReactComponent} child Component to unmount.
     * @private
     */
    _unmountChild: function (child) {
      this.removeChild(child);
      child._mountIndex = null;
    }

  }

};

module.exports = ReactMultiChild;
},{"./ReactChildReconciler":331,"./ReactComponentEnvironment":336,"./ReactCurrentOwner":338,"./ReactMultiChildUpdateTypes":367,"./ReactReconciler":376,"./flattenChildren":408}],367:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactMultiChildUpdateTypes
 */

'use strict';

var keyMirror = require('fbjs/lib/keyMirror');

/**
 * When a component's children are updated, a series of update configuration
 * objects are created in order to batch and serialize the required changes.
 *
 * Enumerates all the possible types of update configurations.
 *
 * @internal
 */
var ReactMultiChildUpdateTypes = keyMirror({
  INSERT_MARKUP: null,
  MOVE_EXISTING: null,
  REMOVE_NODE: null,
  SET_MARKUP: null,
  TEXT_CONTENT: null
});

module.exports = ReactMultiChildUpdateTypes;
},{"fbjs/lib/keyMirror":20}],368:[function(require,module,exports){
/**
 * Copyright 2014-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactNativeComponent
 */

'use strict';

var assign = require('./Object.assign');
var invariant = require('fbjs/lib/invariant');

var autoGenerateWrapperClass = null;
var genericComponentClass = null;
// This registry keeps track of wrapper classes around native tags.
var tagToComponentClass = {};
var textComponentClass = null;

var ReactNativeComponentInjection = {
  // This accepts a class that receives the tag string. This is a catch all
  // that can render any kind of tag.
  injectGenericComponentClass: function (componentClass) {
    genericComponentClass = componentClass;
  },
  // This accepts a text component class that takes the text string to be
  // rendered as props.
  injectTextComponentClass: function (componentClass) {
    textComponentClass = componentClass;
  },
  // This accepts a keyed object with classes as values. Each key represents a
  // tag. That particular tag will use this class instead of the generic one.
  injectComponentClasses: function (componentClasses) {
    assign(tagToComponentClass, componentClasses);
  }
};

/**
 * Get a composite component wrapper class for a specific tag.
 *
 * @param {ReactElement} element The tag for which to get the class.
 * @return {function} The React class constructor function.
 */
function getComponentClassForElement(element) {
  if (typeof element.type === 'function') {
    return element.type;
  }
  var tag = element.type;
  var componentClass = tagToComponentClass[tag];
  if (componentClass == null) {
    tagToComponentClass[tag] = componentClass = autoGenerateWrapperClass(tag);
  }
  return componentClass;
}

/**
 * Get a native internal component class for a specific tag.
 *
 * @param {ReactElement} element The element to create.
 * @return {function} The internal class constructor function.
 */
function createInternalComponent(element) {
  !genericComponentClass ? "production" !== 'production' ? invariant(false, 'There is no registered component for the tag %s', element.type) : invariant(false) : undefined;
  return new genericComponentClass(element.type, element.props);
}

/**
 * @param {ReactText} text
 * @return {ReactComponent}
 */
function createInstanceForText(text) {
  return new textComponentClass(text);
}

/**
 * @param {ReactComponent} component
 * @return {boolean}
 */
function isTextComponent(component) {
  return component instanceof textComponentClass;
}

var ReactNativeComponent = {
  getComponentClassForElement: getComponentClassForElement,
  createInternalComponent: createInternalComponent,
  createInstanceForText: createInstanceForText,
  isTextComponent: isTextComponent,
  injection: ReactNativeComponentInjection
};

module.exports = ReactNativeComponent;
},{"./Object.assign":327,"fbjs/lib/invariant":17}],369:[function(require,module,exports){
/**
 * Copyright 2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactNoopUpdateQueue
 */

'use strict';

var warning = require('fbjs/lib/warning');

function warnTDZ(publicInstance, callerName) {
  if ("production" !== 'production') {
    "production" !== 'production' ? warning(false, '%s(...): Can only update a mounted or mounting component. ' + 'This usually means you called %s() on an unmounted component. ' + 'This is a no-op. Please check the code for the %s component.', callerName, callerName, publicInstance.constructor && publicInstance.constructor.displayName || '') : undefined;
  }
}

/**
 * This is the abstract API for an update queue.
 */
var ReactNoopUpdateQueue = {

  /**
   * Checks whether or not this composite component is mounted.
   * @param {ReactClass} publicInstance The instance we want to test.
   * @return {boolean} True if mounted, false otherwise.
   * @protected
   * @final
   */
  isMounted: function (publicInstance) {
    return false;
  },

  /**
   * Enqueue a callback that will be executed after all the pending updates
   * have processed.
   *
   * @param {ReactClass} publicInstance The instance to use as `this` context.
   * @param {?function} callback Called after state is updated.
   * @internal
   */
  enqueueCallback: function (publicInstance, callback) {},

  /**
   * Forces an update. This should only be invoked when it is known with
   * certainty that we are **not** in a DOM transaction.
   *
   * You may want to call this when you know that some deeper aspect of the
   * component's state has changed but `setState` was not called.
   *
   * This will not invoke `shouldComponentUpdate`, but it will invoke
   * `componentWillUpdate` and `componentDidUpdate`.
   *
   * @param {ReactClass} publicInstance The instance that should rerender.
   * @internal
   */
  enqueueForceUpdate: function (publicInstance) {
    warnTDZ(publicInstance, 'forceUpdate');
  },

  /**
   * Replaces all of the state. Always use this or `setState` to mutate state.
   * You should treat `this.state` as immutable.
   *
   * There is no guarantee that `this.state` will be immediately updated, so
   * accessing `this.state` after calling this method may return the old value.
   *
   * @param {ReactClass} publicInstance The instance that should rerender.
   * @param {object} completeState Next state.
   * @internal
   */
  enqueueReplaceState: function (publicInstance, completeState) {
    warnTDZ(publicInstance, 'replaceState');
  },

  /**
   * Sets a subset of the state. This only exists because _pendingState is
   * internal. This provides a merging strategy that is not available to deep
   * properties which is confusing. TODO: Expose pendingState or don't use it
   * during the merge.
   *
   * @param {ReactClass} publicInstance The instance that should rerender.
   * @param {object} partialState Next partial state to be merged with state.
   * @internal
   */
  enqueueSetState: function (publicInstance, partialState) {
    warnTDZ(publicInstance, 'setState');
  },

  /**
   * Sets a subset of the props.
   *
   * @param {ReactClass} publicInstance The instance that should rerender.
   * @param {object} partialProps Subset of the next props.
   * @internal
   */
  enqueueSetProps: function (publicInstance, partialProps) {
    warnTDZ(publicInstance, 'setProps');
  },

  /**
   * Replaces all of the props.
   *
   * @param {ReactClass} publicInstance The instance that should rerender.
   * @param {object} props New props.
   * @internal
   */
  enqueueReplaceProps: function (publicInstance, props) {
    warnTDZ(publicInstance, 'replaceProps');
  }

};

module.exports = ReactNoopUpdateQueue;
},{"fbjs/lib/warning":27}],370:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactOwner
 */

'use strict';

var invariant = require('fbjs/lib/invariant');

/**
 * ReactOwners are capable of storing references to owned components.
 *
 * All components are capable of //being// referenced by owner components, but
 * only ReactOwner components are capable of //referencing// owned components.
 * The named reference is known as a "ref".
 *
 * Refs are available when mounted and updated during reconciliation.
 *
 *   var MyComponent = React.createClass({
 *     render: function() {
 *       return (
 *         <div onClick={this.handleClick}>
 *           <CustomComponent ref="custom" />
 *         </div>
 *       );
 *     },
 *     handleClick: function() {
 *       this.refs.custom.handleClick();
 *     },
 *     componentDidMount: function() {
 *       this.refs.custom.initialize();
 *     }
 *   });
 *
 * Refs should rarely be used. When refs are used, they should only be done to
 * control data that is not handled by React's data flow.
 *
 * @class ReactOwner
 */
var ReactOwner = {

  /**
   * @param {?object} object
   * @return {boolean} True if `object` is a valid owner.
   * @final
   */
  isValidOwner: function (object) {
    return !!(object && typeof object.attachRef === 'function' && typeof object.detachRef === 'function');
  },

  /**
   * Adds a component by ref to an owner component.
   *
   * @param {ReactComponent} component Component to reference.
   * @param {string} ref Name by which to refer to the component.
   * @param {ReactOwner} owner Component on which to record the ref.
   * @final
   * @internal
   */
  addComponentAsRefTo: function (component, ref, owner) {
    !ReactOwner.isValidOwner(owner) ? "production" !== 'production' ? invariant(false, 'addComponentAsRefTo(...): Only a ReactOwner can have refs. You might ' + 'be adding a ref to a component that was not created inside a component\'s ' + '`render` method, or you have multiple copies of React loaded ' + '(details: https://fb.me/react-refs-must-have-owner).') : invariant(false) : undefined;
    owner.attachRef(ref, component);
  },

  /**
   * Removes a component by ref from an owner component.
   *
   * @param {ReactComponent} component Component to dereference.
   * @param {string} ref Name of the ref to remove.
   * @param {ReactOwner} owner Component on which the ref is recorded.
   * @final
   * @internal
   */
  removeComponentAsRefFrom: function (component, ref, owner) {
    !ReactOwner.isValidOwner(owner) ? "production" !== 'production' ? invariant(false, 'removeComponentAsRefFrom(...): Only a ReactOwner can have refs. You might ' + 'be removing a ref to a component that was not created inside a component\'s ' + '`render` method, or you have multiple copies of React loaded ' + '(details: https://fb.me/react-refs-must-have-owner).') : invariant(false) : undefined;
    // Check that `component` is still the current ref because we do not want to
    // detach the ref if another component stole it.
    if (owner.getPublicInstance().refs[ref] === component.getPublicInstance()) {
      owner.detachRef(ref);
    }
  }

};

module.exports = ReactOwner;
},{"fbjs/lib/invariant":17}],371:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactPerf
 * @typechecks static-only
 */

'use strict';

/**
 * ReactPerf is a general AOP system designed to measure performance. This
 * module only has the hooks: see ReactDefaultPerf for the analysis tool.
 */
var ReactPerf = {
  /**
   * Boolean to enable/disable measurement. Set to false by default to prevent
   * accidental logging and perf loss.
   */
  enableMeasure: false,

  /**
   * Holds onto the measure function in use. By default, don't measure
   * anything, but we'll override this if we inject a measure function.
   */
  storedMeasure: _noMeasure,

  /**
   * @param {object} object
   * @param {string} objectName
   * @param {object<string>} methodNames
   */
  measureMethods: function (object, objectName, methodNames) {
    if ("production" !== 'production') {
      for (var key in methodNames) {
        if (!methodNames.hasOwnProperty(key)) {
          continue;
        }
        object[key] = ReactPerf.measure(objectName, methodNames[key], object[key]);
      }
    }
  },

  /**
   * Use this to wrap methods you want to measure. Zero overhead in production.
   *
   * @param {string} objName
   * @param {string} fnName
   * @param {function} func
   * @return {function}
   */
  measure: function (objName, fnName, func) {
    if ("production" !== 'production') {
      var measuredFunc = null;
      var wrapper = function () {
        if (ReactPerf.enableMeasure) {
          if (!measuredFunc) {
            measuredFunc = ReactPerf.storedMeasure(objName, fnName, func);
          }
          return measuredFunc.apply(this, arguments);
        }
        return func.apply(this, arguments);
      };
      wrapper.displayName = objName + '_' + fnName;
      return wrapper;
    }
    return func;
  },

  injection: {
    /**
     * @param {function} measure
     */
    injectMeasure: function (measure) {
      ReactPerf.storedMeasure = measure;
    }
  }
};

/**
 * Simply passes through the measured function, without measuring it.
 *
 * @param {string} objName
 * @param {string} fnName
 * @param {function} func
 * @return {function}
 */
function _noMeasure(objName, fnName, func) {
  return func;
}

module.exports = ReactPerf;
},{}],372:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactPropTypeLocationNames
 */

'use strict';

var ReactPropTypeLocationNames = {};

if ("production" !== 'production') {
  ReactPropTypeLocationNames = {
    prop: 'prop',
    context: 'context',
    childContext: 'child context'
  };
}

module.exports = ReactPropTypeLocationNames;
},{}],373:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactPropTypeLocations
 */

'use strict';

var keyMirror = require('fbjs/lib/keyMirror');

var ReactPropTypeLocations = keyMirror({
  prop: null,
  context: null,
  childContext: null
});

module.exports = ReactPropTypeLocations;
},{"fbjs/lib/keyMirror":20}],374:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactPropTypes
 */

'use strict';

var ReactElement = require('./ReactElement');
var ReactPropTypeLocationNames = require('./ReactPropTypeLocationNames');

var emptyFunction = require('fbjs/lib/emptyFunction');
var getIteratorFn = require('./getIteratorFn');

/**
 * Collection of methods that allow declaration and validation of props that are
 * supplied to React components. Example usage:
 *
 *   var Props = require('ReactPropTypes');
 *   var MyArticle = React.createClass({
 *     propTypes: {
 *       // An optional string prop named "description".
 *       description: Props.string,
 *
 *       // A required enum prop named "category".
 *       category: Props.oneOf(['News','Photos']).isRequired,
 *
 *       // A prop named "dialog" that requires an instance of Dialog.
 *       dialog: Props.instanceOf(Dialog).isRequired
 *     },
 *     render: function() { ... }
 *   });
 *
 * A more formal specification of how these methods are used:
 *
 *   type := array|bool|func|object|number|string|oneOf([...])|instanceOf(...)
 *   decl := ReactPropTypes.{type}(.isRequired)?
 *
 * Each and every declaration produces a function with the same signature. This
 * allows the creation of custom validation functions. For example:
 *
 *  var MyLink = React.createClass({
 *    propTypes: {
 *      // An optional string or URI prop named "href".
 *      href: function(props, propName, componentName) {
 *        var propValue = props[propName];
 *        if (propValue != null && typeof propValue !== 'string' &&
 *            !(propValue instanceof URI)) {
 *          return new Error(
 *            'Expected a string or an URI for ' + propName + ' in ' +
 *            componentName
 *          );
 *        }
 *      }
 *    },
 *    render: function() {...}
 *  });
 *
 * @internal
 */

var ANONYMOUS = '<<anonymous>>';

var ReactPropTypes = {
  array: createPrimitiveTypeChecker('array'),
  bool: createPrimitiveTypeChecker('boolean'),
  func: createPrimitiveTypeChecker('function'),
  number: createPrimitiveTypeChecker('number'),
  object: createPrimitiveTypeChecker('object'),
  string: createPrimitiveTypeChecker('string'),

  any: createAnyTypeChecker(),
  arrayOf: createArrayOfTypeChecker,
  element: createElementTypeChecker(),
  instanceOf: createInstanceTypeChecker,
  node: createNodeChecker(),
  objectOf: createObjectOfTypeChecker,
  oneOf: createEnumTypeChecker,
  oneOfType: createUnionTypeChecker,
  shape: createShapeTypeChecker
};

function createChainableTypeChecker(validate) {
  function checkType(isRequired, props, propName, componentName, location, propFullName) {
    componentName = componentName || ANONYMOUS;
    propFullName = propFullName || propName;
    if (props[propName] == null) {
      var locationName = ReactPropTypeLocationNames[location];
      if (isRequired) {
        return new Error('Required ' + locationName + ' `' + propFullName + '` was not specified in ' + ('`' + componentName + '`.'));
      }
      return null;
    } else {
      return validate(props, propName, componentName, location, propFullName);
    }
  }

  var chainedCheckType = checkType.bind(null, false);
  chainedCheckType.isRequired = checkType.bind(null, true);

  return chainedCheckType;
}

function createPrimitiveTypeChecker(expectedType) {
  function validate(props, propName, componentName, location, propFullName) {
    var propValue = props[propName];
    var propType = getPropType(propValue);
    if (propType !== expectedType) {
      var locationName = ReactPropTypeLocationNames[location];
      // `propValue` being instance of, say, date/regexp, pass the 'object'
      // check, but we can offer a more precise error message here rather than
      // 'of type `object`'.
      var preciseType = getPreciseType(propValue);

      return new Error('Invalid ' + locationName + ' `' + propFullName + '` of type ' + ('`' + preciseType + '` supplied to `' + componentName + '`, expected ') + ('`' + expectedType + '`.'));
    }
    return null;
  }
  return createChainableTypeChecker(validate);
}

function createAnyTypeChecker() {
  return createChainableTypeChecker(emptyFunction.thatReturns(null));
}

function createArrayOfTypeChecker(typeChecker) {
  function validate(props, propName, componentName, location, propFullName) {
    var propValue = props[propName];
    if (!Array.isArray(propValue)) {
      var locationName = ReactPropTypeLocationNames[location];
      var propType = getPropType(propValue);
      return new Error('Invalid ' + locationName + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an array.'));
    }
    for (var i = 0; i < propValue.length; i++) {
      var error = typeChecker(propValue, i, componentName, location, propFullName + '[' + i + ']', 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED');
      if (error instanceof Error) {
        return error;
      }
    }
    return null;
  }
  return createChainableTypeChecker(validate);
}

function createElementTypeChecker() {
  function validate(props, propName, componentName, location, propFullName) {
    if (!ReactElement.isValidElement(props[propName])) {
      var locationName = ReactPropTypeLocationNames[location];
      return new Error('Invalid ' + locationName + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`, expected a single ReactElement.'));
    }
    return null;
  }
  return createChainableTypeChecker(validate);
}

function createInstanceTypeChecker(expectedClass) {
  function validate(props, propName, componentName, location, propFullName) {
    if (!(props[propName] instanceof expectedClass)) {
      var locationName = ReactPropTypeLocationNames[location];
      var expectedClassName = expectedClass.name || ANONYMOUS;
      var actualClassName = getClassName(props[propName]);
      return new Error('Invalid ' + locationName + ' `' + propFullName + '` of type ' + ('`' + actualClassName + '` supplied to `' + componentName + '`, expected ') + ('instance of `' + expectedClassName + '`.'));
    }
    return null;
  }
  return createChainableTypeChecker(validate);
}

function createEnumTypeChecker(expectedValues) {
  if (!Array.isArray(expectedValues)) {
    return createChainableTypeChecker(function () {
      return new Error('Invalid argument supplied to oneOf, expected an instance of array.');
    });
  }

  function validate(props, propName, componentName, location, propFullName) {
    var propValue = props[propName];
    for (var i = 0; i < expectedValues.length; i++) {
      if (propValue === expectedValues[i]) {
        return null;
      }
    }

    var locationName = ReactPropTypeLocationNames[location];
    var valuesString = JSON.stringify(expectedValues);
    return new Error('Invalid ' + locationName + ' `' + propFullName + '` of value `' + propValue + '` ' + ('supplied to `' + componentName + '`, expected one of ' + valuesString + '.'));
  }
  return createChainableTypeChecker(validate);
}

function createObjectOfTypeChecker(typeChecker) {
  function validate(props, propName, componentName, location, propFullName) {
    var propValue = props[propName];
    var propType = getPropType(propValue);
    if (propType !== 'object') {
      var locationName = ReactPropTypeLocationNames[location];
      return new Error('Invalid ' + locationName + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an object.'));
    }
    for (var key in propValue) {
      if (propValue.hasOwnProperty(key)) {
        var error = typeChecker(propValue, key, componentName, location, propFullName + '.' + key, 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED');
        if (error instanceof Error) {
          return error;
        }
      }
    }
    return null;
  }
  return createChainableTypeChecker(validate);
}

function createUnionTypeChecker(arrayOfTypeCheckers) {
  if (!Array.isArray(arrayOfTypeCheckers)) {
    return createChainableTypeChecker(function () {
      return new Error('Invalid argument supplied to oneOfType, expected an instance of array.');
    });
  }

  function validate(props, propName, componentName, location, propFullName) {
    for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
      var checker = arrayOfTypeCheckers[i];
      if (checker(props, propName, componentName, location, propFullName, 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED') == null) {
        return null;
      }
    }

    var locationName = ReactPropTypeLocationNames[location];
    return new Error('Invalid ' + locationName + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`.'));
  }
  return createChainableTypeChecker(validate);
}

function createNodeChecker() {
  function validate(props, propName, componentName, location, propFullName) {
    if (!isNode(props[propName])) {
      var locationName = ReactPropTypeLocationNames[location];
      return new Error('Invalid ' + locationName + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`, expected a ReactNode.'));
    }
    return null;
  }
  return createChainableTypeChecker(validate);
}

function createShapeTypeChecker(shapeTypes) {
  function validate(props, propName, componentName, location, propFullName) {
    var propValue = props[propName];
    var propType = getPropType(propValue);
    if (propType !== 'object') {
      var locationName = ReactPropTypeLocationNames[location];
      return new Error('Invalid ' + locationName + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));
    }
    for (var key in shapeTypes) {
      var checker = shapeTypes[key];
      if (!checker) {
        continue;
      }
      var error = checker(propValue, key, componentName, location, propFullName + '.' + key, 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED');
      if (error) {
        return error;
      }
    }
    return null;
  }
  return createChainableTypeChecker(validate);
}

function isNode(propValue) {
  switch (typeof propValue) {
    case 'number':
    case 'string':
    case 'undefined':
      return true;
    case 'boolean':
      return !propValue;
    case 'object':
      if (Array.isArray(propValue)) {
        return propValue.every(isNode);
      }
      if (propValue === null || ReactElement.isValidElement(propValue)) {
        return true;
      }

      var iteratorFn = getIteratorFn(propValue);
      if (iteratorFn) {
        var iterator = iteratorFn.call(propValue);
        var step;
        if (iteratorFn !== propValue.entries) {
          while (!(step = iterator.next()).done) {
            if (!isNode(step.value)) {
              return false;
            }
          }
        } else {
          // Iterator will provide entry [k,v] tuples rather than values.
          while (!(step = iterator.next()).done) {
            var entry = step.value;
            if (entry) {
              if (!isNode(entry[1])) {
                return false;
              }
            }
          }
        }
      } else {
        return false;
      }

      return true;
    default:
      return false;
  }
}

// Equivalent of `typeof` but with special handling for array and regexp.
function getPropType(propValue) {
  var propType = typeof propValue;
  if (Array.isArray(propValue)) {
    return 'array';
  }
  if (propValue instanceof RegExp) {
    // Old webkits (at least until Android 4.0) return 'function' rather than
    // 'object' for typeof a RegExp. We'll normalize this here so that /bla/
    // passes PropTypes.object.
    return 'object';
  }
  return propType;
}

// This handles more types than `getPropType`. Only used for error messages.
// See `createPrimitiveTypeChecker`.
function getPreciseType(propValue) {
  var propType = getPropType(propValue);
  if (propType === 'object') {
    if (propValue instanceof Date) {
      return 'date';
    } else if (propValue instanceof RegExp) {
      return 'regexp';
    }
  }
  return propType;
}

// Returns class name of the object, if any.
function getClassName(propValue) {
  if (!propValue.constructor || !propValue.constructor.name) {
    return '<<anonymous>>';
  }
  return propValue.constructor.name;
}

module.exports = ReactPropTypes;
},{"./ReactElement":354,"./ReactPropTypeLocationNames":372,"./getIteratorFn":414,"fbjs/lib/emptyFunction":9}],375:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactReconcileTransaction
 * @typechecks static-only
 */

'use strict';

var CallbackQueue = require('./CallbackQueue');
var PooledClass = require('./PooledClass');
var ReactBrowserEventEmitter = require('./ReactBrowserEventEmitter');
var ReactDOMFeatureFlags = require('./ReactDOMFeatureFlags');
var ReactInputSelection = require('./ReactInputSelection');
var Transaction = require('./Transaction');

var assign = require('./Object.assign');

/**
 * Ensures that, when possible, the selection range (currently selected text
 * input) is not disturbed by performing the transaction.
 */
var SELECTION_RESTORATION = {
  /**
   * @return {Selection} Selection information.
   */
  initialize: ReactInputSelection.getSelectionInformation,
  /**
   * @param {Selection} sel Selection information returned from `initialize`.
   */
  close: ReactInputSelection.restoreSelection
};

/**
 * Suppresses events (blur/focus) that could be inadvertently dispatched due to
 * high level DOM manipulations (like temporarily removing a text input from the
 * DOM).
 */
var EVENT_SUPPRESSION = {
  /**
   * @return {boolean} The enabled status of `ReactBrowserEventEmitter` before
   * the reconciliation.
   */
  initialize: function () {
    var currentlyEnabled = ReactBrowserEventEmitter.isEnabled();
    ReactBrowserEventEmitter.setEnabled(false);
    return currentlyEnabled;
  },

  /**
   * @param {boolean} previouslyEnabled Enabled status of
   *   `ReactBrowserEventEmitter` before the reconciliation occurred. `close`
   *   restores the previous value.
   */
  close: function (previouslyEnabled) {
    ReactBrowserEventEmitter.setEnabled(previouslyEnabled);
  }
};

/**
 * Provides a queue for collecting `componentDidMount` and
 * `componentDidUpdate` callbacks during the the transaction.
 */
var ON_DOM_READY_QUEUEING = {
  /**
   * Initializes the internal `onDOMReady` queue.
   */
  initialize: function () {
    this.reactMountReady.reset();
  },

  /**
   * After DOM is flushed, invoke all registered `onDOMReady` callbacks.
   */
  close: function () {
    this.reactMountReady.notifyAll();
  }
};

/**
 * Executed within the scope of the `Transaction` instance. Consider these as
 * being member methods, but with an implied ordering while being isolated from
 * each other.
 */
var TRANSACTION_WRAPPERS = [SELECTION_RESTORATION, EVENT_SUPPRESSION, ON_DOM_READY_QUEUEING];

/**
 * Currently:
 * - The order that these are listed in the transaction is critical:
 * - Suppresses events.
 * - Restores selection range.
 *
 * Future:
 * - Restore document/overflow scroll positions that were unintentionally
 *   modified via DOM insertions above the top viewport boundary.
 * - Implement/integrate with customized constraint based layout system and keep
 *   track of which dimensions must be remeasured.
 *
 * @class ReactReconcileTransaction
 */
function ReactReconcileTransaction(forceHTML) {
  this.reinitializeTransaction();
  // Only server-side rendering really needs this option (see
  // `ReactServerRendering`), but server-side uses
  // `ReactServerRenderingTransaction` instead. This option is here so that it's
  // accessible and defaults to false when `ReactDOMComponent` and
  // `ReactTextComponent` checks it in `mountComponent`.`
  this.renderToStaticMarkup = false;
  this.reactMountReady = CallbackQueue.getPooled(null);
  this.useCreateElement = !forceHTML && ReactDOMFeatureFlags.useCreateElement;
}

var Mixin = {
  /**
   * @see Transaction
   * @abstract
   * @final
   * @return {array<object>} List of operation wrap procedures.
   *   TODO: convert to array<TransactionWrapper>
   */
  getTransactionWrappers: function () {
    return TRANSACTION_WRAPPERS;
  },

  /**
   * @return {object} The queue to collect `onDOMReady` callbacks with.
   */
  getReactMountReady: function () {
    return this.reactMountReady;
  },

  /**
   * `PooledClass` looks for this, and will invoke this before allowing this
   * instance to be reused.
   */
  destructor: function () {
    CallbackQueue.release(this.reactMountReady);
    this.reactMountReady = null;
  }
};

assign(ReactReconcileTransaction.prototype, Transaction.Mixin, Mixin);

PooledClass.addPoolingTo(ReactReconcileTransaction);

module.exports = ReactReconcileTransaction;
},{"./CallbackQueue":310,"./Object.assign":327,"./PooledClass":328,"./ReactBrowserEventEmitter":330,"./ReactDOMFeatureFlags":341,"./ReactInputSelection":361,"./Transaction":400}],376:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactReconciler
 */

'use strict';

var ReactRef = require('./ReactRef');

/**
 * Helper to call ReactRef.attachRefs with this composite component, split out
 * to avoid allocations in the transaction mount-ready queue.
 */
function attachRefs() {
  ReactRef.attachRefs(this, this._currentElement);
}

var ReactReconciler = {

  /**
   * Initializes the component, renders markup, and registers event listeners.
   *
   * @param {ReactComponent} internalInstance
   * @param {string} rootID DOM ID of the root node.
   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
   * @return {?string} Rendered markup to be inserted into the DOM.
   * @final
   * @internal
   */
  mountComponent: function (internalInstance, rootID, transaction, context) {
    var markup = internalInstance.mountComponent(rootID, transaction, context);
    if (internalInstance._currentElement && internalInstance._currentElement.ref != null) {
      transaction.getReactMountReady().enqueue(attachRefs, internalInstance);
    }
    return markup;
  },

  /**
   * Releases any resources allocated by `mountComponent`.
   *
   * @final
   * @internal
   */
  unmountComponent: function (internalInstance) {
    ReactRef.detachRefs(internalInstance, internalInstance._currentElement);
    internalInstance.unmountComponent();
  },

  /**
   * Update a component using a new element.
   *
   * @param {ReactComponent} internalInstance
   * @param {ReactElement} nextElement
   * @param {ReactReconcileTransaction} transaction
   * @param {object} context
   * @internal
   */
  receiveComponent: function (internalInstance, nextElement, transaction, context) {
    var prevElement = internalInstance._currentElement;

    if (nextElement === prevElement && context === internalInstance._context) {
      // Since elements are immutable after the owner is rendered,
      // we can do a cheap identity compare here to determine if this is a
      // superfluous reconcile. It's possible for state to be mutable but such
      // change should trigger an update of the owner which would recreate
      // the element. We explicitly check for the existence of an owner since
      // it's possible for an element created outside a composite to be
      // deeply mutated and reused.

      // TODO: Bailing out early is just a perf optimization right?
      // TODO: Removing the return statement should affect correctness?
      return;
    }

    var refsChanged = ReactRef.shouldUpdateRefs(prevElement, nextElement);

    if (refsChanged) {
      ReactRef.detachRefs(internalInstance, prevElement);
    }

    internalInstance.receiveComponent(nextElement, transaction, context);

    if (refsChanged && internalInstance._currentElement && internalInstance._currentElement.ref != null) {
      transaction.getReactMountReady().enqueue(attachRefs, internalInstance);
    }
  },

  /**
   * Flush any dirty changes in a component.
   *
   * @param {ReactComponent} internalInstance
   * @param {ReactReconcileTransaction} transaction
   * @internal
   */
  performUpdateIfNecessary: function (internalInstance, transaction) {
    internalInstance.performUpdateIfNecessary(transaction);
  }

};

module.exports = ReactReconciler;
},{"./ReactRef":377}],377:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactRef
 */

'use strict';

var ReactOwner = require('./ReactOwner');

var ReactRef = {};

function attachRef(ref, component, owner) {
  if (typeof ref === 'function') {
    ref(component.getPublicInstance());
  } else {
    // Legacy ref
    ReactOwner.addComponentAsRefTo(component, ref, owner);
  }
}

function detachRef(ref, component, owner) {
  if (typeof ref === 'function') {
    ref(null);
  } else {
    // Legacy ref
    ReactOwner.removeComponentAsRefFrom(component, ref, owner);
  }
}

ReactRef.attachRefs = function (instance, element) {
  if (element === null || element === false) {
    return;
  }
  var ref = element.ref;
  if (ref != null) {
    attachRef(ref, instance, element._owner);
  }
};

ReactRef.shouldUpdateRefs = function (prevElement, nextElement) {
  // If either the owner or a `ref` has changed, make sure the newest owner
  // has stored a reference to `this`, and the previous owner (if different)
  // has forgotten the reference to `this`. We use the element instead
  // of the public this.props because the post processing cannot determine
  // a ref. The ref conceptually lives on the element.

  // TODO: Should this even be possible? The owner cannot change because
  // it's forbidden by shouldUpdateReactComponent. The ref can change
  // if you swap the keys of but not the refs. Reconsider where this check
  // is made. It probably belongs where the key checking and
  // instantiateReactComponent is done.

  var prevEmpty = prevElement === null || prevElement === false;
  var nextEmpty = nextElement === null || nextElement === false;

  return(
    // This has a few false positives w/r/t empty components.
    prevEmpty || nextEmpty || nextElement._owner !== prevElement._owner || nextElement.ref !== prevElement.ref
  );
};

ReactRef.detachRefs = function (instance, element) {
  if (element === null || element === false) {
    return;
  }
  var ref = element.ref;
  if (ref != null) {
    detachRef(ref, instance, element._owner);
  }
};

module.exports = ReactRef;
},{"./ReactOwner":370}],378:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactRootIndex
 * @typechecks
 */

'use strict';

var ReactRootIndexInjection = {
  /**
   * @param {function} _createReactRootIndex
   */
  injectCreateReactRootIndex: function (_createReactRootIndex) {
    ReactRootIndex.createReactRootIndex = _createReactRootIndex;
  }
};

var ReactRootIndex = {
  createReactRootIndex: null,
  injection: ReactRootIndexInjection
};

module.exports = ReactRootIndex;
},{}],379:[function(require,module,exports){
/**
 * Copyright 2014-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactServerBatchingStrategy
 * @typechecks
 */

'use strict';

var ReactServerBatchingStrategy = {
  isBatchingUpdates: false,
  batchedUpdates: function (callback) {
    // Don't do anything here. During the server rendering we don't want to
    // schedule any updates. We will simply ignore them.
  }
};

module.exports = ReactServerBatchingStrategy;
},{}],380:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @typechecks static-only
 * @providesModule ReactServerRendering
 */
'use strict';

var ReactDefaultBatchingStrategy = require('./ReactDefaultBatchingStrategy');
var ReactElement = require('./ReactElement');
var ReactInstanceHandles = require('./ReactInstanceHandles');
var ReactMarkupChecksum = require('./ReactMarkupChecksum');
var ReactServerBatchingStrategy = require('./ReactServerBatchingStrategy');
var ReactServerRenderingTransaction = require('./ReactServerRenderingTransaction');
var ReactUpdates = require('./ReactUpdates');

var emptyObject = require('fbjs/lib/emptyObject');
var instantiateReactComponent = require('./instantiateReactComponent');
var invariant = require('fbjs/lib/invariant');

/**
 * @param {ReactElement} element
 * @return {string} the HTML markup
 */
function renderToString(element) {
  !ReactElement.isValidElement(element) ? "production" !== 'production' ? invariant(false, 'renderToString(): You must pass a valid ReactElement.') : invariant(false) : undefined;

  var transaction;
  try {
    ReactUpdates.injection.injectBatchingStrategy(ReactServerBatchingStrategy);

    var id = ReactInstanceHandles.createReactRootID();
    transaction = ReactServerRenderingTransaction.getPooled(false);

    return transaction.perform(function () {
      var componentInstance = instantiateReactComponent(element, null);
      var markup = componentInstance.mountComponent(id, transaction, emptyObject);
      return ReactMarkupChecksum.addChecksumToMarkup(markup);
    }, null);
  } finally {
    ReactServerRenderingTransaction.release(transaction);
    // Revert to the DOM batching strategy since these two renderers
    // currently share these stateful modules.
    ReactUpdates.injection.injectBatchingStrategy(ReactDefaultBatchingStrategy);
  }
}

/**
 * @param {ReactElement} element
 * @return {string} the HTML markup, without the extra React ID and checksum
 * (for generating static pages)
 */
function renderToStaticMarkup(element) {
  !ReactElement.isValidElement(element) ? "production" !== 'production' ? invariant(false, 'renderToStaticMarkup(): You must pass a valid ReactElement.') : invariant(false) : undefined;

  var transaction;
  try {
    ReactUpdates.injection.injectBatchingStrategy(ReactServerBatchingStrategy);

    var id = ReactInstanceHandles.createReactRootID();
    transaction = ReactServerRenderingTransaction.getPooled(true);

    return transaction.perform(function () {
      var componentInstance = instantiateReactComponent(element, null);
      return componentInstance.mountComponent(id, transaction, emptyObject);
    }, null);
  } finally {
    ReactServerRenderingTransaction.release(transaction);
    // Revert to the DOM batching strategy since these two renderers
    // currently share these stateful modules.
    ReactUpdates.injection.injectBatchingStrategy(ReactDefaultBatchingStrategy);
  }
}

module.exports = {
  renderToString: renderToString,
  renderToStaticMarkup: renderToStaticMarkup
};
},{"./ReactDefaultBatchingStrategy":350,"./ReactElement":354,"./ReactInstanceHandles":362,"./ReactMarkupChecksum":364,"./ReactServerBatchingStrategy":379,"./ReactServerRenderingTransaction":381,"./ReactUpdates":383,"./instantiateReactComponent":417,"fbjs/lib/emptyObject":10,"fbjs/lib/invariant":17}],381:[function(require,module,exports){
/**
 * Copyright 2014-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactServerRenderingTransaction
 * @typechecks
 */

'use strict';

var PooledClass = require('./PooledClass');
var CallbackQueue = require('./CallbackQueue');
var Transaction = require('./Transaction');

var assign = require('./Object.assign');
var emptyFunction = require('fbjs/lib/emptyFunction');

/**
 * Provides a `CallbackQueue` queue for collecting `onDOMReady` callbacks
 * during the performing of the transaction.
 */
var ON_DOM_READY_QUEUEING = {
  /**
   * Initializes the internal `onDOMReady` queue.
   */
  initialize: function () {
    this.reactMountReady.reset();
  },

  close: emptyFunction
};

/**
 * Executed within the scope of the `Transaction` instance. Consider these as
 * being member methods, but with an implied ordering while being isolated from
 * each other.
 */
var TRANSACTION_WRAPPERS = [ON_DOM_READY_QUEUEING];

/**
 * @class ReactServerRenderingTransaction
 * @param {boolean} renderToStaticMarkup
 */
function ReactServerRenderingTransaction(renderToStaticMarkup) {
  this.reinitializeTransaction();
  this.renderToStaticMarkup = renderToStaticMarkup;
  this.reactMountReady = CallbackQueue.getPooled(null);
  this.useCreateElement = false;
}

var Mixin = {
  /**
   * @see Transaction
   * @abstract
   * @final
   * @return {array} Empty list of operation wrap procedures.
   */
  getTransactionWrappers: function () {
    return TRANSACTION_WRAPPERS;
  },

  /**
   * @return {object} The queue to collect `onDOMReady` callbacks with.
   */
  getReactMountReady: function () {
    return this.reactMountReady;
  },

  /**
   * `PooledClass` looks for this, and will invoke this before allowing this
   * instance to be reused.
   */
  destructor: function () {
    CallbackQueue.release(this.reactMountReady);
    this.reactMountReady = null;
  }
};

assign(ReactServerRenderingTransaction.prototype, Transaction.Mixin, Mixin);

PooledClass.addPoolingTo(ReactServerRenderingTransaction);

module.exports = ReactServerRenderingTransaction;
},{"./CallbackQueue":310,"./Object.assign":327,"./PooledClass":328,"./Transaction":400,"fbjs/lib/emptyFunction":9}],382:[function(require,module,exports){
/**
 * Copyright 2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactUpdateQueue
 */

'use strict';

var ReactCurrentOwner = require('./ReactCurrentOwner');
var ReactElement = require('./ReactElement');
var ReactInstanceMap = require('./ReactInstanceMap');
var ReactUpdates = require('./ReactUpdates');

var assign = require('./Object.assign');
var invariant = require('fbjs/lib/invariant');
var warning = require('fbjs/lib/warning');

function enqueueUpdate(internalInstance) {
  ReactUpdates.enqueueUpdate(internalInstance);
}

function getInternalInstanceReadyForUpdate(publicInstance, callerName) {
  var internalInstance = ReactInstanceMap.get(publicInstance);
  if (!internalInstance) {
    if ("production" !== 'production') {
      // Only warn when we have a callerName. Otherwise we should be silent.
      // We're probably calling from enqueueCallback. We don't want to warn
      // there because we already warned for the corresponding lifecycle method.
      "production" !== 'production' ? warning(!callerName, '%s(...): Can only update a mounted or mounting component. ' + 'This usually means you called %s() on an unmounted component. ' + 'This is a no-op. Please check the code for the %s component.', callerName, callerName, publicInstance.constructor.displayName) : undefined;
    }
    return null;
  }

  if ("production" !== 'production') {
    "production" !== 'production' ? warning(ReactCurrentOwner.current == null, '%s(...): Cannot update during an existing state transition ' + '(such as within `render`). Render methods should be a pure function ' + 'of props and state.', callerName) : undefined;
  }

  return internalInstance;
}

/**
 * ReactUpdateQueue allows for state updates to be scheduled into a later
 * reconciliation step.
 */
var ReactUpdateQueue = {

  /**
   * Checks whether or not this composite component is mounted.
   * @param {ReactClass} publicInstance The instance we want to test.
   * @return {boolean} True if mounted, false otherwise.
   * @protected
   * @final
   */
  isMounted: function (publicInstance) {
    if ("production" !== 'production') {
      var owner = ReactCurrentOwner.current;
      if (owner !== null) {
        "production" !== 'production' ? warning(owner._warnedAboutRefsInRender, '%s is accessing isMounted inside its render() function. ' + 'render() should be a pure function of props and state. It should ' + 'never access something that requires stale data from the previous ' + 'render, such as refs. Move this logic to componentDidMount and ' + 'componentDidUpdate instead.', owner.getName() || 'A component') : undefined;
        owner._warnedAboutRefsInRender = true;
      }
    }
    var internalInstance = ReactInstanceMap.get(publicInstance);
    if (internalInstance) {
      // During componentWillMount and render this will still be null but after
      // that will always render to something. At least for now. So we can use
      // this hack.
      return !!internalInstance._renderedComponent;
    } else {
      return false;
    }
  },

  /**
   * Enqueue a callback that will be executed after all the pending updates
   * have processed.
   *
   * @param {ReactClass} publicInstance The instance to use as `this` context.
   * @param {?function} callback Called after state is updated.
   * @internal
   */
  enqueueCallback: function (publicInstance, callback) {
    !(typeof callback === 'function') ? "production" !== 'production' ? invariant(false, 'enqueueCallback(...): You called `setProps`, `replaceProps`, ' + '`setState`, `replaceState`, or `forceUpdate` with a callback that ' + 'isn\'t callable.') : invariant(false) : undefined;
    var internalInstance = getInternalInstanceReadyForUpdate(publicInstance);

    // Previously we would throw an error if we didn't have an internal
    // instance. Since we want to make it a no-op instead, we mirror the same
    // behavior we have in other enqueue* methods.
    // We also need to ignore callbacks in componentWillMount. See
    // enqueueUpdates.
    if (!internalInstance) {
      return null;
    }

    if (internalInstance._pendingCallbacks) {
      internalInstance._pendingCallbacks.push(callback);
    } else {
      internalInstance._pendingCallbacks = [callback];
    }
    // TODO: The callback here is ignored when setState is called from
    // componentWillMount. Either fix it or disallow doing so completely in
    // favor of getInitialState. Alternatively, we can disallow
    // componentWillMount during server-side rendering.
    enqueueUpdate(internalInstance);
  },

  enqueueCallbackInternal: function (internalInstance, callback) {
    !(typeof callback === 'function') ? "production" !== 'production' ? invariant(false, 'enqueueCallback(...): You called `setProps`, `replaceProps`, ' + '`setState`, `replaceState`, or `forceUpdate` with a callback that ' + 'isn\'t callable.') : invariant(false) : undefined;
    if (internalInstance._pendingCallbacks) {
      internalInstance._pendingCallbacks.push(callback);
    } else {
      internalInstance._pendingCallbacks = [callback];
    }
    enqueueUpdate(internalInstance);
  },

  /**
   * Forces an update. This should only be invoked when it is known with
   * certainty that we are **not** in a DOM transaction.
   *
   * You may want to call this when you know that some deeper aspect of the
   * component's state has changed but `setState` was not called.
   *
   * This will not invoke `shouldComponentUpdate`, but it will invoke
   * `componentWillUpdate` and `componentDidUpdate`.
   *
   * @param {ReactClass} publicInstance The instance that should rerender.
   * @internal
   */
  enqueueForceUpdate: function (publicInstance) {
    var internalInstance = getInternalInstanceReadyForUpdate(publicInstance, 'forceUpdate');

    if (!internalInstance) {
      return;
    }

    internalInstance._pendingForceUpdate = true;

    enqueueUpdate(internalInstance);
  },

  /**
   * Replaces all of the state. Always use this or `setState` to mutate state.
   * You should treat `this.state` as immutable.
   *
   * There is no guarantee that `this.state` will be immediately updated, so
   * accessing `this.state` after calling this method may return the old value.
   *
   * @param {ReactClass} publicInstance The instance that should rerender.
   * @param {object} completeState Next state.
   * @internal
   */
  enqueueReplaceState: function (publicInstance, completeState) {
    var internalInstance = getInternalInstanceReadyForUpdate(publicInstance, 'replaceState');

    if (!internalInstance) {
      return;
    }

    internalInstance._pendingStateQueue = [completeState];
    internalInstance._pendingReplaceState = true;

    enqueueUpdate(internalInstance);
  },

  /**
   * Sets a subset of the state. This only exists because _pendingState is
   * internal. This provides a merging strategy that is not available to deep
   * properties which is confusing. TODO: Expose pendingState or don't use it
   * during the merge.
   *
   * @param {ReactClass} publicInstance The instance that should rerender.
   * @param {object} partialState Next partial state to be merged with state.
   * @internal
   */
  enqueueSetState: function (publicInstance, partialState) {
    var internalInstance = getInternalInstanceReadyForUpdate(publicInstance, 'setState');

    if (!internalInstance) {
      return;
    }

    var queue = internalInstance._pendingStateQueue || (internalInstance._pendingStateQueue = []);
    queue.push(partialState);

    enqueueUpdate(internalInstance);
  },

  /**
   * Sets a subset of the props.
   *
   * @param {ReactClass} publicInstance The instance that should rerender.
   * @param {object} partialProps Subset of the next props.
   * @internal
   */
  enqueueSetProps: function (publicInstance, partialProps) {
    var internalInstance = getInternalInstanceReadyForUpdate(publicInstance, 'setProps');
    if (!internalInstance) {
      return;
    }
    ReactUpdateQueue.enqueueSetPropsInternal(internalInstance, partialProps);
  },

  enqueueSetPropsInternal: function (internalInstance, partialProps) {
    var topLevelWrapper = internalInstance._topLevelWrapper;
    !topLevelWrapper ? "production" !== 'production' ? invariant(false, 'setProps(...): You called `setProps` on a ' + 'component with a parent. This is an anti-pattern since props will ' + 'get reactively updated when rendered. Instead, change the owner\'s ' + '`render` method to pass the correct value as props to the component ' + 'where it is created.') : invariant(false) : undefined;

    // Merge with the pending element if it exists, otherwise with existing
    // element props.
    var wrapElement = topLevelWrapper._pendingElement || topLevelWrapper._currentElement;
    var element = wrapElement.props;
    var props = assign({}, element.props, partialProps);
    topLevelWrapper._pendingElement = ReactElement.cloneAndReplaceProps(wrapElement, ReactElement.cloneAndReplaceProps(element, props));

    enqueueUpdate(topLevelWrapper);
  },

  /**
   * Replaces all of the props.
   *
   * @param {ReactClass} publicInstance The instance that should rerender.
   * @param {object} props New props.
   * @internal
   */
  enqueueReplaceProps: function (publicInstance, props) {
    var internalInstance = getInternalInstanceReadyForUpdate(publicInstance, 'replaceProps');
    if (!internalInstance) {
      return;
    }
    ReactUpdateQueue.enqueueReplacePropsInternal(internalInstance, props);
  },

  enqueueReplacePropsInternal: function (internalInstance, props) {
    var topLevelWrapper = internalInstance._topLevelWrapper;
    !topLevelWrapper ? "production" !== 'production' ? invariant(false, 'replaceProps(...): You called `replaceProps` on a ' + 'component with a parent. This is an anti-pattern since props will ' + 'get reactively updated when rendered. Instead, change the owner\'s ' + '`render` method to pass the correct value as props to the component ' + 'where it is created.') : invariant(false) : undefined;

    // Merge with the pending element if it exists, otherwise with existing
    // element props.
    var wrapElement = topLevelWrapper._pendingElement || topLevelWrapper._currentElement;
    var element = wrapElement.props;
    topLevelWrapper._pendingElement = ReactElement.cloneAndReplaceProps(wrapElement, ReactElement.cloneAndReplaceProps(element, props));

    enqueueUpdate(topLevelWrapper);
  },

  enqueueElementInternal: function (internalInstance, newElement) {
    internalInstance._pendingElement = newElement;
    enqueueUpdate(internalInstance);
  }

};

module.exports = ReactUpdateQueue;
},{"./Object.assign":327,"./ReactCurrentOwner":338,"./ReactElement":354,"./ReactInstanceMap":363,"./ReactUpdates":383,"fbjs/lib/invariant":17,"fbjs/lib/warning":27}],383:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactUpdates
 */

'use strict';

var CallbackQueue = require('./CallbackQueue');
var PooledClass = require('./PooledClass');
var ReactPerf = require('./ReactPerf');
var ReactReconciler = require('./ReactReconciler');
var Transaction = require('./Transaction');

var assign = require('./Object.assign');
var invariant = require('fbjs/lib/invariant');

var dirtyComponents = [];
var asapCallbackQueue = CallbackQueue.getPooled();
var asapEnqueued = false;

var batchingStrategy = null;

function ensureInjected() {
  !(ReactUpdates.ReactReconcileTransaction && batchingStrategy) ? "production" !== 'production' ? invariant(false, 'ReactUpdates: must inject a reconcile transaction class and batching ' + 'strategy') : invariant(false) : undefined;
}

var NESTED_UPDATES = {
  initialize: function () {
    this.dirtyComponentsLength = dirtyComponents.length;
  },
  close: function () {
    if (this.dirtyComponentsLength !== dirtyComponents.length) {
      // Additional updates were enqueued by componentDidUpdate handlers or
      // similar; before our own UPDATE_QUEUEING wrapper closes, we want to run
      // these new updates so that if A's componentDidUpdate calls setState on
      // B, B will update before the callback A's updater provided when calling
      // setState.
      dirtyComponents.splice(0, this.dirtyComponentsLength);
      flushBatchedUpdates();
    } else {
      dirtyComponents.length = 0;
    }
  }
};

var UPDATE_QUEUEING = {
  initialize: function () {
    this.callbackQueue.reset();
  },
  close: function () {
    this.callbackQueue.notifyAll();
  }
};

var TRANSACTION_WRAPPERS = [NESTED_UPDATES, UPDATE_QUEUEING];

function ReactUpdatesFlushTransaction() {
  this.reinitializeTransaction();
  this.dirtyComponentsLength = null;
  this.callbackQueue = CallbackQueue.getPooled();
  this.reconcileTransaction = ReactUpdates.ReactReconcileTransaction.getPooled( /* forceHTML */false);
}

assign(ReactUpdatesFlushTransaction.prototype, Transaction.Mixin, {
  getTransactionWrappers: function () {
    return TRANSACTION_WRAPPERS;
  },

  destructor: function () {
    this.dirtyComponentsLength = null;
    CallbackQueue.release(this.callbackQueue);
    this.callbackQueue = null;
    ReactUpdates.ReactReconcileTransaction.release(this.reconcileTransaction);
    this.reconcileTransaction = null;
  },

  perform: function (method, scope, a) {
    // Essentially calls `this.reconcileTransaction.perform(method, scope, a)`
    // with this transaction's wrappers around it.
    return Transaction.Mixin.perform.call(this, this.reconcileTransaction.perform, this.reconcileTransaction, method, scope, a);
  }
});

PooledClass.addPoolingTo(ReactUpdatesFlushTransaction);

function batchedUpdates(callback, a, b, c, d, e) {
  ensureInjected();
  batchingStrategy.batchedUpdates(callback, a, b, c, d, e);
}

/**
 * Array comparator for ReactComponents by mount ordering.
 *
 * @param {ReactComponent} c1 first component you're comparing
 * @param {ReactComponent} c2 second component you're comparing
 * @return {number} Return value usable by Array.prototype.sort().
 */
function mountOrderComparator(c1, c2) {
  return c1._mountOrder - c2._mountOrder;
}

function runBatchedUpdates(transaction) {
  var len = transaction.dirtyComponentsLength;
  !(len === dirtyComponents.length) ? "production" !== 'production' ? invariant(false, 'Expected flush transaction\'s stored dirty-components length (%s) to ' + 'match dirty-components array length (%s).', len, dirtyComponents.length) : invariant(false) : undefined;

  // Since reconciling a component higher in the owner hierarchy usually (not
  // always -- see shouldComponentUpdate()) will reconcile children, reconcile
  // them before their children by sorting the array.
  dirtyComponents.sort(mountOrderComparator);

  for (var i = 0; i < len; i++) {
    // If a component is unmounted before pending changes apply, it will still
    // be here, but we assume that it has cleared its _pendingCallbacks and
    // that performUpdateIfNecessary is a noop.
    var component = dirtyComponents[i];

    // If performUpdateIfNecessary happens to enqueue any new updates, we
    // shouldn't execute the callbacks until the next render happens, so
    // stash the callbacks first
    var callbacks = component._pendingCallbacks;
    component._pendingCallbacks = null;

    ReactReconciler.performUpdateIfNecessary(component, transaction.reconcileTransaction);

    if (callbacks) {
      for (var j = 0; j < callbacks.length; j++) {
        transaction.callbackQueue.enqueue(callbacks[j], component.getPublicInstance());
      }
    }
  }
}

var flushBatchedUpdates = function () {
  // ReactUpdatesFlushTransaction's wrappers will clear the dirtyComponents
  // array and perform any updates enqueued by mount-ready handlers (i.e.,
  // componentDidUpdate) but we need to check here too in order to catch
  // updates enqueued by setState callbacks and asap calls.
  while (dirtyComponents.length || asapEnqueued) {
    if (dirtyComponents.length) {
      var transaction = ReactUpdatesFlushTransaction.getPooled();
      transaction.perform(runBatchedUpdates, null, transaction);
      ReactUpdatesFlushTransaction.release(transaction);
    }

    if (asapEnqueued) {
      asapEnqueued = false;
      var queue = asapCallbackQueue;
      asapCallbackQueue = CallbackQueue.getPooled();
      queue.notifyAll();
      CallbackQueue.release(queue);
    }
  }
};
flushBatchedUpdates = ReactPerf.measure('ReactUpdates', 'flushBatchedUpdates', flushBatchedUpdates);

/**
 * Mark a component as needing a rerender, adding an optional callback to a
 * list of functions which will be executed once the rerender occurs.
 */
function enqueueUpdate(component) {
  ensureInjected();

  // Various parts of our code (such as ReactCompositeComponent's
  // _renderValidatedComponent) assume that calls to render aren't nested;
  // verify that that's the case. (This is called by each top-level update
  // function, like setProps, setState, forceUpdate, etc.; creation and
  // destruction of top-level components is guarded in ReactMount.)

  if (!batchingStrategy.isBatchingUpdates) {
    batchingStrategy.batchedUpdates(enqueueUpdate, component);
    return;
  }

  dirtyComponents.push(component);
}

/**
 * Enqueue a callback to be run at the end of the current batching cycle. Throws
 * if no updates are currently being performed.
 */
function asap(callback, context) {
  !batchingStrategy.isBatchingUpdates ? "production" !== 'production' ? invariant(false, 'ReactUpdates.asap: Can\'t enqueue an asap callback in a context where' + 'updates are not being batched.') : invariant(false) : undefined;
  asapCallbackQueue.enqueue(callback, context);
  asapEnqueued = true;
}

var ReactUpdatesInjection = {
  injectReconcileTransaction: function (ReconcileTransaction) {
    !ReconcileTransaction ? "production" !== 'production' ? invariant(false, 'ReactUpdates: must provide a reconcile transaction class') : invariant(false) : undefined;
    ReactUpdates.ReactReconcileTransaction = ReconcileTransaction;
  },

  injectBatchingStrategy: function (_batchingStrategy) {
    !_batchingStrategy ? "production" !== 'production' ? invariant(false, 'ReactUpdates: must provide a batching strategy') : invariant(false) : undefined;
    !(typeof _batchingStrategy.batchedUpdates === 'function') ? "production" !== 'production' ? invariant(false, 'ReactUpdates: must provide a batchedUpdates() function') : invariant(false) : undefined;
    !(typeof _batchingStrategy.isBatchingUpdates === 'boolean') ? "production" !== 'production' ? invariant(false, 'ReactUpdates: must provide an isBatchingUpdates boolean attribute') : invariant(false) : undefined;
    batchingStrategy = _batchingStrategy;
  }
};

var ReactUpdates = {
  /**
   * React references `ReactReconcileTransaction` using this property in order
   * to allow dependency injection.
   *
   * @internal
   */
  ReactReconcileTransaction: null,

  batchedUpdates: batchedUpdates,
  enqueueUpdate: enqueueUpdate,
  flushBatchedUpdates: flushBatchedUpdates,
  injection: ReactUpdatesInjection,
  asap: asap
};

module.exports = ReactUpdates;
},{"./CallbackQueue":310,"./Object.assign":327,"./PooledClass":328,"./ReactPerf":371,"./ReactReconciler":376,"./Transaction":400,"fbjs/lib/invariant":17}],384:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactVersion
 */

'use strict';

module.exports = '0.14.9';
},{}],385:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SVGDOMPropertyConfig
 */

'use strict';

var DOMProperty = require('./DOMProperty');

var MUST_USE_ATTRIBUTE = DOMProperty.injection.MUST_USE_ATTRIBUTE;

var NS = {
  xlink: 'http://www.w3.org/1999/xlink',
  xml: 'http://www.w3.org/XML/1998/namespace'
};

var SVGDOMPropertyConfig = {
  Properties: {
    clipPath: MUST_USE_ATTRIBUTE,
    cx: MUST_USE_ATTRIBUTE,
    cy: MUST_USE_ATTRIBUTE,
    d: MUST_USE_ATTRIBUTE,
    dx: MUST_USE_ATTRIBUTE,
    dy: MUST_USE_ATTRIBUTE,
    fill: MUST_USE_ATTRIBUTE,
    fillOpacity: MUST_USE_ATTRIBUTE,
    fontFamily: MUST_USE_ATTRIBUTE,
    fontSize: MUST_USE_ATTRIBUTE,
    fx: MUST_USE_ATTRIBUTE,
    fy: MUST_USE_ATTRIBUTE,
    gradientTransform: MUST_USE_ATTRIBUTE,
    gradientUnits: MUST_USE_ATTRIBUTE,
    markerEnd: MUST_USE_ATTRIBUTE,
    markerMid: MUST_USE_ATTRIBUTE,
    markerStart: MUST_USE_ATTRIBUTE,
    offset: MUST_USE_ATTRIBUTE,
    opacity: MUST_USE_ATTRIBUTE,
    patternContentUnits: MUST_USE_ATTRIBUTE,
    patternUnits: MUST_USE_ATTRIBUTE,
    points: MUST_USE_ATTRIBUTE,
    preserveAspectRatio: MUST_USE_ATTRIBUTE,
    r: MUST_USE_ATTRIBUTE,
    rx: MUST_USE_ATTRIBUTE,
    ry: MUST_USE_ATTRIBUTE,
    spreadMethod: MUST_USE_ATTRIBUTE,
    stopColor: MUST_USE_ATTRIBUTE,
    stopOpacity: MUST_USE_ATTRIBUTE,
    stroke: MUST_USE_ATTRIBUTE,
    strokeDasharray: MUST_USE_ATTRIBUTE,
    strokeLinecap: MUST_USE_ATTRIBUTE,
    strokeOpacity: MUST_USE_ATTRIBUTE,
    strokeWidth: MUST_USE_ATTRIBUTE,
    textAnchor: MUST_USE_ATTRIBUTE,
    transform: MUST_USE_ATTRIBUTE,
    version: MUST_USE_ATTRIBUTE,
    viewBox: MUST_USE_ATTRIBUTE,
    x1: MUST_USE_ATTRIBUTE,
    x2: MUST_USE_ATTRIBUTE,
    x: MUST_USE_ATTRIBUTE,
    xlinkActuate: MUST_USE_ATTRIBUTE,
    xlinkArcrole: MUST_USE_ATTRIBUTE,
    xlinkHref: MUST_USE_ATTRIBUTE,
    xlinkRole: MUST_USE_ATTRIBUTE,
    xlinkShow: MUST_USE_ATTRIBUTE,
    xlinkTitle: MUST_USE_ATTRIBUTE,
    xlinkType: MUST_USE_ATTRIBUTE,
    xmlBase: MUST_USE_ATTRIBUTE,
    xmlLang: MUST_USE_ATTRIBUTE,
    xmlSpace: MUST_USE_ATTRIBUTE,
    y1: MUST_USE_ATTRIBUTE,
    y2: MUST_USE_ATTRIBUTE,
    y: MUST_USE_ATTRIBUTE
  },
  DOMAttributeNamespaces: {
    xlinkActuate: NS.xlink,
    xlinkArcrole: NS.xlink,
    xlinkHref: NS.xlink,
    xlinkRole: NS.xlink,
    xlinkShow: NS.xlink,
    xlinkTitle: NS.xlink,
    xlinkType: NS.xlink,
    xmlBase: NS.xml,
    xmlLang: NS.xml,
    xmlSpace: NS.xml
  },
  DOMAttributeNames: {
    clipPath: 'clip-path',
    fillOpacity: 'fill-opacity',
    fontFamily: 'font-family',
    fontSize: 'font-size',
    gradientTransform: 'gradientTransform',
    gradientUnits: 'gradientUnits',
    markerEnd: 'marker-end',
    markerMid: 'marker-mid',
    markerStart: 'marker-start',
    patternContentUnits: 'patternContentUnits',
    patternUnits: 'patternUnits',
    preserveAspectRatio: 'preserveAspectRatio',
    spreadMethod: 'spreadMethod',
    stopColor: 'stop-color',
    stopOpacity: 'stop-opacity',
    strokeDasharray: 'stroke-dasharray',
    strokeLinecap: 'stroke-linecap',
    strokeOpacity: 'stroke-opacity',
    strokeWidth: 'stroke-width',
    textAnchor: 'text-anchor',
    viewBox: 'viewBox',
    xlinkActuate: 'xlink:actuate',
    xlinkArcrole: 'xlink:arcrole',
    xlinkHref: 'xlink:href',
    xlinkRole: 'xlink:role',
    xlinkShow: 'xlink:show',
    xlinkTitle: 'xlink:title',
    xlinkType: 'xlink:type',
    xmlBase: 'xml:base',
    xmlLang: 'xml:lang',
    xmlSpace: 'xml:space'
  }
};

module.exports = SVGDOMPropertyConfig;
},{"./DOMProperty":314}],386:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SelectEventPlugin
 */

'use strict';

var EventConstants = require('./EventConstants');
var EventPropagators = require('./EventPropagators');
var ExecutionEnvironment = require('fbjs/lib/ExecutionEnvironment');
var ReactInputSelection = require('./ReactInputSelection');
var SyntheticEvent = require('./SyntheticEvent');

var getActiveElement = require('fbjs/lib/getActiveElement');
var isTextInputElement = require('./isTextInputElement');
var keyOf = require('fbjs/lib/keyOf');
var shallowEqual = require('fbjs/lib/shallowEqual');

var topLevelTypes = EventConstants.topLevelTypes;

var skipSelectionChangeEvent = ExecutionEnvironment.canUseDOM && 'documentMode' in document && document.documentMode <= 11;

var eventTypes = {
  select: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onSelect: null }),
      captured: keyOf({ onSelectCapture: null })
    },
    dependencies: [topLevelTypes.topBlur, topLevelTypes.topContextMenu, topLevelTypes.topFocus, topLevelTypes.topKeyDown, topLevelTypes.topMouseDown, topLevelTypes.topMouseUp, topLevelTypes.topSelectionChange]
  }
};

var activeElement = null;
var activeElementID = null;
var lastSelection = null;
var mouseDown = false;

// Track whether a listener exists for this plugin. If none exist, we do
// not extract events.
var hasListener = false;
var ON_SELECT_KEY = keyOf({ onSelect: null });

/**
 * Get an object which is a unique representation of the current selection.
 *
 * The return value will not be consistent across nodes or browsers, but
 * two identical selections on the same node will return identical objects.
 *
 * @param {DOMElement} node
 * @return {object}
 */
function getSelection(node) {
  if ('selectionStart' in node && ReactInputSelection.hasSelectionCapabilities(node)) {
    return {
      start: node.selectionStart,
      end: node.selectionEnd
    };
  } else if (window.getSelection) {
    var selection = window.getSelection();
    return {
      anchorNode: selection.anchorNode,
      anchorOffset: selection.anchorOffset,
      focusNode: selection.focusNode,
      focusOffset: selection.focusOffset
    };
  } else if (document.selection) {
    var range = document.selection.createRange();
    return {
      parentElement: range.parentElement(),
      text: range.text,
      top: range.boundingTop,
      left: range.boundingLeft
    };
  }
}

/**
 * Poll selection to see whether it's changed.
 *
 * @param {object} nativeEvent
 * @return {?SyntheticEvent}
 */
function constructSelectEvent(nativeEvent, nativeEventTarget) {
  // Ensure we have the right element, and that the user is not dragging a
  // selection (this matches native `select` event behavior). In HTML5, select
  // fires only on input and textarea thus if there's no focused element we
  // won't dispatch.
  if (mouseDown || activeElement == null || activeElement !== getActiveElement()) {
    return null;
  }

  // Only fire when selection has actually changed.
  var currentSelection = getSelection(activeElement);
  if (!lastSelection || !shallowEqual(lastSelection, currentSelection)) {
    lastSelection = currentSelection;

    var syntheticEvent = SyntheticEvent.getPooled(eventTypes.select, activeElementID, nativeEvent, nativeEventTarget);

    syntheticEvent.type = 'select';
    syntheticEvent.target = activeElement;

    EventPropagators.accumulateTwoPhaseDispatches(syntheticEvent);

    return syntheticEvent;
  }

  return null;
}

/**
 * This plugin creates an `onSelect` event that normalizes select events
 * across form elements.
 *
 * Supported elements are:
 * - input (see `isTextInputElement`)
 * - textarea
 * - contentEditable
 *
 * This differs from native browser implementations in the following ways:
 * - Fires on contentEditable fields as well as inputs.
 * - Fires for collapsed selection.
 * - Fires after user input.
 */
var SelectEventPlugin = {

  eventTypes: eventTypes,

  /**
   * @param {string} topLevelType Record from `EventConstants`.
   * @param {DOMEventTarget} topLevelTarget The listening component root node.
   * @param {string} topLevelTargetID ID of `topLevelTarget`.
   * @param {object} nativeEvent Native browser event.
   * @return {*} An accumulation of synthetic events.
   * @see {EventPluginHub.extractEvents}
   */
  extractEvents: function (topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget) {
    if (!hasListener) {
      return null;
    }

    switch (topLevelType) {
      // Track the input node that has focus.
      case topLevelTypes.topFocus:
        if (isTextInputElement(topLevelTarget) || topLevelTarget.contentEditable === 'true') {
          activeElement = topLevelTarget;
          activeElementID = topLevelTargetID;
          lastSelection = null;
        }
        break;
      case topLevelTypes.topBlur:
        activeElement = null;
        activeElementID = null;
        lastSelection = null;
        break;

      // Don't fire the event while the user is dragging. This matches the
      // semantics of the native select event.
      case topLevelTypes.topMouseDown:
        mouseDown = true;
        break;
      case topLevelTypes.topContextMenu:
      case topLevelTypes.topMouseUp:
        mouseDown = false;
        return constructSelectEvent(nativeEvent, nativeEventTarget);

      // Chrome and IE fire non-standard event when selection is changed (and
      // sometimes when it hasn't). IE's event fires out of order with respect
      // to key and input events on deletion, so we discard it.
      //
      // Firefox doesn't support selectionchange, so check selection status
      // after each key entry. The selection changes after keydown and before
      // keyup, but we check on keydown as well in the case of holding down a
      // key, when multiple keydown events are fired but only one keyup is.
      // This is also our approach for IE handling, for the reason above.
      case topLevelTypes.topSelectionChange:
        if (skipSelectionChangeEvent) {
          break;
        }
      // falls through
      case topLevelTypes.topKeyDown:
      case topLevelTypes.topKeyUp:
        return constructSelectEvent(nativeEvent, nativeEventTarget);
    }

    return null;
  },

  didPutListener: function (id, registrationName, listener) {
    if (registrationName === ON_SELECT_KEY) {
      hasListener = true;
    }
  }
};

module.exports = SelectEventPlugin;
},{"./EventConstants":319,"./EventPropagators":323,"./ReactInputSelection":361,"./SyntheticEvent":392,"./isTextInputElement":419,"fbjs/lib/ExecutionEnvironment":3,"fbjs/lib/getActiveElement":12,"fbjs/lib/keyOf":21,"fbjs/lib/shallowEqual":25}],387:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ServerReactRootIndex
 * @typechecks
 */

'use strict';

/**
 * Size of the reactRoot ID space. We generate random numbers for React root
 * IDs and if there's a collision the events and DOM update system will
 * get confused. In the future we need a way to generate GUIDs but for
 * now this will work on a smaller scale.
 */
var GLOBAL_MOUNT_POINT_MAX = Math.pow(2, 53);

var ServerReactRootIndex = {
  createReactRootIndex: function () {
    return Math.ceil(Math.random() * GLOBAL_MOUNT_POINT_MAX);
  }
};

module.exports = ServerReactRootIndex;
},{}],388:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SimpleEventPlugin
 */

'use strict';

var EventConstants = require('./EventConstants');
var EventListener = require('fbjs/lib/EventListener');
var EventPropagators = require('./EventPropagators');
var ReactMount = require('./ReactMount');
var SyntheticClipboardEvent = require('./SyntheticClipboardEvent');
var SyntheticEvent = require('./SyntheticEvent');
var SyntheticFocusEvent = require('./SyntheticFocusEvent');
var SyntheticKeyboardEvent = require('./SyntheticKeyboardEvent');
var SyntheticMouseEvent = require('./SyntheticMouseEvent');
var SyntheticDragEvent = require('./SyntheticDragEvent');
var SyntheticTouchEvent = require('./SyntheticTouchEvent');
var SyntheticUIEvent = require('./SyntheticUIEvent');
var SyntheticWheelEvent = require('./SyntheticWheelEvent');

var emptyFunction = require('fbjs/lib/emptyFunction');
var getEventCharCode = require('./getEventCharCode');
var invariant = require('fbjs/lib/invariant');
var keyOf = require('fbjs/lib/keyOf');

var topLevelTypes = EventConstants.topLevelTypes;

var eventTypes = {
  abort: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onAbort: true }),
      captured: keyOf({ onAbortCapture: true })
    }
  },
  blur: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onBlur: true }),
      captured: keyOf({ onBlurCapture: true })
    }
  },
  canPlay: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onCanPlay: true }),
      captured: keyOf({ onCanPlayCapture: true })
    }
  },
  canPlayThrough: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onCanPlayThrough: true }),
      captured: keyOf({ onCanPlayThroughCapture: true })
    }
  },
  click: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onClick: true }),
      captured: keyOf({ onClickCapture: true })
    }
  },
  contextMenu: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onContextMenu: true }),
      captured: keyOf({ onContextMenuCapture: true })
    }
  },
  copy: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onCopy: true }),
      captured: keyOf({ onCopyCapture: true })
    }
  },
  cut: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onCut: true }),
      captured: keyOf({ onCutCapture: true })
    }
  },
  doubleClick: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onDoubleClick: true }),
      captured: keyOf({ onDoubleClickCapture: true })
    }
  },
  drag: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onDrag: true }),
      captured: keyOf({ onDragCapture: true })
    }
  },
  dragEnd: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onDragEnd: true }),
      captured: keyOf({ onDragEndCapture: true })
    }
  },
  dragEnter: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onDragEnter: true }),
      captured: keyOf({ onDragEnterCapture: true })
    }
  },
  dragExit: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onDragExit: true }),
      captured: keyOf({ onDragExitCapture: true })
    }
  },
  dragLeave: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onDragLeave: true }),
      captured: keyOf({ onDragLeaveCapture: true })
    }
  },
  dragOver: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onDragOver: true }),
      captured: keyOf({ onDragOverCapture: true })
    }
  },
  dragStart: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onDragStart: true }),
      captured: keyOf({ onDragStartCapture: true })
    }
  },
  drop: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onDrop: true }),
      captured: keyOf({ onDropCapture: true })
    }
  },
  durationChange: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onDurationChange: true }),
      captured: keyOf({ onDurationChangeCapture: true })
    }
  },
  emptied: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onEmptied: true }),
      captured: keyOf({ onEmptiedCapture: true })
    }
  },
  encrypted: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onEncrypted: true }),
      captured: keyOf({ onEncryptedCapture: true })
    }
  },
  ended: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onEnded: true }),
      captured: keyOf({ onEndedCapture: true })
    }
  },
  error: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onError: true }),
      captured: keyOf({ onErrorCapture: true })
    }
  },
  focus: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onFocus: true }),
      captured: keyOf({ onFocusCapture: true })
    }
  },
  input: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onInput: true }),
      captured: keyOf({ onInputCapture: true })
    }
  },
  keyDown: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onKeyDown: true }),
      captured: keyOf({ onKeyDownCapture: true })
    }
  },
  keyPress: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onKeyPress: true }),
      captured: keyOf({ onKeyPressCapture: true })
    }
  },
  keyUp: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onKeyUp: true }),
      captured: keyOf({ onKeyUpCapture: true })
    }
  },
  load: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onLoad: true }),
      captured: keyOf({ onLoadCapture: true })
    }
  },
  loadedData: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onLoadedData: true }),
      captured: keyOf({ onLoadedDataCapture: true })
    }
  },
  loadedMetadata: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onLoadedMetadata: true }),
      captured: keyOf({ onLoadedMetadataCapture: true })
    }
  },
  loadStart: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onLoadStart: true }),
      captured: keyOf({ onLoadStartCapture: true })
    }
  },
  // Note: We do not allow listening to mouseOver events. Instead, use the
  // onMouseEnter/onMouseLeave created by `EnterLeaveEventPlugin`.
  mouseDown: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onMouseDown: true }),
      captured: keyOf({ onMouseDownCapture: true })
    }
  },
  mouseMove: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onMouseMove: true }),
      captured: keyOf({ onMouseMoveCapture: true })
    }
  },
  mouseOut: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onMouseOut: true }),
      captured: keyOf({ onMouseOutCapture: true })
    }
  },
  mouseOver: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onMouseOver: true }),
      captured: keyOf({ onMouseOverCapture: true })
    }
  },
  mouseUp: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onMouseUp: true }),
      captured: keyOf({ onMouseUpCapture: true })
    }
  },
  paste: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onPaste: true }),
      captured: keyOf({ onPasteCapture: true })
    }
  },
  pause: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onPause: true }),
      captured: keyOf({ onPauseCapture: true })
    }
  },
  play: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onPlay: true }),
      captured: keyOf({ onPlayCapture: true })
    }
  },
  playing: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onPlaying: true }),
      captured: keyOf({ onPlayingCapture: true })
    }
  },
  progress: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onProgress: true }),
      captured: keyOf({ onProgressCapture: true })
    }
  },
  rateChange: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onRateChange: true }),
      captured: keyOf({ onRateChangeCapture: true })
    }
  },
  reset: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onReset: true }),
      captured: keyOf({ onResetCapture: true })
    }
  },
  scroll: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onScroll: true }),
      captured: keyOf({ onScrollCapture: true })
    }
  },
  seeked: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onSeeked: true }),
      captured: keyOf({ onSeekedCapture: true })
    }
  },
  seeking: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onSeeking: true }),
      captured: keyOf({ onSeekingCapture: true })
    }
  },
  stalled: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onStalled: true }),
      captured: keyOf({ onStalledCapture: true })
    }
  },
  submit: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onSubmit: true }),
      captured: keyOf({ onSubmitCapture: true })
    }
  },
  suspend: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onSuspend: true }),
      captured: keyOf({ onSuspendCapture: true })
    }
  },
  timeUpdate: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onTimeUpdate: true }),
      captured: keyOf({ onTimeUpdateCapture: true })
    }
  },
  touchCancel: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onTouchCancel: true }),
      captured: keyOf({ onTouchCancelCapture: true })
    }
  },
  touchEnd: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onTouchEnd: true }),
      captured: keyOf({ onTouchEndCapture: true })
    }
  },
  touchMove: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onTouchMove: true }),
      captured: keyOf({ onTouchMoveCapture: true })
    }
  },
  touchStart: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onTouchStart: true }),
      captured: keyOf({ onTouchStartCapture: true })
    }
  },
  volumeChange: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onVolumeChange: true }),
      captured: keyOf({ onVolumeChangeCapture: true })
    }
  },
  waiting: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onWaiting: true }),
      captured: keyOf({ onWaitingCapture: true })
    }
  },
  wheel: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onWheel: true }),
      captured: keyOf({ onWheelCapture: true })
    }
  }
};

var topLevelEventsToDispatchConfig = {
  topAbort: eventTypes.abort,
  topBlur: eventTypes.blur,
  topCanPlay: eventTypes.canPlay,
  topCanPlayThrough: eventTypes.canPlayThrough,
  topClick: eventTypes.click,
  topContextMenu: eventTypes.contextMenu,
  topCopy: eventTypes.copy,
  topCut: eventTypes.cut,
  topDoubleClick: eventTypes.doubleClick,
  topDrag: eventTypes.drag,
  topDragEnd: eventTypes.dragEnd,
  topDragEnter: eventTypes.dragEnter,
  topDragExit: eventTypes.dragExit,
  topDragLeave: eventTypes.dragLeave,
  topDragOver: eventTypes.dragOver,
  topDragStart: eventTypes.dragStart,
  topDrop: eventTypes.drop,
  topDurationChange: eventTypes.durationChange,
  topEmptied: eventTypes.emptied,
  topEncrypted: eventTypes.encrypted,
  topEnded: eventTypes.ended,
  topError: eventTypes.error,
  topFocus: eventTypes.focus,
  topInput: eventTypes.input,
  topKeyDown: eventTypes.keyDown,
  topKeyPress: eventTypes.keyPress,
  topKeyUp: eventTypes.keyUp,
  topLoad: eventTypes.load,
  topLoadedData: eventTypes.loadedData,
  topLoadedMetadata: eventTypes.loadedMetadata,
  topLoadStart: eventTypes.loadStart,
  topMouseDown: eventTypes.mouseDown,
  topMouseMove: eventTypes.mouseMove,
  topMouseOut: eventTypes.mouseOut,
  topMouseOver: eventTypes.mouseOver,
  topMouseUp: eventTypes.mouseUp,
  topPaste: eventTypes.paste,
  topPause: eventTypes.pause,
  topPlay: eventTypes.play,
  topPlaying: eventTypes.playing,
  topProgress: eventTypes.progress,
  topRateChange: eventTypes.rateChange,
  topReset: eventTypes.reset,
  topScroll: eventTypes.scroll,
  topSeeked: eventTypes.seeked,
  topSeeking: eventTypes.seeking,
  topStalled: eventTypes.stalled,
  topSubmit: eventTypes.submit,
  topSuspend: eventTypes.suspend,
  topTimeUpdate: eventTypes.timeUpdate,
  topTouchCancel: eventTypes.touchCancel,
  topTouchEnd: eventTypes.touchEnd,
  topTouchMove: eventTypes.touchMove,
  topTouchStart: eventTypes.touchStart,
  topVolumeChange: eventTypes.volumeChange,
  topWaiting: eventTypes.waiting,
  topWheel: eventTypes.wheel
};

for (var type in topLevelEventsToDispatchConfig) {
  topLevelEventsToDispatchConfig[type].dependencies = [type];
}

var ON_CLICK_KEY = keyOf({ onClick: null });
var onClickListeners = {};

var SimpleEventPlugin = {

  eventTypes: eventTypes,

  /**
   * @param {string} topLevelType Record from `EventConstants`.
   * @param {DOMEventTarget} topLevelTarget The listening component root node.
   * @param {string} topLevelTargetID ID of `topLevelTarget`.
   * @param {object} nativeEvent Native browser event.
   * @return {*} An accumulation of synthetic events.
   * @see {EventPluginHub.extractEvents}
   */
  extractEvents: function (topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget) {
    var dispatchConfig = topLevelEventsToDispatchConfig[topLevelType];
    if (!dispatchConfig) {
      return null;
    }
    var EventConstructor;
    switch (topLevelType) {
      case topLevelTypes.topAbort:
      case topLevelTypes.topCanPlay:
      case topLevelTypes.topCanPlayThrough:
      case topLevelTypes.topDurationChange:
      case topLevelTypes.topEmptied:
      case topLevelTypes.topEncrypted:
      case topLevelTypes.topEnded:
      case topLevelTypes.topError:
      case topLevelTypes.topInput:
      case topLevelTypes.topLoad:
      case topLevelTypes.topLoadedData:
      case topLevelTypes.topLoadedMetadata:
      case topLevelTypes.topLoadStart:
      case topLevelTypes.topPause:
      case topLevelTypes.topPlay:
      case topLevelTypes.topPlaying:
      case topLevelTypes.topProgress:
      case topLevelTypes.topRateChange:
      case topLevelTypes.topReset:
      case topLevelTypes.topSeeked:
      case topLevelTypes.topSeeking:
      case topLevelTypes.topStalled:
      case topLevelTypes.topSubmit:
      case topLevelTypes.topSuspend:
      case topLevelTypes.topTimeUpdate:
      case topLevelTypes.topVolumeChange:
      case topLevelTypes.topWaiting:
        // HTML Events
        // @see http://www.w3.org/TR/html5/index.html#events-0
        EventConstructor = SyntheticEvent;
        break;
      case topLevelTypes.topKeyPress:
        // FireFox creates a keypress event for function keys too. This removes
        // the unwanted keypress events. Enter is however both printable and
        // non-printable. One would expect Tab to be as well (but it isn't).
        if (getEventCharCode(nativeEvent) === 0) {
          return null;
        }
      /* falls through */
      case topLevelTypes.topKeyDown:
      case topLevelTypes.topKeyUp:
        EventConstructor = SyntheticKeyboardEvent;
        break;
      case topLevelTypes.topBlur:
      case topLevelTypes.topFocus:
        EventConstructor = SyntheticFocusEvent;
        break;
      case topLevelTypes.topClick:
        // Firefox creates a click event on right mouse clicks. This removes the
        // unwanted click events.
        if (nativeEvent.button === 2) {
          return null;
        }
      /* falls through */
      case topLevelTypes.topContextMenu:
      case topLevelTypes.topDoubleClick:
      case topLevelTypes.topMouseDown:
      case topLevelTypes.topMouseMove:
      case topLevelTypes.topMouseOut:
      case topLevelTypes.topMouseOver:
      case topLevelTypes.topMouseUp:
        EventConstructor = SyntheticMouseEvent;
        break;
      case topLevelTypes.topDrag:
      case topLevelTypes.topDragEnd:
      case topLevelTypes.topDragEnter:
      case topLevelTypes.topDragExit:
      case topLevelTypes.topDragLeave:
      case topLevelTypes.topDragOver:
      case topLevelTypes.topDragStart:
      case topLevelTypes.topDrop:
        EventConstructor = SyntheticDragEvent;
        break;
      case topLevelTypes.topTouchCancel:
      case topLevelTypes.topTouchEnd:
      case topLevelTypes.topTouchMove:
      case topLevelTypes.topTouchStart:
        EventConstructor = SyntheticTouchEvent;
        break;
      case topLevelTypes.topScroll:
        EventConstructor = SyntheticUIEvent;
        break;
      case topLevelTypes.topWheel:
        EventConstructor = SyntheticWheelEvent;
        break;
      case topLevelTypes.topCopy:
      case topLevelTypes.topCut:
      case topLevelTypes.topPaste:
        EventConstructor = SyntheticClipboardEvent;
        break;
    }
    !EventConstructor ? "production" !== 'production' ? invariant(false, 'SimpleEventPlugin: Unhandled event type, `%s`.', topLevelType) : invariant(false) : undefined;
    var event = EventConstructor.getPooled(dispatchConfig, topLevelTargetID, nativeEvent, nativeEventTarget);
    EventPropagators.accumulateTwoPhaseDispatches(event);
    return event;
  },

  didPutListener: function (id, registrationName, listener) {
    // Mobile Safari does not fire properly bubble click events on
    // non-interactive elements, which means delegated click listeners do not
    // fire. The workaround for this bug involves attaching an empty click
    // listener on the target node.
    if (registrationName === ON_CLICK_KEY) {
      var node = ReactMount.getNode(id);
      if (!onClickListeners[id]) {
        onClickListeners[id] = EventListener.listen(node, 'click', emptyFunction);
      }
    }
  },

  willDeleteListener: function (id, registrationName) {
    if (registrationName === ON_CLICK_KEY) {
      onClickListeners[id].remove();
      delete onClickListeners[id];
    }
  }

};

module.exports = SimpleEventPlugin;
},{"./EventConstants":319,"./EventPropagators":323,"./ReactMount":365,"./SyntheticClipboardEvent":389,"./SyntheticDragEvent":391,"./SyntheticEvent":392,"./SyntheticFocusEvent":393,"./SyntheticKeyboardEvent":395,"./SyntheticMouseEvent":396,"./SyntheticTouchEvent":397,"./SyntheticUIEvent":398,"./SyntheticWheelEvent":399,"./getEventCharCode":410,"fbjs/lib/EventListener":2,"fbjs/lib/emptyFunction":9,"fbjs/lib/invariant":17,"fbjs/lib/keyOf":21}],389:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SyntheticClipboardEvent
 * @typechecks static-only
 */

'use strict';

var SyntheticEvent = require('./SyntheticEvent');

/**
 * @interface Event
 * @see http://www.w3.org/TR/clipboard-apis/
 */
var ClipboardEventInterface = {
  clipboardData: function (event) {
    return 'clipboardData' in event ? event.clipboardData : window.clipboardData;
  }
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticUIEvent}
 */
function SyntheticClipboardEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
  SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
}

SyntheticEvent.augmentClass(SyntheticClipboardEvent, ClipboardEventInterface);

module.exports = SyntheticClipboardEvent;
},{"./SyntheticEvent":392}],390:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SyntheticCompositionEvent
 * @typechecks static-only
 */

'use strict';

var SyntheticEvent = require('./SyntheticEvent');

/**
 * @interface Event
 * @see http://www.w3.org/TR/DOM-Level-3-Events/#events-compositionevents
 */
var CompositionEventInterface = {
  data: null
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticUIEvent}
 */
function SyntheticCompositionEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
  SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
}

SyntheticEvent.augmentClass(SyntheticCompositionEvent, CompositionEventInterface);

module.exports = SyntheticCompositionEvent;
},{"./SyntheticEvent":392}],391:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SyntheticDragEvent
 * @typechecks static-only
 */

'use strict';

var SyntheticMouseEvent = require('./SyntheticMouseEvent');

/**
 * @interface DragEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */
var DragEventInterface = {
  dataTransfer: null
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticUIEvent}
 */
function SyntheticDragEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
  SyntheticMouseEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
}

SyntheticMouseEvent.augmentClass(SyntheticDragEvent, DragEventInterface);

module.exports = SyntheticDragEvent;
},{"./SyntheticMouseEvent":396}],392:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SyntheticEvent
 * @typechecks static-only
 */

'use strict';

var PooledClass = require('./PooledClass');

var assign = require('./Object.assign');
var emptyFunction = require('fbjs/lib/emptyFunction');
var warning = require('fbjs/lib/warning');

/**
 * @interface Event
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */
var EventInterface = {
  type: null,
  target: null,
  // currentTarget is set when dispatching; no use in copying it here
  currentTarget: emptyFunction.thatReturnsNull,
  eventPhase: null,
  bubbles: null,
  cancelable: null,
  timeStamp: function (event) {
    return event.timeStamp || Date.now();
  },
  defaultPrevented: null,
  isTrusted: null
};

/**
 * Synthetic events are dispatched by event plugins, typically in response to a
 * top-level event delegation handler.
 *
 * These systems should generally use pooling to reduce the frequency of garbage
 * collection. The system should check `isPersistent` to determine whether the
 * event should be released into the pool after being dispatched. Users that
 * need a persisted event should invoke `persist`.
 *
 * Synthetic events (and subclasses) implement the DOM Level 3 Events API by
 * normalizing browser quirks. Subclasses do not necessarily have to implement a
 * DOM interface; custom application-specific events can also subclass this.
 *
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 */
function SyntheticEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
  this.dispatchConfig = dispatchConfig;
  this.dispatchMarker = dispatchMarker;
  this.nativeEvent = nativeEvent;

  var Interface = this.constructor.Interface;
  for (var propName in Interface) {
    if (!Interface.hasOwnProperty(propName)) {
      continue;
    }
    var normalize = Interface[propName];
    if (normalize) {
      this[propName] = normalize(nativeEvent);
    } else {
      if (propName === 'target') {
        this.target = nativeEventTarget;
      } else {
        this[propName] = nativeEvent[propName];
      }
    }
  }

  var defaultPrevented = nativeEvent.defaultPrevented != null ? nativeEvent.defaultPrevented : nativeEvent.returnValue === false;
  if (defaultPrevented) {
    this.isDefaultPrevented = emptyFunction.thatReturnsTrue;
  } else {
    this.isDefaultPrevented = emptyFunction.thatReturnsFalse;
  }
  this.isPropagationStopped = emptyFunction.thatReturnsFalse;
}

assign(SyntheticEvent.prototype, {

  preventDefault: function () {
    this.defaultPrevented = true;
    var event = this.nativeEvent;
    if ("production" !== 'production') {
      "production" !== 'production' ? warning(event, 'This synthetic event is reused for performance reasons. If you\'re ' + 'seeing this, you\'re calling `preventDefault` on a ' + 'released/nullified synthetic event. This is a no-op. See ' + 'https://fb.me/react-event-pooling for more information.') : undefined;
    }
    if (!event) {
      return;
    }

    if (event.preventDefault) {
      event.preventDefault();
    } else {
      event.returnValue = false;
    }
    this.isDefaultPrevented = emptyFunction.thatReturnsTrue;
  },

  stopPropagation: function () {
    var event = this.nativeEvent;
    if ("production" !== 'production') {
      "production" !== 'production' ? warning(event, 'This synthetic event is reused for performance reasons. If you\'re ' + 'seeing this, you\'re calling `stopPropagation` on a ' + 'released/nullified synthetic event. This is a no-op. See ' + 'https://fb.me/react-event-pooling for more information.') : undefined;
    }
    if (!event) {
      return;
    }

    if (event.stopPropagation) {
      event.stopPropagation();
    } else {
      event.cancelBubble = true;
    }
    this.isPropagationStopped = emptyFunction.thatReturnsTrue;
  },

  /**
   * We release all dispatched `SyntheticEvent`s after each event loop, adding
   * them back into the pool. This allows a way to hold onto a reference that
   * won't be added back into the pool.
   */
  persist: function () {
    this.isPersistent = emptyFunction.thatReturnsTrue;
  },

  /**
   * Checks if this event should be released back into the pool.
   *
   * @return {boolean} True if this should not be released, false otherwise.
   */
  isPersistent: emptyFunction.thatReturnsFalse,

  /**
   * `PooledClass` looks for `destructor` on each instance it releases.
   */
  destructor: function () {
    var Interface = this.constructor.Interface;
    for (var propName in Interface) {
      this[propName] = null;
    }
    this.dispatchConfig = null;
    this.dispatchMarker = null;
    this.nativeEvent = null;
  }

});

SyntheticEvent.Interface = EventInterface;

/**
 * Helper to reduce boilerplate when creating subclasses.
 *
 * @param {function} Class
 * @param {?object} Interface
 */
SyntheticEvent.augmentClass = function (Class, Interface) {
  var Super = this;

  var prototype = Object.create(Super.prototype);
  assign(prototype, Class.prototype);
  Class.prototype = prototype;
  Class.prototype.constructor = Class;

  Class.Interface = assign({}, Super.Interface, Interface);
  Class.augmentClass = Super.augmentClass;

  PooledClass.addPoolingTo(Class, PooledClass.fourArgumentPooler);
};

PooledClass.addPoolingTo(SyntheticEvent, PooledClass.fourArgumentPooler);

module.exports = SyntheticEvent;
},{"./Object.assign":327,"./PooledClass":328,"fbjs/lib/emptyFunction":9,"fbjs/lib/warning":27}],393:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SyntheticFocusEvent
 * @typechecks static-only
 */

'use strict';

var SyntheticUIEvent = require('./SyntheticUIEvent');

/**
 * @interface FocusEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */
var FocusEventInterface = {
  relatedTarget: null
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticUIEvent}
 */
function SyntheticFocusEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
  SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
}

SyntheticUIEvent.augmentClass(SyntheticFocusEvent, FocusEventInterface);

module.exports = SyntheticFocusEvent;
},{"./SyntheticUIEvent":398}],394:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SyntheticInputEvent
 * @typechecks static-only
 */

'use strict';

var SyntheticEvent = require('./SyntheticEvent');

/**
 * @interface Event
 * @see http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105
 *      /#events-inputevents
 */
var InputEventInterface = {
  data: null
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticUIEvent}
 */
function SyntheticInputEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
  SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
}

SyntheticEvent.augmentClass(SyntheticInputEvent, InputEventInterface);

module.exports = SyntheticInputEvent;
},{"./SyntheticEvent":392}],395:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SyntheticKeyboardEvent
 * @typechecks static-only
 */

'use strict';

var SyntheticUIEvent = require('./SyntheticUIEvent');

var getEventCharCode = require('./getEventCharCode');
var getEventKey = require('./getEventKey');
var getEventModifierState = require('./getEventModifierState');

/**
 * @interface KeyboardEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */
var KeyboardEventInterface = {
  key: getEventKey,
  location: null,
  ctrlKey: null,
  shiftKey: null,
  altKey: null,
  metaKey: null,
  repeat: null,
  locale: null,
  getModifierState: getEventModifierState,
  // Legacy Interface
  charCode: function (event) {
    // `charCode` is the result of a KeyPress event and represents the value of
    // the actual printable character.

    // KeyPress is deprecated, but its replacement is not yet final and not
    // implemented in any major browser. Only KeyPress has charCode.
    if (event.type === 'keypress') {
      return getEventCharCode(event);
    }
    return 0;
  },
  keyCode: function (event) {
    // `keyCode` is the result of a KeyDown/Up event and represents the value of
    // physical keyboard key.

    // The actual meaning of the value depends on the users' keyboard layout
    // which cannot be detected. Assuming that it is a US keyboard layout
    // provides a surprisingly accurate mapping for US and European users.
    // Due to this, it is left to the user to implement at this time.
    if (event.type === 'keydown' || event.type === 'keyup') {
      return event.keyCode;
    }
    return 0;
  },
  which: function (event) {
    // `which` is an alias for either `keyCode` or `charCode` depending on the
    // type of the event.
    if (event.type === 'keypress') {
      return getEventCharCode(event);
    }
    if (event.type === 'keydown' || event.type === 'keyup') {
      return event.keyCode;
    }
    return 0;
  }
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticUIEvent}
 */
function SyntheticKeyboardEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
  SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
}

SyntheticUIEvent.augmentClass(SyntheticKeyboardEvent, KeyboardEventInterface);

module.exports = SyntheticKeyboardEvent;
},{"./SyntheticUIEvent":398,"./getEventCharCode":410,"./getEventKey":411,"./getEventModifierState":412}],396:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SyntheticMouseEvent
 * @typechecks static-only
 */

'use strict';

var SyntheticUIEvent = require('./SyntheticUIEvent');
var ViewportMetrics = require('./ViewportMetrics');

var getEventModifierState = require('./getEventModifierState');

/**
 * @interface MouseEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */
var MouseEventInterface = {
  screenX: null,
  screenY: null,
  clientX: null,
  clientY: null,
  ctrlKey: null,
  shiftKey: null,
  altKey: null,
  metaKey: null,
  getModifierState: getEventModifierState,
  button: function (event) {
    // Webkit, Firefox, IE9+
    // which:  1 2 3
    // button: 0 1 2 (standard)
    var button = event.button;
    if ('which' in event) {
      return button;
    }
    // IE<9
    // which:  undefined
    // button: 0 0 0
    // button: 1 4 2 (onmouseup)
    return button === 2 ? 2 : button === 4 ? 1 : 0;
  },
  buttons: null,
  relatedTarget: function (event) {
    return event.relatedTarget || (event.fromElement === event.srcElement ? event.toElement : event.fromElement);
  },
  // "Proprietary" Interface.
  pageX: function (event) {
    return 'pageX' in event ? event.pageX : event.clientX + ViewportMetrics.currentScrollLeft;
  },
  pageY: function (event) {
    return 'pageY' in event ? event.pageY : event.clientY + ViewportMetrics.currentScrollTop;
  }
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticUIEvent}
 */
function SyntheticMouseEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
  SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
}

SyntheticUIEvent.augmentClass(SyntheticMouseEvent, MouseEventInterface);

module.exports = SyntheticMouseEvent;
},{"./SyntheticUIEvent":398,"./ViewportMetrics":401,"./getEventModifierState":412}],397:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SyntheticTouchEvent
 * @typechecks static-only
 */

'use strict';

var SyntheticUIEvent = require('./SyntheticUIEvent');

var getEventModifierState = require('./getEventModifierState');

/**
 * @interface TouchEvent
 * @see http://www.w3.org/TR/touch-events/
 */
var TouchEventInterface = {
  touches: null,
  targetTouches: null,
  changedTouches: null,
  altKey: null,
  metaKey: null,
  ctrlKey: null,
  shiftKey: null,
  getModifierState: getEventModifierState
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticUIEvent}
 */
function SyntheticTouchEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
  SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
}

SyntheticUIEvent.augmentClass(SyntheticTouchEvent, TouchEventInterface);

module.exports = SyntheticTouchEvent;
},{"./SyntheticUIEvent":398,"./getEventModifierState":412}],398:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SyntheticUIEvent
 * @typechecks static-only
 */

'use strict';

var SyntheticEvent = require('./SyntheticEvent');

var getEventTarget = require('./getEventTarget');

/**
 * @interface UIEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */
var UIEventInterface = {
  view: function (event) {
    if (event.view) {
      return event.view;
    }

    var target = getEventTarget(event);
    if (target != null && target.window === target) {
      // target is a window object
      return target;
    }

    var doc = target.ownerDocument;
    // TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.
    if (doc) {
      return doc.defaultView || doc.parentWindow;
    } else {
      return window;
    }
  },
  detail: function (event) {
    return event.detail || 0;
  }
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticEvent}
 */
function SyntheticUIEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
  SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
}

SyntheticEvent.augmentClass(SyntheticUIEvent, UIEventInterface);

module.exports = SyntheticUIEvent;
},{"./SyntheticEvent":392,"./getEventTarget":413}],399:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SyntheticWheelEvent
 * @typechecks static-only
 */

'use strict';

var SyntheticMouseEvent = require('./SyntheticMouseEvent');

/**
 * @interface WheelEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */
var WheelEventInterface = {
  deltaX: function (event) {
    return 'deltaX' in event ? event.deltaX :
    // Fallback to `wheelDeltaX` for Webkit and normalize (right is positive).
    'wheelDeltaX' in event ? -event.wheelDeltaX : 0;
  },
  deltaY: function (event) {
    return 'deltaY' in event ? event.deltaY :
    // Fallback to `wheelDeltaY` for Webkit and normalize (down is positive).
    'wheelDeltaY' in event ? -event.wheelDeltaY :
    // Fallback to `wheelDelta` for IE<9 and normalize (down is positive).
    'wheelDelta' in event ? -event.wheelDelta : 0;
  },
  deltaZ: null,

  // Browsers without "deltaMode" is reporting in raw wheel delta where one
  // notch on the scroll is always +/- 120, roughly equivalent to pixels.
  // A good approximation of DOM_DELTA_LINE (1) is 5% of viewport size or
  // ~40 pixels, for DOM_DELTA_SCREEN (2) it is 87.5% of viewport size.
  deltaMode: null
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticMouseEvent}
 */
function SyntheticWheelEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
  SyntheticMouseEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
}

SyntheticMouseEvent.augmentClass(SyntheticWheelEvent, WheelEventInterface);

module.exports = SyntheticWheelEvent;
},{"./SyntheticMouseEvent":396}],400:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule Transaction
 */

'use strict';

var invariant = require('fbjs/lib/invariant');

/**
 * `Transaction` creates a black box that is able to wrap any method such that
 * certain invariants are maintained before and after the method is invoked
 * (Even if an exception is thrown while invoking the wrapped method). Whoever
 * instantiates a transaction can provide enforcers of the invariants at
 * creation time. The `Transaction` class itself will supply one additional
 * automatic invariant for you - the invariant that any transaction instance
 * should not be run while it is already being run. You would typically create a
 * single instance of a `Transaction` for reuse multiple times, that potentially
 * is used to wrap several different methods. Wrappers are extremely simple -
 * they only require implementing two methods.
 *
 * <pre>
 *                       wrappers (injected at creation time)
 *                                      +        +
 *                                      |        |
 *                    +-----------------|--------|--------------+
 *                    |                 v        |              |
 *                    |      +---------------+   |              |
 *                    |   +--|    wrapper1   |---|----+         |
 *                    |   |  +---------------+   v    |         |
 *                    |   |          +-------------+  |         |
 *                    |   |     +----|   wrapper2  |--------+   |
 *                    |   |     |    +-------------+  |     |   |
 *                    |   |     |                     |     |   |
 *                    |   v     v                     v     v   | wrapper
 *                    | +---+ +---+   +---------+   +---+ +---+ | invariants
 * perform(anyMethod) | |   | |   |   |         |   |   | |   | | maintained
 * +----------------->|-|---|-|---|-->|anyMethod|---|---|-|---|-|-------->
 *                    | |   | |   |   |         |   |   | |   | |
 *                    | |   | |   |   |         |   |   | |   | |
 *                    | |   | |   |   |         |   |   | |   | |
 *                    | +---+ +---+   +---------+   +---+ +---+ |
 *                    |  initialize                    close    |
 *                    +-----------------------------------------+
 * </pre>
 *
 * Use cases:
 * - Preserving the input selection ranges before/after reconciliation.
 *   Restoring selection even in the event of an unexpected error.
 * - Deactivating events while rearranging the DOM, preventing blurs/focuses,
 *   while guaranteeing that afterwards, the event system is reactivated.
 * - Flushing a queue of collected DOM mutations to the main UI thread after a
 *   reconciliation takes place in a worker thread.
 * - Invoking any collected `componentDidUpdate` callbacks after rendering new
 *   content.
 * - (Future use case): Wrapping particular flushes of the `ReactWorker` queue
 *   to preserve the `scrollTop` (an automatic scroll aware DOM).
 * - (Future use case): Layout calculations before and after DOM updates.
 *
 * Transactional plugin API:
 * - A module that has an `initialize` method that returns any precomputation.
 * - and a `close` method that accepts the precomputation. `close` is invoked
 *   when the wrapped process is completed, or has failed.
 *
 * @param {Array<TransactionalWrapper>} transactionWrapper Wrapper modules
 * that implement `initialize` and `close`.
 * @return {Transaction} Single transaction for reuse in thread.
 *
 * @class Transaction
 */
var Mixin = {
  /**
   * Sets up this instance so that it is prepared for collecting metrics. Does
   * so such that this setup method may be used on an instance that is already
   * initialized, in a way that does not consume additional memory upon reuse.
   * That can be useful if you decide to make your subclass of this mixin a
   * "PooledClass".
   */
  reinitializeTransaction: function () {
    this.transactionWrappers = this.getTransactionWrappers();
    if (this.wrapperInitData) {
      this.wrapperInitData.length = 0;
    } else {
      this.wrapperInitData = [];
    }
    this._isInTransaction = false;
  },

  _isInTransaction: false,

  /**
   * @abstract
   * @return {Array<TransactionWrapper>} Array of transaction wrappers.
   */
  getTransactionWrappers: null,

  isInTransaction: function () {
    return !!this._isInTransaction;
  },

  /**
   * Executes the function within a safety window. Use this for the top level
   * methods that result in large amounts of computation/mutations that would
   * need to be safety checked. The optional arguments helps prevent the need
   * to bind in many cases.
   *
   * @param {function} method Member of scope to call.
   * @param {Object} scope Scope to invoke from.
   * @param {Object?=} a Argument to pass to the method.
   * @param {Object?=} b Argument to pass to the method.
   * @param {Object?=} c Argument to pass to the method.
   * @param {Object?=} d Argument to pass to the method.
   * @param {Object?=} e Argument to pass to the method.
   * @param {Object?=} f Argument to pass to the method.
   *
   * @return {*} Return value from `method`.
   */
  perform: function (method, scope, a, b, c, d, e, f) {
    !!this.isInTransaction() ? "production" !== 'production' ? invariant(false, 'Transaction.perform(...): Cannot initialize a transaction when there ' + 'is already an outstanding transaction.') : invariant(false) : undefined;
    var errorThrown;
    var ret;
    try {
      this._isInTransaction = true;
      // Catching errors makes debugging more difficult, so we start with
      // errorThrown set to true before setting it to false after calling
      // close -- if it's still set to true in the finally block, it means
      // one of these calls threw.
      errorThrown = true;
      this.initializeAll(0);
      ret = method.call(scope, a, b, c, d, e, f);
      errorThrown = false;
    } finally {
      try {
        if (errorThrown) {
          // If `method` throws, prefer to show that stack trace over any thrown
          // by invoking `closeAll`.
          try {
            this.closeAll(0);
          } catch (err) {}
        } else {
          // Since `method` didn't throw, we don't want to silence the exception
          // here.
          this.closeAll(0);
        }
      } finally {
        this._isInTransaction = false;
      }
    }
    return ret;
  },

  initializeAll: function (startIndex) {
    var transactionWrappers = this.transactionWrappers;
    for (var i = startIndex; i < transactionWrappers.length; i++) {
      var wrapper = transactionWrappers[i];
      try {
        // Catching errors makes debugging more difficult, so we start with the
        // OBSERVED_ERROR state before overwriting it with the real return value
        // of initialize -- if it's still set to OBSERVED_ERROR in the finally
        // block, it means wrapper.initialize threw.
        this.wrapperInitData[i] = Transaction.OBSERVED_ERROR;
        this.wrapperInitData[i] = wrapper.initialize ? wrapper.initialize.call(this) : null;
      } finally {
        if (this.wrapperInitData[i] === Transaction.OBSERVED_ERROR) {
          // The initializer for wrapper i threw an error; initialize the
          // remaining wrappers but silence any exceptions from them to ensure
          // that the first error is the one to bubble up.
          try {
            this.initializeAll(i + 1);
          } catch (err) {}
        }
      }
    }
  },

  /**
   * Invokes each of `this.transactionWrappers.close[i]` functions, passing into
   * them the respective return values of `this.transactionWrappers.init[i]`
   * (`close`rs that correspond to initializers that failed will not be
   * invoked).
   */
  closeAll: function (startIndex) {
    !this.isInTransaction() ? "production" !== 'production' ? invariant(false, 'Transaction.closeAll(): Cannot close transaction when none are open.') : invariant(false) : undefined;
    var transactionWrappers = this.transactionWrappers;
    for (var i = startIndex; i < transactionWrappers.length; i++) {
      var wrapper = transactionWrappers[i];
      var initData = this.wrapperInitData[i];
      var errorThrown;
      try {
        // Catching errors makes debugging more difficult, so we start with
        // errorThrown set to true before setting it to false after calling
        // close -- if it's still set to true in the finally block, it means
        // wrapper.close threw.
        errorThrown = true;
        if (initData !== Transaction.OBSERVED_ERROR && wrapper.close) {
          wrapper.close.call(this, initData);
        }
        errorThrown = false;
      } finally {
        if (errorThrown) {
          // The closer for wrapper i threw an error; close the remaining
          // wrappers but silence any exceptions from them to ensure that the
          // first error is the one to bubble up.
          try {
            this.closeAll(i + 1);
          } catch (e) {}
        }
      }
    }
    this.wrapperInitData.length = 0;
  }
};

var Transaction = {

  Mixin: Mixin,

  /**
   * Token to look for to determine if an error occurred.
   */
  OBSERVED_ERROR: {}

};

module.exports = Transaction;
},{"fbjs/lib/invariant":17}],401:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ViewportMetrics
 */

'use strict';

var ViewportMetrics = {

  currentScrollLeft: 0,

  currentScrollTop: 0,

  refreshScrollValues: function (scrollPosition) {
    ViewportMetrics.currentScrollLeft = scrollPosition.x;
    ViewportMetrics.currentScrollTop = scrollPosition.y;
  }

};

module.exports = ViewportMetrics;
},{}],402:[function(require,module,exports){
/**
 * Copyright 2014-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule accumulateInto
 */

'use strict';

var invariant = require('fbjs/lib/invariant');

/**
 *
 * Accumulates items that must not be null or undefined into the first one. This
 * is used to conserve memory by avoiding array allocations, and thus sacrifices
 * API cleanness. Since `current` can be null before being passed in and not
 * null after this function, make sure to assign it back to `current`:
 *
 * `a = accumulateInto(a, b);`
 *
 * This API should be sparingly used. Try `accumulate` for something cleaner.
 *
 * @return {*|array<*>} An accumulation of items.
 */

function accumulateInto(current, next) {
  !(next != null) ? "production" !== 'production' ? invariant(false, 'accumulateInto(...): Accumulated items must not be null or undefined.') : invariant(false) : undefined;
  if (current == null) {
    return next;
  }

  // Both are not empty. Warning: Never call x.concat(y) when you are not
  // certain that x is an Array (x could be a string with concat method).
  var currentIsArray = Array.isArray(current);
  var nextIsArray = Array.isArray(next);

  if (currentIsArray && nextIsArray) {
    current.push.apply(current, next);
    return current;
  }

  if (currentIsArray) {
    current.push(next);
    return current;
  }

  if (nextIsArray) {
    // A bit too dangerous to mutate `next`.
    return [current].concat(next);
  }

  return [current, next];
}

module.exports = accumulateInto;
},{"fbjs/lib/invariant":17}],403:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule adler32
 */

'use strict';

var MOD = 65521;

// adler32 is not cryptographically strong, and is only used to sanity check that
// markup generated on the server matches the markup generated on the client.
// This implementation (a modified version of the SheetJS version) has been optimized
// for our use case, at the expense of conforming to the adler32 specification
// for non-ascii inputs.
function adler32(data) {
  var a = 1;
  var b = 0;
  var i = 0;
  var l = data.length;
  var m = l & ~0x3;
  while (i < m) {
    for (; i < Math.min(i + 4096, m); i += 4) {
      b += (a += data.charCodeAt(i)) + (a += data.charCodeAt(i + 1)) + (a += data.charCodeAt(i + 2)) + (a += data.charCodeAt(i + 3));
    }
    a %= MOD;
    b %= MOD;
  }
  for (; i < l; i++) {
    b += a += data.charCodeAt(i);
  }
  a %= MOD;
  b %= MOD;
  return a | b << 16;
}

module.exports = adler32;
},{}],404:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule canDefineProperty
 */

'use strict';

var canDefineProperty = false;
if ("production" !== 'production') {
  try {
    Object.defineProperty({}, 'x', { get: function () {} });
    canDefineProperty = true;
  } catch (x) {
    // IE will fail on defineProperty
  }
}

module.exports = canDefineProperty;
},{}],405:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule dangerousStyleValue
 * @typechecks static-only
 */

'use strict';

var CSSProperty = require('./CSSProperty');

var isUnitlessNumber = CSSProperty.isUnitlessNumber;

/**
 * Convert a value into the proper css writable value. The style name `name`
 * should be logical (no hyphens), as specified
 * in `CSSProperty.isUnitlessNumber`.
 *
 * @param {string} name CSS property name such as `topMargin`.
 * @param {*} value CSS property value such as `10px`.
 * @return {string} Normalized style value with dimensions applied.
 */
function dangerousStyleValue(name, value) {
  // Note that we've removed escapeTextForBrowser() calls here since the
  // whole string will be escaped when the attribute is injected into
  // the markup. If you provide unsafe user data here they can inject
  // arbitrary CSS which may be problematic (I couldn't repro this):
  // https://www.owasp.org/index.php/XSS_Filter_Evasion_Cheat_Sheet
  // http://www.thespanner.co.uk/2007/11/26/ultimate-xss-css-injection/
  // This is not an XSS hole but instead a potential CSS injection issue
  // which has lead to a greater discussion about how we're going to
  // trust URLs moving forward. See #2115901

  var isEmpty = value == null || typeof value === 'boolean' || value === '';
  if (isEmpty) {
    return '';
  }

  var isNonNumeric = isNaN(value);
  if (isNonNumeric || value === 0 || isUnitlessNumber.hasOwnProperty(name) && isUnitlessNumber[name]) {
    return '' + value; // cast to string
  }

  if (typeof value === 'string') {
    value = value.trim();
  }
  return value + 'px';
}

module.exports = dangerousStyleValue;
},{"./CSSProperty":308}],406:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule escapeTextContentForBrowser
 */

'use strict';

var ESCAPE_LOOKUP = {
  '&': '&amp;',
  '>': '&gt;',
  '<': '&lt;',
  '"': '&quot;',
  '\'': '&#x27;'
};

var ESCAPE_REGEX = /[&><"']/g;

function escaper(match) {
  return ESCAPE_LOOKUP[match];
}

/**
 * Escapes text to prevent scripting attacks.
 *
 * @param {*} text Text value to escape.
 * @return {string} An escaped string.
 */
function escapeTextContentForBrowser(text) {
  return ('' + text).replace(ESCAPE_REGEX, escaper);
}

module.exports = escapeTextContentForBrowser;
},{}],407:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule findDOMNode
 * @typechecks static-only
 */

'use strict';

var ReactCurrentOwner = require('./ReactCurrentOwner');
var ReactInstanceMap = require('./ReactInstanceMap');
var ReactMount = require('./ReactMount');

var invariant = require('fbjs/lib/invariant');
var warning = require('fbjs/lib/warning');

/**
 * Returns the DOM node rendered by this element.
 *
 * @param {ReactComponent|DOMElement} componentOrElement
 * @return {?DOMElement} The root node of this element.
 */
function findDOMNode(componentOrElement) {
  if ("production" !== 'production') {
    var owner = ReactCurrentOwner.current;
    if (owner !== null) {
      "production" !== 'production' ? warning(owner._warnedAboutRefsInRender, '%s is accessing getDOMNode or findDOMNode inside its render(). ' + 'render() should be a pure function of props and state. It should ' + 'never access something that requires stale data from the previous ' + 'render, such as refs. Move this logic to componentDidMount and ' + 'componentDidUpdate instead.', owner.getName() || 'A component') : undefined;
      owner._warnedAboutRefsInRender = true;
    }
  }
  if (componentOrElement == null) {
    return null;
  }
  if (componentOrElement.nodeType === 1) {
    return componentOrElement;
  }
  if (ReactInstanceMap.has(componentOrElement)) {
    return ReactMount.getNodeFromInstance(componentOrElement);
  }
  !(componentOrElement.render == null || typeof componentOrElement.render !== 'function') ? "production" !== 'production' ? invariant(false, 'findDOMNode was called on an unmounted component.') : invariant(false) : undefined;
  !false ? "production" !== 'production' ? invariant(false, 'Element appears to be neither ReactComponent nor DOMNode (keys: %s)', Object.keys(componentOrElement)) : invariant(false) : undefined;
}

module.exports = findDOMNode;
},{"./ReactCurrentOwner":338,"./ReactInstanceMap":363,"./ReactMount":365,"fbjs/lib/invariant":17,"fbjs/lib/warning":27}],408:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule flattenChildren
 */

'use strict';

var traverseAllChildren = require('./traverseAllChildren');
var warning = require('fbjs/lib/warning');

/**
 * @param {function} traverseContext Context passed through traversal.
 * @param {?ReactComponent} child React child component.
 * @param {!string} name String name of key path to child.
 */
function flattenSingleChildIntoContext(traverseContext, child, name) {
  // We found a component instance.
  var result = traverseContext;
  var keyUnique = result[name] === undefined;
  if ("production" !== 'production') {
    "production" !== 'production' ? warning(keyUnique, 'flattenChildren(...): Encountered two children with the same key, ' + '`%s`. Child keys must be unique; when two children share a key, only ' + 'the first child will be used.', name) : undefined;
  }
  if (keyUnique && child != null) {
    result[name] = child;
  }
}

/**
 * Flattens children that are typically specified as `props.children`. Any null
 * children will not be included in the resulting object.
 * @return {!object} flattened children keyed by name.
 */
function flattenChildren(children) {
  if (children == null) {
    return children;
  }
  var result = {};
  traverseAllChildren(children, flattenSingleChildIntoContext, result);
  return result;
}

module.exports = flattenChildren;
},{"./traverseAllChildren":424,"fbjs/lib/warning":27}],409:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule forEachAccumulated
 */

'use strict';

/**
 * @param {array} arr an "accumulation" of items which is either an Array or
 * a single item. Useful when paired with the `accumulate` module. This is a
 * simple utility that allows us to reason about a collection of items, but
 * handling the case when there is exactly one item (and we do not need to
 * allocate an array).
 */
var forEachAccumulated = function (arr, cb, scope) {
  if (Array.isArray(arr)) {
    arr.forEach(cb, scope);
  } else if (arr) {
    cb.call(scope, arr);
  }
};

module.exports = forEachAccumulated;
},{}],410:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule getEventCharCode
 * @typechecks static-only
 */

'use strict';

/**
 * `charCode` represents the actual "character code" and is safe to use with
 * `String.fromCharCode`. As such, only keys that correspond to printable
 * characters produce a valid `charCode`, the only exception to this is Enter.
 * The Tab-key is considered non-printable and does not have a `charCode`,
 * presumably because it does not produce a tab-character in browsers.
 *
 * @param {object} nativeEvent Native browser event.
 * @return {number} Normalized `charCode` property.
 */
function getEventCharCode(nativeEvent) {
  var charCode;
  var keyCode = nativeEvent.keyCode;

  if ('charCode' in nativeEvent) {
    charCode = nativeEvent.charCode;

    // FF does not set `charCode` for the Enter-key, check against `keyCode`.
    if (charCode === 0 && keyCode === 13) {
      charCode = 13;
    }
  } else {
    // IE8 does not implement `charCode`, but `keyCode` has the correct value.
    charCode = keyCode;
  }

  // Some non-printable keys are reported in `charCode`/`keyCode`, discard them.
  // Must not discard the (non-)printable Enter-key.
  if (charCode >= 32 || charCode === 13) {
    return charCode;
  }

  return 0;
}

module.exports = getEventCharCode;
},{}],411:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule getEventKey
 * @typechecks static-only
 */

'use strict';

var getEventCharCode = require('./getEventCharCode');

/**
 * Normalization of deprecated HTML5 `key` values
 * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names
 */
var normalizeKey = {
  'Esc': 'Escape',
  'Spacebar': ' ',
  'Left': 'ArrowLeft',
  'Up': 'ArrowUp',
  'Right': 'ArrowRight',
  'Down': 'ArrowDown',
  'Del': 'Delete',
  'Win': 'OS',
  'Menu': 'ContextMenu',
  'Apps': 'ContextMenu',
  'Scroll': 'ScrollLock',
  'MozPrintableKey': 'Unidentified'
};

/**
 * Translation from legacy `keyCode` to HTML5 `key`
 * Only special keys supported, all others depend on keyboard layout or browser
 * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names
 */
var translateToKey = {
  8: 'Backspace',
  9: 'Tab',
  12: 'Clear',
  13: 'Enter',
  16: 'Shift',
  17: 'Control',
  18: 'Alt',
  19: 'Pause',
  20: 'CapsLock',
  27: 'Escape',
  32: ' ',
  33: 'PageUp',
  34: 'PageDown',
  35: 'End',
  36: 'Home',
  37: 'ArrowLeft',
  38: 'ArrowUp',
  39: 'ArrowRight',
  40: 'ArrowDown',
  45: 'Insert',
  46: 'Delete',
  112: 'F1', 113: 'F2', 114: 'F3', 115: 'F4', 116: 'F5', 117: 'F6',
  118: 'F7', 119: 'F8', 120: 'F9', 121: 'F10', 122: 'F11', 123: 'F12',
  144: 'NumLock',
  145: 'ScrollLock',
  224: 'Meta'
};

/**
 * @param {object} nativeEvent Native browser event.
 * @return {string} Normalized `key` property.
 */
function getEventKey(nativeEvent) {
  if (nativeEvent.key) {
    // Normalize inconsistent values reported by browsers due to
    // implementations of a working draft specification.

    // FireFox implements `key` but returns `MozPrintableKey` for all
    // printable characters (normalized to `Unidentified`), ignore it.
    var key = normalizeKey[nativeEvent.key] || nativeEvent.key;
    if (key !== 'Unidentified') {
      return key;
    }
  }

  // Browser does not implement `key`, polyfill as much of it as we can.
  if (nativeEvent.type === 'keypress') {
    var charCode = getEventCharCode(nativeEvent);

    // The enter-key is technically both printable and non-printable and can
    // thus be captured by `keypress`, no other non-printable key should.
    return charCode === 13 ? 'Enter' : String.fromCharCode(charCode);
  }
  if (nativeEvent.type === 'keydown' || nativeEvent.type === 'keyup') {
    // While user keyboard layout determines the actual meaning of each
    // `keyCode` value, almost all function keys have a universal value.
    return translateToKey[nativeEvent.keyCode] || 'Unidentified';
  }
  return '';
}

module.exports = getEventKey;
},{"./getEventCharCode":410}],412:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule getEventModifierState
 * @typechecks static-only
 */

'use strict';

/**
 * Translation from modifier key to the associated property in the event.
 * @see http://www.w3.org/TR/DOM-Level-3-Events/#keys-Modifiers
 */

var modifierKeyToProp = {
  'Alt': 'altKey',
  'Control': 'ctrlKey',
  'Meta': 'metaKey',
  'Shift': 'shiftKey'
};

// IE8 does not implement getModifierState so we simply map it to the only
// modifier keys exposed by the event itself, does not support Lock-keys.
// Currently, all major browsers except Chrome seems to support Lock-keys.
function modifierStateGetter(keyArg) {
  var syntheticEvent = this;
  var nativeEvent = syntheticEvent.nativeEvent;
  if (nativeEvent.getModifierState) {
    return nativeEvent.getModifierState(keyArg);
  }
  var keyProp = modifierKeyToProp[keyArg];
  return keyProp ? !!nativeEvent[keyProp] : false;
}

function getEventModifierState(nativeEvent) {
  return modifierStateGetter;
}

module.exports = getEventModifierState;
},{}],413:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule getEventTarget
 * @typechecks static-only
 */

'use strict';

/**
 * Gets the target node from a native browser event by accounting for
 * inconsistencies in browser DOM APIs.
 *
 * @param {object} nativeEvent Native browser event.
 * @return {DOMEventTarget} Target node.
 */
function getEventTarget(nativeEvent) {
  var target = nativeEvent.target || nativeEvent.srcElement || window;
  // Safari may fire events on text nodes (Node.TEXT_NODE is 3).
  // @see http://www.quirksmode.org/js/events_properties.html
  return target.nodeType === 3 ? target.parentNode : target;
}

module.exports = getEventTarget;
},{}],414:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule getIteratorFn
 * @typechecks static-only
 */

'use strict';

/* global Symbol */
var ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
var FAUX_ITERATOR_SYMBOL = '@@iterator'; // Before Symbol spec.

/**
 * Returns the iterator method function contained on the iterable object.
 *
 * Be sure to invoke the function with the iterable as context:
 *
 *     var iteratorFn = getIteratorFn(myIterable);
 *     if (iteratorFn) {
 *       var iterator = iteratorFn.call(myIterable);
 *       ...
 *     }
 *
 * @param {?object} maybeIterable
 * @return {?function}
 */
function getIteratorFn(maybeIterable) {
  var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);
  if (typeof iteratorFn === 'function') {
    return iteratorFn;
  }
}

module.exports = getIteratorFn;
},{}],415:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule getNodeForCharacterOffset
 */

'use strict';

/**
 * Given any node return the first leaf node without children.
 *
 * @param {DOMElement|DOMTextNode} node
 * @return {DOMElement|DOMTextNode}
 */
function getLeafNode(node) {
  while (node && node.firstChild) {
    node = node.firstChild;
  }
  return node;
}

/**
 * Get the next sibling within a container. This will walk up the
 * DOM if a node's siblings have been exhausted.
 *
 * @param {DOMElement|DOMTextNode} node
 * @return {?DOMElement|DOMTextNode}
 */
function getSiblingNode(node) {
  while (node) {
    if (node.nextSibling) {
      return node.nextSibling;
    }
    node = node.parentNode;
  }
}

/**
 * Get object describing the nodes which contain characters at offset.
 *
 * @param {DOMElement|DOMTextNode} root
 * @param {number} offset
 * @return {?object}
 */
function getNodeForCharacterOffset(root, offset) {
  var node = getLeafNode(root);
  var nodeStart = 0;
  var nodeEnd = 0;

  while (node) {
    if (node.nodeType === 3) {
      nodeEnd = nodeStart + node.textContent.length;

      if (nodeStart <= offset && nodeEnd >= offset) {
        return {
          node: node,
          offset: offset - nodeStart
        };
      }

      nodeStart = nodeEnd;
    }

    node = getLeafNode(getSiblingNode(node));
  }
}

module.exports = getNodeForCharacterOffset;
},{}],416:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule getTextContentAccessor
 */

'use strict';

var ExecutionEnvironment = require('fbjs/lib/ExecutionEnvironment');

var contentKey = null;

/**
 * Gets the key used to access text content on a DOM node.
 *
 * @return {?string} Key used to access text content.
 * @internal
 */
function getTextContentAccessor() {
  if (!contentKey && ExecutionEnvironment.canUseDOM) {
    // Prefer textContent to innerText because many browsers support both but
    // SVG <text> elements don't support innerText even when <div> does.
    contentKey = 'textContent' in document.documentElement ? 'textContent' : 'innerText';
  }
  return contentKey;
}

module.exports = getTextContentAccessor;
},{"fbjs/lib/ExecutionEnvironment":3}],417:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule instantiateReactComponent
 * @typechecks static-only
 */

'use strict';

var ReactCompositeComponent = require('./ReactCompositeComponent');
var ReactEmptyComponent = require('./ReactEmptyComponent');
var ReactNativeComponent = require('./ReactNativeComponent');

var assign = require('./Object.assign');
var invariant = require('fbjs/lib/invariant');
var warning = require('fbjs/lib/warning');

// To avoid a cyclic dependency, we create the final class in this module
var ReactCompositeComponentWrapper = function () {};
assign(ReactCompositeComponentWrapper.prototype, ReactCompositeComponent.Mixin, {
  _instantiateReactComponent: instantiateReactComponent
});

function getDeclarationErrorAddendum(owner) {
  if (owner) {
    var name = owner.getName();
    if (name) {
      return ' Check the render method of `' + name + '`.';
    }
  }
  return '';
}

/**
 * Check if the type reference is a known internal type. I.e. not a user
 * provided composite type.
 *
 * @param {function} type
 * @return {boolean} Returns true if this is a valid internal type.
 */
function isInternalComponentType(type) {
  return typeof type === 'function' && typeof type.prototype !== 'undefined' && typeof type.prototype.mountComponent === 'function' && typeof type.prototype.receiveComponent === 'function';
}

/**
 * Given a ReactNode, create an instance that will actually be mounted.
 *
 * @param {ReactNode} node
 * @return {object} A new instance of the element's constructor.
 * @protected
 */
function instantiateReactComponent(node) {
  var instance;

  if (node === null || node === false) {
    instance = new ReactEmptyComponent(instantiateReactComponent);
  } else if (typeof node === 'object') {
    var element = node;
    !(element && (typeof element.type === 'function' || typeof element.type === 'string')) ? "production" !== 'production' ? invariant(false, 'Element type is invalid: expected a string (for built-in components) ' + 'or a class/function (for composite components) but got: %s.%s', element.type == null ? element.type : typeof element.type, getDeclarationErrorAddendum(element._owner)) : invariant(false) : undefined;

    // Special case string values
    if (typeof element.type === 'string') {
      instance = ReactNativeComponent.createInternalComponent(element);
    } else if (isInternalComponentType(element.type)) {
      // This is temporarily available for custom components that are not string
      // representations. I.e. ART. Once those are updated to use the string
      // representation, we can drop this code path.
      instance = new element.type(element);
    } else {
      instance = new ReactCompositeComponentWrapper();
    }
  } else if (typeof node === 'string' || typeof node === 'number') {
    instance = ReactNativeComponent.createInstanceForText(node);
  } else {
    !false ? "production" !== 'production' ? invariant(false, 'Encountered invalid React node of type %s', typeof node) : invariant(false) : undefined;
  }

  if ("production" !== 'production') {
    "production" !== 'production' ? warning(typeof instance.construct === 'function' && typeof instance.mountComponent === 'function' && typeof instance.receiveComponent === 'function' && typeof instance.unmountComponent === 'function', 'Only React Components can be mounted.') : undefined;
  }

  // Sets up the instance. This can probably just move into the constructor now.
  instance.construct(node);

  // These two fields are used by the DOM and ART diffing algorithms
  // respectively. Instead of using expandos on components, we should be
  // storing the state needed by the diffing algorithms elsewhere.
  instance._mountIndex = 0;
  instance._mountImage = null;

  if ("production" !== 'production') {
    instance._isOwnerNecessary = false;
    instance._warnedAboutRefsInRender = false;
  }

  // Internal instances should fully constructed at this point, so they should
  // not get any new fields added to them at this point.
  if ("production" !== 'production') {
    if (Object.preventExtensions) {
      Object.preventExtensions(instance);
    }
  }

  return instance;
}

module.exports = instantiateReactComponent;
},{"./Object.assign":327,"./ReactCompositeComponent":337,"./ReactEmptyComponent":355,"./ReactNativeComponent":368,"fbjs/lib/invariant":17,"fbjs/lib/warning":27}],418:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule isEventSupported
 */

'use strict';

var ExecutionEnvironment = require('fbjs/lib/ExecutionEnvironment');

var useHasFeature;
if (ExecutionEnvironment.canUseDOM) {
  useHasFeature = document.implementation && document.implementation.hasFeature &&
  // always returns true in newer browsers as per the standard.
  // @see http://dom.spec.whatwg.org/#dom-domimplementation-hasfeature
  document.implementation.hasFeature('', '') !== true;
}

/**
 * Checks if an event is supported in the current execution environment.
 *
 * NOTE: This will not work correctly for non-generic events such as `change`,
 * `reset`, `load`, `error`, and `select`.
 *
 * Borrows from Modernizr.
 *
 * @param {string} eventNameSuffix Event name, e.g. "click".
 * @param {?boolean} capture Check if the capture phase is supported.
 * @return {boolean} True if the event is supported.
 * @internal
 * @license Modernizr 3.0.0pre (Custom Build) | MIT
 */
function isEventSupported(eventNameSuffix, capture) {
  if (!ExecutionEnvironment.canUseDOM || capture && !('addEventListener' in document)) {
    return false;
  }

  var eventName = 'on' + eventNameSuffix;
  var isSupported = (eventName in document);

  if (!isSupported) {
    var element = document.createElement('div');
    element.setAttribute(eventName, 'return;');
    isSupported = typeof element[eventName] === 'function';
  }

  if (!isSupported && useHasFeature && eventNameSuffix === 'wheel') {
    // This is the only way to test support for the `wheel` event in IE9+.
    isSupported = document.implementation.hasFeature('Events.wheel', '3.0');
  }

  return isSupported;
}

module.exports = isEventSupported;
},{"fbjs/lib/ExecutionEnvironment":3}],419:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule isTextInputElement
 */

'use strict';

/**
 * @see http://www.whatwg.org/specs/web-apps/current-work/multipage/the-input-element.html#input-type-attr-summary
 */
var supportedInputTypes = {
  'color': true,
  'date': true,
  'datetime': true,
  'datetime-local': true,
  'email': true,
  'month': true,
  'number': true,
  'password': true,
  'range': true,
  'search': true,
  'tel': true,
  'text': true,
  'time': true,
  'url': true,
  'week': true
};

function isTextInputElement(elem) {
  var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
  return nodeName && (nodeName === 'input' && supportedInputTypes[elem.type] || nodeName === 'textarea');
}

module.exports = isTextInputElement;
},{}],420:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule quoteAttributeValueForBrowser
 */

'use strict';

var escapeTextContentForBrowser = require('./escapeTextContentForBrowser');

/**
 * Escapes attribute value to prevent scripting attacks.
 *
 * @param {*} value Value to escape.
 * @return {string} An escaped string.
 */
function quoteAttributeValueForBrowser(value) {
  return '"' + escapeTextContentForBrowser(value) + '"';
}

module.exports = quoteAttributeValueForBrowser;
},{"./escapeTextContentForBrowser":406}],421:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule setInnerHTML
 */

/* globals MSApp */

'use strict';

var ExecutionEnvironment = require('fbjs/lib/ExecutionEnvironment');

var WHITESPACE_TEST = /^[ \r\n\t\f]/;
var NONVISIBLE_TEST = /<(!--|link|noscript|meta|script|style)[ \r\n\t\f\/>]/;

/**
 * Set the innerHTML property of a node, ensuring that whitespace is preserved
 * even in IE8.
 *
 * @param {DOMElement} node
 * @param {string} html
 * @internal
 */
var setInnerHTML = function (node, html) {
  node.innerHTML = html;
};

// Win8 apps: Allow all html to be inserted
if (typeof MSApp !== 'undefined' && MSApp.execUnsafeLocalFunction) {
  setInnerHTML = function (node, html) {
    MSApp.execUnsafeLocalFunction(function () {
      node.innerHTML = html;
    });
  };
}

if (ExecutionEnvironment.canUseDOM) {
  // IE8: When updating a just created node with innerHTML only leading
  // whitespace is removed. When updating an existing node with innerHTML
  // whitespace in root TextNodes is also collapsed.
  // @see quirksmode.org/bugreports/archives/2004/11/innerhtml_and_t.html

  // Feature detection; only IE8 is known to behave improperly like this.
  var testElement = document.createElement('div');
  testElement.innerHTML = ' ';
  if (testElement.innerHTML === '') {
    setInnerHTML = function (node, html) {
      // Magic theory: IE8 supposedly differentiates between added and updated
      // nodes when processing innerHTML, innerHTML on updated nodes suffers
      // from worse whitespace behavior. Re-adding a node like this triggers
      // the initial and more favorable whitespace behavior.
      // TODO: What to do on a detached node?
      if (node.parentNode) {
        node.parentNode.replaceChild(node, node);
      }

      // We also implement a workaround for non-visible tags disappearing into
      // thin air on IE8, this only happens if there is no visible text
      // in-front of the non-visible tags. Piggyback on the whitespace fix
      // and simply check if any non-visible tags appear in the source.
      if (WHITESPACE_TEST.test(html) || html[0] === '<' && NONVISIBLE_TEST.test(html)) {
        // Recover leading whitespace by temporarily prepending any character.
        // \uFEFF has the potential advantage of being zero-width/invisible.
        // UglifyJS drops U+FEFF chars when parsing, so use String.fromCharCode
        // in hopes that this is preserved even if "\uFEFF" is transformed to
        // the actual Unicode character (by Babel, for example).
        // https://github.com/mishoo/UglifyJS2/blob/v2.4.20/lib/parse.js#L216
        node.innerHTML = String.fromCharCode(0xFEFF) + html;

        // deleteData leaves an empty `TextNode` which offsets the index of all
        // children. Definitely want to avoid this.
        var textNode = node.firstChild;
        if (textNode.data.length === 1) {
          node.removeChild(textNode);
        } else {
          textNode.deleteData(0, 1);
        }
      } else {
        node.innerHTML = html;
      }
    };
  }
}

module.exports = setInnerHTML;
},{"fbjs/lib/ExecutionEnvironment":3}],422:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule setTextContent
 */

'use strict';

var ExecutionEnvironment = require('fbjs/lib/ExecutionEnvironment');
var escapeTextContentForBrowser = require('./escapeTextContentForBrowser');
var setInnerHTML = require('./setInnerHTML');

/**
 * Set the textContent property of a node, ensuring that whitespace is preserved
 * even in IE8. innerText is a poor substitute for textContent and, among many
 * issues, inserts <br> instead of the literal newline chars. innerHTML behaves
 * as it should.
 *
 * @param {DOMElement} node
 * @param {string} text
 * @internal
 */
var setTextContent = function (node, text) {
  node.textContent = text;
};

if (ExecutionEnvironment.canUseDOM) {
  if (!('textContent' in document.documentElement)) {
    setTextContent = function (node, text) {
      setInnerHTML(node, escapeTextContentForBrowser(text));
    };
  }
}

module.exports = setTextContent;
},{"./escapeTextContentForBrowser":406,"./setInnerHTML":421,"fbjs/lib/ExecutionEnvironment":3}],423:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule shouldUpdateReactComponent
 * @typechecks static-only
 */

'use strict';

/**
 * Given a `prevElement` and `nextElement`, determines if the existing
 * instance should be updated as opposed to being destroyed or replaced by a new
 * instance. Both arguments are elements. This ensures that this logic can
 * operate on stateless trees without any backing instance.
 *
 * @param {?object} prevElement
 * @param {?object} nextElement
 * @return {boolean} True if the existing instance should be updated.
 * @protected
 */
function shouldUpdateReactComponent(prevElement, nextElement) {
  var prevEmpty = prevElement === null || prevElement === false;
  var nextEmpty = nextElement === null || nextElement === false;
  if (prevEmpty || nextEmpty) {
    return prevEmpty === nextEmpty;
  }

  var prevType = typeof prevElement;
  var nextType = typeof nextElement;
  if (prevType === 'string' || prevType === 'number') {
    return nextType === 'string' || nextType === 'number';
  } else {
    return nextType === 'object' && prevElement.type === nextElement.type && prevElement.key === nextElement.key;
  }
  return false;
}

module.exports = shouldUpdateReactComponent;
},{}],424:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule traverseAllChildren
 */

'use strict';

var ReactCurrentOwner = require('./ReactCurrentOwner');
var ReactElement = require('./ReactElement');
var ReactInstanceHandles = require('./ReactInstanceHandles');

var getIteratorFn = require('./getIteratorFn');
var invariant = require('fbjs/lib/invariant');
var warning = require('fbjs/lib/warning');

var SEPARATOR = ReactInstanceHandles.SEPARATOR;
var SUBSEPARATOR = ':';

/**
 * TODO: Test that a single child and an array with one item have the same key
 * pattern.
 */

var userProvidedKeyEscaperLookup = {
  '=': '=0',
  '.': '=1',
  ':': '=2'
};

var userProvidedKeyEscapeRegex = /[=.:]/g;

var didWarnAboutMaps = false;

function userProvidedKeyEscaper(match) {
  return userProvidedKeyEscaperLookup[match];
}

/**
 * Generate a key string that identifies a component within a set.
 *
 * @param {*} component A component that could contain a manual key.
 * @param {number} index Index that is used if a manual key is not provided.
 * @return {string}
 */
function getComponentKey(component, index) {
  if (component && component.key != null) {
    // Explicit key
    return wrapUserProvidedKey(component.key);
  }
  // Implicit key determined by the index in the set
  return index.toString(36);
}

/**
 * Escape a component key so that it is safe to use in a reactid.
 *
 * @param {*} text Component key to be escaped.
 * @return {string} An escaped string.
 */
function escapeUserProvidedKey(text) {
  return ('' + text).replace(userProvidedKeyEscapeRegex, userProvidedKeyEscaper);
}

/**
 * Wrap a `key` value explicitly provided by the user to distinguish it from
 * implicitly-generated keys generated by a component's index in its parent.
 *
 * @param {string} key Value of a user-provided `key` attribute
 * @return {string}
 */
function wrapUserProvidedKey(key) {
  return '$' + escapeUserProvidedKey(key);
}

/**
 * @param {?*} children Children tree container.
 * @param {!string} nameSoFar Name of the key path so far.
 * @param {!function} callback Callback to invoke with each child found.
 * @param {?*} traverseContext Used to pass information throughout the traversal
 * process.
 * @return {!number} The number of children in this subtree.
 */
function traverseAllChildrenImpl(children, nameSoFar, callback, traverseContext) {
  var type = typeof children;

  if (type === 'undefined' || type === 'boolean') {
    // All of the above are perceived as null.
    children = null;
  }

  if (children === null || type === 'string' || type === 'number' || ReactElement.isValidElement(children)) {
    callback(traverseContext, children,
    // If it's the only child, treat the name as if it was wrapped in an array
    // so that it's consistent if the number of children grows.
    nameSoFar === '' ? SEPARATOR + getComponentKey(children, 0) : nameSoFar);
    return 1;
  }

  var child;
  var nextName;
  var subtreeCount = 0; // Count of children found in the current subtree.
  var nextNamePrefix = nameSoFar === '' ? SEPARATOR : nameSoFar + SUBSEPARATOR;

  if (Array.isArray(children)) {
    for (var i = 0; i < children.length; i++) {
      child = children[i];
      nextName = nextNamePrefix + getComponentKey(child, i);
      subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
    }
  } else {
    var iteratorFn = getIteratorFn(children);
    if (iteratorFn) {
      var iterator = iteratorFn.call(children);
      var step;
      if (iteratorFn !== children.entries) {
        var ii = 0;
        while (!(step = iterator.next()).done) {
          child = step.value;
          nextName = nextNamePrefix + getComponentKey(child, ii++);
          subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
        }
      } else {
        if ("production" !== 'production') {
          "production" !== 'production' ? warning(didWarnAboutMaps, 'Using Maps as children is not yet fully supported. It is an ' + 'experimental feature that might be removed. Convert it to a ' + 'sequence / iterable of keyed ReactElements instead.') : undefined;
          didWarnAboutMaps = true;
        }
        // Iterator will provide entry [k,v] tuples rather than values.
        while (!(step = iterator.next()).done) {
          var entry = step.value;
          if (entry) {
            child = entry[1];
            nextName = nextNamePrefix + wrapUserProvidedKey(entry[0]) + SUBSEPARATOR + getComponentKey(child, 0);
            subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
          }
        }
      }
    } else if (type === 'object') {
      var addendum = '';
      if ("production" !== 'production') {
        addendum = ' If you meant to render a collection of children, use an array ' + 'instead or wrap the object using createFragment(object) from the ' + 'React add-ons.';
        if (children._isReactElement) {
          addendum = ' It looks like you\'re using an element created by a different ' + 'version of React. Make sure to use only one copy of React.';
        }
        if (ReactCurrentOwner.current) {
          var name = ReactCurrentOwner.current.getName();
          if (name) {
            addendum += ' Check the render method of `' + name + '`.';
          }
        }
      }
      var childrenString = String(children);
      !false ? "production" !== 'production' ? invariant(false, 'Objects are not valid as a React child (found: %s).%s', childrenString === '[object Object]' ? 'object with keys {' + Object.keys(children).join(', ') + '}' : childrenString, addendum) : invariant(false) : undefined;
    }
  }

  return subtreeCount;
}

/**
 * Traverses children that are typically specified as `props.children`, but
 * might also be specified through attributes:
 *
 * - `traverseAllChildren(this.props.children, ...)`
 * - `traverseAllChildren(this.props.leftPanelChildren, ...)`
 *
 * The `traverseContext` is an optional argument that is passed through the
 * entire traversal. It can be used to store accumulations or anything else that
 * the callback might find relevant.
 *
 * @param {?*} children Children tree object.
 * @param {!function} callback To invoke upon traversing each child.
 * @param {?*} traverseContext Context for traversal.
 * @return {!number} The number of children in this subtree.
 */
function traverseAllChildren(children, callback, traverseContext) {
  if (children == null) {
    return 0;
  }

  return traverseAllChildrenImpl(children, '', callback, traverseContext);
}

module.exports = traverseAllChildren;
},{"./ReactCurrentOwner":338,"./ReactElement":354,"./ReactInstanceHandles":362,"./getIteratorFn":414,"fbjs/lib/invariant":17,"fbjs/lib/warning":27}],425:[function(require,module,exports){
/**
 * Copyright 2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule validateDOMNesting
 */

'use strict';

var assign = require('./Object.assign');
var emptyFunction = require('fbjs/lib/emptyFunction');
var warning = require('fbjs/lib/warning');

var validateDOMNesting = emptyFunction;

if ("production" !== 'production') {
  // This validation code was written based on the HTML5 parsing spec:
  // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-scope
  //
  // Note: this does not catch all invalid nesting, nor does it try to (as it's
  // not clear what practical benefit doing so provides); instead, we warn only
  // for cases where the parser will give a parse tree differing from what React
  // intended. For example, <b><div></div></b> is invalid but we don't warn
  // because it still parses correctly; we do warn for other cases like nested
  // <p> tags where the beginning of the second element implicitly closes the
  // first, causing a confusing mess.

  // https://html.spec.whatwg.org/multipage/syntax.html#special
  var specialTags = ['address', 'applet', 'area', 'article', 'aside', 'base', 'basefont', 'bgsound', 'blockquote', 'body', 'br', 'button', 'caption', 'center', 'col', 'colgroup', 'dd', 'details', 'dir', 'div', 'dl', 'dt', 'embed', 'fieldset', 'figcaption', 'figure', 'footer', 'form', 'frame', 'frameset', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'head', 'header', 'hgroup', 'hr', 'html', 'iframe', 'img', 'input', 'isindex', 'li', 'link', 'listing', 'main', 'marquee', 'menu', 'menuitem', 'meta', 'nav', 'noembed', 'noframes', 'noscript', 'object', 'ol', 'p', 'param', 'plaintext', 'pre', 'script', 'section', 'select', 'source', 'style', 'summary', 'table', 'tbody', 'td', 'template', 'textarea', 'tfoot', 'th', 'thead', 'title', 'tr', 'track', 'ul', 'wbr', 'xmp'];

  // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-scope
  var inScopeTags = ['applet', 'caption', 'html', 'table', 'td', 'th', 'marquee', 'object', 'template',

  // https://html.spec.whatwg.org/multipage/syntax.html#html-integration-point
  // TODO: Distinguish by namespace here -- for <title>, including it here
  // errs on the side of fewer warnings
  'foreignObject', 'desc', 'title'];

  // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-button-scope
  var buttonScopeTags = inScopeTags.concat(['button']);

  // https://html.spec.whatwg.org/multipage/syntax.html#generate-implied-end-tags
  var impliedEndTags = ['dd', 'dt', 'li', 'option', 'optgroup', 'p', 'rp', 'rt'];

  var emptyAncestorInfo = {
    parentTag: null,

    formTag: null,
    aTagInScope: null,
    buttonTagInScope: null,
    nobrTagInScope: null,
    pTagInButtonScope: null,

    listItemTagAutoclosing: null,
    dlItemTagAutoclosing: null
  };

  var updatedAncestorInfo = function (oldInfo, tag, instance) {
    var ancestorInfo = assign({}, oldInfo || emptyAncestorInfo);
    var info = { tag: tag, instance: instance };

    if (inScopeTags.indexOf(tag) !== -1) {
      ancestorInfo.aTagInScope = null;
      ancestorInfo.buttonTagInScope = null;
      ancestorInfo.nobrTagInScope = null;
    }
    if (buttonScopeTags.indexOf(tag) !== -1) {
      ancestorInfo.pTagInButtonScope = null;
    }

    // See rules for 'li', 'dd', 'dt' start tags in
    // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inbody
    if (specialTags.indexOf(tag) !== -1 && tag !== 'address' && tag !== 'div' && tag !== 'p') {
      ancestorInfo.listItemTagAutoclosing = null;
      ancestorInfo.dlItemTagAutoclosing = null;
    }

    ancestorInfo.parentTag = info;

    if (tag === 'form') {
      ancestorInfo.formTag = info;
    }
    if (tag === 'a') {
      ancestorInfo.aTagInScope = info;
    }
    if (tag === 'button') {
      ancestorInfo.buttonTagInScope = info;
    }
    if (tag === 'nobr') {
      ancestorInfo.nobrTagInScope = info;
    }
    if (tag === 'p') {
      ancestorInfo.pTagInButtonScope = info;
    }
    if (tag === 'li') {
      ancestorInfo.listItemTagAutoclosing = info;
    }
    if (tag === 'dd' || tag === 'dt') {
      ancestorInfo.dlItemTagAutoclosing = info;
    }

    return ancestorInfo;
  };

  /**
   * Returns whether
   */
  var isTagValidWithParent = function (tag, parentTag) {
    // First, let's check if we're in an unusual parsing mode...
    switch (parentTag) {
      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inselect
      case 'select':
        return tag === 'option' || tag === 'optgroup' || tag === '#text';
      case 'optgroup':
        return tag === 'option' || tag === '#text';
      // Strictly speaking, seeing an <option> doesn't mean we're in a <select>
      // but
      case 'option':
        return tag === '#text';

      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intd
      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-incaption
      // No special behavior since these rules fall back to "in body" mode for
      // all except special table nodes which cause bad parsing behavior anyway.

      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intr
      case 'tr':
        return tag === 'th' || tag === 'td' || tag === 'style' || tag === 'script' || tag === 'template';

      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intbody
      case 'tbody':
      case 'thead':
      case 'tfoot':
        return tag === 'tr' || tag === 'style' || tag === 'script' || tag === 'template';

      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-incolgroup
      case 'colgroup':
        return tag === 'col' || tag === 'template';

      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intable
      case 'table':
        return tag === 'caption' || tag === 'colgroup' || tag === 'tbody' || tag === 'tfoot' || tag === 'thead' || tag === 'style' || tag === 'script' || tag === 'template';

      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inhead
      case 'head':
        return tag === 'base' || tag === 'basefont' || tag === 'bgsound' || tag === 'link' || tag === 'meta' || tag === 'title' || tag === 'noscript' || tag === 'noframes' || tag === 'style' || tag === 'script' || tag === 'template';

      // https://html.spec.whatwg.org/multipage/semantics.html#the-html-element
      case 'html':
        return tag === 'head' || tag === 'body';
    }

    // Probably in the "in body" parsing mode, so we outlaw only tag combos
    // where the parsing rules cause implicit opens or closes to be added.
    // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inbody
    switch (tag) {
      case 'h1':
      case 'h2':
      case 'h3':
      case 'h4':
      case 'h5':
      case 'h6':
        return parentTag !== 'h1' && parentTag !== 'h2' && parentTag !== 'h3' && parentTag !== 'h4' && parentTag !== 'h5' && parentTag !== 'h6';

      case 'rp':
      case 'rt':
        return impliedEndTags.indexOf(parentTag) === -1;

      case 'caption':
      case 'col':
      case 'colgroup':
      case 'frame':
      case 'head':
      case 'tbody':
      case 'td':
      case 'tfoot':
      case 'th':
      case 'thead':
      case 'tr':
        // These tags are only valid with a few parents that have special child
        // parsing rules -- if we're down here, then none of those matched and
        // so we allow it only if we don't know what the parent is, as all other
        // cases are invalid.
        return parentTag == null;
    }

    return true;
  };

  /**
   * Returns whether
   */
  var findInvalidAncestorForTag = function (tag, ancestorInfo) {
    switch (tag) {
      case 'address':
      case 'article':
      case 'aside':
      case 'blockquote':
      case 'center':
      case 'details':
      case 'dialog':
      case 'dir':
      case 'div':
      case 'dl':
      case 'fieldset':
      case 'figcaption':
      case 'figure':
      case 'footer':
      case 'header':
      case 'hgroup':
      case 'main':
      case 'menu':
      case 'nav':
      case 'ol':
      case 'p':
      case 'section':
      case 'summary':
      case 'ul':

      case 'pre':
      case 'listing':

      case 'table':

      case 'hr':

      case 'xmp':

      case 'h1':
      case 'h2':
      case 'h3':
      case 'h4':
      case 'h5':
      case 'h6':
        return ancestorInfo.pTagInButtonScope;

      case 'form':
        return ancestorInfo.formTag || ancestorInfo.pTagInButtonScope;

      case 'li':
        return ancestorInfo.listItemTagAutoclosing;

      case 'dd':
      case 'dt':
        return ancestorInfo.dlItemTagAutoclosing;

      case 'button':
        return ancestorInfo.buttonTagInScope;

      case 'a':
        // Spec says something about storing a list of markers, but it sounds
        // equivalent to this check.
        return ancestorInfo.aTagInScope;

      case 'nobr':
        return ancestorInfo.nobrTagInScope;
    }

    return null;
  };

  /**
   * Given a ReactCompositeComponent instance, return a list of its recursive
   * owners, starting at the root and ending with the instance itself.
   */
  var findOwnerStack = function (instance) {
    if (!instance) {
      return [];
    }

    var stack = [];
    /*eslint-disable space-after-keywords */
    do {
      /*eslint-enable space-after-keywords */
      stack.push(instance);
    } while (instance = instance._currentElement._owner);
    stack.reverse();
    return stack;
  };

  var didWarn = {};

  validateDOMNesting = function (childTag, childInstance, ancestorInfo) {
    ancestorInfo = ancestorInfo || emptyAncestorInfo;
    var parentInfo = ancestorInfo.parentTag;
    var parentTag = parentInfo && parentInfo.tag;

    var invalidParent = isTagValidWithParent(childTag, parentTag) ? null : parentInfo;
    var invalidAncestor = invalidParent ? null : findInvalidAncestorForTag(childTag, ancestorInfo);
    var problematic = invalidParent || invalidAncestor;

    if (problematic) {
      var ancestorTag = problematic.tag;
      var ancestorInstance = problematic.instance;

      var childOwner = childInstance && childInstance._currentElement._owner;
      var ancestorOwner = ancestorInstance && ancestorInstance._currentElement._owner;

      var childOwners = findOwnerStack(childOwner);
      var ancestorOwners = findOwnerStack(ancestorOwner);

      var minStackLen = Math.min(childOwners.length, ancestorOwners.length);
      var i;

      var deepestCommon = -1;
      for (i = 0; i < minStackLen; i++) {
        if (childOwners[i] === ancestorOwners[i]) {
          deepestCommon = i;
        } else {
          break;
        }
      }

      var UNKNOWN = '(unknown)';
      var childOwnerNames = childOwners.slice(deepestCommon + 1).map(function (inst) {
        return inst.getName() || UNKNOWN;
      });
      var ancestorOwnerNames = ancestorOwners.slice(deepestCommon + 1).map(function (inst) {
        return inst.getName() || UNKNOWN;
      });
      var ownerInfo = [].concat(
      // If the parent and child instances have a common owner ancestor, start
      // with that -- otherwise we just start with the parent's owners.
      deepestCommon !== -1 ? childOwners[deepestCommon].getName() || UNKNOWN : [], ancestorOwnerNames, ancestorTag,
      // If we're warning about an invalid (non-parent) ancestry, add '...'
      invalidAncestor ? ['...'] : [], childOwnerNames, childTag).join(' > ');

      var warnKey = !!invalidParent + '|' + childTag + '|' + ancestorTag + '|' + ownerInfo;
      if (didWarn[warnKey]) {
        return;
      }
      didWarn[warnKey] = true;

      if (invalidParent) {
        var info = '';
        if (ancestorTag === 'table' && childTag === 'tr') {
          info += ' Add a <tbody> to your code to match the DOM tree generated by ' + 'the browser.';
        }
        "production" !== 'production' ? warning(false, 'validateDOMNesting(...): <%s> cannot appear as a child of <%s>. ' + 'See %s.%s', childTag, ancestorTag, ownerInfo, info) : undefined;
      } else {
        "production" !== 'production' ? warning(false, 'validateDOMNesting(...): <%s> cannot appear as a descendant of ' + '<%s>. See %s.', childTag, ancestorTag, ownerInfo) : undefined;
      }
    }
  };

  validateDOMNesting.ancestorInfoContextKey = '__validateDOMNesting_ancestorInfo$' + Math.random().toString(36).slice(2);

  validateDOMNesting.updatedAncestorInfo = updatedAncestorInfo;

  // For testing
  validateDOMNesting.isTagValidInContext = function (tag, ancestorInfo) {
    ancestorInfo = ancestorInfo || emptyAncestorInfo;
    var parentInfo = ancestorInfo.parentTag;
    var parentTag = parentInfo && parentInfo.tag;
    return isTagValidWithParent(tag, parentTag) && !findInvalidAncestorForTag(tag, ancestorInfo);
  };
}

module.exports = validateDOMNesting;
},{"./Object.assign":327,"fbjs/lib/emptyFunction":9,"fbjs/lib/warning":27}],426:[function(require,module,exports){
(function (global){
/**
 * Copyright (c) 2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * https://raw.github.com/facebook/regenerator/master/LICENSE file. An
 * additional grant of patent rights can be found in the PATENTS file in
 * the same directory.
 */

!(function(global) {
  "use strict";

  var Op = Object.prototype;
  var hasOwn = Op.hasOwnProperty;
  var undefined; // More compressible than void 0.
  var $Symbol = typeof Symbol === "function" ? Symbol : {};
  var iteratorSymbol = $Symbol.iterator || "@@iterator";
  var asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator";
  var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";

  var inModule = typeof module === "object";
  var runtime = global.regeneratorRuntime;
  if (runtime) {
    if (inModule) {
      // If regeneratorRuntime is defined globally and we're in a module,
      // make the exports object identical to regeneratorRuntime.
      module.exports = runtime;
    }
    // Don't bother evaluating the rest of this file if the runtime was
    // already defined globally.
    return;
  }

  // Define the runtime globally (as expected by generated code) as either
  // module.exports (if we're in a module) or a new, empty object.
  runtime = global.regeneratorRuntime = inModule ? module.exports : {};

  function wrap(innerFn, outerFn, self, tryLocsList) {
    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.
    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;
    var generator = Object.create(protoGenerator.prototype);
    var context = new Context(tryLocsList || []);

    // The ._invoke method unifies the implementations of the .next,
    // .throw, and .return methods.
    generator._invoke = makeInvokeMethod(innerFn, self, context);

    return generator;
  }
  runtime.wrap = wrap;

  // Try/catch helper to minimize deoptimizations. Returns a completion
  // record like context.tryEntries[i].completion. This interface could
  // have been (and was previously) designed to take a closure to be
  // invoked without arguments, but in all the cases we care about we
  // already have an existing method we want to call, so there's no need
  // to create a new function object. We can even get away with assuming
  // the method takes exactly one argument, since that happens to be true
  // in every case, so we don't have to touch the arguments object. The
  // only additional allocation required is the completion record, which
  // has a stable shape and so hopefully should be cheap to allocate.
  function tryCatch(fn, obj, arg) {
    try {
      return { type: "normal", arg: fn.call(obj, arg) };
    } catch (err) {
      return { type: "throw", arg: err };
    }
  }

  var GenStateSuspendedStart = "suspendedStart";
  var GenStateSuspendedYield = "suspendedYield";
  var GenStateExecuting = "executing";
  var GenStateCompleted = "completed";

  // Returning this object from the innerFn has the same effect as
  // breaking out of the dispatch switch statement.
  var ContinueSentinel = {};

  // Dummy constructor functions that we use as the .constructor and
  // .constructor.prototype properties for functions that return Generator
  // objects. For full spec compliance, you may wish to configure your
  // minifier not to mangle the names of these two functions.
  function Generator() {}
  function GeneratorFunction() {}
  function GeneratorFunctionPrototype() {}

  // This is a polyfill for %IteratorPrototype% for environments that
  // don't natively support it.
  var IteratorPrototype = {};
  IteratorPrototype[iteratorSymbol] = function () {
    return this;
  };

  var getProto = Object.getPrototypeOf;
  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));
  if (NativeIteratorPrototype &&
      NativeIteratorPrototype !== Op &&
      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {
    // This environment has a native %IteratorPrototype%; use it instead
    // of the polyfill.
    IteratorPrototype = NativeIteratorPrototype;
  }

  var Gp = GeneratorFunctionPrototype.prototype =
    Generator.prototype = Object.create(IteratorPrototype);
  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;
  GeneratorFunctionPrototype.constructor = GeneratorFunction;
  GeneratorFunctionPrototype[toStringTagSymbol] =
    GeneratorFunction.displayName = "GeneratorFunction";

  // Helper for defining the .next, .throw, and .return methods of the
  // Iterator interface in terms of a single ._invoke method.
  function defineIteratorMethods(prototype) {
    ["next", "throw", "return"].forEach(function(method) {
      prototype[method] = function(arg) {
        return this._invoke(method, arg);
      };
    });
  }

  runtime.isGeneratorFunction = function(genFun) {
    var ctor = typeof genFun === "function" && genFun.constructor;
    return ctor
      ? ctor === GeneratorFunction ||
        // For the native GeneratorFunction constructor, the best we can
        // do is to check its .name property.
        (ctor.displayName || ctor.name) === "GeneratorFunction"
      : false;
  };

  runtime.mark = function(genFun) {
    if (Object.setPrototypeOf) {
      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);
    } else {
      genFun.__proto__ = GeneratorFunctionPrototype;
      if (!(toStringTagSymbol in genFun)) {
        genFun[toStringTagSymbol] = "GeneratorFunction";
      }
    }
    genFun.prototype = Object.create(Gp);
    return genFun;
  };

  // Within the body of any async function, `await x` is transformed to
  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test
  // `hasOwn.call(value, "__await")` to determine if the yielded value is
  // meant to be awaited.
  runtime.awrap = function(arg) {
    return { __await: arg };
  };

  function AsyncIterator(generator) {
    function invoke(method, arg, resolve, reject) {
      var record = tryCatch(generator[method], generator, arg);
      if (record.type === "throw") {
        reject(record.arg);
      } else {
        var result = record.arg;
        var value = result.value;
        if (value &&
            typeof value === "object" &&
            hasOwn.call(value, "__await")) {
          return Promise.resolve(value.__await).then(function(value) {
            invoke("next", value, resolve, reject);
          }, function(err) {
            invoke("throw", err, resolve, reject);
          });
        }

        return Promise.resolve(value).then(function(unwrapped) {
          // When a yielded Promise is resolved, its final value becomes
          // the .value of the Promise<{value,done}> result for the
          // current iteration. If the Promise is rejected, however, the
          // result for this iteration will be rejected with the same
          // reason. Note that rejections of yielded Promises are not
          // thrown back into the generator function, as is the case
          // when an awaited Promise is rejected. This difference in
          // behavior between yield and await is important, because it
          // allows the consumer to decide what to do with the yielded
          // rejection (swallow it and continue, manually .throw it back
          // into the generator, abandon iteration, whatever). With
          // await, by contrast, there is no opportunity to examine the
          // rejection reason outside the generator function, so the
          // only option is to throw it from the await expression, and
          // let the generator function handle the exception.
          result.value = unwrapped;
          resolve(result);
        }, reject);
      }
    }

    if (typeof global.process === "object" && global.process.domain) {
      invoke = global.process.domain.bind(invoke);
    }

    var previousPromise;

    function enqueue(method, arg) {
      function callInvokeWithMethodAndArg() {
        return new Promise(function(resolve, reject) {
          invoke(method, arg, resolve, reject);
        });
      }

      return previousPromise =
        // If enqueue has been called before, then we want to wait until
        // all previous Promises have been resolved before calling invoke,
        // so that results are always delivered in the correct order. If
        // enqueue has not been called before, then it is important to
        // call invoke immediately, without waiting on a callback to fire,
        // so that the async generator function has the opportunity to do
        // any necessary setup in a predictable way. This predictability
        // is why the Promise constructor synchronously invokes its
        // executor callback, and why async functions synchronously
        // execute code before the first await. Since we implement simple
        // async functions in terms of async generators, it is especially
        // important to get this right, even though it requires care.
        previousPromise ? previousPromise.then(
          callInvokeWithMethodAndArg,
          // Avoid propagating failures to Promises returned by later
          // invocations of the iterator.
          callInvokeWithMethodAndArg
        ) : callInvokeWithMethodAndArg();
    }

    // Define the unified helper method that is used to implement .next,
    // .throw, and .return (see defineIteratorMethods).
    this._invoke = enqueue;
  }

  defineIteratorMethods(AsyncIterator.prototype);
  AsyncIterator.prototype[asyncIteratorSymbol] = function () {
    return this;
  };
  runtime.AsyncIterator = AsyncIterator;

  // Note that simple async functions are implemented on top of
  // AsyncIterator objects; they just return a Promise for the value of
  // the final result produced by the iterator.
  runtime.async = function(innerFn, outerFn, self, tryLocsList) {
    var iter = new AsyncIterator(
      wrap(innerFn, outerFn, self, tryLocsList)
    );

    return runtime.isGeneratorFunction(outerFn)
      ? iter // If outerFn is a generator, return the full iterator.
      : iter.next().then(function(result) {
          return result.done ? result.value : iter.next();
        });
  };

  function makeInvokeMethod(innerFn, self, context) {
    var state = GenStateSuspendedStart;

    return function invoke(method, arg) {
      if (state === GenStateExecuting) {
        throw new Error("Generator is already running");
      }

      if (state === GenStateCompleted) {
        if (method === "throw") {
          throw arg;
        }

        // Be forgiving, per 25.3.3.3.3 of the spec:
        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume
        return doneResult();
      }

      context.method = method;
      context.arg = arg;

      while (true) {
        var delegate = context.delegate;
        if (delegate) {
          var delegateResult = maybeInvokeDelegate(delegate, context);
          if (delegateResult) {
            if (delegateResult === ContinueSentinel) continue;
            return delegateResult;
          }
        }

        if (context.method === "next") {
          // Setting context._sent for legacy support of Babel's
          // function.sent implementation.
          context.sent = context._sent = context.arg;

        } else if (context.method === "throw") {
          if (state === GenStateSuspendedStart) {
            state = GenStateCompleted;
            throw context.arg;
          }

          context.dispatchException(context.arg);

        } else if (context.method === "return") {
          context.abrupt("return", context.arg);
        }

        state = GenStateExecuting;

        var record = tryCatch(innerFn, self, context);
        if (record.type === "normal") {
          // If an exception is thrown from innerFn, we leave state ===
          // GenStateExecuting and loop back for another invocation.
          state = context.done
            ? GenStateCompleted
            : GenStateSuspendedYield;

          if (record.arg === ContinueSentinel) {
            continue;
          }

          return {
            value: record.arg,
            done: context.done
          };

        } else if (record.type === "throw") {
          state = GenStateCompleted;
          // Dispatch the exception by looping back around to the
          // context.dispatchException(context.arg) call above.
          context.method = "throw";
          context.arg = record.arg;
        }
      }
    };
  }

  // Call delegate.iterator[context.method](context.arg) and handle the
  // result, either by returning a { value, done } result from the
  // delegate iterator, or by modifying context.method and context.arg,
  // setting context.delegate to null, and returning the ContinueSentinel.
  function maybeInvokeDelegate(delegate, context) {
    var method = delegate.iterator[context.method];
    if (method === undefined) {
      // A .throw or .return when the delegate iterator has no .throw
      // method always terminates the yield* loop.
      context.delegate = null;

      if (context.method === "throw") {
        if (delegate.iterator.return) {
          // If the delegate iterator has a return method, give it a
          // chance to clean up.
          context.method = "return";
          context.arg = undefined;
          maybeInvokeDelegate(delegate, context);

          if (context.method === "throw") {
            // If maybeInvokeDelegate(context) changed context.method from
            // "return" to "throw", let that override the TypeError below.
            return ContinueSentinel;
          }
        }

        context.method = "throw";
        context.arg = new TypeError(
          "The iterator does not provide a 'throw' method");
      }

      return ContinueSentinel;
    }

    var record = tryCatch(method, delegate.iterator, context.arg);

    if (record.type === "throw") {
      context.method = "throw";
      context.arg = record.arg;
      context.delegate = null;
      return ContinueSentinel;
    }

    var info = record.arg;

    if (! info) {
      context.method = "throw";
      context.arg = new TypeError("iterator result is not an object");
      context.delegate = null;
      return ContinueSentinel;
    }

    if (info.done) {
      // Assign the result of the finished delegate to the temporary
      // variable specified by delegate.resultName (see delegateYield).
      context[delegate.resultName] = info.value;

      // Resume execution at the desired location (see delegateYield).
      context.next = delegate.nextLoc;

      // If context.method was "throw" but the delegate handled the
      // exception, let the outer generator proceed normally. If
      // context.method was "next", forget context.arg since it has been
      // "consumed" by the delegate iterator. If context.method was
      // "return", allow the original .return call to continue in the
      // outer generator.
      if (context.method !== "return") {
        context.method = "next";
        context.arg = undefined;
      }

    } else {
      // Re-yield the result returned by the delegate method.
      return info;
    }

    // The delegate iterator is finished, so forget it and continue with
    // the outer generator.
    context.delegate = null;
    return ContinueSentinel;
  }

  // Define Generator.prototype.{next,throw,return} in terms of the
  // unified ._invoke helper method.
  defineIteratorMethods(Gp);

  Gp[toStringTagSymbol] = "Generator";

  // A Generator should always return itself as the iterator object when the
  // @@iterator function is called on it. Some browsers' implementations of the
  // iterator prototype chain incorrectly implement this, causing the Generator
  // object to not be returned from this call. This ensures that doesn't happen.
  // See https://github.com/facebook/regenerator/issues/274 for more details.
  Gp[iteratorSymbol] = function() {
    return this;
  };

  Gp.toString = function() {
    return "[object Generator]";
  };

  function pushTryEntry(locs) {
    var entry = { tryLoc: locs[0] };

    if (1 in locs) {
      entry.catchLoc = locs[1];
    }

    if (2 in locs) {
      entry.finallyLoc = locs[2];
      entry.afterLoc = locs[3];
    }

    this.tryEntries.push(entry);
  }

  function resetTryEntry(entry) {
    var record = entry.completion || {};
    record.type = "normal";
    delete record.arg;
    entry.completion = record;
  }

  function Context(tryLocsList) {
    // The root entry object (effectively a try statement without a catch
    // or a finally block) gives us a place to store values thrown from
    // locations where there is no enclosing try statement.
    this.tryEntries = [{ tryLoc: "root" }];
    tryLocsList.forEach(pushTryEntry, this);
    this.reset(true);
  }

  runtime.keys = function(object) {
    var keys = [];
    for (var key in object) {
      keys.push(key);
    }
    keys.reverse();

    // Rather than returning an object with a next method, we keep
    // things simple and return the next function itself.
    return function next() {
      while (keys.length) {
        var key = keys.pop();
        if (key in object) {
          next.value = key;
          next.done = false;
          return next;
        }
      }

      // To avoid creating an additional object, we just hang the .value
      // and .done properties off the next function object itself. This
      // also ensures that the minifier will not anonymize the function.
      next.done = true;
      return next;
    };
  };

  function values(iterable) {
    if (iterable) {
      var iteratorMethod = iterable[iteratorSymbol];
      if (iteratorMethod) {
        return iteratorMethod.call(iterable);
      }

      if (typeof iterable.next === "function") {
        return iterable;
      }

      if (!isNaN(iterable.length)) {
        var i = -1, next = function next() {
          while (++i < iterable.length) {
            if (hasOwn.call(iterable, i)) {
              next.value = iterable[i];
              next.done = false;
              return next;
            }
          }

          next.value = undefined;
          next.done = true;

          return next;
        };

        return next.next = next;
      }
    }

    // Return an iterator with no values.
    return { next: doneResult };
  }
  runtime.values = values;

  function doneResult() {
    return { value: undefined, done: true };
  }

  Context.prototype = {
    constructor: Context,

    reset: function(skipTempReset) {
      this.prev = 0;
      this.next = 0;
      // Resetting context._sent for legacy support of Babel's
      // function.sent implementation.
      this.sent = this._sent = undefined;
      this.done = false;
      this.delegate = null;

      this.method = "next";
      this.arg = undefined;

      this.tryEntries.forEach(resetTryEntry);

      if (!skipTempReset) {
        for (var name in this) {
          // Not sure about the optimal order of these conditions:
          if (name.charAt(0) === "t" &&
              hasOwn.call(this, name) &&
              !isNaN(+name.slice(1))) {
            this[name] = undefined;
          }
        }
      }
    },

    stop: function() {
      this.done = true;

      var rootEntry = this.tryEntries[0];
      var rootRecord = rootEntry.completion;
      if (rootRecord.type === "throw") {
        throw rootRecord.arg;
      }

      return this.rval;
    },

    dispatchException: function(exception) {
      if (this.done) {
        throw exception;
      }

      var context = this;
      function handle(loc, caught) {
        record.type = "throw";
        record.arg = exception;
        context.next = loc;

        if (caught) {
          // If the dispatched exception was caught by a catch block,
          // then let that catch block handle the exception normally.
          context.method = "next";
          context.arg = undefined;
        }

        return !! caught;
      }

      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        var record = entry.completion;

        if (entry.tryLoc === "root") {
          // Exception thrown outside of any try block that could handle
          // it, so set the completion value of the entire function to
          // throw the exception.
          return handle("end");
        }

        if (entry.tryLoc <= this.prev) {
          var hasCatch = hasOwn.call(entry, "catchLoc");
          var hasFinally = hasOwn.call(entry, "finallyLoc");

          if (hasCatch && hasFinally) {
            if (this.prev < entry.catchLoc) {
              return handle(entry.catchLoc, true);
            } else if (this.prev < entry.finallyLoc) {
              return handle(entry.finallyLoc);
            }

          } else if (hasCatch) {
            if (this.prev < entry.catchLoc) {
              return handle(entry.catchLoc, true);
            }

          } else if (hasFinally) {
            if (this.prev < entry.finallyLoc) {
              return handle(entry.finallyLoc);
            }

          } else {
            throw new Error("try statement without catch or finally");
          }
        }
      }
    },

    abrupt: function(type, arg) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc <= this.prev &&
            hasOwn.call(entry, "finallyLoc") &&
            this.prev < entry.finallyLoc) {
          var finallyEntry = entry;
          break;
        }
      }

      if (finallyEntry &&
          (type === "break" ||
           type === "continue") &&
          finallyEntry.tryLoc <= arg &&
          arg <= finallyEntry.finallyLoc) {
        // Ignore the finally entry if control is not jumping to a
        // location outside the try/catch block.
        finallyEntry = null;
      }

      var record = finallyEntry ? finallyEntry.completion : {};
      record.type = type;
      record.arg = arg;

      if (finallyEntry) {
        this.method = "next";
        this.next = finallyEntry.finallyLoc;
        return ContinueSentinel;
      }

      return this.complete(record);
    },

    complete: function(record, afterLoc) {
      if (record.type === "throw") {
        throw record.arg;
      }

      if (record.type === "break" ||
          record.type === "continue") {
        this.next = record.arg;
      } else if (record.type === "return") {
        this.rval = this.arg = record.arg;
        this.method = "return";
        this.next = "end";
      } else if (record.type === "normal" && afterLoc) {
        this.next = afterLoc;
      }

      return ContinueSentinel;
    },

    finish: function(finallyLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.finallyLoc === finallyLoc) {
          this.complete(entry.completion, entry.afterLoc);
          resetTryEntry(entry);
          return ContinueSentinel;
        }
      }
    },

    "catch": function(tryLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc === tryLoc) {
          var record = entry.completion;
          if (record.type === "throw") {
            var thrown = record.arg;
            resetTryEntry(entry);
          }
          return thrown;
        }
      }

      // The context.catch method must only be called with a location
      // argument that corresponds to a known catch block.
      throw new Error("illegal catch attempt");
    },

    delegateYield: function(iterable, resultName, nextLoc) {
      this.delegate = {
        iterator: values(iterable),
        resultName: resultName,
        nextLoc: nextLoc
      };

      if (this.method === "next") {
        // Deliberately forget the last sent value so that we don't
        // accidentally pass it on to the delegate.
        this.arg = undefined;
      }

      return ContinueSentinel;
    }
  };
})(
  // Among the various tricks for obtaining a reference to the global
  // object, this seems to be the most reliable technique that does not
  // use indirect eval (which violates Content Security Policy).
  typeof global === "object" ? global :
  typeof window === "object" ? window :
  typeof self === "object" ? self : this
);

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{}],427:[function(require,module,exports){
/*
	Based on rgbcolor.js by Stoyan Stefanov <sstoo@gmail.com>
	http://www.phpied.com/rgb-color-parser-in-javascript/
*/

module.exports = function(color_string) {
    this.ok = false;
    this.alpha = 1.0;

    // strip any leading #
    if (color_string.charAt(0) == '#') { // remove # if any
        color_string = color_string.substr(1,6);
    }

    color_string = color_string.replace(/ /g,'');
    color_string = color_string.toLowerCase();

    // before getting into regexps, try simple matches
    // and overwrite the input
    var simple_colors = {
        aliceblue: 'f0f8ff',
        antiquewhite: 'faebd7',
        aqua: '00ffff',
        aquamarine: '7fffd4',
        azure: 'f0ffff',
        beige: 'f5f5dc',
        bisque: 'ffe4c4',
        black: '000000',
        blanchedalmond: 'ffebcd',
        blue: '0000ff',
        blueviolet: '8a2be2',
        brown: 'a52a2a',
        burlywood: 'deb887',
        cadetblue: '5f9ea0',
        chartreuse: '7fff00',
        chocolate: 'd2691e',
        coral: 'ff7f50',
        cornflowerblue: '6495ed',
        cornsilk: 'fff8dc',
        crimson: 'dc143c',
        cyan: '00ffff',
        darkblue: '00008b',
        darkcyan: '008b8b',
        darkgoldenrod: 'b8860b',
        darkgray: 'a9a9a9',
        darkgreen: '006400',
        darkkhaki: 'bdb76b',
        darkmagenta: '8b008b',
        darkolivegreen: '556b2f',
        darkorange: 'ff8c00',
        darkorchid: '9932cc',
        darkred: '8b0000',
        darksalmon: 'e9967a',
        darkseagreen: '8fbc8f',
        darkslateblue: '483d8b',
        darkslategray: '2f4f4f',
        darkturquoise: '00ced1',
        darkviolet: '9400d3',
        deeppink: 'ff1493',
        deepskyblue: '00bfff',
        dimgray: '696969',
        dodgerblue: '1e90ff',
        feldspar: 'd19275',
        firebrick: 'b22222',
        floralwhite: 'fffaf0',
        forestgreen: '228b22',
        fuchsia: 'ff00ff',
        gainsboro: 'dcdcdc',
        ghostwhite: 'f8f8ff',
        gold: 'ffd700',
        goldenrod: 'daa520',
        gray: '808080',
        green: '008000',
        greenyellow: 'adff2f',
        honeydew: 'f0fff0',
        hotpink: 'ff69b4',
        indianred : 'cd5c5c',
        indigo : '4b0082',
        ivory: 'fffff0',
        khaki: 'f0e68c',
        lavender: 'e6e6fa',
        lavenderblush: 'fff0f5',
        lawngreen: '7cfc00',
        lemonchiffon: 'fffacd',
        lightblue: 'add8e6',
        lightcoral: 'f08080',
        lightcyan: 'e0ffff',
        lightgoldenrodyellow: 'fafad2',
        lightgrey: 'd3d3d3',
        lightgreen: '90ee90',
        lightpink: 'ffb6c1',
        lightsalmon: 'ffa07a',
        lightseagreen: '20b2aa',
        lightskyblue: '87cefa',
        lightslateblue: '8470ff',
        lightslategray: '778899',
        lightsteelblue: 'b0c4de',
        lightyellow: 'ffffe0',
        lime: '00ff00',
        limegreen: '32cd32',
        linen: 'faf0e6',
        magenta: 'ff00ff',
        maroon: '800000',
        mediumaquamarine: '66cdaa',
        mediumblue: '0000cd',
        mediumorchid: 'ba55d3',
        mediumpurple: '9370d8',
        mediumseagreen: '3cb371',
        mediumslateblue: '7b68ee',
        mediumspringgreen: '00fa9a',
        mediumturquoise: '48d1cc',
        mediumvioletred: 'c71585',
        midnightblue: '191970',
        mintcream: 'f5fffa',
        mistyrose: 'ffe4e1',
        moccasin: 'ffe4b5',
        navajowhite: 'ffdead',
        navy: '000080',
        oldlace: 'fdf5e6',
        olive: '808000',
        olivedrab: '6b8e23',
        orange: 'ffa500',
        orangered: 'ff4500',
        orchid: 'da70d6',
        palegoldenrod: 'eee8aa',
        palegreen: '98fb98',
        paleturquoise: 'afeeee',
        palevioletred: 'd87093',
        papayawhip: 'ffefd5',
        peachpuff: 'ffdab9',
        peru: 'cd853f',
        pink: 'ffc0cb',
        plum: 'dda0dd',
        powderblue: 'b0e0e6',
        purple: '800080',
        red: 'ff0000',
        rosybrown: 'bc8f8f',
        royalblue: '4169e1',
        saddlebrown: '8b4513',
        salmon: 'fa8072',
        sandybrown: 'f4a460',
        seagreen: '2e8b57',
        seashell: 'fff5ee',
        sienna: 'a0522d',
        silver: 'c0c0c0',
        skyblue: '87ceeb',
        slateblue: '6a5acd',
        slategray: '708090',
        snow: 'fffafa',
        springgreen: '00ff7f',
        steelblue: '4682b4',
        tan: 'd2b48c',
        teal: '008080',
        thistle: 'd8bfd8',
        tomato: 'ff6347',
        turquoise: '40e0d0',
        violet: 'ee82ee',
        violetred: 'd02090',
        wheat: 'f5deb3',
        white: 'ffffff',
        whitesmoke: 'f5f5f5',
        yellow: 'ffff00',
        yellowgreen: '9acd32'
    };
    color_string = simple_colors[color_string] || color_string;
    // emd of simple type-in colors

    // array of color definition objects
    var color_defs = [
        {
            re: /^rgba\((\d{1,3}),\s*(\d{1,3}),\s*(\d{1,3}),\s*((?:\d?\.)?\d)\)$/,
            example: ['rgba(123, 234, 45, 0.8)', 'rgba(255,234,245,1.0)'],
            process: function (bits){
                return [
                    parseInt(bits[1]),
                    parseInt(bits[2]),
                    parseInt(bits[3]),
                    parseFloat(bits[4])
                ];
            }
        },
        {
            re: /^rgb\((\d{1,3}),\s*(\d{1,3}),\s*(\d{1,3})\)$/,
            example: ['rgb(123, 234, 45)', 'rgb(255,234,245)'],
            process: function (bits){
                return [
                    parseInt(bits[1]),
                    parseInt(bits[2]),
                    parseInt(bits[3])
                ];
            }
        },
        {
            re: /^(\w{2})(\w{2})(\w{2})$/,
            example: ['#00ff00', '336699'],
            process: function (bits){
                return [
                    parseInt(bits[1], 16),
                    parseInt(bits[2], 16),
                    parseInt(bits[3], 16)
                ];
            }
        },
        {
            re: /^(\w{1})(\w{1})(\w{1})$/,
            example: ['#fb0', 'f0f'],
            process: function (bits){
                return [
                    parseInt(bits[1] + bits[1], 16),
                    parseInt(bits[2] + bits[2], 16),
                    parseInt(bits[3] + bits[3], 16)
                ];
            }
        }
    ];

    // search through the definitions to find a match
    for (var i = 0; i < color_defs.length; i++) {
        var re = color_defs[i].re;
        var processor = color_defs[i].process;
        var bits = re.exec(color_string);
        if (bits) {
            var channels = processor(bits);
            this.r = channels[0];
            this.g = channels[1];
            this.b = channels[2];
            if (channels.length > 3) {
                this.alpha = channels[3];
            }
            this.ok = true;
        }

    }

    // validate/cleanup values
    this.r = (this.r < 0 || isNaN(this.r)) ? 0 : ((this.r > 255) ? 255 : this.r);
    this.g = (this.g < 0 || isNaN(this.g)) ? 0 : ((this.g > 255) ? 255 : this.g);
    this.b = (this.b < 0 || isNaN(this.b)) ? 0 : ((this.b > 255) ? 255 : this.b);
    this.alpha = (this.alpha < 0) ? 0 : ((this.alpha > 1.0 || isNaN(this.alpha)) ? 1.0 : this.alpha);

    // some getters
    this.toRGB = function () {
        return 'rgb(' + this.r + ', ' + this.g + ', ' + this.b + ')';
    }
    this.toRGBA = function () {
        return 'rgba(' + this.r + ', ' + this.g + ', ' + this.b + ', ' + this.alpha + ')';
    }
    this.toHex = function () {
        var r = this.r.toString(16);
        var g = this.g.toString(16);
        var b = this.b.toString(16);
        if (r.length == 1) r = '0' + r;
        if (g.length == 1) g = '0' + g;
        if (b.length == 1) b = '0' + b;
        return '#' + r + g + b;
    }

    // help
    this.getHelpXML = function () {

        var examples = new Array();
        // add regexps
        for (var i = 0; i < color_defs.length; i++) {
            var example = color_defs[i].example;
            for (var j = 0; j < example.length; j++) {
                examples[examples.length] = example[j];
            }
        }
        // add type-in colors
        for (var sc in simple_colors) {
            examples[examples.length] = sc;
        }

        var xml = document.createElement('ul');
        xml.setAttribute('id', 'rgbcolor-examples');
        for (var i = 0; i < examples.length; i++) {
            try {
                var list_item = document.createElement('li');
                var list_color = new RGBColor(examples[i]);
                var example_div = document.createElement('div');
                example_div.style.cssText =
                        'margin: 3px; '
                        + 'border: 1px solid black; '
                        + 'background:' + list_color.toHex() + '; '
                        + 'color:' + list_color.toHex()
                ;
                example_div.appendChild(document.createTextNode('test'));
                var list_item_value = document.createTextNode(
                    ' ' + examples[i] + ' -> ' + list_color.toRGB() + ' -> ' + list_color.toHex()
                );
                list_item.appendChild(example_div);
                list_item.appendChild(list_item_value);
                xml.appendChild(list_item);

            } catch(e){}
        }
        return xml;

    }

}

},{}],428:[function(require,module,exports){
'use strict';

var adminAPI = require('../api/admin');
var types = require('../constants/ActionTypes');

var requestedActivity = function requestedActivity() {
  return {
    type: types.ADMIN_REQUESTED_ACTIVITY
  };
};

var receivedActivity = function receivedActivity(success, errors, activity) {
  return {
    type: types.ADMIN_RECEIVED_ACTIVITY,
    success: success,
    errors: errors,
    activity: activity
  };
};

var requestedSessions = function requestedSessions(username) {
  return {
    type: types.ADMIN_REQUESTED_SESSIONS,
    username: username
  };
};

var receivedSessions = function receivedSessions(success, errors, devices) {
  return {
    type: types.ADMIN_RECEIVED_SESSIONS,
    success: success,
    errors: errors,
    devices: devices
  };
};

var requestedMeters = function requestedMeters(username) {
  return {
    type: types.ADMIN_REQUESTED_METERS,
    username: username
  };
};

var receivedMeters = function receivedMeters(success, errors, meters) {
  return {
    type: types.ADMIN_RECEIVED_METERS,
    success: success,
    errors: errors,
    meters: meters
  };
};

var requestedExport = function requestedExport(username) {
  return {
    type: types.ADMIN_EXPORT_REQUEST,
    username: username
  };
};

var receivedExport = function receivedExport(success, errors, token) {
  return {
    type: types.ADMIN_EXPORT_COMPLETE,
    success: success,
    errors: errors,
    token: token
  };
};

var _resetUserData = function _resetUserData() {
  return {
    type: types.ADMIN_RESET_USER_DATA
  };
};

var addUserMakeRequest = function addUserMakeRequest() {
  return {
    type: types.ADMIN_ADD_USER_MAKE_REQUEST
  };
};

var addUserReceiveResponse = function addUserReceiveResponse(success, errors) {
  return {
    type: types.ADMIN_ADD_USER_RECEIVE_RESPONSE,
    success: success,
    errors: errors
  };
};

var addUserGetUtilitiesRequest = function addUserGetUtilitiesRequest() {
  return {
    type: types.ADMIN_ADD_USER_GET_UTILITIES_MAKE_REQUEST
  };
};

var addUserGetUtilitiesResponse = function addUserGetUtilitiesResponse(success, utilities, errors) {
  return {
    type: types.ADMIN_ADD_USER_GET_UTILITIES_RECEIVE_RESPONSE,
    success: success,
    utilities: utilities,
    errors: errors
  };
};

var AdminActions = {
  showChangePasswordModal: function showChangePasswordModal(key, username) {
    return {
      type: types.ADMIN_CHANGE_PASSWORD_SHOW,
      key: key,
      username: username
    };
  },

  updateChangePasswordForm: function updateChangePasswordForm(data) {
    return {
      type: types.ADMIN_CHANGE_PASSWORD_SET_VALUE,
      data: data
    };
  },

  setErrorChangePasswordForm: function setErrorChangePasswordForm(error) {
    return {
      type: types.ADMIN_CHANGE_PASSWORD_SET_ERROR,
      error: error
    };
  },

  hideChangePasswordModal: function hideChangePasswordModal() {
    return {
      type: types.ADMIN_CHANGE_PASSWORD_HIDE
    };
  },

  showAddUserForm: function showAddUserForm() {
    return {
      type: types.ADMIN_ADD_USER_SHOW
    };
  },

  hideAddUserForm: function hideAddUserForm() {
    return {
      type: types.ADMIN_ADD_USER_HIDE
    };
  },

  addUserSelectGenderMale: function addUserSelectGenderMale() {
    return {
      type: types.ADMIN_ADD_USER_SELECT_GENDER_MALE
    };
  },

  addUserSelectGenderFemale: function addUserSelectGenderFemale() {
    return {
      type: types.ADMIN_ADD_USER_SELECT_GENDER_FEMALE
    };
  },

  addUserSelectUtility: function addUserSelectUtility(event, utility) {
    return {
      type: types.ADMIN_ADD_USER_SELECT_UTILITY,
      utility: {
        label: utility.label,
        value: utility.value
      }
    };
  },

  addUserFillForm: function addUserFillForm(inputFormFields) {
    return {
      type: types.ADMIN_ADD_USER_FILL_FORM,
      firstName: inputFormFields.firstName,
      lastName: inputFormFields.lastName,
      email: inputFormFields.email,
      gender: inputFormFields.gender,
      address: inputFormFields.address,
      postalCode: inputFormFields.postalCode
    };
  },

  addUserValidationsErrorsOccurred: function addUserValidationsErrorsOccurred(errors) {
    return {
      type: types.ADMIN_ADD_USER_VALIDATION_ERRORS_OCCURRED,
      errors: errors
    };
  },

  addUserShowMessageAlert: function addUserShowMessageAlert(errors) {
    return {
      type: types.ADMIN_ADD_USER_SHOW_MESSAGE_ALERT,
      errors: errors
    };
  },

  addUserHideErrorAlert: function addUserHideErrorAlert() {
    return {
      type: types.ADMIN_ADD_USER_HIDE_MESSAGE_ALERT
    };
  },

  addUser: function addUser(userInfo) {
    return function (dispatch, getState) {
      dispatch(addUserMakeRequest());
      return adminAPI.createNewUser(userInfo).then(function (response) {
        dispatch(addUserReceiveResponse(response.success, response.errors));
      }, function (error) {
        dispatch(addUserReceiveResponse(false, error));
      });
    };
  },

  addUserGetUtilities: function addUserGetUtilities() {
    return function (dispatch, getState) {
      dispatch(addUserGetUtilitiesRequest());
      return adminAPI.getAllUtilities().then(function (response) {
        dispatch(addUserGetUtilitiesResponse(response.success, response.utilitiesInfo, response.errors));
      }, function (error) {
        dispatch(addUserReceiveResponse(false, null, error));
      });
    };
  },

  getActivity: function getActivity() {
    return function (dispatch, getState) {
      dispatch(requestedActivity());

      return adminAPI.getActivity().then(function (response) {
        dispatch(receivedActivity(response.success, response.errors, response.accounts));
      }, function (error) {
        dispatch(receivedActivity(false, error, null));
      });
    };
  },

  getSessions: function getSessions(userKey, username) {
    return function (dispatch, getState) {
      dispatch(requestedSessions(username));

      return adminAPI.getSessions(userKey).then(function (response) {
        dispatch(receivedSessions(response.success, response.errors, response.devices));
      }, function (error) {
        dispatch(receivedSessions(false, error, null));
      });
    };
  },

  getMeters: function getMeters(userKey, username) {
    return function (dispatch, getState) {
      dispatch(requestedMeters(username));

      return adminAPI.getMeters(userKey).then(function (response) {
        dispatch(receivedMeters(response.success, response.errors, response.series));
      }, function (error) {
        dispatch(receivedMeters(false, error, null));
      });
    };
  },

  exportUserData: function exportUserData(userKey, username) {
    return function (dispatch, getState) {
      dispatch(requestedExport(username));

      return adminAPI.exportUserData(userKey).then(function (response) {
        dispatch(receivedExport(response.success, response.errors, response.token));

        var link = document.createElement('a');
        link.href = '/action/data/download/' + response.token;
        link.download = 'user-export-data.zip';
        document.body.appendChild(link);
        link.click();
        document.body.removeChild(link);
      }, function (error) {
        dispatch(receivedExport(false, error, null));
      });
    };
  },

  resetUserData: function resetUserData() {
    return _resetUserData();
  },

  setFilter: function setFilter(filter) {
    return {
      type: types.ADMIN_FILTER_USER,
      filter: filter
    };
  },

  changePassword: function changePassword(username, password, captcha) {
    return function (dispatch, getState) {
      var data = {
        username: username,
        password: password,
        captcha: captcha
      };

      return adminAPI.changePassword(data).then(function (response) {
        if (response && response.errors && response.errors.length > 0) {
          throw new Error(response.errors[0].code);
        }
        return response;
      }).catch(function (error) {
        console.error('Error caught on changePassword:', error);
        throw error;
      });
    };
  }

};

module.exports = AdminActions;

},{"../api/admin":459,"../constants/ActionTypes":571}],429:[function(require,module,exports){
'use strict';

var types = require('../constants/ActionTypes');
var alertsAPI = require('../api/alerts');

var requestedGroups = function requestedGroups() {
  return {
    type: types.ANNC_REQUESTED_GROUPS
  };
};

var receivedGroups = function receivedGroups(success, errors, groups) {
  return {
    type: types.ANNC_RECEIVED_GROUPS,
    success: success,
    errors: errors,
    groups: groups
  };
};

var requestedUsers = function requestedUsers() {
  return {
    type: types.ANNC_REQUESTED_USERS,
    isLoading: true
  };
};

var receivedCurrentUtilityUsers = function receivedCurrentUtilityUsers(success, errors, members) {
  var initialUsers = [];

  if (members) {
    initialUsers = members.map(function (m) {
      return {
        id: m.key,
        lastName: m.fullName || m.username,
        username: m.username,
        location: m.location,
        createdOn: m.createdOn,
        selected: false
      };
    });
  }

  return {
    type: types.ANNC_RECEIVED_USERS,
    isLoading: false,
    success: success,
    errors: errors,
    accounts: initialUsers
  };
};

var requestedAnnouncementsHistory = function requestedAnnouncementsHistory() {
  return {
    type: types.ANNC_REQUESTED_ANNOUNCEMENT_HISTORY,
    isLoading: true
  };
};

var receivedAnnouncementsHistory = function receivedAnnouncementsHistory(success, errors, announcements) {
  return {
    type: types.ANNC_RECEIVED_ANNOUNCEMENT_HISTORY,
    isLoading: false,
    success: success,
    errors: errors,
    announcements: announcements
  };
};

var requestedBroadcast = function requestedBroadcast() {
  return {
    type: types.ANNC_BROADCAST_ANNOUNCEMENT_REQUEST,
    isLoading: true
  };
};

var broadcastAnnouncementResponse = function broadcastAnnouncementResponse(success, errors) {
  return {
    type: types.ANNC_BROADCAST_ANNOUNCEMENT_RESPONSE,
    success: success,
    errors: errors,
    isLoading: false
  };
};

var requestDeleteAnnouncement = function requestDeleteAnnouncement(announcement) {
  return {
    type: types.ANNC_DELETE_ANNOUNCEMENT_REQUEST,
    announcement: announcement,
    showModal: false,
    isLoading: true
  };
};

var deleteAnnouncementResponse = function deleteAnnouncementResponse(success, errors) {
  return {
    type: types.ANNC_DELETE_ANNOUNCEMENT_RESPONSE,
    isLoading: false,
    showModal: false,
    success: success,
    errors: errors
  };
};

var requestShowAnnouncement = function requestShowAnnouncement() {
  return {
    type: types.ANNC_SHOW_ANNOUNCEMENT_REQUEST,
    isLoading: true
  };
};

var showAnnouncementResponse = function showAnnouncementResponse(response) {
  return {
    type: types.ANNC_SHOW_ANNOUNCEMENT_RESPONSE,
    isLoading: false,
    showAnnouncementDetailsTable: true,
    success: response.success,
    errors: response.errors,
    announcement: response.announcement,
    receivers: response.receivers
  };
};

var AnnouncementsActions = {
  fetchGroups: function fetchGroups(event) {

    return function (dispatch, getState) {
      dispatch(requestedGroups());
      return alertsAPI.getAllGroups().then(function (response) {
        dispatch(receivedGroups(response.success, response.errors, response.groups));
      }, function (error) {
        dispatch(receivedGroups(false, error, null));
      });
    };
  },
  setGroup: function setGroup(event, group) {
    return {
      type: types.ANNC_SELECT_GROUP,
      group: group
    };
  },
  getCurrentUtilityUsers: function getCurrentUtilityUsers(event) {
    return function (dispatch, getState) {
      dispatch(requestedUsers());

      return alertsAPI.getAllUtilityUsers().then(function (response) {
        dispatch(receivedCurrentUtilityUsers(response.success, response.errors, response.members));
      }, function (error) {
        dispatch(receivedCurrentUtilityUsers(false, error, null));
      });
    };
  },
  getGroupUsers: function getGroupUsers(groupUUID) {
    return function (dispatch, getState) {
      dispatch(requestedUsers());
      return alertsAPI.getUsersOfGroup(groupUUID).then(function (response) {
        dispatch(receivedCurrentUtilityUsers(response.success, response.errors, response.members));
      }, function (error) {
        dispatch(receivedCurrentUtilityUsers(false, error, null));
      });
    };
  },
  getAnnouncementHistory: function getAnnouncementHistory(event) {
    return function (dispatch, getState) {
      dispatch(requestedAnnouncementsHistory());

      return alertsAPI.getAnnouncements().then(function (response) {
        dispatch(receivedAnnouncementsHistory(response.success, response.errors, response.messages));
      }, function (error) {
        dispatch(receivedAnnouncementsHistory(false, error, []));
      });
    };
  },
  setSelectedUser: function setSelectedUser(accounts, accountId, selected) {
    var changedAccounts = [];
    for (var obj in accounts) {
      var currentId, currentUsername, currentLastName, elementTemp, tempSelected;
      for (var prop in accounts[obj]) {
        if (prop == "id") {
          if (accounts[obj][prop] == accountId) {
            tempSelected = !selected;
          } else {
            tempSelected = accounts[obj].selected;
          }
          currentId = accounts[obj][prop];
        } else if (prop == "lastName") {
          currentLastName = accounts[obj][prop];
        } else if (prop == "username") {
          currentUsername = accounts[obj][prop];
        }
      }
      elementTemp = { id: currentId, lastName: currentLastName, username: currentUsername, selected: tempSelected };
      changedAccounts.push(elementTemp);
    }
    return {
      type: types.ANNC_INITIAL_USERS_SET_SELECTED,
      rowIdToggled: accountId,
      accounts: changedAccounts
    };
  },
  setSelectedAddedUser: function setSelectedAddedUser(addedUsers, accountId, selected) {
    var changedAccounts = [];
    for (var obj in addedUsers) {
      var currentId, currentUsername, currentLastName, elementTemp, tempSelected;
      for (var prop in addedUsers[obj]) {
        if (prop == "id") {
          if (addedUsers[obj][prop] == accountId) {
            tempSelected = !selected;
          } else {
            tempSelected = addedUsers[obj].selected;
          }
          currentId = addedUsers[obj][prop];
        } else if (prop == "lastName") {
          currentLastName = addedUsers[obj][prop];
        } else if (prop == "username") {
          currentUsername = addedUsers[obj][prop];
        }
      }
      elementTemp = { id: currentId, lastName: currentLastName, username: currentUsername, selected: tempSelected };
      changedAccounts.push(elementTemp);
    }
    return {
      type: types.ANNC_ADDED_USERS_SET_SELECTED,
      rowIdToggled: accountId,
      addedUsers: changedAccounts
    };
  },
  addUsers: function addUsers(addedUsers) {
    return {
      type: types.ANNC_ADD_USERS_BUTTON_CLICKED,
      addedUsers: addedUsers
    };
  },
  removeUsers: function removeUsers(remainingAddedUsers) {
    return {
      type: types.ANNC_REMOVE_USERS_BUTTON_CLICKED,
      addedUsers: remainingAddedUsers
    };
  },
  showForm: function showForm() {
    return {
      type: types.ANNC_SHOW_FORM,
      showForm: true
    };
  },
  cancelShowForm: function cancelShowForm() {
    return {
      type: types.ANNC_CANCEL_SHOW_FORM,
      showForm: false
    };
  },
  broadCastAnnouncement: function broadCastAnnouncement(event, users, announcement) {
    return function (dispatch, getState) {
      dispatch(requestedBroadcast());
      return alertsAPI.broadcastAnnouncement(users, announcement).then(function (response) {
        dispatch(broadcastAnnouncementResponse(response.success, response.errors));

        dispatch(requestedAnnouncementsHistory());
        return alertsAPI.getAnnouncements().then(function (response) {
          dispatch(receivedAnnouncementsHistory(response.success, response.errors, response.messages));
        }, function (error) {
          dispatch(receivedAnnouncementsHistory(false, error, []));
        });
      }, function (error) {
        dispatch(broadcastAnnouncementResponse(false, error, null));
      });
    };
  },
  setFilter: function setFilter(filter) {
    return {
      type: types.ANNC_FILTER_USERS,
      filter: filter
    };
  },
  setSelectedAll: function setSelectedAll(event, selected) {
    var accounts = [];
    for (var obj in event.props.data.rows) {
      event.props.data.rows[obj].selected = selected;
      accounts.push(event.props.data.rows[obj]);
    }
    return {
      type: types.ANNC_SET_SELECTED_ALL,
      accounts: accounts,
      checked: selected
    };
  },
  showModal: function showModal(announcement) {
    return {
      type: types.ANNC_SHOW_DELETE_MODAL,
      announcement: announcement,
      showModal: true
    };
  },
  hideModal: function hideModal() {
    return {
      type: types.ANNC_SHOW_DELETE_MODAL,
      showModal: false
    };
  },
  deleteAnnouncement: function deleteAnnouncement(event) {
    return function (dispatch, getState) {
      dispatch(requestDeleteAnnouncement);
      return alertsAPI.deleteAnnouncement(getState(event).announcements.announcement).then(function (response) {
        dispatch(deleteAnnouncementResponse(response.success, response.errors));

        dispatch(requestedAnnouncementsHistory());
        return alertsAPI.getAnnouncements().then(function (response) {
          dispatch(receivedAnnouncementsHistory(response.success, response.errors, response.messages));
        }, function (error) {
          dispatch(receivedAnnouncementsHistory(false, error, []));
        });
      }, function (error) {
        dispatch(deleteAnnouncementResponse(false, error, null));
      });
    };
  },
  showAnnouncementDetails: function showAnnouncementDetails(event, announcement) {
    return function (dispatch, getState) {
      dispatch(requestShowAnnouncement());
      return alertsAPI.fetchAnnouncement(announcement).then(function (response) {
        dispatch(showAnnouncementResponse(response));
      }, function (error) {
        dispatch(showAnnouncementResponse(false, error, null));
      });
    };
  },
  goBack: function goBack() {
    return {
      type: types.ANNC_GO_BACK,
      showAnnouncementDetailsTable: false
    };
  }
};

module.exports = AnnouncementsActions;

},{"../api/alerts":460,"../constants/ActionTypes":571}],430:[function(require,module,exports){
'use strict';

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var types = require('../constants/BudgetActionTypes');
var budgetAPI = require('../api/budget');
var userAPI = require('../api/user');

var _require = require('./SavingsActions'),
    fetchCompleted = _require.fetchCompleted;

var _require2 = require('../helpers/common'),
    extractFeatures = _require2.extractFeatures,
    throwServerError = _require2.throwServerError,
    sortSegments = _require2.sortSegments;

var setQuery = function setQuery(query) {
  return {
    type: types.BUDGET_SET_QUERY,
    query: query
  };
};

var setBudgets = function setBudgets(budgets) {
  return {
    type: types.BUDGET_SET_BUDGETS,
    budgets: budgets
  };
};

var setActiveBudgets = function setActiveBudgets(budgets) {
  return {
    type: types.BUDGET_SET_ACTIVE_BUDGETS,
    budgets: budgets
  };
};

var setSavingsScenarios = function setSavingsScenarios(scenarios) {
  return {
    type: types.BUDGET_SET_SAVINGS_SCENARIOS,
    scenarios: scenarios
  };
};

var confirmRemoveBudgetScenario = function confirmRemoveBudgetScenario(id) {
  return {
    type: types.BUDGET_CONFIRM_REMOVE_SCENARIO,
    id: id
  };
};

var confirmSetBudget = function confirmSetBudget(id) {
  return {
    type: types.BUDGET_CONFIRM_SET,
    id: id
  };
};

var confirmResetBudget = function confirmResetBudget(id) {
  return {
    type: types.BUDGET_CONFIRM_RESET,
    id: id
  };
};

var setSearchFilter = function setSearchFilter(searchFilter) {
  return {
    type: types.BUDGET_SET_SEARCH_FILTER,
    searchFilter: searchFilter
  };
};

var setExploreQuery = function setExploreQuery(query) {
  return {
    type: types.BUDGET_EXPLORE_SET_QUERY,
    query: query
  };
};

var resetExploreQuery = function resetExploreQuery() {
  return setExploreQuery({
    //cluster: 'none',
    //group: 'all',
    geometry: null,
    index: 0,
    size: 10,
    serial: '',
    text: ''
  });
};

var requestData = function requestData() {
  return {
    type: types.BUDGET_EXPLORE_REQUEST_DATA
  };
};

var setUserData = function setUserData(data, errors) {
  return {
    type: types.BUDGET_EXPLORE_SET_USER_DATA,
    data: data,
    errors: errors
  };
};
var setClusterData = function setClusterData(data) {
  return {
    type: types.BUDGET_EXPLORE_SET_CLUSTER_DATA,
    data: data
  };
};

var fetchCompletedSavingsScenarios = function fetchCompletedSavingsScenarios() {
  return function (dispatch, getState) {
    return dispatch(fetchCompleted()).then(function (res) {
      return dispatch(setSavingsScenarios(res.scenarios || []));
    });
  };
};

var addBudget = function addBudget(values) {
  return function (dispatch, getState) {
    var title = values.title.name;
    var utility = getState().config.utility.key;

    var population = Array.isArray(values.population) ? values.population.map(function (p) {
      return { key: p.key, type: p.type };
    }) : [{ type: 'UTILITY', key: utility }];
    var spatial = Array.isArray(values.spatial) ? values.spatial.map(function (area) {
      return { type: 'AREA', areas: [area.area] };
    }) : null;

    var excludePopulation = Array.isArray(values.excludePopulation) ? values.excludePopulation.map(function (p) {
      return { key: p.key, type: p.type };
    }) : null;

    var excludeSpatial = Array.isArray(values.excludeSpatial) ? values.excludeSpatial.map(function (area) {
      return { type: 'AREA', areas: [area.area] };
    }) : null;

    var parameters = {
      goal: values.goal && values.goal.goal || null,
      distribution: values.distribution && values.distribution.type || null,
      scenario: values.budgetType.type === 'SCENARIO' ? {
        key: values.scenario && values.scenario.key || null,
        percent: values.savings && values.savings.savings || null
      } : null,
      include: {
        population: population,
        spatial: spatial
      },
      exclude: {
        population: excludePopulation,
        spatial: excludeSpatial
      }
    };

    var options = {
      title: title,
      parameters: parameters
    };
    return budgetAPI.create(options).then(function (response) {
      if (!response || !response.success) {
        throwServerError(response);
      }
      return response;
    }).catch(function (error) {
      console.error('caught error in create budget', error);
      return null;
    });
  };
};

var removeBudget = function removeBudget(budgetKey) {
  return function (dispatch, getState) {
    var options = {
      budgetKey: budgetKey
    };
    return budgetAPI.remove(options).then(function (response) {
      if (!response || !response.success) {
        throwServerError(response);
      }
      return response;
    }).catch(function (error) {
      console.error('caught error in remove budget', error);
      return null;
    });
  };
};

var fetchBudget = function fetchBudget(budgetKey) {
  return function (dispatch, getState) {
    var options = {
      budgetKey: budgetKey
    };
    return budgetAPI.find(options).then(function (response) {
      if (!response || !response.success) {
        throwServerError(response);
      }
      return response.budget;
    }).catch(function (error) {
      console.error('caught error in fetch budget', error);
      return null;
    });
  };
};

var queryBudgets = function queryBudgets(query) {
  return function (dispatch, getState) {
    return budgetAPI.query({ query: query }).then(function (response) {
      if (!response || !response.success) {
        throwServerError(response);
      }
      return response;
    }).catch(function (error) {
      console.error('caught error in query budgets', error);
      return null;
    });
  };
};

var fetchBudgets = function fetchBudgets() {
  return function (dispatch, getState) {
    return dispatch(queryBudgets(getState().budget.query)).then(function (res) {
      dispatch(setQuery({ total: res.total }));
      return res.budgets || [];
    }).then(function (budgets) {
      return dispatch(setBudgets(budgets));
    });
  };
};

var fetchActiveBudgets = function fetchActiveBudgets() {
  return function (dispatch, getState) {
    return dispatch(queryBudgets({
      pageIndex: 0,
      pageSize: 20
      //active: true,
    })).then(function (res) {
      dispatch(setActiveBudgets(res.budgets.filter(function (b) {
        return b.active;
      }) || []));
    });
  };
};

var setQueryAndFetch = function setQueryAndFetch(query) {
  return function (dispatch, getState) {
    dispatch(setQuery(query));
    return dispatch(fetchBudgets());
  };
};

var setActiveBudget = function setActiveBudget(budgetKey) {
  return function (dispatch, getState) {
    var options = {
      budgetKey: budgetKey
    };
    return budgetAPI.activate(options).then(function (response) {
      if (!response || !response.success) {
        throwServerError(response);
      }
      return response;
    }).catch(function (error) {
      console.error('caught error in activate budget', error);
      return null;
    });
  };
};

var resetActiveBudget = function resetActiveBudget(budgetKey) {
  return function (dispatch, getState) {
    var options = {
      budgetKey: budgetKey
    };
    return budgetAPI.deactivate(options).then(function (response) {
      if (!response || !response.success) {
        throwServerError(response);
      }
      return response;
    }).catch(function (error) {
      console.error('caught error in deactivate budget', error);
      return null;
    });
  };
};

var scheduleBudget = function scheduleBudget(budgetKey, year, month) {
  return function (dispatch, getState) {
    var options = {
      budgetKey: budgetKey,
      year: year,
      month: month
    };
    return budgetAPI.schedule(options).then(function (response) {
      if (!response || !response.success) {
        throwServerError(response);
      }
      return response;
    }).catch(function (error) {
      console.error('caught error in schedule budget', error);
      return null;
    });
  };
};

var exploreBudgetCluster = function exploreBudgetCluster(budgetKey, clusterKey) {
  return function (dispatch, getState) {
    var options = {
      budgetKey: budgetKey,
      clusterKey: clusterKey
    };

    return budgetAPI.exploreCluster(options).then(function (response) {
      if (!response || !response.success) {
        throwServerError(response);
      }
      return response;
    }).catch(function (error) {
      console.error('caught error in explore budget cluster', error);
      return null;
    });
  };
};

var exploreBudgetAllClusters = function exploreBudgetAllClusters(budgetKey) {
  return function (dispatch, getState) {
    var _getState$config$util = getState().config.utility.clusters,
        clusters = _getState$config$util === undefined ? [] : _getState$config$util;

    return Promise.all(clusters.map(function (cluster) {
      return dispatch(exploreBudgetCluster(budgetKey, cluster.key));
    })).then(function (clusters) {
      return clusters.map(function (cluster) {
        return _extends({}, cluster, { segments: cluster.segments.sort(sortSegments) });
      });
    });
  };
};

var exploreBudgetUser = function exploreBudgetUser(budgetKey, consumerKey) {
  return function (dispatch, getState) {
    var options = {
      budgetKey: budgetKey,
      consumerKey: consumerKey
    };

    return budgetAPI.exploreConsumer(options).then(function (response) {
      if (!response || !response.success) {
        throwServerError(response);
      }
      return response;
    }).catch(function (error) {
      console.error('caught error in explore budget consumer', error);
      return {};
    });
  };
};

var exploreBudgetAllUsers = function exploreBudgetAllUsers(budgetKey, query) {
  return function (dispatch, getState) {
    return userAPI.getAccounts(query).then(function (userData) {
      return Promise.all(userData.accounts.map(function (account) {
        return dispatch(exploreBudgetUser(budgetKey, account.id)).then(function (data) {
          return _extends({}, account, data);
        });
      })).then(function (allUserData) {
        return {
          total: userData.total,
          accounts: allUserData.map(function (u) {
            var reducedBefore = Array.isArray(u.months) && u.months.reduce(function (p, c) {
              return p + c.consumptionBefore;
            }, 0) || null;
            var reducedAfter = Array.isArray(u.months) && u.months.reduce(function (p, c) {
              return p + c.consumptionAfter;
            }, 0) || null;
            var budget = Math.round(100 * (reducedBefore - reducedAfter) / 1000) / 100 || null;
            var savings = reducedBefore && Math.round(100 * (reducedBefore - reducedAfter) / reducedBefore) || null;
            return _extends({}, u, {
              savings: savings < 0 ? 0 : savings,
              budget: budget < 0 ? 0 : budget
            });
          })
        };
      });
    });
  };
};

var requestExploreData = function requestExploreData(budgetKey) {
  return function (dispatch, getState) {
    dispatch(requestData());
    var query = getState().budget.explore.query;


    return Promise.all([dispatch(exploreBudgetAllUsers(budgetKey, query)), dispatch(exploreBudgetAllClusters(budgetKey))]).then(function (_ref) {
      var _ref2 = _slicedToArray(_ref, 2),
          userData = _ref2[0],
          clusterData = _ref2[1];

      dispatch(setClusterData(clusterData.filter(function (c) {
        return c != null;
      })));

      dispatch(setUserData({
        total: userData.total,
        accounts: userData.accounts,
        features: extractFeatures(userData.accounts)
      }, null));
    }, function (error) {
      console.error('caught error in request explore data', error);
      dispatch(setUserData({}, error));
    });
  };
};

module.exports = {
  fetchCompletedSavingsScenarios: fetchCompletedSavingsScenarios,
  fetchBudgets: fetchBudgets,
  fetchActiveBudgets: fetchActiveBudgets,
  fetchBudget: fetchBudget,
  addBudget: addBudget,
  removeBudget: removeBudget,
  confirmRemoveBudgetScenario: confirmRemoveBudgetScenario,
  resetActiveBudget: resetActiveBudget,
  setActiveBudget: setActiveBudget,
  confirmSetBudget: confirmSetBudget,
  confirmResetBudget: confirmResetBudget,
  setSearchFilter: setSearchFilter,
  setQuery: setQuery,
  setQueryAndFetch: setQueryAndFetch,
  requestExploreData: requestExploreData,
  setExploreQuery: setExploreQuery,
  resetExploreQuery: resetExploreQuery,
  scheduleBudget: scheduleBudget
};

},{"../api/budget":462,"../api/user":476,"../constants/BudgetActionTypes":572,"../helpers/common":595,"./SavingsActions":446}],431:[function(require,module,exports){
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var adminAPI = require('../api/admin');
var queryAPI = require('../api/query');
var favouritesAPI = require('../api/favourites');
var population = require('../model/population');
var types = require('../constants/DashboardActionTypes');
var moment = require('moment');
var _ = require('lodash');
var defaultChartTitle = "Last 30 Days Average Consumption";
var defaultMapTitle = "Last 30 Days Consumption";

var defaultLayout = [{ "i": defaultChartTitle, "x": 0, "y": 1, "w": 8, "h": 1 }, { "i": defaultMapTitle, "x": 0, "y": 0, "w": 10, "h": 1 }];

var getDefaultChart = function getDefaultChart(props) {
  var defaultChart = {
    id: 100000,
    pinned: false,
    title: defaultChartTitle,
    type: "CHART",
    tags: "Chart - Meter",
    reportName: "avg",
    level: "day",
    field: "volume",
    queries: [{
      time: {
        type: "ABSOLUTE",
        granularity: "DAY",
        start: moment().subtract(30, 'day').valueOf(),
        end: moment().valueOf(),
        durationTimeUnit: "HOUR"
      },
      population: [{
        type: "UTILITY",
        label: "UTILITY:" + props.profile.utility.key,
        ranking: null,
        utility: props.profile.utility.key
      }],
      source: "METER",
      metrics: ["AVERAGE"]
    }]
  };
  return defaultChart;
};

var getDefaultMap = function getDefaultMap(props) {
  var defaultMap = {
    id: 100001,
    pinned: false,
    title: defaultMapTitle,
    type: "MAP",
    tags: "Map - Meter",
    queries: [{
      time: {
        type: "ABSOLUTE",
        granularity: "DAY",
        start: moment().subtract(30, 'day').valueOf(),
        end: moment().valueOf(),
        durationTimeUnit: "HOUR"
      },
      population: [{
        type: "UTILITY",
        label: "Utility",
        ranking: null,
        utility: props.profile.utility.key
      }],
      source: "METER",
      metrics: ["SUM"]
    }]
  };
  return defaultMap;
};

var _buildTimelineQuery = function _buildTimelineQuery(population, source, geometry, timezone, interval) {
  var spatial = [{
    type: 'GROUP',
    group: 'd29f8cb8-7df6-4d57-8c99-0a155cc394c5'
  }];

  if (geometry) {
    spatial.push({
      type: 'CONSTRAINT',
      geometry: geometry,
      operation: 'INTERSECT'
    });
  }

  return {
    'query': {
      'timezone': "Europe/Athens",
      'time': {
        'type': 'ABSOLUTE',
        'start': interval[0].toDate().getTime(),
        'end': interval[1].toDate().getTime(),
        'granularity': 'DAY'
      },
      'population': [population],
      spatial: spatial,
      'source': source,
      'metrics': ['SUM']
    }
  };
};

var _buildGroupQuery = function _buildGroupQuery(population, timezone, from, to) {
  return {
    "level": "week",
    "field": "volume",
    "overlap": null,
    "queries": [{
      "time": {
        "type": "ABSOLUTE",
        "granularity": "DAY",
        "start": from,
        "end": to
      },
      "population": population,
      "source": "METER",
      "metrics": ["SUM"]
    }]
  };
};

var _buildUtilityQuery = function _buildUtilityQuery(key, timezone, from, to) {
  return {
    "level": "week",
    "field": "volume",
    "overlap": null,
    "queries": [{
      "time": {
        "type": "ABSOLUTE",
        "granularity": "DAY",
        "start": from,
        "end": to
      },
      "population": [{
        "type": "UTILITY",
        "label": "UTILITY:" + key,
        "ranking": null,
        "utility": key
      }],
      "source": "METER",
      "metrics": ["SUM"]
    }]
  };
};

var _getTimelineInit = function _getTimelineInit(query, id, title) {
  return {
    type: types.TIMELINE_REQUEST,
    id: id,
    title: title,
    query: query
  };
};

var _getTimelineComplete = function _getTimelineComplete(success, errors, data, id, title, source) {

  return {
    type: types.TIMELINE_RESPONSE,
    id: id,
    title: title,
    source: source,
    success: success,
    errors: errors,
    data: data
  };
};

var _getFeatures = function _getFeatures(index, timestamp, label, id) {

  return {
    type: types.GET_FEATURES,
    id: id,
    timestamp: timestamp,
    label: label,
    index: index

  };
};

var _chartRequest = function _chartRequest(id, title) {
  return {
    type: types.CHART_REQUEST,
    id: id,
    title: title
  };
};

var _chartResponse = function _chartResponse(success, errors, data, title, id) {
  var t = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : null;

  return {
    type: types.CHART_RESPONSE,
    id: id,
    success: success,
    errors: errors,
    data: success ? data : [],
    timestamp: (t || new Date()).getTime(),
    title: title
  };
};

var _getCountersInit = function _getCountersInit() {
  return {
    type: types.COUNTER_REQUEST
  };
};

var _getCountersComplete = function _getCountersComplete(success, errors, counters) {
  return {
    type: types.COUNTER_RESPONSE,
    success: success,
    errors: errors,
    counters: counters
  };
};

var _saveLayoutRequest = function _saveLayoutRequest() {
  return {
    type: types.SAVE_LAYOUT_REQUEST
  };
};

var _saveLayoutResponse = function _saveLayoutResponse(success, errors) {
  return {
    type: types.SAVE_LAYOUT_RESPONSE,
    success: success,
    errors: errors
  };
};

var _getLayoutRequest = function _getLayoutRequest() {
  return {
    type: types.GET_LAYOUT_REQUEST
  };
};

var requestedFavouriteQueries = function requestedFavouriteQueries() {
  return {
    type: types.FAVOURITES_REQUEST
  };
};

var receivedFavouriteQueries = function receivedFavouriteQueries(success, errors, favourites) {
  return {
    type: types.FAVOURITES_RESPONSE,
    success: success,
    errors: errors,
    favourites: favourites
  };
};

var unpinRequest = function unpinRequest() {
  return {
    type: types.UNPIN_REQUEST
  };
};

var unpinResponse = function unpinResponse(success, errors) {
  return {
    type: types.UNPIN_RESPONSE,
    success: success,
    errors: errors
  };
};

var _getLayoutResponse = function _getLayoutResponse(success, errors, layout) {
  if (layout) {
    var configuration = JSON.parse(layout);
    return {
      type: types.GET_LAYOUT_RESPONSE,
      success: success,
      errors: errors,
      savedLayout: configuration.layout
    };
  } else {
    //return default layout in first login
    return {
      type: types.GET_LAYOUT_RESPONSE,
      success: success,
      errors: errors,
      savedLayout: defaultLayout
    };
  }
};

var alignLayout = function alignLayout(layout) {
  if (layout) {
    return {
      type: types.GET_LAYOUT_RESPONSE,
      savedLayout: layout
    };
  } else {
    //return default layout in first login
    return {
      type: types.GET_LAYOUT_RESPONSE,
      savedLayout: defaultLayout
    };
  }
};

var getChart = function getChart(favourite) {
  return function (dispatch, getState) {

    dispatch(_chartRequest(favourite.id, favourite.title));

    var promiseArray = [];
    for (var i = 0; i < favourite.queries.length; i++) {
      promiseArray.push(queryAPI.queryMeasurements({ query: favourite.queries[i] }));
    }

    Promise.all(promiseArray).then(function (res) {
      var source = favourite.queries[0].source; //source is same for all queries
      var resAll = [];
      for (var m = 0; m < res.length; m++) {
        if (res[m].errors.length) {
          throw 'The request is rejected: ' + res[m].errors[0].description;
        }
        var resultSets = source == 'AMPHIRO' ? res[m].devices : res[m].meters;
        var res1 = (resultSets || []).map(function (rs) {
          var _population$fromStrin = population.fromString(rs.label),
              _population$fromStrin2 = _slicedToArray(_population$fromStrin, 2),
              g = _population$fromStrin2[0],
              rr = _population$fromStrin2[1];

          //sort points on timestamp in order to handle pre-aggregated data


          rs.points = _.orderBy(rs.points, 'timestamp', 'desc');

          var timespan1;
          if (rs.points[rs.points.length - 1]) {
            //Recalculate xAxis timespan based on returned data. (scale)
            timespan1 = [rs.points[rs.points.length - 1].timestamp, rs.points[0].timestamp];
          } else {
            //empty result, use initial timespan
            timespan1 = [favourite.queries[0].time.start, favourite.queries[0].time.end];
          }

          var _loop = function _loop(j) {
            if (rr) {
              points = rs.points.map(function (p) {
                return {
                  timestamp: p.timestamp,
                  values: p.users.map(function (u) {
                    return u[rr.field][rr.metric];
                  }).sort(rr.comparator)
                };
              });

              // Shape a result with ranking on users

              res2 = _.times(rr.limit, function (i) {
                return {
                  source: source,
                  timespan: timespan1,
                  granularity: favourite.queries[0].time.granularity,
                  metric: favourite.queries[0].metric,
                  population: g,
                  ranking: _extends({}, rr.toJSON(), { index: i }),
                  data: points.map(function (p) {
                    return [p.timestamp, p.values[i] || null];
                  })
                };
              });
            } else {
              // Shape a normal timeseries result for requested metrics
              // Todo support other metrics (as client-side "average")
              res2 = favourite.queries[j].metrics.map(function (metric) {
                return {
                  source: source,
                  timespan: timespan1,
                  granularity: favourite.queries[j].time.granularity,
                  metric: metric,
                  population: g,
                  data: rs.points.map(function (p) {
                    return [p.timestamp, p.volume[metric]];
                  })
                };
              });
            }
            flatRes2 = _.flatten(res2);

            return {
              v: flatRes2
            };
          };

          for (var j = 0; j < favourite.queries.length; j++) {
            var res2;
            var points;
            var flatRes2;

            var _ret = _loop(j);

            if ((typeof _ret === 'undefined' ? 'undefined' : _typeof(_ret)) === "object") return _ret.v;
          }
        });
        var flatRes1 = _.flatten(res1);
        resAll.push(flatRes1);
      }
      var success = res.every(function (x) {
        return x.success === true;
      });
      var errors = success ? [] : res[0].errors; //todo - return flattend array of errors

      var flatResAll = _.flatten(resAll);
      var title = favourite.title;
      var id = favourite.id;
      dispatch(_chartResponse(success, errors, flatResAll, title, id));
      return _.flatten(resAll);
    });
  };
};

var getForecast = function getForecast(favourite) {
  //Build two queries, one for real data and one for forecast data.

  return function (dispatch, getState) {
    var profile = getState().session.profile;
    var key = profile.utility.key;
    var timezone = profile.timezone;

    var group = null;
    var groupType = favourite.queries[0].population[0].type;
    if (groupType === 'UTILITY') {
      group = null;
    } else if (groupType === 'GROUP') {
      var _population$fromStrin3 = population.fromString(favourite.queries[0].population[0].label),
          _population$fromStrin4 = _slicedToArray(_population$fromStrin3, 1),
          g = _population$fromStrin4[0];

      if (!g.clusterKey) {
        group = [{ group: g.key, label: "GROUP:" + g.key + '/' + favourite.title, type: "GROUP" }];
      } else {
        group = [{ group: g.key, label: "CLUSTER:" + g.clusterKey + ":" + g.key, type: "GROUP" }];
      }
    } else if (groupType === 'USER') {
      console.error('Single user forecast favourite not supported. ', favourite.queries[0].population[0]);
    }

    dispatch(_chartRequest(favourite.id, favourite.title));
    var promises = [];

    var interval = [moment(favourite.queries[0].time.start), moment(favourite.queries[0].time.end)];
    var actualData, forecast;

    if (group) {
      actualData = _buildGroupQuery(group, timezone, interval[0].toDate().getTime(), interval[1].toDate().getTime());
      forecast = _buildGroupQuery(group, timezone, interval[0].toDate().getTime(), moment().endOf('month').toDate().getTime());
    } else {
      actualData = _buildUtilityQuery(key, timezone, interval[0].toDate().getTime(), interval[1].toDate().getTime());
      forecast = _buildUtilityQuery(key, timezone, interval[0].toDate().getTime(), moment().endOf('month').toDate().getTime());
    }

    //don' t change push order. It is used below for forecast labels in each serie
    promises.push(queryAPI.queryMeasurements({ query: actualData.queries[0] }));
    promises.push(queryAPI.queryForecast({ query: forecast.queries[0] }));

    Promise.all(promises).then(function (res) {

      var source = actualData.queries[0].source; //source is same for all queries
      var resAll = [];

      var _loop2 = function _loop2(m) {
        if (res[m].errors.length) {
          throw 'The request is rejected: ' + res[m].errors[0].description;
        }
        resultSets = source == 'AMPHIRO' ? res[m].devices : res[m].meters;
        res1 = (resultSets || []).map(function (rs) {
          var _population$fromStrin5 = population.fromString(rs.label),
              _population$fromStrin6 = _slicedToArray(_population$fromStrin5, 1),
              g = _population$fromStrin6[0];

          //sort points on timestamp in order to handle pre-aggregated data


          rs.points = _.orderBy(rs.points, 'timestamp', 'desc');

          var timespan1;
          if (rs.points.length !== 0) {
            //Recalculate xAxis timespan based on returned data. (scale)
            timespan1 = [rs.points[rs.points.length - 1].timestamp, rs.points[0].timestamp];
          } else {
            timespan1 = [actualData.queries[0].time.start, actualData.queries[0].time.end];
          }

          // Shape a normal timeseries result for requested metrics
          // Todo support other metrics (as client-side "average")
          var res2 = actualData.queries[0].metrics.map(function (metric) {
            return {
              source: source,
              timespan: timespan1,
              granularity: actualData.queries[0].time.granularity,
              metric: metric,
              population: g,
              forecast: m === 0 ? false : true, //first promise is actual data, second is forecast data
              data: rs.points.map(function (p) {
                return [p.timestamp, p.volume[metric]];
              })
            };
          });
          return _.flatten(res2);
        });

        resAll.push(_.flatten(res1));
      };

      for (var m = 0; m < res.length; m++) {
        var resultSets;
        var res1;

        _loop2(m);
      }

      var success = res.every(function (x) {
        return x.success === true;
      });
      var errors = success ? [] : res[0].errors; //todo - return flattend array of errors?
      var flatResAll = _.flatten(resAll);
      var title = favourite.title;
      var id = favourite.id;

      dispatch(_chartResponse(success, errors, flatResAll, title, id));

      return _.flatten(resAll);
    });
  };
};

var getTimeline = function getTimeline(favourite) {

  var id = favourite.id;
  var title = favourite.title;
  return function (dispatch, getState) {

    var population, source, geometry, interval, timezone;

    population = favourite.queries[0].population[0];

    interval = [moment(favourite.queries[0].time.start), moment(favourite.queries[0].time.end)];
    source = favourite.queries[0].source;

    if (favourite.queries[0].spatial && favourite.queries[0].spatial.length > 1) {
      geometry = favourite.queries[0].spatial[1].geometry;
    } else {
      geometry = null;
    }

    var query = _buildTimelineQuery(population, source, geometry, timezone, interval);

    dispatch(_getTimelineInit(query, id, title));

    return queryAPI.queryMeasurements(query).then(function (response) {
      var data = {
        meters: null,
        devices: null,
        areas: null
      };
      if (response.success) {
        data.areas = response.areas;
        data.meters = response.meters;
        data.devices = response.devices;
      }

      dispatch(_getTimelineComplete(response.success, response.errors, data, id, title, source));

      dispatch(_getFeatures(0, null, null, id));
    }, function (error) {
      dispatch(_getTimelineComplete(false, error, null, null, null, null));

      dispatch(_getFeatures(0, null, null, id));
    });
  };
};

var DashboardActions = {

  getCounters: function getCounters(key, name, timezone) {
    return function (dispatch, getState) {
      dispatch(_getCountersInit());

      return adminAPI.getCounters().then(function (response) {
        var counters = null;

        if (response.success) {
          counters = response.counters;
        }
        dispatch(_getCountersComplete(response.success, response.errors, counters));
      }, function (error) {
        dispatch(_getCountersComplete(false, error, null));
      });
    };
  },

  getFeatures: function getFeatures(index, timestamp, label, id) {
    return _getFeatures(index, timestamp, label, id);
  },

  fetchFavouriteQueries: function fetchFavouriteQueries(props) {

    return function (dispatch, getState) {
      dispatch(requestedFavouriteQueries());
      return favouritesAPI.fetchFavouriteQueries().then(function (response) {

        dispatch(receivedFavouriteQueries(response.success, response.errors, response.queries));

        var pinnedCharts = response.queries.filter(function (fav) {
          return fav.type === "CHART" && fav.pinned === true;
        });

        pinnedCharts.push(getDefaultChart(props)); //adding default chart

        for (var m = 0; m < pinnedCharts.length; m++) {
          dispatch(getChart(pinnedCharts[m]));
        }

        var pinnedMaps = response.queries.filter(function (fav) {
          return fav.type === "MAP" && fav.pinned === true;
        });
        pinnedMaps.push(getDefaultMap(props)); //adding default map

        for (var n = 0; n < pinnedMaps.length; n++) {
          dispatch(getTimeline(pinnedMaps[n]));
        }

        var pinnedForecasts = response.queries.filter(function (fav) {
          return fav.type === "FORECAST" && fav.pinned === true;
        });

        for (var l = 0; l < pinnedForecasts.length; l++) {
          dispatch(getForecast(pinnedForecasts[l]));
        }
      }, function (error) {
        dispatch(receivedFavouriteQueries(false, error, null));
      });
    };
  },

  saveLayout: function saveLayout(layout) {

    return function (dispatch, getState) {

      dispatch(_saveLayoutRequest());

      return adminAPI.saveLayout(layout).then(function (response) {

        dispatch(_saveLayoutResponse(response.success, response.errors));
      }, function (error) {

        dispatch(_saveLayoutResponse(false, error));
      });
    };
  },

  unpin: function unpin(query, props) {
    //todo - stop unpinned component if it is on timeline play

    return function (dispatch, getState) {

      dispatch(unpinRequest());

      var lay = getState().dashboard.savedLayout.filter(function (component) {
        return component.i !== query.namedQuery.title;
      });

      var layoutRequest = { "configuration": JSON.stringify({ "layout": lay }) };

      dispatch(_saveLayoutRequest());

      return adminAPI.saveLayout(layoutRequest).then(function (response) {
        dispatch(_saveLayoutResponse(response.success, response.errors));

        if (response.success) {

          dispatch(alignLayout(lay)); //aligning new savedLayout        

          return favouritesAPI.unpinFavourite(query).then(function (response) {

            dispatch(unpinResponse(response.success, response.errors));

            dispatch(requestedFavouriteQueries());
            return favouritesAPI.fetchFavouriteQueries().then(function (response) {

              dispatch(receivedFavouriteQueries(response.success, response.errors, response.queries));

              var pinnedCharts = response.queries.filter(function (fav) {
                return fav.type === "CHART" && fav.pinned === true;
              });

              pinnedCharts.push(getDefaultChart(props)); //adding default chart

              for (var m = 0; m < pinnedCharts.length; m++) {
                dispatch(getChart(pinnedCharts[m]));
              }

              var pinnedMaps = response.queries.filter(function (fav) {
                return fav.type === "MAP" && fav.pinned === true;
              });
              pinnedMaps.push(getDefaultMap(props)); //adding default map

              for (var n = 0; n < pinnedMaps.length; n++) {
                dispatch(getTimeline(pinnedMaps[n]));
              }
            }, function (error) {
              dispatch(receivedFavouriteQueries(false, error, null));
            });
          }, function (error) {
            dispatch(unpinResponse(false, error));
          });
        } //if success
      }, function (error) {
        dispatch(_saveLayoutResponse(false, error));
      });
    };
  },

  getProfileLayout: function getProfileLayout() {
    return function (dispatch, getState) {

      dispatch(_getLayoutRequest());

      return adminAPI.getLayout().then(function (response) {

        dispatch(_getLayoutResponse(response.success, response.errors, response.profile.configuration));

        if (!response.profile.configuration) {
          //save default layout at first login

          var layoutRequest = { "configuration": JSON.stringify({ "layout": defaultLayout }) };

          return adminAPI.saveLayout(layoutRequest).then(function (response) {

            dispatch(_saveLayoutResponse(response.success, response.errors));
          }, function (error) {
            dispatch(_saveLayoutResponse(false, error));
          });
        }
      }, function (error) {

        dispatch(_getLayoutResponse(false, error));
      });
    };
  }
};

module.exports = DashboardActions;

},{"../api/admin":459,"../api/favourites":465,"../api/query":472,"../constants/DashboardActionTypes":574,"../model/population":602,"lodash":"lodash","moment":"moment"}],432:[function(require,module,exports){
'use strict';

var dataExportAPI = require('../api/data-export');
var types = require('../constants/DataExportActionTypes');

var _fileChangeIndex = function _fileChangeIndex(index) {
  return {
    type: types.FILE_CHANGE_INDEX,
    index: index
  };
};

var fileRequestInitialize = function fileRequestInitialize() {
  return {
    type: types.FILE_REQUEST
  };
};

var fileRequestCompleteSuccess = function fileRequestCompleteSuccess(response) {
  return {
    type: types.FILE_RESPONSE,
    success: response.success,
    errors: response.errors,
    files: {
      total: response.total,
      index: response.index,
      size: response.size,
      items: response.files
    }
  };
};

var fileRequestCompleteFailure = function fileRequestCompleteFailure(errors) {
  return {
    type: types.FILE_RESPONSE,
    success: false,
    errors: errors,
    files: null
  };
};

var trialFileRequestInitialize = function trialFileRequestInitialize() {
  return {
    type: types.TRIAL_FILE_REQUEST
  };
};

var trialFileRequestCompleteSuccess = function trialFileRequestCompleteSuccess(response) {
  return {
    type: types.TRIAL_FILE_RESPONSE,
    success: response.success,
    errors: response.errors,
    files: response.files
  };
};

var trialFileRequestCompleteFailure = function trialFileRequestCompleteFailure(errors) {
  return {
    type: types.TRIAL_FILE_RESPONSE,
    success: false,
    errors: errors,
    files: null
  };
};

var _setFilter = function _setFilter(filter) {
  return {
    type: types.FILE_FILTER_SET
  };
};

var _clearFilter = function _clearFilter() {
  return {
    type: types.FILE_FILTER_CLEAR
  };
};

var DataExportActions = {

  fileChangeIndex: function fileChangeIndex(index) {
    return function (dispatch, getState) {
      dispatch(_fileChangeIndex(index));

      dispatch(fileRequestInitialize());

      return dataExportAPI.getFiles(getState().dataExport.query).then(function (response) {
        dispatch(fileRequestCompleteSuccess(response));
      }, function (error) {
        dispatch(fileRequestCompleteFailure(error));
      });
    };
  },

  getFiles: function getFiles() {
    return function (dispatch, getState) {
      dispatch(fileRequestInitialize());

      return dataExportAPI.getFiles(getState().dataExport.query).then(function (response) {
        dispatch(fileRequestCompleteSuccess(response));
      }, function (error) {
        dispatch(fileRequestCompleteFailure(error));
      });
    };
  },

  getTrialFinalFiles: function getTrialFinalFiles() {
    return function (dispatch, getState) {
      dispatch(trialFileRequestInitialize());

      return dataExportAPI.getTrialFinalFiles().then(function (response) {
        dispatch(trialFileRequestCompleteSuccess(response));
      }, function (error) {
        dispatch(trialFileRequestCompleteFailure(error));
      });
    };
  },

  setFilter: function setFilter(filter) {
    return function (dispatch, getState) {
      dispatch(_setFilter(filter));

      dispatch(fileRequestInitialize());

      return dataExportAPI.getFiles(getState().dataExport.query).then(function (response) {
        dispatch(fileRequestCompleteSuccess(response));
      }, function (error) {
        dispatch(fileRequestCompleteFailure(error));
      });
    };
  },

  clearFilter: function clearFilter() {
    return function (dispatch, getState) {
      dispatch(_clearFilter());

      dispatch(fileRequestInitialize());

      return dataExportAPI.getFiles(getState().dataExport.query).then(function (response) {
        dispatch(fileRequestCompleteSuccess(response));
      }, function (error) {
        dispatch(fileRequestCompleteFailure(error));
      });
    };
  },

  download: function download(key, filename) {
    var link = document.createElement('a');
    link.href = '/action/export/download/' + key;
    link.download = filename;
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);

    return {
      type: types.FILE_DOWNLOAD_REQUEST,
      key: key,
      filename: filename
    };
  }

};

module.exports = DataExportActions;

},{"../api/data-export":463,"../constants/DataExportActionTypes":575}],433:[function(require,module,exports){
'use strict';

var debugAPI = require('../api/debug');
var types = require('../constants/ActionTypes');

var _createUser = function _createUser() {
  return {
    type: types.DEBUG_CREATE_USER
  };
};

var userCreated = function userCreated(success, errors) {
  return {
    type: types.DEBUG_USER_CREATED,
    success: success,
    errors: errors
  };
};

var _createAmphiro = function _createAmphiro() {
  return {
    type: types.DEBUG_CREATE_AMPHIRO
  };
};

var amphiroCreated = function amphiroCreated(success, errors) {
  return {
    type: types.DEBUG_AMPHIRO_CREATED,
    success: success,
    errors: errors
  };
};

var _generateAmphiroData = function _generateAmphiroData(timezone) {
  return {
    type: types.DEBUG_AMPHIRO_DATA_GENERATE_REQUEST
  };
};

var amphiroDataGenerated = function amphiroDataGenerated(success, errors) {
  return {
    type: types.DEBUG_AMPHIRO_DATA_GENERATED,
    success: success,
    errors: errors
  };
};

var DebugActions = {
  createUser: function createUser(password) {
    return function (dispatch, getState) {
      dispatch(_createUser());

      return debugAPI.createUser(password).then(function (response) {
        dispatch(userCreated(response.success, response.errors));
      }, function (error) {
        dispatch(userCreated(false, error));
      });
    };
  },
  createAmphiro: function createAmphiro() {
    return function (dispatch, getState) {
      dispatch(_createAmphiro());

      return debugAPI.createAmphiro().then(function (response) {
        dispatch(amphiroCreated(response.success, response.errors));
      }, function (error) {
        dispatch(amphiroCreated(false, error));
      });
    };
  },
  generateAmphiroData: function generateAmphiroData(timezone, files) {
    return function (dispatch, getState) {
      dispatch(_generateAmphiroData());

      return debugAPI.generateAmphiroData(timezone, files).then(function (response) {
        dispatch(amphiroDataGenerated(response.success, response.errors));
      }, function (error) {
        dispatch(amphiroDataGenerated(false, error));
      });
    };
  },
  setTimezone: function setTimezone(timezone) {
    return {
      type: types.DEBUG_SET_TIMEZONE,
      timezone: timezone
    };
  },
  setErrors: function setErrors(errors) {
    return {
      type: types.DEBUG_SET_ERRORS,
      errors: errors
    };
  },
  getFeatures: function getFeatures(timeline, timestamp, label) {
    return {
      type: types.DEBUG_GET_FEATURES,
      timeline: timeline,
      timestamp: timestamp,
      label: label
    };
  }
};

module.exports = DebugActions;

},{"../api/debug":464,"../constants/ActionTypes":571}],434:[function(require,module,exports){
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var types = require('../constants/FavouritesActionTypes');
var favouritesAPI = require('../api/favourites');
var queryAPI = require('../api/query');
var adminAPI = require('../api/admin');
var moment = require('moment');
var population = require('../model/population');
var _ = require('lodash');
var defaultChartTitle = "Last 30 Days Average Consumption";
var defaultMapTitle = "Last 30 Days Consumption";

var defaultLayout = [{ "i": defaultChartTitle, "x": 0, "y": 1, "w": 8, "h": 1 }, { "i": defaultMapTitle, "x": 0, "y": 0, "w": 10, "h": 1 }];

var _buildGroupQuery = function _buildGroupQuery(population, timezone, from, to) {
  return {
    "level": "week",
    "field": "volume",
    "overlap": null,
    "queries": [{
      "time": {
        "type": "ABSOLUTE",
        "granularity": "DAY",
        "start": from,
        "end": to
      },
      "population": population,
      "source": "METER",
      "metrics": ["SUM"]
    }]
  };
};

var _buildUtilityQuery = function _buildUtilityQuery(key, timezone, from, to) {
  return {
    "level": "week",
    "field": "volume",
    "overlap": null,
    "queries": [{
      "time": {
        "type": "ABSOLUTE",
        "granularity": "DAY",
        "start": from,
        "end": to
      },
      "population": [{
        "type": "UTILITY",
        "label": "UTILITY:" + key,
        "ranking": null,
        "utility": key
      }],
      "source": "METER",
      "metrics": ["SUM"]
    }]
  };
};

var requestedFavouriteQueries = function requestedFavouriteQueries() {
  return {
    type: types.FAVOURITES_REQUEST_QUERIES
  };
};

var receivedFavouriteQueries = function receivedFavouriteQueries(success, errors, favourites) {
  return {
    type: types.FAVOURITES_RECEIVE_QUERIES,
    success: success,
    errors: errors,
    favourites: favourites
  };
};

var addFavouriteRequest = function addFavouriteRequest() {
  return {
    type: types.FAVOURITES_ADD_FAVOURITE_REQUEST
  };
};

var addFavouriteResponse = function addFavouriteResponse(success, errors) {
  return {
    type: types.FAVOURITES_ADD_FAVOURITE_RESPONSE,
    success: success,
    errors: errors
  };
};

var _getLayoutRequest = function _getLayoutRequest() {
  return {
    type: types.FAVOURITES_GET_LAYOUT_REQUEST
  };
};

var _getLayoutResponse = function _getLayoutResponse(success, errors, layout) {
  if (layout) {
    var configuration = JSON.parse(layout);
    return {
      type: types.FAVOURITES_GET_LAYOUT_RESPONSE,
      success: success,
      errors: errors,
      savedLayout: configuration.layout
    };
  } else {
    //return default layout in first login
    return {
      type: types.FAVOURITES_GET_LAYOUT_RESPONSE,
      success: success,
      errors: errors,
      savedLayout: defaultLayout
    };
  }
};

var pinRequest = function pinRequest() {
  return {
    type: types.FAVOURITES_PIN_REQUEST
  };
};

var pinResponse = function pinResponse(success, errors) {
  return {
    type: types.FAVOURITES_PIN_RESPONSE,
    success: success,
    errors: errors
  };
};

var unpinRequest = function unpinRequest() {
  return {
    type: types.FAVOURITES_UNPIN_REQUEST
  };
};

var unpinResponse = function unpinResponse(success, errors) {
  return {
    type: types.FAVOURITES_UNPIN_RESPONSE,
    success: success,
    errors: errors
  };
};

var alignLayout = function alignLayout(layout) {
  if (layout) {
    return {
      type: types.FAVOURITES_GET_LAYOUT_RESPONSE,
      savedLayout: layout
    };
  } else {
    //return default layout in first login
    return {
      type: types.FAVOURITES_GET_LAYOUT_RESPONSE,
      savedLayout: defaultLayout
    };
  }
};

var deleteFavouriteResponse = function deleteFavouriteResponse(success, errors) {
  return {
    type: types.FAVOURITES_DELETE_QUERY_RESPONSE,
    success: success,
    errors: errors
  };
};

var _buildTimelineQuery = function _buildTimelineQuery(population, source, geometry, timezone, interval) {
  var spatial = [{
    type: 'GROUP',
    group: 'd29f8cb8-7df6-4d57-8c99-0a155cc394c5'
  }];

  if (geometry) {
    spatial.push({
      type: 'CONSTRAINT',
      geometry: geometry,
      operation: 'INTERSECT'
    });
  }

  return {
    'query': {
      'timezone': "Europe/Athens",
      'time': {
        'type': 'ABSOLUTE',
        'start': interval[0].toDate().getTime(),
        'end': interval[1].toDate().getTime(),
        'granularity': 'DAY'
      },
      'population': [population],
      spatial: spatial,
      'source': source,
      'metrics': ['SUM']
    }
  };
};

var _getTimelineInit = function _getTimelineInit(population, query) {
  return {
    type: types.FAVOURITES_TIMELINE_REQUEST,
    query: query,
    population: population
  };
};

var _getTimelineComplete = function _getTimelineComplete(success, errors, data) {
  return {
    type: types.FAVOURITES_TIMELINE_RESPONSE,
    success: success,
    errors: errors,
    data: data
  };
};

var _setEditorValue = function _setEditorValue(editor, value) {
  return {
    type: types.FAVOURITES_SET_EDITOR_VALUE,
    editor: editor,
    value: value
  };
};

var _getFeatures = function _getFeatures(index, timestamp, label) {
  return {
    type: types.FAVOURITES_GET_FEATURES,
    timestamp: timestamp,
    label: label,
    index: index
  };
};

var _chartRequest = function _chartRequest() {
  return {
    type: types.FAVOURITES_CHART_REQUEST
  };
};

var _chartResponse = function _chartResponse(success, errors, data) {
  var t = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;

  return {
    type: types.FAVOURITES_CHART_RESPONSE,
    success: success,
    errors: errors,
    data: data,
    timestamp: (t || new Date()).getTime()
  };
};

var _saveLayoutRequest = function _saveLayoutRequest() {
  return {
    type: types.FAVOURITES_SAVE_LAYOUT_REQUEST
  };
};

var _saveLayoutResponse = function _saveLayoutResponse(success, errors) {
  return {
    type: types.FAVOURITES_SAVE_LAYOUT_RESPONSE,
    success: success,
    errors: errors
  };
};

var getLayoutRequest = function getLayoutRequest() {
  return {
    type: types.FAVOURITES_GET_LAYOUT_REQUEST
  };
};

var getLayoutResponse = function getLayoutResponse(success, errors, layout) {
  if (layout) {
    var configuration = JSON.parse(layout);
    return {
      type: types.FAVOURITES_GET_LAYOUT_RESPONSE,
      success: success,
      errors: errors,
      savedLayout: configuration.layout
    };
  }
};

var FavouritesActions = {

  setTimezone: function setTimezone(timezone) {
    return {
      type: types.FAVOURITES_SET_TIMEZONE,
      timezone: timezone
    };
  },

  fetchFavouriteQueries: function fetchFavouriteQueries() {
    return function (dispatch, getState) {
      dispatch(requestedFavouriteQueries());
      return favouritesAPI.fetchFavouriteQueries().then(function (response) {
        dispatch(receivedFavouriteQueries(response.success, response.errors, response.queries));
      }, function (error) {
        dispatch(receivedFavouriteQueries(false, error, null));
      });
    };
  },

  addCopy: function addCopy(favourite) {
    return function (dispatch, getState) {
      dispatch(addFavouriteRequest());
      return favouritesAPI.addFavourite(favourite).then(function (response) {
        dispatch(addFavouriteResponse(response.success, response.errors));
        dispatch(requestedFavouriteQueries());
        return favouritesAPI.fetchFavouriteQueries().then(function (response) {
          dispatch(receivedFavouriteQueries(response.success, response.errors, response.queries));
        }, function (error) {
          dispatch(receivedFavouriteQueries(false, error, null));
        });
      }, function (error) {
        dispatch(addFavouriteResponse(false, error));
      });
    };
  },

  deleteFavourite: function deleteFavourite(event) {
    return function (dispatch, getState) {
      dispatch(addFavouriteRequest());
      var fav = getState(event).favourites.favouriteToBeDeleted;
      if (!fav.namedQuery.pinned) {

        return favouritesAPI.deleteFavourite(fav).then(function (response) {
          dispatch(deleteFavouriteResponse(response.success, response.errors));
          dispatch(requestedFavouriteQueries());
          return favouritesAPI.fetchFavouriteQueries().then(function (response) {
            dispatch(receivedFavouriteQueries(response.success, response.errors, response.queries));
          }, function (error) {
            dispatch(receivedFavouriteQueries(false, error, null));
          });
        }, function (error) {
          dispatch(deleteFavouriteResponse(false, error));
        });
      }

      return adminAPI.getLayout().then(function (response) {
        if (response.success) {
          var lays = JSON.parse(response.profile.configuration);
          var lay = lays.layout.filter(function (component) {
            return component.i !== fav.namedQuery.title;
          });
          var layoutRequest = { "configuration": JSON.stringify({ "layout": lay }) };

          return adminAPI.saveLayout(layoutRequest).then(function (response) {

            if (response.success) {
              return favouritesAPI.deleteFavourite(fav).then(function (response) {
                dispatch(deleteFavouriteResponse(response.success, response.errors));
                return favouritesAPI.fetchFavouriteQueries().then(function (response) {
                  dispatch(receivedFavouriteQueries(response.success, response.errors, response.queries));
                }, function (error) {
                  dispatch(receivedFavouriteQueries(false, error, null));
                });
              }, function (error) {
                dispatch(deleteFavouriteResponse(false, error));
              });
            }
          }, function (error) {
            dispatch(_saveLayoutResponse(false, error));
          });
        }
      }, function (error) {
        dispatch(_saveLayoutResponse(false, error));
      });
    };
  },

  openFavourite: function openFavourite(favourite) {
    return {
      type: types.FAVOURITES_OPEN_SELECTED,
      showSelected: true,
      selectedFavourite: favourite
    };
  },

  getFavouriteMap: function getFavouriteMap(favourite) {
    return function (dispatch, getState) {
      var population, source, geometry, interval, timezone;

      population = favourite.queries[0].population[0];

      interval = [moment(favourite.queries[0].time.start), moment(favourite.queries[0].time.end)];
      source = favourite.queries[0].source;

      if (favourite.queries[0].spatial && favourite.queries[0].spatial.length > 1) {
        geometry = favourite.queries[0].spatial[1].geometry;
      } else {
        geometry = null;
      }
      dispatch(_setEditorValue('population', population));
      dispatch(_setEditorValue('interval', interval));
      dispatch(_setEditorValue('spatial', geometry));
      dispatch(_setEditorValue('source', source));

      var query = _buildTimelineQuery(population, source, geometry, timezone, interval);
      dispatch(_getTimelineInit(population, query));

      return queryAPI.queryMeasurements(query).then(function (response) {
        var data = {
          meters: null,
          devices: null,
          areas: null
        };
        if (response.success) {
          data.areas = response.areas;
          data.meters = response.meters;
          data.devices = response.devices;
        }

        dispatch(_getTimelineComplete(response.success, response.errors, data));

        dispatch(_getFeatures(0, null, null));
      }, function (error) {
        dispatch(_getTimelineComplete(false, error, null));

        dispatch(_getFeatures(0, null, null));
      });
    };
  },

  getFavouriteChart: function getFavouriteChart(favourite) {
    return function (dispatch, getState) {

      dispatch(_chartRequest());

      var promiseArray = [];
      for (var i = 0; i < favourite.queries.length; i++) {
        promiseArray.push(queryAPI.queryMeasurements({ query: favourite.queries[i] }));
      }

      Promise.all(promiseArray).then(function (res) {
        var source = favourite.queries[0].source; //source is same for all queries
        var resAll = [];
        for (var m = 0; m < res.length; m++) {
          if (res[m].errors.length) {
            throw 'The request is rejected: ' + res[m].errors[0].description;
          }
          var resultSets = source == 'AMPHIRO' ? res[m].devices : res[m].meters;
          var res1 = (resultSets || []).map(function (rs) {
            var _population$fromStrin = population.fromString(rs.label),
                _population$fromStrin2 = _slicedToArray(_population$fromStrin, 2),
                g = _population$fromStrin2[0],
                rr = _population$fromStrin2[1];

            //sort points on timestamp in order to handle pre-aggregated data.


            rs.points = _.orderBy(rs.points, 'timestamp', 'desc');

            //Recalculate xAxis timespan based on returned data. (scale)
            var timespan1;
            if (rs.points[rs.points.length - 1]) {
              timespan1 = [rs.points[rs.points.length - 1].timestamp, rs.points[0].timestamp];
            } else {
              //empty result, use initial timespan
              timespan1 = [favourite.queries[0].time.start, favourite.queries[0].time.end];
            }

            var _loop = function _loop(j) {
              if (rr) {
                points = rs.points.map(function (p) {
                  return {
                    timestamp: p.timestamp,
                    values: p.users.map(function (u) {
                      return u[rr.field][rr.metric];
                    }).sort(rr.comparator)
                  };
                });

                // Shape a result with ranking on users

                res2 = _.times(rr.limit, function (i) {
                  return {
                    source: source,
                    timespan: timespan1,
                    granularity: favourite.queries[0].time.granularity,
                    metric: favourite.queries[0].metric,
                    population: g,
                    ranking: _extends({}, rr.toJSON(), { index: i }),
                    data: points.map(function (p) {
                      return [p.timestamp, p.values[i] || null];
                    })
                  };
                });
              } else {
                // Shape a normal timeseries result for requested metrics
                // Todo support other metrics (as client-side "average")
                res2 = favourite.queries[j].metrics.map(function (metric) {
                  return {
                    source: source,
                    timespan: timespan1,
                    granularity: favourite.queries[j].time.granularity,
                    metric: metric,
                    population: g,
                    data: rs.points.map(function (p) {
                      return [p.timestamp, p.volume[metric]];
                    })
                  };
                });
              }
              return {
                v: _.flatten(res2)
              };
            };

            for (var j = 0; j < favourite.queries.length; j++) {
              var res2;
              var points;

              var _ret = _loop(j);

              if ((typeof _ret === 'undefined' ? 'undefined' : _typeof(_ret)) === "object") return _ret.v;
            }
          });
          resAll.push(_.flatten(res1));
        }

        var success = res.every(function (x) {
          return x.success === true;
        });
        var errors = success ? [] : res[0].errors; //todo - return flattend array of errors?
        dispatch(_chartResponse(success, errors, _.flatten(resAll)));

        return _.flatten(resAll);
      });
    };
  },

  getFavouriteForecast: function getFavouriteForecast(group, key, name, timezone) {
    //Build two queries, one for real data and one for forecast data.
    return function (dispatch, getState) {
      dispatch(_chartRequest());
      var promises = [];

      var interval = getState().forecasting.interval;
      var actualData, forecast;

      if (group) {
        actualData = _buildGroupQuery(group, timezone, interval[0].toDate().getTime(), interval[1].toDate().getTime());
        forecast = _buildGroupQuery(group, timezone, interval[0].toDate().getTime(), moment().endOf('month').toDate().getTime());
      } else {
        actualData = _buildUtilityQuery(key, timezone, interval[0].toDate().getTime(), interval[1].toDate().getTime());
        forecast = _buildUtilityQuery(key, timezone, interval[0].toDate().getTime(), moment().endOf('month').toDate().getTime());
      }

      //don' t change push order. It is used below for forecast labels in each serie
      promises.push(queryAPI.queryMeasurements({ query: actualData.queries[0] }));
      promises.push(queryAPI.queryForecast({ query: forecast.queries[0] }));

      Promise.all(promises).then(function (res) {

        var source = actualData.queries[0].source; //source is same for all queries
        var resAll = [];

        var _loop2 = function _loop2(m) {
          if (res[m].errors.length) {
            throw 'The request is rejected: ' + res[m].errors[0].description;
          }
          resultSets = source == 'AMPHIRO' ? res[m].devices : res[m].meters;
          res1 = (resultSets || []).map(function (rs) {
            var _population$fromStrin3 = population.fromString(rs.label),
                _population$fromStrin4 = _slicedToArray(_population$fromStrin3, 1),
                g = _population$fromStrin4[0];

            //sort points on timestamp in order to handle pre-aggregated data.


            rs.points = _.orderBy(rs.points, 'timestamp', 'desc');

            var timespan1;
            if (rs.points.length !== 0) {
              //Recalculate xAxis timespan based on returned data. (scale)
              timespan1 = [rs.points[rs.points.length - 1].timestamp, rs.points[0].timestamp];
            } else {
              timespan1 = [actualData.queries[0].time.start, actualData.queries[0].time.end];
            }

            // Shape a normal timeseries result for requested metrics
            // Todo support other metrics (as client-side "average")
            var res2 = actualData.queries[0].metrics.map(function (metric) {
              return {
                source: source,
                timespan: timespan1,
                granularity: actualData.queries[0].time.granularity,
                metric: metric,
                population: g,
                forecast: m === 0 ? false : true, //first promise is actual data, second is forecast data
                data: rs.points.map(function (p) {
                  return [p.timestamp, p.volume[metric]];
                })
              };
            });
            return _.flatten(res2);
          });

          resAll.push(_.flatten(res1));
        };

        for (var m = 0; m < res.length; m++) {
          var resultSets;
          var res1;

          _loop2(m);
        }

        var success = res.every(function (x) {
          return x.success === true;
        });
        var errors = success ? [] : res[0].errors; //todo - return flattend array of errors?

        dispatch(_chartResponse(success, errors, _.flatten(resAll)));

        return _.flatten(resAll);
      });
    };
  },

  getFeatures: function getFeatures(index, timestamp, label) {
    return _getFeatures(index, timestamp, label);
  },

  closeFavourite: function closeFavourite() {
    return {
      type: types.FAVOURITES_CLOSE_SELECTED,
      showSelected: false,
      selectedFavourite: null,
      finished: null,
      data: null
    };
  },

  setActiveFavourite: function setActiveFavourite(favourite) {
    return {
      type: types.FAVOURITES_SET_ACTIVE_FAVOURITE,
      selectedFavourite: favourite
    };
  },

  openWarning: function openWarning(favourite) {
    return {
      type: types.FAVOURITES_DELETE_QUERY_REQUEST,
      favouriteToBeDeleted: favourite
    };
  },

  closeWarning: function closeWarning() {
    return {
      type: types.FAVOURITES_CANCEL_DELETE_QUERY,
      favouriteToBeDeleted: null
    };
  },

  resetMapState: function resetMapState() {
    return {
      type: types.FAVOURITES_RESET_MAP_STATE
    };
  },

  getProfileLayout: function getProfileLayout() {
    return function (dispatch, getState) {
      dispatch(_getLayoutRequest());

      return adminAPI.getLayout().then(function (response) {
        dispatch(_getLayoutResponse(response.success, response.errors, response.profile.configuration));

        if (!response.profile.configuration) {
          //save default layout at first login

          var layoutRequest = { "configuration": JSON.stringify({ "layout": defaultLayout }) };
          return adminAPI.saveLayout(layoutRequest).then(function (response) {
            dispatch(_saveLayoutResponse(response.success, response.errors));
          }, function (error) {
            dispatch(_saveLayoutResponse(false, error));
          });
        }
      }, function (error) {
        dispatch(_getLayoutResponse(false, error));
      });
    };
  },

  pinToDashboard: function pinToDashboard(query) {
    return function (dispatch, getState) {
      dispatch(pinRequest());
      return favouritesAPI.pinFavourite(query).then(function (response) {
        dispatch(pinResponse(response.success, response.errors));
        dispatch(requestedFavouriteQueries());
        return favouritesAPI.fetchFavouriteQueries().then(function (response) {
          dispatch(receivedFavouriteQueries(response.success, response.errors, response.queries));
          dispatch(getLayoutRequest());
          return adminAPI.getLayout().then(function (response) {

            var configuration = JSON.parse(response.profile.configuration);
            var lay = configuration.layout;
            var maxY = Math.max.apply(Math, lay.map(function (o) {
              return o.y;
            }));

            var layoutComponent;
            if (query.namedQuery.type === 'CHART' || query.namedQuery.type === 'FORECAST') {
              layoutComponent = { "i": query.namedQuery.title, "x": 0, "y": maxY + 1, "w": 8, h: 1 };
            } else if (query.namedQuery.type === 'MAP') {
              layoutComponent = { "i": query.namedQuery.title, "x": 0, "y": maxY + 1, "w": 10, h: 1 };
            }
            lay.push(layoutComponent);
            dispatch(_saveLayoutRequest());
            var layoutRequest = { "configuration": JSON.stringify({ "layout": lay }) };
            return adminAPI.saveLayout(layoutRequest).then(function (response) {
              dispatch(_saveLayoutResponse(response.success, response.errors));
            }, function (error) {
              dispatch(_saveLayoutResponse(false, error));
            });
          }, function (error) {

            dispatch(getLayoutResponse(false, error));
          });
        }, function (error) {
          dispatch(receivedFavouriteQueries(false, error, null));
        });
      }, function (error) {
        dispatch(pinResponse(false, error));
      });
    };
  },

  unpin: function unpin(query) {
    return function (dispatch, getState) {
      dispatch(unpinRequest());

      return adminAPI.getLayout().then(function (response) {

        var configuration = JSON.parse(response.profile.configuration);
        var lay2 = configuration.layout;

        var lay = lay2.filter(function (component) {
          return component.i !== query.namedQuery.title;
        });

        var layoutRequest = { "configuration": JSON.stringify({ "layout": lay }) };

        dispatch(_saveLayoutRequest());

        return adminAPI.saveLayout(layoutRequest).then(function (response) {
          dispatch(_saveLayoutResponse(response.success, response.errors));

          if (response.success) {
            dispatch(alignLayout(lay)); //aligning new savedLayout        

            return favouritesAPI.unpinFavourite(query).then(function (response) {
              dispatch(unpinResponse(response.success, response.errors));
              dispatch(requestedFavouriteQueries());

              return favouritesAPI.fetchFavouriteQueries().then(function (response) {
                dispatch(receivedFavouriteQueries(response.success, response.errors, response.queries));
              }, function (error) {
                dispatch(receivedFavouriteQueries(false, error, null));
              });
            }, function (error) {
              dispatch(unpinResponse(false, error));
            });
          } //if success
        }, function (error) {
          dispatch(_saveLayoutResponse(false, error));
        });
      }, function (error) {
        dispatch(getLayoutResponse(false, error));
      });
    };
  }
};

module.exports = FavouritesActions;

},{"../api/admin":459,"../api/favourites":465,"../api/query":472,"../constants/FavouritesActionTypes":577,"../model/population":602,"lodash":"lodash","moment":"moment"}],435:[function(require,module,exports){
'use strict';

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var queryAPI = require('../api/query');
var groupAPI = require('../api/group');
var favouritesAPI = require('../api/favourites');
var types = require('../constants/ForecastingActionTypes');
var population = require('../model/population');

/**
 * Query builders
 */

var _buildUtilityQuery = function _buildUtilityQuery(key, timezone, from, to) {
  return {
    "level": "week",
    "field": "volume",
    "overlap": null,
    "queries": [{
      "time": {
        "type": "ABSOLUTE",
        "granularity": "DAY",
        "start": from,
        "end": to
      },
      "population": [{
        "type": "UTILITY",
        "label": "UTILITY:" + key,
        "ranking": null,
        "utility": key
      }],
      "source": "METER",
      "metrics": ["SUM"] }]
  };
};

var _buildGroupQuery = function _buildGroupQuery(population, timezone, from, to) {
  return {
    "level": "week",
    "field": "volume",
    "overlap": null,
    "queries": [{
      "time": {
        "type": "ABSOLUTE",
        "granularity": "DAY",
        "start": from,
        "end": to
      },
      "population": population,
      "source": "METER",
      "metrics": ["SUM"] }]
  };
};

var _buildUserQuery = function _buildUserQuery(id, name, timezone, from, to) {
  return {
    'queries': [{
      'timezone': timezone,
      'time': {
        'type': 'ABSOLUTE',
        'start': from,
        'end': to,
        'granularity': 'DAY'
      },
      'population': [{
        'type': 'USER',
        'label': name,
        'users': [id]
      }],
      'overlap': null,
      'source': 'METER',
      'metrics': ['SUM'] }]
  };
};

/**
 * Actions
 */

//var _setInterval = function(interval) {
//  return {
//    type : types.FORECASTING_SET_INTERVAL,
//    interval : interval
//  }; 
//};

var _groupChartRequest = function _groupChartRequest(query) {
  return {
    type: types.FORECASTING_GROUP_CHART_DATA_REQUEST,
    query: query
  };
};

var _userChartRequest = function _userChartRequest() {
  return {
    type: types.FORECASTING_USER_DATA_REQUEST
  };
};

var _groupChartResponse = function _groupChartResponse(success, errors, data) {
  var t = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;

  return {
    type: types.FORECASTING_GROUP_CHART_DATA_RESPONSE,
    success: success,
    errors: errors,
    data: data,
    timestamp: (t || new Date()).getTime()
  };
};

var _userChartResponse = function _userChartResponse(success, errors, data) {
  var t = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;

  return {
    type: types.FORECASTING_USER_DATA_RESPONSE,
    success: success,
    errors: errors,
    data: data,
    timestamp: (t || new Date()).getTime()
  };
};

var getGroupsInit = function getGroupsInit() {
  return {
    type: types.FORECASTING_GROUP_CATALOG_REQUEST
  };
};

var getGroupsComplete = function getGroupsComplete(success, errors, total, groups, index, size) {
  return {
    type: types.FORECASTING_GROUP_CATALOG_RESPONSE,
    success: success,
    errors: errors,
    total: total,
    groups: groups,
    index: index,
    size: size
  };
};

var addFavouriteRequest = function addFavouriteRequest() {
  return {
    type: types.FORECASTING_ADD_FAVOURITE_REQUEST
  };
};

var addFavouriteResponse = function addFavouriteResponse(success, errors) {
  return {
    type: types.FORECASTING_ADD_FAVOURITE_RESPONSE,
    success: success,
    errors: errors
  };
};

var ForecastingActions = {

  setUser: function setUser(user) {
    return {
      type: types.FORECASTING_SET_USER,
      user: user
    };
  },

  setGroup: function setGroup(group) {
    return {
      type: types.FORECASTING_SET_GROUP,
      group: group
    };
  },

  setInterval: function setInterval(interval) {
    return {
      type: types.FORECASTING_SET_INTERVAL,
      interval: interval
    };
  },

  getUtilityChart: function getUtilityChart(group, key, name, timezone) {
    //Build two queries, one for real data and one for forecast data.
    return function (dispatch, getState) {

      var promises = [];

      var interval = getState().forecasting.interval;
      var actualData, forecast;

      if (group) {
        actualData = _buildGroupQuery(group, timezone, interval[0].toDate().getTime(), interval[1].toDate().getTime());
        forecast = _buildGroupQuery(group, timezone, interval[0].toDate().getTime(), interval[1].toDate().getTime());

        dispatch(_groupChartRequest(actualData));
      } else {
        actualData = _buildUtilityQuery(key, timezone, interval[0].toDate().getTime(), interval[1].toDate().getTime());
        forecast = _buildUtilityQuery(key, timezone, interval[0].toDate().getTime(), interval[1].toDate().getTime());

        dispatch(_groupChartRequest(actualData));
      }

      //don' t change push order. It is used below for forecast labels in each serie
      promises.push(queryAPI.queryMeasurements({ query: actualData.queries[0] }));
      promises.push(queryAPI.queryForecast({ query: forecast.queries[0] }));

      Promise.all(promises).then(function (res) {

        var source = actualData.queries[0].source; //source is same for all queries
        var resAll = [];

        var _loop = function _loop(m) {
          if (res[m].errors.length) {
            throw 'The request is rejected: ' + res[m].errors[0].description;
          }
          resultSets = source == 'AMPHIRO' ? res[m].devices : res[m].meters;
          res1 = (resultSets || []).map(function (rs) {
            var _population$fromStrin = population.fromString(rs.label),
                _population$fromStrin2 = _slicedToArray(_population$fromStrin, 1),
                g = _population$fromStrin2[0];

            //sort points on timestamp in order to handle pre-aggregated data.


            rs.points = _.orderBy(rs.points, 'timestamp', 'desc');

            var timespan1;
            if (rs.points.length !== 0) {
              //Recalculate xAxis timespan based on returned data. (scale)
              timespan1 = [rs.points[rs.points.length - 1].timestamp, rs.points[0].timestamp];
            } else {
              timespan1 = [actualData.queries[0].time.start, actualData.queries[0].time.end];
            }

            // Shape a normal timeseries result for requested metrics
            // Todo support other metrics (as client-side "average")
            var res2 = actualData.queries[0].metrics.map(function (metric) {
              return {
                source: source,
                timespan: timespan1,
                granularity: actualData.queries[0].time.granularity,
                metric: metric,
                population: g,
                forecast: m === 0 ? false : true, //first promise is actual data, second is forecast data
                data: rs.points.map(function (p) {
                  return [p.timestamp, p.volume[metric]];
                })
              };
            });
            return _.flatten(res2);
          });

          resAll.push(_.flatten(res1));
        };

        for (var m = 0; m < res.length; m++) {
          var resultSets;
          var res1;

          _loop(m);
        }

        var success = res.every(function (x) {
          return x.success === true;
        });
        var errors = success ? [] : res[0].errors; //todo - return flattend array of errors?

        dispatch(_groupChartResponse(success, errors, _.flatten(resAll)));

        return _.flatten(resAll);
      });
    };
  },

  getUserChart: function getUserChart(id, name, timezone) {
    //Build two queries, one for real data and one for forecast data.
    return function (dispatch, getState) {

      var promises = [];

      dispatch(_userChartRequest());

      var interval = getState().forecasting.interval;
      var actualData, forecast;

      actualData = _buildUserQuery(id, name, timezone, interval[0].toDate().getTime(), interval[1].toDate().getTime());
      forecast = _buildUserQuery(id, name, timezone, interval[0].toDate().getTime(), interval[1].toDate().getTime());

      //don' t change push order. It is used below for forecast labels in each serie
      promises.push(queryAPI.queryMeasurements({ query: actualData.queries[0] }));
      promises.push(queryAPI.queryForecast({ query: forecast.queries[0] }));

      Promise.all(promises).then(function (res) {
        var source = actualData.queries[0].source; //source is same for all queries
        var resAll = [];

        var _loop2 = function _loop2(m) {
          if (res[m].errors.length) {
            throw 'The request is rejected: ' + res[m].errors[0].description;
          }
          resultSets = source == 'AMPHIRO' ? res[m].devices : res[m].meters;
          res1 = (resultSets || []).map(function (rs) {
            var g = new population.User(id, rs.label);

            //sort points on timestamp in order to handle pre-aggregated data.
            rs.points = _.orderBy(rs.points, 'timestamp', 'desc');

            var timespan1;
            if (rs.points.length !== 0) {
              //Recalculate xAxis timespan based on returned data. (scale). If no data, keep timespan from query
              timespan1 = [rs.points[rs.points.length - 1].timestamp, rs.points[0].timestamp];
            } else {
              timespan1 = [actualData.queries[0].time.start, actualData.queries[0].time.end];
            }
            var res2;
            // Shape a normal timeseries result for requested metrics
            // Todo support other metrics (as client-side "average")
            res2 = actualData.queries[0].metrics.map(function (metric) {
              return {
                source: source,
                timespan: timespan1,
                granularity: actualData.queries[0].time.granularity,
                metric: metric,
                population: g,
                forecast: m === 0 ? false : true, //first promise is actual data, second is forecast data
                data: rs.points.map(function (p) {
                  return [p.timestamp, p.volume[metric]];
                })
              };
            });
            return _.flatten(res2);
          });


          resAll.push(_.flatten(res1));
        };

        for (var m = 0; m < res.length; m++) {
          var resultSets;
          var res1;

          _loop2(m);
        }

        var success = res.every(function (x) {
          return x.success === true;
        });
        var errors = success ? [] : res[0].errors; //todo - return flattend array of errors?

        dispatch(_userChartResponse(success, errors, _.flatten(resAll)));

        return _.flatten(resAll);
      });
    };
  },

  getGroups: function getGroups() {
    return function (dispatch, getState) {
      dispatch(getGroupsInit());
      return groupAPI.getGroups(getState().userCatalog.query).then(function (response) {
        dispatch(getGroupsComplete(response.success, response.errors, response.total, response.groups, response.index, response.size));
      }, function (error) {
        dispatch(getGroupsComplete(false, error));
      });
    };
  },

  filterByType: function filterByType(type) {
    return {
      type: types.FORECASTING_GROUP_CATALOG_FILTER_TYPE,
      groupType: type
    };
  },

  addFavourite: function addFavourite(favourite) {
    return function (dispatch, getState) {
      dispatch(addFavouriteRequest());
      return favouritesAPI.addFavourite(favourite).then(function (response) {
        dispatch(addFavouriteResponse(response.success, response.errors));
      }, function (error) {
        dispatch(addFavouriteResponse(false, error));
      });
    };
  }
};

module.exports = ForecastingActions;

},{"../api/favourites":465,"../api/group":466,"../api/query":472,"../constants/ForecastingActionTypes":578,"../model/population":602}],436:[function(require,module,exports){
'use strict';

var types = require('../constants/GroupActionTypes');
var groupAPI = require('../api/group');
var userAPI = require('../api/user');

var requestedGroup = function requestedGroup() {
  return {
    type: types.GROUP_REQUEST_GROUP
  };
};

var receivedGroupInfo = function receivedGroupInfo(success, errors, groupInfo) {
  return {
    type: types.GROUP_RECEIVE_GROUP_INFO,
    success: success,
    errors: errors,
    groupInfo: groupInfo
  };
};

var receivedGroupMembers = function receivedGroupMembers(success, errors, members) {
  return {
    type: types.GROUP_RECEIVE_GROUP_MEMBERS,
    success: success,
    errors: errors,
    members: members
  };
};

var GroupActions = {

  showGroup: function showGroup(groupId) {
    return function (dispatch, getState) {
      dispatch(requestedGroup());

      return groupAPI.getGroup(groupId).then(function (response) {
        dispatch(receivedGroupInfo(response.success, response.errors, response.groupInfo));

        return groupAPI.getGroupMembers(groupId).then(function (response) {
          dispatch(receivedGroupMembers(response.success, response.errors, response.members));
        }, function (error) {
          dispatch(receivedGroupMembers(false, error, null));
        });
      }, function (error) {
        dispatch(receivedGroupInfo(false, error, null));
      });
    };
  },

  resetComponent: function resetComponent() {
    return {
      type: types.GROUP_RESET_COMPONENT
    };
  },

  addFavorite: function addFavorite(userKey) {
    return function (dispatch, getState) {
      dispatch({
        type: types.ADD_FAVORITE_REQUEST,
        userKey: userKey
      });

      return userAPI.addFavorite(userKey).then(function (response) {
        dispatch({
          type: types.ADD_FAVORITE_RESPONSE,
          success: response.success,
          errors: response.errors,
          key: userKey,
          favourite: true
        });
      }, function (error) {
        dispatch({
          type: types.ADD_FAVORITE_RESPONSE,
          success: false,
          errors: error
        });
      });
    };
  },

  removeFavorite: function removeFavorite(userKey) {
    return function (dispatch, getState) {
      dispatch({
        type: types.REMOVE_FAVORITE_REQUEST,
        userKey: userKey
      });

      return userAPI.removeFavorite(userKey).then(function (response) {
        dispatch({
          type: types.REMOVE_FAVORITE_RESPONSE,
          success: response.success,
          errors: response.errors,
          key: userKey,
          favourite: false
        });
      }, function (error) {
        dispatch({
          type: types.REMOVE_FAVORITE_RESPONSE,
          success: false,
          errors: error
        });
      });
    };
  }

};

module.exports = GroupActions;

},{"../api/group":466,"../api/user":476,"../constants/GroupActionTypes":579}],437:[function(require,module,exports){
'use strict';

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var types = require('../constants/GroupCatalogActionTypes');

var groupAPI = require('../api/group');
var queryAPI = require('../api/query');

var population = require('../model/population');

var _buildGroupQuery = function _buildGroupQuery(population, metric, timezone, from, to) {
  return {
    "level": "week",
    "field": "volume",
    "overlap": null,
    "queries": [{
      "time": {
        "type": "ABSOLUTE",
        "granularity": "DAY",
        "start": from,
        "end": to
      },
      "population": population,
      "source": "METER",
      "metrics": [metric]
    }]
  };
};

var _groupChartRequest = function _groupChartRequest(query, key) {
  return {
    type: types.GROUP_CATALOG_CHART_REQUEST,
    query: query,
    groupKey: key
  };
};

var _groupChartResponse = function _groupChartResponse(success, errors, data, key) {
  var t = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : null;

  return {
    type: types.GROUP_CATALOG_CHART_RESPONSE,
    success: success,
    errors: errors,
    dataChart: data,
    groupKey: key,
    timestamp: (t || new Date()).getTime()
  };
};

var getGroupsInit = function getGroupsInit() {
  return {
    type: types.GROUP_CATALOG_REQUEST
  };
};

var getGroupsComplete = function getGroupsComplete(success, errors, total, groups, index, size) {
  return {
    type: types.GROUP_CATALOG_RESPONSE,
    success: success,
    errors: errors,
    total: total,
    groups: groups,
    index: index,
    size: size
  };
};

var _changeIndex = function _changeIndex(index) {
  return {
    type: types.GROUP_CATALOG_INDEX_CHANGE,
    index: index
  };
};

var deleteGroupInit = function deleteGroupInit(groupKey) {
  return {
    type: types.GROUP_CATALOG_DELETE_REQUEST,
    groupKey: groupKey
  };
};

var deleteGroupComplete = function deleteGroupComplete(success, errors) {
  return {
    type: types.GROUP_CATALOG_DELETE_RESPONSE,
    success: success,
    errors: errors
  };
};

var _setChartMetric = function _setChartMetric(metric) {
  return {
    type: types.GROUP_CATALOG_SET_METRIC,
    metric: metric
  };
};

var GroupCatalogActionCreators = {

  changeIndex: function changeIndex(index) {
    return _changeIndex(index);
  },

  getGroups: function getGroups() {
    return function (dispatch, getState) {
      dispatch(_changeIndex(0));

      dispatch(getGroupsInit());

      return groupAPI.getGroups(getState().userCatalog.query).then(function (response) {
        dispatch(getGroupsComplete(response.success, response.errors, response.total, response.groups, response.index, response.size));
      }, function (error) {
        dispatch(getGroupsComplete(false, error));
      });
    };
  },

  deleteGroup: function deleteGroup(groupKey) {
    return function (dispatch, getState) {
      dispatch(deleteGroupInit(groupKey));

      return groupAPI.remove(groupKey).then(function (response) {
        dispatch(deleteGroupComplete(response.success, response.errors));

        dispatch(getGroupsInit());

        return groupAPI.getGroups(getState().userCatalog.query).then(function (response) {
          dispatch(getGroupsComplete(response.success, response.errors, response.total, response.groups, response.index, response.size));
        }, function (error) {
          dispatch(getGroupsComplete(false, error));
        });
      }, function (error) {
        dispatch(deleteGroupComplete(false, error));
      });
    };
  },

  clearChart: function clearChart() {
    return {
      type: types.GROUP_CATALOG_CLEAR_CHART
    };
  },

  getGroupChart: function getGroupChart(group, key, name, timezone) {

    return function (dispatch, getState) {
      var promises = [];
      var interval = getState().groupCatalog.interval;
      var metric = getState().groupCatalog.metric;

      var targetGroup = getState().groupCatalog.data.groups.find(function (g) {
        return g.key == group[0].group;
      });

      var query = _buildGroupQuery(group, metric, timezone, interval[0].toDate().getTime(), interval[1].toDate().getTime());
      dispatch(_groupChartRequest(query, group[0].group)); //group[0].group -> group key

      promises.push(queryAPI.queryMeasurements({ query: query.queries[0] }));

      Promise.all(promises).then(function (res) {

        var source = query.queries[0].source; //source is same for all queries
        var resAll = [];

        var _loop = function _loop(m) {
          if (res[m].errors.length) {
            throw 'The request is rejected: ' + res[m].errors[0].description;
          }
          resultSets = source == 'AMPHIRO' ? res[m].devices : res[m].meters;
          res1 = (resultSets || []).map(function (rs) {
            var _population$fromStrin = population.fromString(rs.label),
                _population$fromStrin2 = _slicedToArray(_population$fromStrin, 1),
                g = _population$fromStrin2[0];

            g.name = targetGroup.name; //set group name for custom groups

            //sort points on timestamp in order to handle pre-aggregated data.
            rs.points = _.orderBy(rs.points, 'timestamp', 'desc');

            var timespan1;
            if (rs.points.length !== 0) {
              //Recalculate xAxis timespan based on returned data. (scale)              
              timespan1 = [rs.points[rs.points.length - 1].timestamp, rs.points[0].timestamp];
            } else {
              timespan1 = [query.queries[0].time.start, query.queries[0].time.end];
            }

            // Shape a normal timeseries result for requested metrics
            // Todo support other metrics (as client-side "average")
            var res2 = query.queries[0].metrics.map(function (metric) {
              return {
                source: source,
                timespan: timespan1,
                granularity: query.queries[0].time.granularity,
                metric: metric,
                population: g,
                forecast: m === 0 ? false : true, //first promise is actual data, second is forecast data
                data: rs.points.map(function (p) {
                  return [p.timestamp, p.volume[metric]];
                })
              };
            });
            return _.flatten(res2);
          });

          resAll.push(_.flatten(res1));
        };

        for (var m = 0; m < res.length; m++) {
          var resultSets;
          var res1;

          _loop(m);
        }

        var success = res.every(function (x) {
          return x.success === true;
        });
        var errors = success ? [] : res[0].errors; //todo - return flattend array of errors?

        dispatch(_groupChartResponse(success, errors, _.flatten(resAll), group[0].group));

        return _.flatten(resAll);
      });
    };
  },

  addFavorite: function addFavorite(groupKey) {
    return function (dispatch, getState) {
      dispatch({
        type: types.GROUP_CATALOG_ADD_FAVORITE_REQUEST,
        groupKey: groupKey
      });

      return groupAPI.addFavorite(groupKey).then(function (response) {
        dispatch({
          type: types.GROUP_CATALOG_ADD_FAVORITE_RESPONSE,
          success: response.success,
          errors: response.errors,
          groupKey: groupKey,
          favorite: true
        });
      }, function (error) {
        dispatch({
          type: types.GROUP_CATALOG_ADD_FAVORITE_RESPONSE,
          success: false,
          errors: error
        });
      });
    };
  },

  removeFavorite: function removeFavorite(groupKey) {
    return function (dispatch, getState) {
      dispatch({
        type: types.GROUP_CATALOG_REMOVE_FAVORITE_REQUEST,
        groupKey: groupKey
      });

      return groupAPI.removeFavorite(groupKey).then(function (response) {
        dispatch({
          type: types.GROUP_CATALOG_REMOVE_FAVORITE_RESPONSE,
          success: response.success,
          errors: response.errors,
          groupKey: groupKey,
          favorite: false
        });
      }, function (error) {
        dispatch({
          type: types.GROUP_CATALOG_REMOVE_FAVORITE_RESPONSE,
          success: false,
          errors: error
        });
      });
    };
  },

  filterByType: function filterByType(type) {
    return {
      type: types.GROUP_CATALOG_FILTER_TYPE,
      groupType: type
    };
  },

  filterByName: function filterByName(name) {
    return {
      type: types.GROUP_CATALOG_FILTER_NAME,
      name: name
    };
  },

  clearFilter: function clearFilter() {
    return {
      type: types.GROUP_CATALOG_FILTER_CLEAR
    };
  },

  setChartMetric: function setChartMetric(metric, name, timezone) {
    return function (dispatch, getState) {
      dispatch(_setChartMetric(metric));
      var obj = getState().groupCatalog.charts;
      Object.keys(obj).map(function (key) {
        return dispatch(GroupCatalogActionCreators.getGroupChart(obj[key].query.queries[0].population, key, name, timezone));
      });
    };
  }
};

module.exports = GroupCatalogActionCreators;

},{"../api/group":466,"../api/query":472,"../constants/GroupCatalogActionTypes":580,"../model/population":602}],438:[function(require,module,exports){
'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var localeAPI = require('../api/locale');
var types = require('../constants/ActionTypes');

function flattenMessages(nestedMessages) {
	var prefix = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';

	return Object.keys(nestedMessages).reduce(function (messages, key) {
		var value = nestedMessages[key];
		var prefixedKey = prefix ? prefix + '.' + key : key;

		if (key.startsWith('$') && (typeof value === 'undefined' ? 'undefined' : _typeof(value)) === 'object') {
			messages[prefixedKey] = value;
		} else if (typeof value === 'string') {
			messages[prefixedKey] = value;
		} else {
			Object.assign(messages, flattenMessages(value, prefixedKey));
		}

		return messages;
	}, {});
}

var localeNeedsLoading = function localeNeedsLoading(i18n, locale, force) {
	if (i18n.data.hasOwnProperty(locale)) {
		if (i18n.isLoading) {
			return false;
		}
		return force;
	}

	return true;
};

var requestedMessages = function requestedMessages(locale) {
	return {
		type: types.LOCALE_REQUEST_MESSAGES,
		locale: locale
	};
};

var receivedMessages = function receivedMessages(locale, messages) {
	return {
		type: types.LOCALE_RECEIVED_MESSAGES,
		locale: locale,
		messages: messages
	};
};

var LocaleActions = {
	setLocale: function setLocale(locale) {
		var force = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

		return function (dispatch, getState) {
			if (!force && !localeNeedsLoading(getState().i18n, locale, force)) {
				dispatch(receivedMessages(locale, getState().i18n.data[locale].messages));

				return;
			}

			dispatch(requestedMessages(locale));

			return localeAPI.fetchMessages(locale).then(function (messages) {
				dispatch(receivedMessages(locale, flattenMessages(messages)));
			});
		};
	}

};

module.exports = LocaleActions;

},{"../api/locale":467,"../constants/ActionTypes":571}],439:[function(require,module,exports){
'use strict';

var loggingAPI = require('../api/logging');
var types = require('../constants/LoggingActionTypes');

var getEventsInit = function getEventsInit() {
  return {
    type: types.LOG_EVENT_REQUEST_INIT
  };
};

var getEventsComplete = function getEventsComplete(success, errors, total, events, index, size) {
  return {
    type: types.LOG_EVENT_REQUEST_COMPLETE,
    success: success,
    errors: errors,
    total: total,
    events: events,
    index: index,
    size: size
  };
};

var _changeIndex = function _changeIndex(index) {
  return {
    type: types.LOG_EVENT_CHANGE_INDEX,
    index: index
  };
};

var _filterLevel = function _filterLevel(level) {
  return {
    type: types.LOG_EVENT_FILTER_LEVEL,
    level: level
  };
};

var _clearFilter = function _clearFilter() {
  return {
    type: types.LOG_EVENT_FILTER_CLEAR
  };
};

var LoggingActionCreators = {

  changeIndex: function changeIndex(index) {
    return function (dispatch, getState) {
      dispatch(_changeIndex(index));

      return loggingAPI.getEvents(getState().logging.query).then(function (response) {
        dispatch(getEventsComplete(response.success, response.errors, response.total, response.events, response.index, response.size));
      }, function (error) {
        dispatch(getEventsComplete(false, error));
      });
    };
  },

  getEvents: function getEvents() {
    return function (dispatch, getState) {
      dispatch(getEventsInit());

      return loggingAPI.getEvents(getState().logging.query).then(function (response) {
        dispatch(getEventsComplete(response.success, response.errors, response.total, response.events, response.index, response.size));
      }, function (error) {
        dispatch(getEventsComplete(false, error));
      });
    };
  },

  filterLevel: function filterLevel(level) {
    return function (dispatch, getState) {
      dispatch(_filterLevel(level));

      dispatch(getEventsInit());

      return loggingAPI.getEvents(getState().logging.query).then(function (response) {
        dispatch(getEventsComplete(response.success, response.errors, response.total, response.events, response.index, response.size));
      }, function (error) {
        dispatch(getEventsComplete(false, error));
      });
    };
  },

  filterAccount: function filterAccount(account) {
    return {
      type: types.LOG_EVENT_FILTER_ACCOUNT,
      account: account
    };
  },

  clearFilter: function clearFilter() {
    return function (dispatch, getState) {
      dispatch(_clearFilter());

      dispatch(getEventsInit());

      return loggingAPI.getEvents(getState().logging.query).then(function (response) {
        dispatch(getEventsComplete(response.success, response.errors, response.total, response.events, response.index, response.size));
      }, function (error) {
        dispatch(getEventsComplete(false, error));
      });
    };
  }

};

module.exports = LoggingActionCreators;

},{"../api/logging":468,"../constants/LoggingActionTypes":582}],440:[function(require,module,exports){
'use strict';

var types = require('../constants/ActionTypes');
var alertsAPI = require('../api/alerts');

var receivedTips = function receivedTips(success, errors, tips) {
  return {
    type: types.ADMIN_RECEIVED_STATIC_TIPS,
    success: success,
    errors: errors,
    tips: tips
  };
};

var requestedTips = function requestedTips(locale) {
  return {
    type: types.ADMIN_REQUESTED_STATIC_TIPS,
    locale: locale
  };
};

var requestedUtilities = function requestedUtilities() {
  return {
    type: types.ADMIN_REQUESTED_UTILITIES
  };
};

var receivedUtilities = function receivedUtilities(success, errors, utilities) {
  return {
    type: types.ADMIN_RECEIVED_UTILITIES,
    success: success,
    errors: errors,
    utilities: utilities
  };
};

var clickedActiveStatusSaveButton = function clickedActiveStatusSaveButton() {
  return {
    type: types.ADMIN_CLICKED_SAVE_BUTTON,
    isLoading: true
  };
};

var saveActiveStatusButtonResponse = function saveActiveStatusButtonResponse(success, errors) {
  return {
    type: types.ADMIN_SAVE_BUTTON_RESPONSE,
    isLoading: false,
    success: success,
    errors: errors
  };
};

var requestAddTip = function requestAddTip() {
  return {
    type: types.ADMIN_REQUESTED_ADD_TIP,
    saveTipDisabled: false,
    isLoading: true
  };
};

var addTipResponse = function addTipResponse(success, errors) {
  return {
    type: types.ADMIN_ADD_TIP_RESPONSE,
    saveTipDisabled: false,
    isLoading: false,
    show: false,
    success: success,
    errors: errors
  };
};

var requestDeleteTip = function requestDeleteTip(currentTip) {
  return {
    type: types.ADMIN_DELETE_TIP_REQUEST,
    currentTip: currentTip,
    showModal: false
    //isLoading: true
  };
};

var deleteTipResponse = function deleteTipResponse(success, errors) {
  return {
    type: types.ADMIN_DELETE_TIP_RESPONSE,
    isLoading: false,
    success: success,
    errors: errors,
    showModal: false
  };
};

var ManageAlertsActions = {
  setUtility: function setUtility(utility) {
    return {
      type: types.ADMIN_SELECTED_UTILITY_FILTER,
      utility: utility
    };
  },
  fetchUtilities: function fetchUtilities() {
    return function (dispatch, getState) {
      dispatch(requestedUtilities());
      return alertsAPI.getAllUtilities().then(function (response) {
        dispatch(receivedUtilities(response.success, response.errors, response.utilitiesInfo));
      }, function (error) {
        receivedUtilities(false, error, null);
      });
    };
  },
  getStaticTips: function getStaticTips(utility, activePage) {
    var locale;
    if (utility.label == "DAIAD") {
      locale = "en";
    } else if (utility.label == "Alicante") {
      locale = "es";
    } else {
      locale = "en";
    }
    return function (dispatch, getState) {
      dispatch(requestedTips(locale));
      return alertsAPI.getTips(locale).then(function (response) {
        dispatch(receivedTips(response.success, response.errors, response.messages));
      }, function (error) {
        dispatch(receivedTips(false, error, null));
      });
    };
  },
  addTip: function addTip(tip, utility) {
    return function (dispatch, getState) {
      dispatch(requestAddTip);
      return alertsAPI.insertTip(tip).then(function (response) {
        dispatch(addTipResponse(response.success, response.errors));
        var locale;
        if (utility.label == "DAIAD") {
          locale = "en";
        } else if (utility.label == "Alicante") {
          locale = "es";
        } else {
          locale = "en";
        }
        dispatch(requestedTips(locale));
        return alertsAPI.getTips(locale).then(function (response) {
          dispatch(receivedTips(response.success, response.errors, response.messages));
        }, function (error) {
          dispatch(receivedTips(false, error, null));
        });
      }, function (error) {
        dispatch(addTipResponse(false, error, null));
      });
    };
  },
  deleteTip: function deleteTip() {
    return function (dispatch, getState) {
      dispatch(requestDeleteTip);
      return alertsAPI.deleteTip(getState().alerts.currentTip).then(function (response) {
        dispatch(deleteTipResponse(response.success, response.errors));
        var utility = getState().alerts.utility;
        var locale;
        if (utility.label == "DAIAD") {
          locale = "en";
        } else if (utility.label == "Alicante") {
          locale = "es";
        } else {
          locale = "en";
        }
        dispatch(requestedTips(locale));
        return alertsAPI.getTips(locale).then(function (response) {
          dispatch(receivedTips(response.success, response.errors, response.messages));
        }, function (error) {
          dispatch(receivedTips(false, error, null));
        });
      }, function (error) {
        dispatch(deleteTipResponse(false, error, null));
      });
    };
  },
  cancelDelete: function cancelDelete() {
    return {
      type: types.ADMIN_CANCEL_DELETE_TIP,
      currentTip: null,
      showModal: false
    };
  },
  showAddTipForm: function showAddTipForm() {
    return {
      type: types.ADMIN_ADD_TIP_SHOW,
      currentTip: null,
      saveOff: false
    };
  },
  cancelAddTip: function cancelAddTip() {
    return {
      type: types.ADMIN_CANCEL_ADD_TIP_SHOW,
      saveOff: true
    };
  },
  beganEditingTip: function beganEditingTip() {
    return {
      type: types.ADMIN_EDITED_TIP,
      saveTipDisabled: false
    };
  },
  editTip: function editTip(currentTip) {
    return {
      type: types.ADMIN_EDIT_TIP,
      currentTip: currentTip,
      show: true,
      saveOff: false
    };
  },
  setActivePage: function setActivePage(activePage) {
    return {
      type: types.STATIC_TIPS_ACTIVE_PAGE,
      activePage: activePage
    };
  },
  setActivationChanged: function setActivationChanged(data) {
    return {
      type: types.ADMIN_TIPS_ACTIVE_STATUS_CHANGE,
      data: data
    };
  },
  saveActiveStatusChanges: function saveActiveStatusChanges(changedRows, utility, activePage) {
    return function (dispatch, getState) {
      dispatch(clickedActiveStatusSaveButton());
      return alertsAPI.saveActiveTips(changedRows).then(function (response) {
        dispatch(saveActiveStatusButtonResponse(response.success, response.errors));
        var locale;
        if (utility.label == "DAIAD") {
          locale = "en";
        } else if (utility.label == "Alicante") {
          locale = "es";
        } else {
          locale = "en";
        }
        dispatch(requestedTips(locale));
        return alertsAPI.getTips(locale).then(function (response) {
          dispatch(receivedTips(response.success, response.errors, response.messages));
        }, function (error) {
          dispatch(receivedTips(false, error, null));
        });
      }, function (error) {
        dispatch(saveActiveStatusButtonResponse(false, error, null));
      });
    };
  },
  showModal: function showModal(currentTip) {
    return {
      type: types.MESSAGES_DELETE_MODAL_SHOW,
      currentTip: currentTip,
      showModal: true
    };
  },
  hideModal: function hideModal() {
    return {
      type: types.MESSAGES_DELETE_MODAL_HIDE,
      showModal: false
    };
  }
};

module.exports = ManageAlertsActions;

},{"../api/alerts":460,"../constants/ActionTypes":571}],441:[function(require,module,exports){
'use strict';

var queryAPI = require('../api/query');
var mapAPI = require('../api/map');
var groupAPI = require('../api/group');
var favouritesAPI = require('../api/favourites');
var adminAPI = require('../api/admin');
var moment = require('moment');
var types = require('../constants/MapActionTypes');

var addFavouriteRequest = function addFavouriteRequest() {
  return {
    type: types.MAP_ADD_FAVOURITE_REQUEST
  };
};

var addFavouriteResponse = function addFavouriteResponse(success, errors) {
  return {
    type: types.MAP_ADD_FAVOURITE_RESPONSE,
    success: success,
    errors: errors
  };
};

var _saveLayoutResponse = function _saveLayoutResponse(success, errors) {
  return {
    type: types.MAP_SAVE_LAYOUT_RESPONSE,
    success: success,
    errors: errors
  };
};

var _buildTimelineQuery = function _buildTimelineQuery(population, source, geometry, timezone, interval) {
  var spatial = [{
    type: 'GROUP',
    group: 'd29f8cb8-7df6-4d57-8c99-0a155cc394c5'
  }];

  if (geometry) {
    spatial.push({
      type: 'CONSTRAINT',
      geometry: geometry,
      operation: 'INTERSECT'
    });
  }
  return {
    'query': {
      'timezone': timezone,
      'time': {
        'type': 'ABSOLUTE',
        'start': interval[0].toDate().getTime(),
        'end': interval[1].toDate().getTime(),
        'granularity': 'DAY'
      },
      'population': [population],
      spatial: spatial,
      'source': source,
      'metrics': ['SUM']
    }
  };
};

var _buildChartQuery = function _buildChartQuery(key, name, timezone, interval) {
  return {
    'query': {
      'timezone': timezone,
      'time': {
        'type': 'ABSOLUTE',
        'start': interval[0].toDate().getTime(),
        'end': interval[1].toDate().getTime(),
        'granularity': 'DAY'
      },
      'population': [{
        'type': 'UTILITY',
        'label': name,
        'utility': key
      }],
      'source': 'METER',
      'metrics': ['SUM']
    }
  };
};

var _getTimelineInit = function _getTimelineInit(population, query) {
  return {
    type: types.MAP_TIMELINE_REQUEST,
    query: query,
    population: population
  };
};

var _getTimelineComplete = function _getTimelineComplete(success, errors, data) {
  return {
    type: types.MAP_TIMELINE_RESPONSE,
    success: success,
    errors: errors,
    data: data
  };
};

var _getFeatures = function _getFeatures(index, timestamp, label) {
  return {
    type: types.MAP_GET_FEATURES,
    timestamp: timestamp,
    label: label,
    index: index
  };
};

var _getChartInit = function _getChartInit(key, name, timezone, query) {
  return {
    type: types.MAP_CHART_REQUEST,
    query: query,
    population: {
      key: key,
      name: name,
      timezone: timezone
    }
  };
};

var _getChartComplete = function _getChartComplete(success, errors, data) {
  return {
    type: types.MAP_CHART_RESPONSE,
    success: success,
    errors: errors,
    data: data
  };
};

var _setEditorValue = function _setEditorValue(editor, value) {
  return {
    type: types.MAP_SET_EDITOR_VALUE,
    editor: editor,
    value: value
  };
};

var _setGroup = function _setGroup(group) {
  return {
    type: types.MAP_SET_GROUP,
    group: group
  };
};

var metersLocationsRequest = function metersLocationsRequest() {
  return {
    type: types.MAP_METERS_LOCATIONS_REQUEST
  };
};

var metersLocationsResponse = function metersLocationsResponse(success, errors, data) {
  return {
    type: types.MAP_METERS_LOCATIONS_RESPONSE,
    success: success,
    errors: errors,
    data: data
  };
};

var getGroupsInit = function getGroupsInit() {
  return {
    type: types.MAP_GROUPS_REQUEST
  };
};

var getGroupsComplete = function getGroupsComplete(success, errors, total, groups, index, size) {
  return {
    type: types.MAP_GROUPS_RESPONSE,
    success: success,
    errors: errors,
    total: total,
    groups: groups,
    index: index,
    size: size
  };
};

var MapActions = {
  setEditor: function setEditor(key) {
    return {
      type: types.MAP_SELECT_EDITOR,
      editor: key
    };
  },

  setEditorValue: function setEditorValue(editor, value) {
    return function (dispatch, getState) {
      dispatch(_setEditorValue(editor, value));

      var population = getState().map.population;
      var timezone = getState().map.timezone;
      var interval = getState().map.interval;
      var source = getState().map.source;
      var geometry = getState().map.geometry;
      var query = _buildTimelineQuery(population, source, geometry, timezone, interval);

      dispatch(_getTimelineInit(population, query));
      return queryAPI.queryMeasurements(query).then(function (response) {
        var data = {
          meters: null,
          devices: null,
          areas: null
        };
        if (response.success) {
          data.areas = response.areas;
          data.meters = response.meters;
          data.devices = response.devices;
        }
        dispatch(_getTimelineComplete(response.success, response.errors, data));

        dispatch(_getFeatures(0, null, null));
      }, function (error) {
        dispatch(_getTimelineComplete(false, error, null));

        dispatch(_getFeatures(0, null, null));
      });
    };
  },

  setEditorValuesBatch: function setEditorValuesBatch(isDefault) {

    return function (dispatch, getState) {

      var utility = getState().session.profile.utility;
      MapActions.setTimezone(utility.timezone);
      var timezone = getState().map.timezone;
      var population, source, geometry, interval;
      if (isDefault) {
        if (!getState().map.timeline) {
          population = {
            utility: utility.key,
            label: utility.name,
            type: 'UTILITY'
          };
        }
        source = 'METER';
        interval = [moment().subtract(14, 'day'), moment()];
        if (!getState().map.features || getState().map.features.length === 0) {
          geometry = null;
        } else {
          geometry = getState().map.features[0].geometry;
        }
        dispatch(_setEditorValue('population', population));
        dispatch(_setEditorValue('interval', interval));
        dispatch(_setEditorValue('source', source));
        dispatch(_setEditorValue('spatial', geometry));
      } else if (getState().favourites.selectedFavourite) {

        var selectedFav = getState().favourites.selectedFavourite.queries[0];

        population = selectedFav.population[0];

        interval = [moment(selectedFav.time.start), moment(selectedFav.time.end)];

        source = selectedFav.source;

        if (selectedFav.spatial && selectedFav.spatial > 1) {
          geometry = selectedFav.spatial[1].geometry;
        } else {

          geometry = null;
        }

        var groupPop = { group: population };
        //filterBytype
        var clusterName = population.label.substring(0, population.label.indexOf(":"));

        dispatch(MapActions.filterByType(population.type === 'UTILITY' ? null : clusterName));
        dispatch(MapActions.setGroup(groupPop));
        dispatch(_setEditorValue('population', population));
        dispatch(_setEditorValue('interval', interval));
        dispatch(_setEditorValue('spatial', geometry));
        dispatch(_setEditorValue('source', source));
      }

      var query = _buildTimelineQuery(population, source, geometry, timezone, interval);
      dispatch(_getTimelineInit(population, query));
      return queryAPI.queryMeasurements(query).then(function (response) {
        var data = {
          meters: null,
          devices: null,
          areas: null
        };
        if (response.success) {
          data.areas = response.areas;
          data.meters = response.meters;
          data.devices = response.devices;
        }
        dispatch(_getTimelineComplete(response.success, response.errors, data));

        dispatch(_getFeatures(0, null, null));
      }, function (error) {
        dispatch(_getTimelineComplete(false, error, null));

        dispatch(_getFeatures(0, null, null));
      });
    };
  },
  getChart: function getChart(key, name, timezone) {
    return function (dispatch, getState) {
      var query = _buildChartQuery(key, name, timezone, getState().map.interval);

      dispatch(_getChartInit(key, name, timezone, query));

      return queryAPI.queryMeasurements(query).then(function (response) {
        var data = {
          meters: null,
          devices: null
        };

        if (response.success) {
          data.meters = response.meters;
          data.devices = response.devices;
        }
        dispatch(_getChartComplete(response.success, response.errors, data));
      }, function (error) {
        dispatch(_getChartComplete(false, error, null));
      });
    };
  },

  getTimeline: function getTimeline(population) {
    return function (dispatch, getState) {
      var timezone = getState().map.timezone;
      var interval = getState().map.interval;
      var source = getState().map.source;
      var geometry = getState().map.geometry;

      var query = _buildTimelineQuery(population, source, geometry, timezone, interval);

      dispatch(_getTimelineInit(population, query));

      return queryAPI.queryMeasurements(query).then(function (response) {
        var data = {
          meters: null,
          devices: null,
          areas: null
        };
        if (response.success) {
          data.areas = response.areas;
          data.meters = response.meters;
          data.devices = response.devices;
        }
        dispatch(_getTimelineComplete(response.success, response.errors, data));

        dispatch(_getFeatures(0, null, null));
      }, function (error) {
        dispatch(_getTimelineComplete(false, error, null));

        dispatch(_getFeatures(0, null, null));
      });
    };
  },

  getFeatures: function getFeatures(index, timestamp, label) {
    return _getFeatures(index, timestamp, label);
  },

  setTimezone: function setTimezone(timezone) {
    return {
      type: types.MAP_SET_TIMEZONE,
      timezone: timezone
    };
  },
  addFavourite: function addFavourite(favourite) {
    return function (dispatch, getState) {
      dispatch(addFavouriteRequest());
      return favouritesAPI.addFavourite(favourite).then(function (response) {
        dispatch(addFavouriteResponse(response.success, response.errors));
      }, function (error) {
        dispatch(addFavouriteResponse(false, error));
      });
    };
  },
  updateFavourite: function updateFavourite(favourite, previousTitle) {
    return function (dispatch, getState) {
      dispatch(addFavouriteRequest());
      return favouritesAPI.updateFavourite(favourite).then(function (response) {
        dispatch(addFavouriteResponse(response.success, response.errors));

        if (response.success && previousTitle !== favourite.namedQuery.title) {
          //favourite title changed. Must update dashboard layout:

          return adminAPI.getLayout().then(function (response) {
            if (response.success) {
              var lays = JSON.parse(response.profile.configuration);

              lays.layout.forEach(function (component) {
                if (component.i === previousTitle) {
                  component.i = favourite.namedQuery.title;
                }
              });

              var layoutRequest = { "configuration": JSON.stringify({ "layout": lays.layout }) };

              return adminAPI.saveLayout(layoutRequest).then(function (response) {
                if (response.errors.length > 0) {
                  console.error(response.errors);
                }
              }, function (error) {
                dispatch(_saveLayoutResponse(false, error));
              });
            }
          }, function (error) {
            dispatch(_saveLayoutResponse(false, error));
          });
        }
      }, function (error) {
        dispatch(addFavouriteResponse(false, error));
      });
    };
  },
  getMetersLocations: function getMetersLocations() {
    return function (dispatch, getState) {
      dispatch(metersLocationsRequest());
      return mapAPI.getMetersLocations().then(function (response) {
        dispatch(metersLocationsResponse(true, null, response));
      }, function (error) {
        dispatch(metersLocationsResponse(false, error));
      });
    };
  },

  getGroups: function getGroups() {
    return function (dispatch, getState) {
      dispatch(getGroupsInit());
      return groupAPI.getGroups(getState().userCatalog.query).then(function (response) {
        dispatch(getGroupsComplete(response.success, response.errors, response.total, response.groups, response.index, response.size));
      }, function (error) {
        dispatch(getGroupsComplete(false, error));
      });
    };
  },
  filterByType: function filterByType(type) {
    return {
      type: types.MAP_FILTER_GROUP_BY_TYPE,
      groupType: type
    };
  },
  setGroup: function setGroup(group) {
    return function (dispatch, getState) {
      dispatch(_setGroup(group));
      dispatch(MapActions.setEditorValue('population', group.group));
    };
  },
  getAreaGroups: function getAreaGroups() {
    return function (dispatch, getState) {
      return mapAPI.getGroups().then(function (response) {
        return response.groups;
      }).catch(function (error) {
        console.error('caught error', error);
      });
    };
  },
  getAreas: function getAreas(groupKey) {
    return function (dispatch, getState) {
      return mapAPI.getAreas({ groupKey: groupKey }).then(function (response) {
        return response.areas;
      }).catch(function (error) {
        console.error('caught error', error);
      });
    };
  }

};

module.exports = MapActions;

},{"../api/admin":459,"../api/favourites":465,"../api/group":466,"../api/map":469,"../api/query":472,"../constants/MapActionTypes":584,"moment":"moment"}],442:[function(require,module,exports){
'use strict';

var types = require('../constants/ActionTypes');
var alertsAPI = require('../api/alerts');

var _setEditorValue = function _setEditorValue(editor, value) {
  return {
    type: types.MESSAGES_SET_EDITOR_VALUE,
    editor: editor,
    value: value
  };
};

var requestedMessageStatistics = function requestedMessageStatistics() {
  return {
    type: types.MESSAGES_REQUESTED_STATISTICS
  };
};

var receivedMessageStatistics = function receivedMessageStatistics(success, errors, messageStatistics) {
  return {
    type: types.MESSAGES_RECEIVED_STATISTICS,
    success: success,
    errors: errors,
    messages: messageStatistics
  };
};

var requestedReceivers = function requestedReceivers() {
  return {
    type: types.MESSAGES_REQUESTED_RECEIVERS
  };
};

var receivedReceivers = function receivedReceivers(success, errors, receivers) {
  return {
    type: types.MESSAGES_RECEIVED_RECEIVERS,
    success: success,
    errors: errors,
    receivers: receivers
  };
};

var buildQuery = function buildQuery(population, timezone, interval) {

  return {
    'query': {
      'timezone': timezone,
      'time': {
        'type': 'ABSOLUTE',
        'start': interval[0].toDate().getTime(),
        'end': interval[1].toDate().getTime()
      },
      'population': [population]
    }
  };
};

var _changeIndex = function _changeIndex(index) {
  return {
    type: types.MESSAGES_INDEX_CHANGE,
    index: index
  };
};

var MessageAnalyticsActions = {

  changeIndex: function changeIndex(index) {
    return _changeIndex(index);
  },

  setEditor: function setEditor(key) {
    return {
      type: types.MESSAGES_SELECT_EDITOR,
      editor: key
    };
  },

  setEditorValue: function setEditorValue(editor, value) {
    return function (dispatch, getState) {
      dispatch(_changeIndex(0));
      dispatch(_setEditorValue(editor, value));
      dispatch(requestedMessageStatistics());
      var query = buildQuery(getState(event).messages.population, getState(event).messages.timezone, getState(event).messages.interval);
      return alertsAPI.getMessageStatistics(query).then(function (response) {
        var messages = response.alertStatistics.concat(response.recommendationStatistics);
        dispatch(receivedMessageStatistics(response.success, response.errors, messages));
      }, function (error) {
        dispatch(receivedMessageStatistics(false, error, null));
      });
    };
  },

  setTimezone: function setTimezone(timezone) {
    return {
      type: types.MESSAGES_SET_TIMEZONE,
      timezone: timezone
    };
  },

  fetchMessages: function fetchMessages(event) {
    return function (dispatch, getState) {
      dispatch(_changeIndex(0));
      dispatch(requestedMessageStatistics());
      var query = buildQuery(getState(event).messages.population, getState(event).messages.timezone, getState(event).messages.interval);
      return alertsAPI.getMessageStatistics(query).then(function (response) {
        var messages = response.alertStatistics.map(function (value) {
          value.category = 'ALERT';
          return value;
        }).concat(response.recommendationStatistics.map(function (value) {
          value.category = 'RECOMMENDATION';
          return value;
        }));
        dispatch(receivedMessageStatistics(response.success, response.errors, messages));
      }, function (error) {
        dispatch(receivedMessageStatistics(false, error, null));
      });
    };
  },
  showReceivers: function showReceivers(event) {
    return function (dispatch, getState) {
      dispatch(requestedReceivers());

      var message = getState(event).messages.selectedMessage;
      var query = buildQuery(getState(event).messages.population, getState(event).messages.timezone, getState(event).messages.interval);

      if (message.category == "ALERT") {

        return alertsAPI.getAlertReceivers(message.id, query).then(function (response) {
          dispatch(receivedReceivers(response.success, response.errors, response.receivers));
        }, function (error) {
          dispatch(receivedReceivers(false, error, null));
        });
      } else if (message.category == "RECOMMENDATION") {
        return alertsAPI.getRecommendationReceivers(message.id, query).then(function (response) {
          dispatch(receivedReceivers(response.success, response.errors, response.receivers));
        }, function (error) {
          dispatch(receivedReceivers(false, error, null));
        });
      }
    };
  },
  setSelectedMessage: function setSelectedMessage(message) {
    return {
      type: types.MESSAGES_SELECTED_MESSAGE,
      selectedMessage: message
    };
  },
  goBack: function goBack() {
    return {
      type: types.MESSAGES_RETURN_BACK,
      showReceivers: false
    };
  }
};

module.exports = MessageAnalyticsActions;

},{"../api/alerts":460,"../constants/ActionTypes":571}],443:[function(require,module,exports){
'use strict';

var modeManagementAPI = require('../api/mode_management');
var types = require('../constants/ActionTypes');

var prepareFiltersPayload = function prepareFiltersPayload(nameFilter, filterStatus) {

  var truthTable = {
    true: 'ON',
    false: 'OFF'
  };

  var results = {};
  results.nameFilter = nameFilter;
  for (var key in filterStatus) {
    if (typeof filterStatus[key].value === 'boolean') {
      results[key] = truthTable[filterStatus[key].value];
    } else {
      results[key] = filterStatus[key].value;
    }
  }
  return results;
};

var requestedFilterOptions = function requestedFilterOptions() {
  return {
    type: types.MODEMNG_REQUEST_FILTER_OPTIONS
  };
};

var receivedFilterOptions = function receivedFilterOptions(options) {
  return {
    type: types.MODEMNG_RECEIVED_FILTER_OPTIONS,
    filterOptions: options
  };
};

var requestedUsers = function requestedUsers() {
  return {
    type: types.MODEMNG_REQUEST_USERS
  };
};

var receivedUsers = function receivedUsers(users) {
  return {
    type: types.MODEMNG_RECEIVED_USERS,
    users: users
  };
};

var setNameFilter = function setNameFilter(term) {
  return {
    type: types.MODEMNG_SET_NAME_FILTER,
    nameFilter: term
  };
};

var addFilter = function addFilter(event, filter) {
  return {
    type: types.MODEMNG_FILTER_ADD,
    filter: filter
  };
};

var removeFilter = function removeFilter(filterId) {
  return {
    type: types.MODEMNG_FILTER_REMOVE,
    filterId: filterId
  };
};

var sendDeactivateUserRequest = function sendDeactivateUserRequest() {
  return {
    type: types.MODEMNG_DEACTIVATE_USER
  };
};

var sendSaveModesRequest = function sendSaveModesRequest(updatedModes) {
  return {
    type: types.MODEMNG_SAVE_MODE_CHANGES
  };
};

var ModeManagementActions = {

  markUserForDeactivation: function markUserForDeactivation(userId) {
    return {
      type: types.MODEMNG_MARK_USER_DEACTIVATION,
      userId: userId
    };
  },

  setModal: function setModal(modal) {
    return {
      type: types.MODEMNG_SET_MODAL,
      modal: modal
    };
  },

  setChangedModes: function setChangedModes(changedModes) {
    return {
      type: types.MODEMNG_SET_CHANGED_MODES,
      changedModes: changedModes
    };
  },

  setModes: function setModes(modes) {
    return {
      type: types.MODEMNG_SET_MODES,
      modes: modes
    };
  },

  setActivePage: function setActivePage(activePage) {
    return {
      type: types.MODEMNG_SET_ACTIVE_PAGE,
      activePage: activePage
    };
  },

  fetchFilterOptions: function fetchFilterOptions() {
    return function (dispatch, getState) {
      dispatch(requestedFilterOptions());
      return modeManagementAPI.fetchFilterOptions().then(function (filterOptions) {
        dispatch(receivedFilterOptions(filterOptions));
      });
    };
  },

  fetchUsers: function fetchUsers() {
    return function (dispatch, getState) {
      dispatch(requestedUsers());
      var filters = prepareFiltersPayload(getState().mode_management.nameFilter, getState().mode_management.filterStatus);
      return modeManagementAPI.fetchUsers(filters).then(function (users) {
        dispatch(receivedUsers(users));
      });
    };
  },

  applyNameFilter: function applyNameFilter(term) {
    return function (dispatch, getState) {
      dispatch(setNameFilter(term));
      var filters = prepareFiltersPayload(getState().mode_management.nameFilter, getState().mode_management.filterStatus);
      return modeManagementAPI.fetchUsers(filters).then(function (users) {
        dispatch(receivedUsers(users));
      });
    };
  },

  applyAddFilter: function applyAddFilter(event, filter) {
    return function (dispatch, getState) {
      dispatch(addFilter(event, filter));
      var filters = prepareFiltersPayload(getState().mode_management.nameFilter, getState().mode_management.filterStatus);
      return modeManagementAPI.fetchUsers(filters).then(function (users) {
        dispatch(receivedUsers(users));
      });
    };
  },

  applyRemoveFilter: function applyRemoveFilter(filterId) {
    return function (dispatch, getState) {
      dispatch(removeFilter(filterId));
      var filters = prepareFiltersPayload(getState().mode_management.nameFilter, getState().mode_management.filterStatus);
      return modeManagementAPI.fetchUsers(filters).then(function (users) {
        dispatch(receivedUsers(users));
      });
    };
  },

  deactivateUser: function deactivateUser(user) {
    return function (dispatch, getState) {
      dispatch(sendDeactivateUserRequest());
      modeManagementAPI.deactivateUser(user).then(function () {
        var filters = prepareFiltersPayload(getState().mode_management.nameFilter, getState().mode_management.filterStatus);
        return modeManagementAPI.fetchUsers(filters).then(function (users) {
          dispatch(receivedUsers(users));
        });
      });
    };
  },

  saveModeChanges: function saveModeChanges(modes) {
    return function (dispatch, getState) {
      dispatch(sendSaveModesRequest());
      modeManagementAPI.saveModeChanges(modes).then(function () {
        var filters = prepareFiltersPayload(getState().mode_management.nameFilter, getState().mode_management.filterStatus);
        return modeManagementAPI.fetchUsers(filters).then(function (users) {
          dispatch(receivedUsers(users));
        });
      });
    };
  }

};

module.exports = ModeManagementActions;

},{"../api/mode_management":470,"../constants/ActionTypes":571}],444:[function(require,module,exports){
'use strict';

var passwordAPI = require('../api/password');
var types = require('../constants/ActionTypes');

var resetPasswordRequest = function resetPasswordRequest(token, password) {
  return {
    type: types.PASSWORD_RESET_REQUEST
  };
};

var resetPasswordResponse = function resetPasswordResponse(success, errors) {
  return {
    type: types.PASSWORD_RESET_RESPONSE,
    success: success,
    errors: errors
  };
};

var PasswordActions = {
  reset: function reset(token, password) {
    return function (dispatch, getState) {
      dispatch(resetPasswordRequest());

      return passwordAPI.reset(token, password).then(function (response) {
        dispatch(resetPasswordResponse(response.success, response.errors));
      }, function (error) {
        dispatch(resetPasswordResponse(false, error));
      });
    };
  },

  setCaptchaValid: function setCaptchaValid(value) {
    return {
      type: types.PASSWORD_CAPTCHA_SET_VALID,
      value: value
    };
  },

  setErrors: function setErrors(errors) {
    return {
      type: types.PASSWORD_RESET_SET_ERRORS,
      errors: errors ? errors.length === 0 ? null : errors : null
    };
  },

  clearErrors: function clearErrors() {
    return {
      type: types.PASSWORD_RESET_CLEAR_ERRORS
    };
  }

};
module.exports = PasswordActions;

},{"../api/password":471,"../constants/ActionTypes":571}],445:[function(require,module,exports){
'use strict';

var queryAPI = require('../api/query');
var types = require('../constants/ActionTypes');

var submittedQuery = function submittedQuery(query) {
  return {
    type: types.QUERY_SUBMIT,
    query: query
  };
};

var receivedResponse = function receivedResponse(success, errors, data) {
  return {
    type: types.QUERY_RESPONSE,
    success: success,
    errors: errors,
    data: data
  };
};

var QueryActions = {
  submitQuery: function submitQuery(query) {
    return function (dispatch, getState) {
      dispatch(submittedQuery(query));

      return queryAPI.queryMeasurements(query).then(function (response) {
        var data = {
          meters: null,
          devices: null,
          areas: null
        };
        if (response.success) {
          data.areas = response.areas;
          data.meters = response.meters;
          data.devices = response.devices;
        }
        dispatch(receivedResponse(response.success, response.errors, data));
      }, function (error) {
        dispatch(receivedResponse(false, error, null));
      });
    };
  }
};

module.exports = QueryActions;

},{"../api/query":472,"../constants/ActionTypes":571}],446:[function(require,module,exports){
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var types = require('../constants/SavingsActionTypes');

var _require = require('./MapActions'),
    getAreaGroups = _require.getAreaGroups,
    getAreas = _require.getAreas;

var savingsAPI = require('../api/savings');

var _require2 = require('../helpers/common'),
    throwServerError = _require2.throwServerError,
    sortSegments = _require2.sortSegments;

var confirmRemoveScenario = function confirmRemoveScenario(id) {
  return {
    type: types.SAVINGS_CONFIRM_REMOVE_SCENARIO,
    id: id
  };
};

var setSavingsScenarios = function setSavingsScenarios(scenarios) {
  return {
    type: types.SAVINGS_SET_SCENARIOS,
    scenarios: scenarios
  };
};

var setSearchFilter = function setSearchFilter(searchFilter) {
  return {
    type: types.SAVINGS_SET_QUERY,
    query: { name: searchFilter }
  };
};

var setQuery = function setQuery(query) {
  return {
    type: types.SAVINGS_SET_QUERY,
    query: query
  };
};

var setAreas = function setAreas(areas) {
  return {
    type: types.SAVINGS_SET_AREAS,
    areas: areas
  };
};

var setExploreScenario = function setExploreScenario(scenario) {
  return {
    type: types.SAVINGS_SET_EXPLORE_SCENARIO,
    scenario: scenario
  };
};

var setExploreData = function setExploreData(data) {
  return {
    type: types.SAVINGS_SET_EXPLORE_DATA,
    data: data
  };
};

var addSavingsScenario = function addSavingsScenario(values) {
  return function (dispatch, getState) {
    var title = values.title.name;

    var population = Array.isArray(values.population) ? values.population : [values.population];
    var spatial = Array.isArray(values.spatial) ? values.spatial.map(function (area) {
      return { type: 'AREA', areas: [area.area] };
    }) : null;

    var parameters = {
      population: population.map(function (p) {
        return { key: p.key, type: p.type };
      }),
      spatial: spatial,
      time: {
        start: values.time && values.time.start,
        end: values.time && values.time.end
      }
    };

    var options = {
      title: title,
      parameters: parameters
    };

    return savingsAPI.create(options).then(function (response) {
      if (!response || !response.success) {
        throwServerError(response);
      }
      return response;
    }).catch(function (error) {
      console.error('caught error in create savings scenario', error);
      return null;
    });
  };
};

var refreshSavingsScenario = function refreshSavingsScenario(scenarioKey) {
  return function (dispatch, getState) {
    var options = {
      scenarioKey: scenarioKey
    };

    return savingsAPI.refresh(options).then(function (response) {
      if (!response || !response.success) {
        throwServerError(response);
      }
      return response;
    }).catch(function (error) {
      console.error('caught error in refresh savings scenario', error);
      return null;
    });
  };
};

var removeSavingsScenario = function removeSavingsScenario(scenarioKey) {
  return function (dispatch, getState) {
    var options = {
      scenarioKey: scenarioKey
    };

    return savingsAPI.remove(options).then(function (response) {
      if (!response || !response.success) {
        throwServerError(response);
      }
      return response;
    }).catch(function (error) {
      console.error('caught error in remove savings scenario', error);
      return null;
    });
  };
};

var exploreSavingsScenario = function exploreSavingsScenario(scenarioKey, clusterKey) {
  return function (dispatch, getState) {
    var options = {
      scenarioKey: scenarioKey,
      clusterKey: clusterKey
    };

    return savingsAPI.explore(options).then(function (response) {
      if (!response || !response.success) {
        throwServerError(response);
      }
      return response;
    }).catch(function (error) {
      console.error('caught error in explore savings scenario', scenarioKey, clusterKey, error);
      return null;
    });
  };
};

var exploreScenariosAllClusters = function exploreScenariosAllClusters(scenarioKey) {
  return function (dispatch, getState) {
    var _getState$config$util = getState().config.utility.clusters,
        clusters = _getState$config$util === undefined ? [] : _getState$config$util;

    return Promise.all(clusters.map(function (cluster) {
      return dispatch(exploreSavingsScenario(scenarioKey, cluster.key));
    })).then(function (clusters) {
      return clusters.filter(function (c) {
        return c != null;
      });
    }).then(function (clusters) {
      return clusters.map(function (cluster) {
        return _extends({}, cluster, { segments: cluster.segments.sort(sortSegments) });
      });
    }).then(function (clusters) {
      return dispatch(setExploreData({ clusters: clusters }));
    });
  };
};

var fetchSavings = function fetchSavings(query) {
  return function (dispatch, getState) {
    return savingsAPI.query({ query: query }).then(function (response) {
      if (!response || !response.success) {
        throwServerError(response);
      }
      return response;
    }).catch(function (error) {
      console.error('caught error in query savings scenarios', error);
      return null;
    });
  };
};

var findSavingsScenario = function findSavingsScenario(scenarioKey) {
  return function (dispatch, getState) {
    return savingsAPI.find({ scenarioKey: scenarioKey }).then(function (response) {
      if (!response || !response.success) {
        throwServerError(response);
      }
      return response.scenario;
    }).catch(function (error) {
      console.error('caught error in find savings scenario', error);
      return null;
    });
  };
};

var fetchSavingsScenario = function fetchSavingsScenario(scenarioKey) {
  return function (dispatch, getState) {
    return dispatch(findSavingsScenario(scenarioKey)).then(function (scenario) {
      dispatch(setExploreScenario(scenario));
    });
  };
};

var fetchCompleted = function fetchCompleted() {
  return function (dispatch, getState) {
    var query = {
      sortBy: 'CREATED_ON',
      sortAscending: false,
      status: 'COMPLETED'
    };
    return dispatch(fetchSavings(query));
  };
};

var querySavingsScenarios = function querySavingsScenarios() {
  return function (dispatch, getState) {
    return dispatch(fetchSavings(getState().savings.query)).then(function (res) {
      dispatch(setQuery({ total: res.total }));
      return res.scenarios || [];
    }).then(function (scenarios) {
      return dispatch(setSavingsScenarios(scenarios));
    });
  };
};

var fetchAllAreas = function fetchAllAreas() {
  return function (dispatch, getState) {
    dispatch(getAreaGroups()).then(function (groups) {
      return Promise.all(groups.map(function (group) {
        return dispatch(getAreas(group.key));
      })).then(function (areas) {
        return dispatch(setAreas(areas));
      });
    });
  };
};

var setQueryAndFetch = function setQueryAndFetch(query) {
  return function (dispatch, getState) {
    dispatch(setQuery(query));
    return dispatch(querySavingsScenarios());
  };
};

module.exports = {
  addSavingsScenario: addSavingsScenario,
  refreshSavingsScenario: refreshSavingsScenario,
  removeSavingsScenario: removeSavingsScenario,
  confirmRemoveScenario: confirmRemoveScenario,
  setSearchFilter: setSearchFilter,
  querySavingsScenarios: querySavingsScenarios,
  fetchCompleted: fetchCompleted,
  setQuery: setQuery,
  setQueryAndFetch: setQueryAndFetch,
  fetchAllAreas: fetchAllAreas,
  fetchSavingsScenario: fetchSavingsScenario,
  exploreScenariosAllClusters: exploreScenariosAllClusters
};

},{"../api/savings":473,"../constants/SavingsActionTypes":586,"../helpers/common":595,"./MapActions":441}],447:[function(require,module,exports){
'use strict';

var schedulerAPI = require('../api/scheduler');
var types = require('../constants/SchedulerActionTypes');

var _jobChangeIndex = function _jobChangeIndex(index) {
  return {
    type: types.JOB_CHANGE_INDEX,
    index: index
  };
};

var jobRequestInitialize = function jobRequestInitialize() {
  return {
    type: types.JOB_REQUEST
  };
};

var jobRequestSuccess = function jobRequestSuccess(response) {
  return {
    type: types.JOB_RESPONSE,
    success: true,
    errors: response.errors,
    total: response.total,
    items: response.jobs,
    index: response.index,
    size: response.size
  };
};

var jobRequestFailure = function jobRequestFailure(errors) {
  return {
    type: types.JOB_RESPONSE,
    success: false,
    errors: errors,
    total: 0,
    items: [],
    index: 0,
    size: 0
  };
};

var _executionChangeIndex = function _executionChangeIndex(index) {
  return {
    type: types.EXECUTION_CHANGE_INDEX,
    index: index
  };
};

var executionRequestInitialize = function executionRequestInitialize() {
  return {
    type: types.EXECUTION_REQUEST
  };
};

var executionRequestSuccess = function executionRequestSuccess(response) {
  return {
    type: types.EXECUTION_RESPONSE,
    success: true,
    errors: response.errors,
    total: response.total,
    items: response.executions,
    index: response.index,
    size: response.size
  };
};

var executionRequestFailure = function executionRequestFailure(errors) {
  return {
    type: types.EXECUTION_RESPONSE,
    success: false,
    errors: errors,
    total: 0,
    items: [],
    index: 0,
    size: 0
  };
};

var executionFilterByJobName = function executionFilterByJobName(jobName) {
  return {
    type: types.EXECUTION_FILTER_JOB_NAME,
    jobName: jobName === 'UNDEFINED' ? null : jobName
  };
};

var executionFilterByExitCode = function executionFilterByExitCode(exitCode) {
  return {
    type: types.EXECUTION_FILTER_EXIT_CODE,
    exitCode: exitCode
  };
};

var executionClearFilter = function executionClearFilter() {
  return {
    type: types.EXECUTION_FILTER_CLEAR
  };
};

var enableJobInitialize = function enableJobInitialize() {
  return {
    type: types.JOB_ENABLE_REQUEST
  };
};

var enableJobComplete = function enableJobComplete(success, errors) {
  return {
    type: types.JOB_ENABLE_RESPONSE,
    success: success,
    errors: errors
  };
};

var disableJobInitialize = function disableJobInitialize() {
  return {
    type: types.JOB_DISABLE_REQUEST
  };
};

var disableJobComplete = function disableJobComplete(success, errors) {
  return {
    type: types.JOB_DISABLE_RESPONSE,
    success: success,
    errors: errors
  };
};

var launchJobInitialize = function launchJobInitialize() {
  return {
    type: types.JOB_LAUNCH_REQUEST
  };
};

var launchJobComplete = function launchJobComplete(success, errors) {
  return {
    type: types.JOB_LAUNCH_RESPONSE,
    success: success,
    errors: errors
  };
};

var _getExecutions = function _getExecutions(dispatch, getState) {
  dispatch(executionRequestInitialize());

  return schedulerAPI.getExecutions(getState().scheduler.query.execution).then(function (response) {
    dispatch(executionRequestSuccess(response));
  }, function (errors) {
    dispatch(executionRequestFailure(errors));
  });
};

var _getJobs = function _getJobs(dispatch, getState) {
  dispatch(jobRequestInitialize());

  return schedulerAPI.getJobs().then(function (response) {
    dispatch(jobRequestSuccess(response));

    return _getExecutions(dispatch, getState);
  }, function (errors) {
    dispatch(jobRequestFailure(errors));
  });
};

var SchedulerActions = {

  launchJob: function launchJob(jobId) {
    return function (dispatch, getState) {
      dispatch(launchJobInitialize());

      return schedulerAPI.launchJob(jobId).then(function (response) {
        dispatch(launchJobComplete(response.success, response.errors));

        if (response.success) {
          return _getJobs(dispatch, getState);
        }
      }, function (error) {
        dispatch(launchJobComplete(false, error));
      });
    };
  },

  disableJob: function disableJob(jobId) {
    return function (dispatch, getState) {
      dispatch(disableJobInitialize());

      return schedulerAPI.disableJob(jobId).then(function (response) {
        dispatch(disableJobComplete(response.success, response.errors));

        if (response.success) {
          return _getJobs(dispatch, getState);
        }
      }, function (error) {
        dispatch(disableJobComplete(false, error));
      });
    };
  },

  enableJob: function enableJob(jobId) {
    return function (dispatch, getState) {
      dispatch(enableJobInitialize());

      return schedulerAPI.enableJob(jobId).then(function (response) {
        dispatch(enableJobComplete(response.success, response.errors));

        if (response.success) {
          return _getJobs(dispatch, getState);
        }
      }, function (error) {
        dispatch(enableJobComplete(false, error));
      });
    };
  },

  jobChangeIndex: function jobChangeIndex(index) {
    return _jobChangeIndex(index);
  },

  getJobs: function getJobs() {
    return function (dispatch, getState) {
      return _getJobs(dispatch, getState);
    };
  },

  executionChangeIndex: function executionChangeIndex(index) {
    return function (dispatch, getState) {
      dispatch(_executionChangeIndex(index));

      return _getExecutions(dispatch, getState);
    };
  },

  getExecutions: function getExecutions() {
    return function (dispatch, getState) {
      dispatch(executionRequestInitialize());

      return _getExecutions(dispatch, getState);
    };
  },

  filterExecutionByJobName: function filterExecutionByJobName(jobName) {
    return function (dispatch, getState) {
      dispatch(executionFilterByJobName(jobName));

      dispatch(executionRequestInitialize());

      return _getExecutions(dispatch, getState);
    };
  },

  filterExecutionByExitCode: function filterExecutionByExitCode(exitCode) {
    return function (dispatch, getState) {
      dispatch(executionFilterByExitCode(exitCode));

      dispatch(executionRequestInitialize());

      return _getExecutions(dispatch, getState);
    };
  },

  clearExecutionFilter: function clearExecutionFilter() {
    return function (dispatch, getState) {
      dispatch(executionClearFilter());

      dispatch(executionRequestInitialize());

      return _getExecutions(dispatch, getState);
    };
  }

};

module.exports = SchedulerActions;

},{"../api/scheduler":474,"../constants/SchedulerActionTypes":587}],448:[function(require,module,exports){
'use strict';

var sessionAPI = require('../api/session');
var types = require('../constants/ActionTypes');

var requestedLogin = function requestedLogin() {
  return {
    type: types.USER_REQUESTED_LOGIN
  };
};

var receivedLogin = function receivedLogin(status, errors, roles, profile) {
  return {
    type: types.USER_RECEIVED_LOGIN,
    status: status,
    errors: errors,
    roles: roles,
    profile: profile
  };
};

var requestedLogout = function requestedLogout() {
  return {
    type: types.USER_REQUESTED_LOGOUT
  };
};

var receivedLogout = function receivedLogout(status, errors) {
  return {
    type: types.USER_RECEIVED_LOGOUT,
    status: status,
    errors: errors
  };
};

var SessionActions = {
  login: function login(username, password) {
    return function (dispatch, getState) {
      dispatch(requestedLogin());

      return sessionAPI.login(username, password).then(function (response) {
        dispatch(receivedLogin(response.success, response.errors, response.roles, response.profile));
      }, function (error) {
        dispatch(receivedLogin(false, error, null));
      });
    };
  },

  logout: function logout() {
    return function (dispatch, getState) {
      dispatch(requestedLogout());

      return sessionAPI.logout().then(function (response) {
        dispatch(receivedLogout(response.success, response.errors));
      }, function (error) {
        dispatch(receivedLogout(false, error));
      });
    };
  },

  refreshProfile: function refreshProfile() {
    return function (dispatch, getState) {
      return sessionAPI.getProfile().then(function (response) {
        dispatch(receivedLogin(response.success, response.errors, response.roles, response.profile));
      }, function (error) {
        dispatch(receivedLogin(false, error, {}));
      });
    };
  },
  saveToProfile: function saveToProfile(data) {
    return function (dispatch, getState) {

      return sessionAPI.saveToProfile(data).then(function (response) {
        return response;
      }, function (errors) {
        console.error('Error caught on saveToProfile:', errors);
        return errors;
      });
    };
  }

};

module.exports = SessionActions;

},{"../api/session":475,"../constants/ActionTypes":571}],449:[function(require,module,exports){
'use strict';

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var moment = require('moment');
var types = require('../constants/UserActionTypes');
var userAPI = require('../api/user');
var adminAPI = require('../api/admin');
var queryAPI = require('../api/query');
var population = require('../model/population');

var _buildGroupQuery = function _buildGroupQuery(key, label, timezone) {
  var interval = [moment().subtract(30, 'days').valueOf(), moment().valueOf()];

  return {
    'query': {
      'timezone': timezone,
      'time': {
        'type': 'ABSOLUTE',
        'start': interval[0],
        'end': interval[1],
        'granularity': 'DAY'
      },
      'population': [{
        'type': 'GROUP',
        'label': label,
        'group': key
      }],
      'source': 'METER',
      'metrics': ['AVERAGE']
    }
  };
};

var _buildUserQuery = function _buildUserQuery(id, name, timezone, from, to) {
  return {
    'queries': [{
      'timezone': timezone,
      'time': {
        'type': 'ABSOLUTE',
        'start': from,
        'end': to,
        'granularity': 'DAY'
      },
      'population': [{
        'type': 'USER',
        'label': name,
        'users': [id]
      }],
      'overlap': null,
      'source': 'METER',
      'metrics': ['AVERAGE']
    }]
  };
};

var _buildPopulationQuery = function _buildPopulationQuery(population, timezone) {
  var interval = [moment().subtract(30, 'days').valueOf(), moment().valueOf()];
  return {
    "level": "week",
    "field": "volume",
    "overlap": null,
    "queries": [{
      "time": {
        "type": "ABSOLUTE",
        "granularity": "DAY",
        "start": interval[0],
        "end": interval[1]
      },
      "population": population,
      "source": "METER",
      "metrics": ["AVERAGE"]
    }]
  };
};

var _userChartRequest = function _userChartRequest(query, userKey) {
  return {
    type: types.USER_CHART_REQUEST,
    query: query,
    userKey: userKey
  };
};

var _userChartResponse = function _userChartResponse(success, errors, data, userKey) {
  var t = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : null;

  return {
    type: types.USER_CHART_RESPONSE,
    success: success,
    errors: errors,
    dataChart: data,
    userKey: userKey,
    timestamp: (t || new Date()).getTime()
  };
};

var _groupChartRequest = function _groupChartRequest(query, key) {
  return {
    type: types.USER_GROUP_CHART_REQUEST,
    query: query,
    groupKey: key
  };
};

var _groupChartResponse = function _groupChartResponse(success, errors, data, key) {
  var t = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : null;

  return {
    type: types.USER_GROUP_CHART_RESPONSE,
    success: success,
    errors: errors,
    dataChart: data,
    groupKey: key,
    timestamp: (t || new Date()).getTime()
  };
};

var requestedUser = function requestedUser() {
  return {
    type: types.USER_REQUEST_USER
  };
};

var receivedUser = function receivedUser(success, errors, user, meters, devices, configurations, groups, favorite) {
  return {
    type: types.USER_RECEIVE_USER_INFO,
    success: success,
    errors: errors,
    favorite: favorite,
    user: user,
    meters: meters,
    devices: devices,
    configurations: configurations,
    groups: groups
  };
};

var selectAmphiro = function selectAmphiro(userKey, deviceKey) {
  return {
    type: types.SELECT_AMPHIRO,
    userKey: userKey,
    deviceKey: deviceKey
  };
};

var requestedSessions = function requestedSessions(userKey, deviceKey) {
  return {
    type: types.AMPHIRO_REQUEST,
    userKey: userKey,
    deviceKey: deviceKey
  };
};

var receivedSessions = function receivedSessions(success, errors, devices) {
  var t = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;

  return {
    type: types.AMPHIRO_RESPONSE,
    success: success,
    errors: errors,
    devices: devices,
    timestamp: (t || new Date()).getTime()
  };
};

var requestedMeters = function requestedMeters(userKey) {
  return {
    type: types.METER_REQUEST,
    userKey: userKey
  };
};

var receivedMeters = function receivedMeters(success, errors, meters) {
  return {
    type: types.METER_RESPONSE,
    success: success,
    errors: errors,
    meters: meters
  };
};

var requestedGroup = function requestedGroup(groupKey, label) {
  return {
    type: types.GROUP_DATA_REQUEST,
    groupKey: groupKey,
    label: label
  };
};

var receivedGroup = function receivedGroup(success, errors, groupKey, meters) {
  return {
    type: types.GROUP_DATA_RESPONSE,
    success: success,
    errors: errors,
    groupKey: groupKey,
    data: meters.length === 0 ? null : meters[0]
  };
};

var requestedExport = function requestedExport(userKey, username) {
  return {
    type: types.EXPORT_REQUEST,
    userKey: userKey,
    username: username
  };
};

var receivedExport = function receivedExport(success, errors, token) {
  return {
    type: types.EXPORT_RESPONSE,
    success: success,
    errors: errors,
    token: token
  };
};

var UserActions = {

  showUser: function showUser(id, timezone) {
    return function (dispatch, getState) {
      dispatch(requestedUser());

      return userAPI.fetchUser(id).then(function (response) {
        dispatch(receivedUser(response.success, response.errors, response.user, response.meters, response.devices, response.configurations, response.groups, response.favorite));

        var interval = getState().user.interval;
        var query = _buildUserQuery(id, name, timezone, interval[0].toDate().getTime(), interval[1].toDate().getTime());
        dispatch(_userChartRequest(query, id));

        if (response.meters.length > 0) {
          var promises = [];

          var name = response.user.fullname;

          promises.push(queryAPI.queryMeasurements({ query: query.queries[0] }));

          Promise.all(promises).then(function (res) {
            var source = query.queries[0].source; //source is same for all queries
            var resAll = [];

            var _loop = function _loop(m) {
              if (res[m].errors.length) {
                throw 'The request is rejected: ' + res[m].errors[0].description;
              }
              resultSets = res[m].meters;
              res1 = (resultSets || []).map(function (rs) {
                var g = new population.User(id, rs.label);
                g.name = name;

                //sort points on timestamp in order to handle pre-aggregated data.
                rs.points = _.orderBy(rs.points, 'timestamp', 'desc');

                var timespan1;
                if (rs.points.length !== 0) {
                  //Recalculate xAxis timespan based on returned data. (scale). If no data, keep timespan from query
                  timespan1 = [rs.points[rs.points.length - 1].timestamp, rs.points[0].timestamp];
                } else {
                  timespan1 = [query.queries[0].time.start, query.queries[0].time.end];
                }
                var res2;
                // Shape a normal timeseries result for requested metrics
                // Todo support other metrics (as client-side "average")
                res2 = query.queries[0].metrics.map(function (metric) {
                  return {
                    source: source,
                    timespan: timespan1,
                    granularity: query.queries[0].time.granularity,
                    metric: metric,
                    population: g,
                    forecast: m === 0 ? false : true, //first promise is actual data, second is forecast data
                    data: rs.points.map(function (p) {
                      return [p.timestamp, p.volume[metric]];
                    })
                  };
                });
                return _.flatten(res2);
              });


              resAll.push(_.flatten(res1));
            };

            for (var m = 0; m < res.length; m++) {
              var resultSets;
              var res1;

              _loop(m);
            }

            var success = res.every(function (x) {
              return x.success === true;
            });
            var errors = success ? [] : res[0].errors; //todo - return flattend array of errors?

            dispatch(_userChartResponse(success, errors, _.flatten(resAll), id));

            return _.flatten(resAll);
          });
        } else {
          dispatch(_userChartResponse(true, [], [], id)); //no meters available, return empty data.
        }
      }, function (error) {
        dispatch(receivedUser(false, error, null));
      });
    };
  },

  getGroupChart: function getGroupChart(group, name, timezone) {

    return function (dispatch, getState) {
      var promises = [];
      var query = _buildPopulationQuery(group, timezone);

      dispatch(_groupChartRequest(query, group[0].group)); //group[0].group -> group key

      promises.push(queryAPI.queryMeasurements({ query: query.queries[0] }));

      Promise.all(promises).then(function (res) {

        var source = query.queries[0].source; //source is same for all queries
        var resAll = [];

        var _loop2 = function _loop2(m) {
          if (res[m].errors.length) {
            throw 'The request is rejected: ' + res[m].errors[0].description;
          }
          resultSets = source == 'AMPHIRO' ? res[m].devices : res[m].meters;
          res1 = (resultSets || []).map(function (rs) {
            var _population$fromStrin = population.fromString(rs.label),
                _population$fromStrin2 = _slicedToArray(_population$fromStrin, 1),
                g = _population$fromStrin2[0];

            g.name = name;

            //sort points on timestamp in order to handle pre-aggregated data.
            rs.points = _.orderBy(rs.points, 'timestamp', 'desc');

            var timespan1;
            if (rs.points.length !== 0) {
              //Recalculate xAxis timespan based on returned data. (scale)
              timespan1 = [rs.points[rs.points.length - 1].timestamp, rs.points[0].timestamp];
            } else {
              timespan1 = [query.queries[0].time.start, query.queries[0].time.end];
            }

            // Shape a normal timeseries result for requested metrics
            // Todo support other metrics (as client-side "average")
            var res2 = query.queries[0].metrics.map(function (metric) {
              return {
                source: source,
                timespan: timespan1,
                granularity: query.queries[0].time.granularity,
                metric: metric,
                population: g,
                forecast: m === 0 ? false : true, //first promise is actual data, second is forecast data
                data: rs.points.map(function (p) {
                  return [p.timestamp, p.volume[metric]];
                })
              };
            });
            return _.flatten(res2);
          });

          resAll.push(_.flatten(res1));
        };

        for (var m = 0; m < res.length; m++) {
          var resultSets;
          var res1;

          _loop2(m);
        }

        var success = res.every(function (x) {
          return x.success === true;
        });
        var errors = success ? [] : res[0].errors; //todo - return flattend array of errors?

        dispatch(_groupChartResponse(success, errors, _.flatten(resAll), group[0].group));

        return _.flatten(resAll);
      });
    };
  },

  getSessions: function getSessions(userKey, deviceKey) {
    return function (dispatch, getState) {
      var data = getState().user.data;

      if (data && data.devices) {
        dispatch(selectAmphiro(userKey, deviceKey));

        dispatch(receivedSessions(true, [], data.devices));
      } else {
        dispatch(requestedSessions(userKey, deviceKey));

        return adminAPI.getSessions(userKey).then(function (response) {
          dispatch(receivedSessions(response.success, response.errors, response.devices));
        }, function (error) {
          dispatch(receivedSessions(false, error, null));
        });
      }
    };
  },

  getMeters: function getMeters(userKey) {
    return function (dispatch, getState) {
      dispatch(requestedMeters(userKey));

      return adminAPI.getMeters(userKey).then(function (response) {
        dispatch(receivedMeters(response.success, response.errors, response.series));
      }, function (error) {
        dispatch(receivedMeters(false, error, null));
      });
    };
  },

  showFavouriteAccountForm: function showFavouriteAccountForm(accountId) {
    return {
      type: types.USER_SHOW_FAVOURITE_ACCOUNT_FORM,
      accountId: accountId
    };
  },

  hideFavouriteAccountForm: function hideFavouriteAccountForm() {
    return {
      type: types.USER_HIDE_FAVOURITE_ACCOUNT_FORM
    };
  },

  clearGroupSeries: function clearGroupSeries() {
    return {
      type: types.GROUP_DATA_CLEAR
    };
  },

  getGroupSeries: function getGroupSeries(groupKey, label, timezone) {
    return function (dispatch, getState) {
      dispatch(requestedGroup(groupKey, label));

      var query = _buildGroupQuery(groupKey, label, timezone);

      return queryAPI.queryMeasurements(query).then(function (response) {
        if (response.success) {
          dispatch(receivedGroup(response.success, response.errors, groupKey, response.meters));
        } else {
          dispatch(receivedGroup(response.success, response.errors, groupKey, []));
        }
      }, function (error) {
        dispatch(receivedGroup(false, error, null, null));
      });
    };
  },

  exportData: function exportData(userKey, username) {
    return function (dispatch, getState) {
      dispatch(requestedExport(userKey, username));

      return adminAPI.exportUserData(userKey).then(function (response) {
        dispatch(receivedExport(response.success, response.errors, response.token));

        var link = document.createElement('a');
        link.href = '/action/data/download/' + response.token;
        link.download = 'user-export-data.zip';
        document.body.appendChild(link);
        link.click();
        document.body.removeChild(link);
      }, function (error) {
        dispatch(receivedExport(false, error, null));
      });
    };
  },

  addFavorite: function addFavorite(userKey) {
    return function (dispatch, getState) {
      dispatch({
        type: types.ADD_FAVORITE_REQUEST,
        userKey: userKey
      });

      return userAPI.addFavorite(userKey).then(function (response) {
        dispatch({
          type: types.ADD_FAVORITE_RESPONSE,
          success: response.success,
          errors: response.errors
        });
      }, function (error) {
        dispatch({
          type: types.ADD_FAVORITE_RESPONSE,
          success: false,
          errors: error
        });
      });
    };
  },

  removeFavorite: function removeFavorite(userKey) {
    return function (dispatch, getState) {
      dispatch({
        type: types.REMOVE_FAVORITE_REQUEST,
        userKey: userKey
      });

      return userAPI.removeFavorite(userKey).then(function (response) {
        dispatch({
          type: types.REMOVE_FAVORITE_RESPONSE,
          success: response.success,
          errors: response.errors
        });
      }, function (error) {
        dispatch({
          type: types.REMOVE_FAVORITE_RESPONSE,
          success: false,
          errors: error
        });
      });
    };
  },

  showAmphiroConfig: function showAmphiroConfig(activeDevice) {
    return {
      type: types.AMPHIRO_CONFIG_SHOW,
      activeDevice: activeDevice
    };
  },

  hideAmphiroConfig: function hideAmphiroConfig() {
    return {
      type: types.AMPHIRO_CONFIG_HIDE
    };
  }

};

module.exports = UserActions;

},{"../api/admin":459,"../api/query":472,"../api/user":476,"../constants/UserActionTypes":589,"../model/population":602,"moment":"moment"}],450:[function(require,module,exports){
'use strict';

var types = require('../constants/UserCatalogActionTypes');

var userAPI = require('../api/user');
var groupAPI = require('../api/group');
var queryAPI = require('../api/query');
var population = require('../model/population');

var _buildUserQuery = function _buildUserQuery(id, name, timezone, from, to) {
  return {
    'queries': [{
      'timezone': timezone,
      'time': {
        'type': 'ABSOLUTE',
        'start': from,
        'end': to,
        'granularity': 'DAY'
      },
      'population': [{
        'type': 'USER',
        'label': name,
        'users': [id]
      }],
      'overlap': null,
      'source': 'METER',
      'metrics': ['SUM'] }]
  };
};

var getAccountsInit = function getAccountsInit() {
  return {
    type: types.USER_CATALOG_REQUEST_INIT
  };
};

var getAccountsComplete = function getAccountsComplete(success, errors, total, accounts, index, size) {
  return {
    type: types.USER_CATALOG_REQUEST_COMPLETE,
    success: success,
    errors: errors,
    total: total,
    accounts: accounts,
    index: index,
    size: size
  };
};

var _changeIndex = function _changeIndex(index) {
  return {
    type: types.USER_CATALOG_CHANGE_INDEX,
    index: index
  };
};

var toggleFavorite = function toggleFavorite() {
  return {
    type: types.USER_CATALOG_FILTER_FAVORITE
  };
};

var _clearFilter = function _clearFilter() {
  return {
    type: types.USER_CATALOG_FILTER_CLEAR
  };
};

var _setGeometry = function _setGeometry(geometry) {
  return {
    type: types.USER_CATALOG_SET_SEARCH_GEOMETRY,
    geometry: geometry
  };
};

var _userChartRequest = function _userChartRequest(query, userKey) {
  return {
    type: types.USER_CATALOG_CHART_REQUEST,
    query: query,
    userKey: userKey
  };
};

var _userChartResponse = function _userChartResponse(success, errors, data, userKey) {
  var t = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : null;

  return {
    type: types.USER_CATALOG_CHART_RESPONSE,
    success: success,
    errors: errors,
    dataChart: data,
    userKey: userKey,
    timestamp: (t || new Date()).getTime()
  };
};

var _getAccounts = function _getAccounts(dispatch, getState) {
  dispatch(getAccountsInit());

  return userAPI.getAccounts(getState().userCatalog.query).then(function (response) {
    dispatch(getAccountsComplete(response.success, response.errors, response.total, response.accounts, response.index, response.size));
  }, function (error) {
    dispatch(getAccountsComplete(false, error));
  });
};

var UserCatalogActionCreators = {

  changeIndex: function changeIndex(index) {
    return function (dispatch, getState) {
      dispatch(_changeIndex(index));

      return userAPI.getAccounts(getState().userCatalog.query).then(function (response) {
        dispatch(getAccountsComplete(response.success, response.errors, response.total, response.accounts, response.index, response.size));
      }, function (error) {
        dispatch(getAccountsComplete(false, error));
      });
    };
  },

  getAccounts: function getAccounts() {
    return function (dispatch, getState) {
      return _getAccounts(dispatch, getState);
    };
  },

  filterSerial: function filterSerial(serial) {
    return {
      type: types.USER_CATALOG_FILTER_SERIAL,
      serial: serial
    };
  },

  filterText: function filterText(text) {
    return {
      type: types.USER_CATALOG_FILTER_TEXT,
      text: text
    };
  },

  toggleFilterFavorite: function toggleFilterFavorite() {
    return function (dispatch, getState) {
      dispatch(toggleFavorite());

      return _getAccounts(dispatch, getState);
    };
  },

  clearFilter: function clearFilter() {
    return function (dispatch, getState) {
      dispatch(_clearFilter());

      return _getAccounts(dispatch, getState);
    };
  },

  getUserChart: function getUserChart(id, name, timezone) {
    return function (dispatch, getState) {

      var promises = [];

      var interval = getState().userCatalog.interval;

      var query = _buildUserQuery(id, name, timezone, interval[0].toDate().getTime(), interval[1].toDate().getTime());

      dispatch(_userChartRequest(query, id));

      promises.push(queryAPI.queryMeasurements({ query: query.queries[0] }));

      Promise.all(promises).then(function (res) {
        var source = query.queries[0].source; //source is same for all queries
        var resAll = [];

        var _loop = function _loop(m) {
          if (res[m].errors.length) {
            throw 'The request is rejected: ' + res[m].errors[0].description;
          }
          resultSets = source == 'AMPHIRO' ? res[m].devices : res[m].meters;
          res1 = (resultSets || []).map(function (rs) {
            var g = new population.User(id, rs.label);

            //sort points on timestamp in order to handle pre-aggregated data.
            rs.points = _.orderBy(rs.points, 'timestamp', 'desc');

            var timespan1;
            if (rs.points.length !== 0) {
              //Recalculate xAxis timespan based on returned data. (scale). If no data, keep timespan from query
              timespan1 = [rs.points[rs.points.length - 1].timestamp, rs.points[0].timestamp];
            } else {
              timespan1 = [query.queries[0].time.start, query.queries[0].time.end];
            }
            var res2;
            // Shape a normal timeseries result for requested metrics
            // Todo support other metrics (as client-side "average")
            res2 = query.queries[0].metrics.map(function (metric) {
              return {
                source: source,
                timespan: timespan1,
                granularity: query.queries[0].time.granularity,
                metric: metric,
                population: g,
                forecast: m === 0 ? false : true, //first promise is actual data, second is forecast data
                data: rs.points.map(function (p) {
                  return [p.timestamp, p.volume[metric]];
                })
              };
            });
            return _.flatten(res2);
          });

          resAll.push(_.flatten(res1));
        };

        for (var m = 0; m < res.length; m++) {
          var resultSets;
          var res1;

          _loop(m);
        }

        var success = res.every(function (x) {
          return x.success === true;
        });
        var errors = success ? [] : res[0].errors; //todo - return flattend array of errors?

        dispatch(_userChartResponse(success, errors, _.flatten(resAll), id));

        return _.flatten(resAll);
      });
    };
  },

  clearChart: function clearChart() {
    return {
      type: types.USER_CATALOG_CLEAR_CHART
    };
  },

  setSearchModeText: function setSearchModeText() {
    return {
      type: types.USER_CATALOG_SET_SEARCH_MODE,
      search: 'text'
    };
  },

  setSearchModeMap: function setSearchModeMap() {
    return {
      type: types.USER_CATALOG_SET_SEARCH_MODE,
      search: 'map'
    };
  },

  setGeometry: function setGeometry(geometry) {
    return function (dispatch, getState) {
      dispatch(_setGeometry(geometry));

      dispatch(getAccountsInit());

      return userAPI.getAccounts(getState().userCatalog.query).then(function (response) {
        dispatch(getAccountsComplete(response.success, response.errors, response.total, response.accounts, response.index, response.size));
      }, function (error) {
        dispatch(getAccountsComplete(false, error));
      });
    };
  },

  addFavorite: function addFavorite(userKey) {
    return function (dispatch, getState) {
      dispatch({
        type: types.USER_CATALOG_ADD_FAVORITE_REQUEST,
        userKey: userKey
      });

      return userAPI.addFavorite(userKey).then(function (response) {
        dispatch({
          type: types.USER_CATALOG_ADD_FAVORITE_RESPONSE,
          success: response.success,
          errors: response.errors,
          userKey: userKey,
          favorite: true
        });
      }, function (error) {
        dispatch({
          type: types.USER_CATALOG_ADD_FAVORITE_RESPONSE,
          success: false,
          errors: error
        });
      });
    };
  },

  removeFavorite: function removeFavorite(userKey) {
    return function (dispatch, getState) {
      dispatch({
        type: types.USER_CATALOG_REMOVE_FAVORITE_REQUEST,
        userKey: userKey
      });

      return userAPI.removeFavorite(userKey).then(function (response) {
        dispatch({
          type: types.USER_CATALOG_REMOVE_FAVORITE_RESPONSE,
          success: response.success,
          errors: response.errors,
          userKey: userKey,
          favorite: false
        });
        if (getState().userCatalog.query.favorite) {
          return _getAccounts(dispatch, getState);
        }
      }, function (error) {
        dispatch({
          type: types.USER_CATALOG_REMOVE_FAVORITE_RESPONSE,
          success: false,
          errors: error
        });
      });
    };
  },

  setSelectionMode: function setSelectionMode(enabled) {
    return {
      type: types.USER_CATALOG_CREATE_BAG_OF_CONSUMER,
      enabled: enabled
    };
  },

  discardBagOfConsumers: function discardBagOfConsumers() {
    return {
      type: types.USER_CATALOG_DISCARD_BAG_OF_CONSUMER
    };
  },

  saveBagOfConsumers: function saveBagOfConsumers(title, members) {
    return function (dispatch, getState) {
      dispatch({
        type: types.USER_CATALOG_SAVE_BAG_OF_CONSUMER_REQUEST
      });

      return groupAPI.create(title, members).then(function (response) {
        dispatch({
          type: types.USER_CATALOG_SAVE_BAG_OF_CONSUMER_RESPONSE,
          success: response.success,
          errors: response.errors
        });
      }, function (error) {
        dispatch({
          type: types.USER_CATALOG_SAVE_BAG_OF_CONSUMER_RESPONSE,
          success: false,
          errors: error
        });
      });
    };
  },

  toggleConsumer: function toggleConsumer(id) {
    return {
      type: types.USER_CATALOG_TOGGLE_CONSUMER,
      id: id
    };
  }

};

module.exports = UserCatalogActionCreators;

},{"../api/group":466,"../api/query":472,"../api/user":476,"../constants/UserCatalogActionTypes":590,"../model/population":602}],451:[function(require,module,exports){
'use strict';

var types = require('../constants/ActionTypes');

var ViewportActions = {
  resize: function resize(width, height) {
    return {
      type: types.VIEWPORT_SET_SIZE,
      width: width,
      height: height
    };
  }
};

module.exports = ViewportActions;

},{"../constants/ActionTypes":571}],452:[function(require,module,exports){
'use strict';

var _ = require('lodash');

var ActionTypes = require('../constants/ActionTypes');

var actions = {

  // Plain actions

  setField: function setField(field) {
    return {
      type: ActionTypes.charting.SET_FIELD,
      field: field
    };
  },

  setReportUnchecked: function setReportUnchecked(level, reportName) {
    return {
      type: ActionTypes.charting.SET_REPORT,
      level: level,
      reportName: reportName
    };
  },

  // Thunk actions

  setReport: function setReport(level, reportName) {
    return function (dispatch, getState) {
      // Because not all combinations of (level, reportName) are valid,
      // we adjust reportName (if needed) to the given level.

      var reportsForLevel = getState().config.reports.byType.measurements.levels[level].reports;
      if (!(reportName in reportsForLevel)) {
        reportName = _.first(_.keys(reportsForLevel));
      }

      return dispatch(actions.setReportUnchecked(level, reportName));
    };
  }

};

module.exports = actions;

},{"../constants/ActionTypes":571,"lodash":"lodash"}],453:[function(require,module,exports){
'use strict';

var ActionTypes = require('../constants/ActionTypes');

var actions = {

  // Plain actions

  setConfiguration: function setConfiguration() {
    return {
      type: ActionTypes.config.reports.SET_CONFIGURATION
    };
  },

  // Thunk actions

  configure: function configure() {
    return function (dispatch, getState) {
      // There are no async parts for configuration of reports
      dispatch(actions.setConfiguration());
      return Promise.resolve();
    };
  }
};

module.exports = actions;

},{"../constants/ActionTypes":571}],454:[function(require,module,exports){
'use strict';

var _ = require('lodash');
var sprintf = require('sprintf');

var ActionTypes = require('../constants/ActionTypes');

var _require = require('../api/admin'),
    getGroups = _require.getGroups;

var actions = {

  // Plain actions

  requestConfiguration: function requestConfiguration() {
    return {
      type: ActionTypes.config.utility.REQUEST_CONFIGURATION
    };
  },

  setConfiguration: function setConfiguration(config) {
    return {
      type: ActionTypes.config.utility.SET_CONFIGURATION,
      config: config
    };
  },

  // Thunk actions

  configure: function configure() {
    return function (dispatch, getState) {
      var state = getState();

      if (!_.isEmpty(state.config.utility)) {
        console.warn('Configuration for utility is already present; Skipping');
        return Promise.resolve();
      }

      dispatch(actions.requestConfiguration());

      // Fetch all groups inside this utility
      return getGroups().then(function (res) {
        if (res.errors.length) {
          throw new Error(sprintf('Cannot configure utility: %s', _.first(res.errors).description));
        }

        var _$first = _.first(res.groups.filter(function (g) {
          return g.type == 'UTILITY';
        })),
            name = _$first.name,
            key = _$first.key;

        var clusters = res.groups.filter(function (g) {
          return g.utilityKey == key && g.type == 'CLUSTER';
        });

        var config = {
          name: name,
          key: key,
          clusters: clusters.map(function (c) {
            return {
              key: c.key,
              name: c.name,
              groups: c.segments.map(function (g) {
                return {
                  clusterKey: c.key,
                  key: g.key,
                  name: g.name,
                  size: g.size
                };
              })
            };
          })
        };

        dispatch(actions.setConfiguration(config));
      });
    };
  }
};

module.exports = actions;

},{"../api/admin":459,"../constants/ActionTypes":571,"lodash":"lodash","sprintf":"sprintf"}],455:[function(require,module,exports){
'use strict';

var actions = {

  utility: require('./config-utility'),

  reports: require('./config-reports'),

  // Thunk actions

  configure: function configure() {
    return function (dispatch, getState) {
      // This is a convenience action that wraps several config-* actions:
      // Gather all needed configuration for an (authenticated) user.
      var p1 = dispatch(actions.utility.configure());
      var p2 = dispatch(actions.reports.configure());
      return Promise.all([p1, p2]);
    };
  }
};

module.exports = actions;

},{"./config-reports":453,"./config-utility":454}],456:[function(require,module,exports){
'use strict';

var moment = require('moment');

var ActionTypes = require('../constants/ActionTypes');

var actions = {

  setup: function setup(source, field, now) {
    return {
      type: ActionTypes.overview.SETUP,
      source: source,
      field: field,
      now: now,
      requested: moment().valueOf()
    };
  }

};

module.exports = actions;

},{"../constants/ActionTypes":571,"moment":"moment"}],457:[function(require,module,exports){
'use strict';

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _ = require('lodash');
var moment = require('moment');
var sprintf = require('sprintf');
var ActionTypes = require('../constants/ActionTypes');

var computeKey = require('../reports').measurements.computeKey;

var TimeSpan = require('../model/timespan');
var population = require('../model/population');

var _require = require('../helpers/timestamps'),
    toUtcTime = _require.toUtcTime;

var _require2 = require('../service/query'),
    queryMeasurements = _require2.queryMeasurements;

var favouritesAPI = require('../api/favourites');
var adminAPI = require('../api/admin');

var addFavouriteRequest = function addFavouriteRequest() {
  return {
    type: ActionTypes.reports.measurements.ADD_FAVOURITE_REQUEST
  };
};

var addFavouriteResponse = function addFavouriteResponse(success, errors) {
  return {
    type: ActionTypes.reports.measurements.ADD_FAVOURITE_RESPONSE,
    success: success,
    errors: errors
  };
};

var _saveLayoutResponse = function _saveLayoutResponse(success, errors) {
  return {
    type: ActionTypes.reports.measurements.CHARTS_SAVE_LAYOUT_RESPONSE,
    success: success,
    errors: errors
  };
};

var actions = {

  initialize: function initialize(field, level, reportName, key) {
    var defaults = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {};
    return {
      type: ActionTypes.reports.measurements.INITIALIZE,
      field: field,
      level: level,
      reportName: reportName,
      key: key,
      source: defaults.source,
      timespan: defaults.timespan,
      population: defaults.population
    };
  },
  initMultipleQueries: function initMultipleQueries(field, level, reportName, key, multipleQueries, source) {
    if (source === 'AMPHIRO') {
      source = 'device';
    }
    return {
      type: ActionTypes.reports.measurements.INIT_MULTIPLE,
      field: field,
      level: level,
      reportName: reportName,
      key: key,
      source: source ? source : 'meter',
      multipleQueries: multipleQueries
    };
  },
  requestData: function requestData(field, level, reportName, key) {
    var t = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : null;
    return {
      type: ActionTypes.reports.measurements.REQUEST_DATA,
      field: field,
      level: level,
      reportName: reportName,
      key: key,
      timestamp: (t || new Date()).getTime()
    };
  },
  requestMultipleData: function requestMultipleData(field, level, reportName, key) {
    var t = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : null;
    return {
      type: ActionTypes.reports.measurements.REQUEST_MULTIPLE_DATA,
      field: field,
      level: level,
      reportName: reportName,
      key: key,
      timestamp: (t || new Date()).getTime()
    };
  },
  setData: function setData(field, level, reportName, key, data) {
    var t = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : null;
    return {
      type: ActionTypes.reports.measurements.SET_DATA,
      field: field,
      level: level,
      reportName: reportName,
      key: key,
      data: data,
      timestamp: (t || new Date()).getTime()
    };
  },
  setMultipleData: function setMultipleData(field, level, reportName, key, data) {
    var t = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : null;
    return {
      type: ActionTypes.reports.measurements.SET_MULTIPLE_DATA,
      field: field,
      level: level,
      reportName: reportName,
      key: key,
      data: data,
      timestamp: (t || new Date()).getTime()
    };
  },
  setDataError: function setDataError(field, level, reportName, key, errors) {
    var t = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : null;
    return {
      type: ActionTypes.reports.measurements.SET_DATA,
      field: field,
      level: level,
      reportName: reportName,
      key: key,
      errors: errors,
      timestamp: (t || new Date()).getTime()
    };
  },
  setMultipleDataError: function setMultipleDataError(field, level, reportName, key, errors) {
    var t = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : null;
    return {
      type: ActionTypes.reports.measurements.SET_DATA,
      field: field,
      level: level,
      reportName: reportName,
      key: key,
      errors: errors,
      timestamp: (t || new Date()).getTime()
    };
  },
  setTimespan: function setTimespan(field, level, reportName, key, timespan) {
    return {
      type: ActionTypes.reports.measurements.SET_TIMESPAN,
      field: field,
      level: level,
      reportName: reportName,
      key: key,
      timespan: timespan
    };
  },
  changeMultipleQueries: function changeMultipleQueries(multipleQueries) {
    return {
      type: ActionTypes.reports.measurements.CHANGE_MULTIPLE_QUERY,
      multipleQueries: multipleQueries
    };
  },

  setSource: function setSource(field, level, reportName, key, source) {
    return {
      type: ActionTypes.reports.measurements.SET_SOURCE,
      field: field,
      level: level,
      reportName: reportName,
      key: key,
      source: source
    };
  },

  setQuerySource: function setQuerySource(source) {
    return {
      type: ActionTypes.reports.measurements.SET_QUERY_SOURCE,
      source: source
    };
  },

  setPopulation: function setPopulation(field, level, reportName, key, population) {
    return {
      type: ActionTypes.reports.measurements.SET_POPULATION,
      field: field,
      level: level,
      reportName: reportName,
      key: key,
      population: population
    };
  },
  setOverlap: function setOverlap(overlap) {
    return {
      type: ActionTypes.reports.measurements.SET_OVERLAP,
      overlap: overlap
    };
  },
  addQuery: function addQuery(multipleQueries) {
    return {
      type: ActionTypes.reports.measurements.ADD_SERIES,
      multipleQueries: multipleQueries
    };
  },
  removeSeries: function removeSeries(multipleQueries) {
    return {
      type: ActionTypes.reports.measurements.REMOVE_SERIES,
      multipleQueries: multipleQueries
    };
  },
  addFavourite: function addFavourite(favourite) {
    return function (dispatch, getState) {
      dispatch(addFavouriteRequest());
      return favouritesAPI.addFavourite(favourite).then(function (response) {
        dispatch(addFavouriteResponse(response.success, response.errors));
      }, function (error) {
        dispatch(addFavouriteResponse(false, error));
      });
    };
  },
  updateFavourite: function updateFavourite(favourite, previousTitle) {
    return function (dispatch, getState) {
      dispatch(addFavouriteRequest());
      return favouritesAPI.updateFavourite(favourite).then(function (response) {
        dispatch(addFavouriteResponse(response.success, response.errors));

        if (response.success && previousTitle !== favourite.namedQuery.title) {
          //favourite title changed. Must update dashboard layout:

          return adminAPI.getLayout().then(function (response) {
            if (response.success) {

              var lays = JSON.parse(response.profile.configuration);
              lays.layout.forEach(function (component) {
                if (component.i === previousTitle) {
                  component.i = favourite.namedQuery.title;
                }
              });

              var layoutRequest = { "configuration": JSON.stringify({ "layout": lays.layout }) };
              return adminAPI.saveLayout(layoutRequest).then(function (response) {
                if (response.errors.length > 0) {
                  console.error(response.errors);
                }
              }, function (error) {
                dispatch(_saveLayoutResponse(false, error));
              });
            }
          }, function (error) {
            dispatch(_saveLayoutResponse(false, error));
          });
        }
      }, function (error) {
        dispatch(addFavouriteResponse(false, error));
      });
    };
  },
  // Complex actions: functions processed by thunk middleware

  refreshData: function refreshData(field, level, reportName, key) {
    return function (dispatch, getState) {
      var state = getState();

      var _state = state.reports.measurements;

      var config = state.config;
      var _config$reports$byTyp = config.reports.byType.measurements,
          metrics = _config$reports$byTyp.metrics,
          levels = _config$reports$byTyp.levels;


      var k = computeKey(field, level, reportName, key);
      var report = levels[level].reports[reportName];

      var _state$k = _state[k],
          ts = _state$k.timespan,
          source = _state$k.source,
          requested = _state$k.requested,
          target = _state$k.population;

      // Throttle requests

      var now = new Date();
      if (requested && now.getTime() - requested < 1e+3) {
        console.warn('Skipping refresh requests arriving too fast...');
        return Promise.resolve();
      }

      // Prepare population target
      if (!target) {
        // Assume target is the entire utility
        target = new population.Utility(config.utility.key, config.utility.name);
      } else if (target instanceof population.Cluster) {
        // Expand to all groups inside target cluster
        target = config.utility.clusters.find(function (c) {
          return c.key == target.key;
        }).groups.map(function (g) {
          return new population.ClusterGroup(target.key, g.key);
        });
      } else {
        console.assert(target instanceof population.Group, 'Expected an instance of population.Group');
      }

      // Prepare literal time range, re-order if needed
      var t0,
          t1,
          timezone = 'Etc/GMT';
      if (_.isString(ts)) {
        var _TimeSpan$fromName$to = TimeSpan.fromName(ts, 0).toRange();
        // Interpret this named range, as if you were at UTC+0


        var _TimeSpan$fromName$to2 = _slicedToArray(_TimeSpan$fromName$to, 2);

        t0 = _TimeSpan$fromName$to2[0];
        t1 = _TimeSpan$fromName$to2[1];
      } else {
        var _ts = _slicedToArray(ts, 2);
        // Set global timezone, move to UTC while keeping local time


        t0 = _ts[0];
        t1 = _ts[1];

        if (t0 > t1) {
          var t = t0;t0 = t1;t1 = t;
        }
        t0 = toUtcTime(t0);
        t1 = toUtcTime(t1);
      }
      console.assert(moment.isMoment(t0) && t0.isUTC() && moment.isMoment(t1) && t1.isUTC(), 'Expected 2 moment instances both flagged as UTC!');
      t1.add(1, level); // a closure time slot

      // Prepare the entire query
      var q = {
        granularity: report.granularity,
        timespan: [t0.valueOf(), t1.valueOf()],
        metrics: report.metrics,
        ranking: report.ranking,
        population: _.flatten([target])
      };

      // Dispatch, return promise
      dispatch(actions.requestData(field, level, reportName, key, now));
      var pq = queryMeasurements(source, field, q, { metrics: metrics, timezone: timezone }).then(function (data) {
        return dispatch(actions.setData(field, level, reportName, key, data));
      }, function (reason) {
        return console.error(sprintf('Cannot refresh data for %s: %s', k, reason)), dispatch(actions.setDataError(field, level, reportName, key, [reason]));
      });

      return pq;
    };
  },
  refreshMultipleData: function refreshMultipleData(field, level, reportName, key) {
    return function (dispatch, getState) {

      var state = getState();

      var _state = state.reports.measurements;
      var config = state.config;
      var _config$reports$byTyp2 = config.reports.byType.measurements,
          metrics = _config$reports$byTyp2.metrics,
          levels = _config$reports$byTyp2.levels;


      var report = levels[level].reports[reportName];

      var source = _state.source,
          requested = _state.requested;

      // Throttle requests

      var now = new Date();
      if (requested && now.getTime() - requested < 1e+3) {
        console.warn('Skipping refresh requests arriving too fast...');
        return Promise.resolve();
      }

      dispatch(actions.requestMultipleData(field, level, reportName, key, now));

      var queries = _state.multipleQueries;
      if (!queries) {
        return;
      }

      var promiseArray = [];
      for (var i = 0; i < queries.length; i++) {

        var tempQuery = queries[i].query;
        var target = tempQuery.population;
        var ts = tempQuery.timespan;

        // Prepare population target
        if (!target) {
          // Assume target is the entire utility
          target = new population.Utility(config.utility.key, config.utility.name);
        } else if (target instanceof population.Cluster) {
          // Expand to all groups inside target cluster
          target = config.utility.clusters.find(function (c) {
            return c.key == target.key;
          }).groups.map(function (g) {
            return new population.ClusterGroup(target.key, g.key);
          });
        } else {
          console.assert(target instanceof population.Group, 'Expected an instance of population.Group');
        }

        // Prepare literal time range, re-order if needed
        var t0, t1;
        if (_.isString(ts)) {
          var _TimeSpan$fromName$to3 = TimeSpan.fromName(ts, 0).toRange();
          // Interpret this named range, as if you were at UTC+0


          var _TimeSpan$fromName$to4 = _slicedToArray(_TimeSpan$fromName$to3, 2);

          t0 = _TimeSpan$fromName$to4[0];
          t1 = _TimeSpan$fromName$to4[1];
        } else {
          var _ts2 = _slicedToArray(ts, 2);
          // Set global timezone, move to UTC while keeping local time


          t0 = _ts2[0];
          t1 = _ts2[1];

          if (t0 > t1) {
            var t = t0;t0 = t1;t1 = t;
          }
          t0 = toUtcTime(t0);
          t1 = toUtcTime(t1);
        }
        console.assert(moment.isMoment(t0) && t0.isUTC() && moment.isMoment(t1) && t1.isUTC(), 'Expected 2 moment instances both flagged as UTC!');
        t1.add(1, level); // a closure time slot

        var q2 = {
          granularity: report.granularity,
          timespan: [t0.valueOf(), t1.valueOf()],
          metrics: report.metrics,
          ranking: report.ranking,
          population: _.flatten([target])
        };
        //var tim = queries[i].timezone;
        var tim = [t0.valueOf(), t1.valueOf()];

        var queryPromise = queryMeasurements(source, field, q2, { metrics: metrics, tim: tim });
        promiseArray.push(queryPromise);
      }

      Promise.all(promiseArray).then(function (data) {
        return dispatch(actions.setMultipleData(field, level, reportName, key, data));
      }, function (reason) {
        return console.error(sprintf('Cannot refresh data for %s: %s', key, reason)), dispatch(actions.setMultipleDataError(field, level, reportName, key, [reason]));
      });
      return queryPromise;
    };
  }
};

module.exports = actions;

},{"../api/admin":459,"../api/favourites":465,"../constants/ActionTypes":571,"../helpers/timestamps":598,"../model/population":602,"../model/timespan":603,"../reports":641,"../service/query":646,"lodash":"lodash","moment":"moment","sprintf":"sprintf"}],458:[function(require,module,exports){
'use strict';

var ActionTypes = require('../constants/ActionTypes');

var actions = {

  setReferenceTime: function setReferenceTime(t) {
    return {
      type: ActionTypes.trials.SET_REFERENCE_TIME,
      referenceTime: t
    };
  }
};

module.exports = actions;

},{"../constants/ActionTypes":571}],459:[function(require,module,exports){
'use strict';

var moment = require('moment');

var api = require('./base');

var AdminAPI = {
  getActivity: function getActivity() {
    return api.json('/action/admin/user/activity');
  },

  getSessions: function getSessions(userKey) {
    return api.json('/action/device/index/session/query', {
      userKey: userKey,
      deviceKey: null,
      type: 'SLIDING',
      length: 20
    });
  },

  getMeters: function getMeters(userKey) {
    var endDate = moment().valueOf();
    var startDate = moment().subtract(30, 'days').valueOf();

    return api.json('/action/meter/history', {
      userKey: userKey,
      granularity: 2,
      deviceKey: null,
      startDate: startDate,
      endDate: endDate
    });
  },

  exportUserData: function exportUserData(userKey) {
    return api.json('/action/data/export', {
      type: 'USER',
      userKey: userKey,
      deviceKeys: [],
      startDateTime: null,
      endDateTime: null,
      timezone: null
    });
  },

  getAllUtilities: function getAllUtilities() {
    return api.json('/action/utility/all');
  },

  createNewUser: function createNewUser(userInfo) {
    return api.json('/action/user/create', userInfo);
  },

  getGroups: function getGroups() {
    return api.json('/action/admin/group/query', {});
  },

  getCounters: function getCounters() {
    return api.json('/action/admin/counter');
  },

  saveLayout: function saveLayout(layout) {
    return api.json('/action/profile/save', layout);
  },

  getLayout: function getLayout() {
    return api.json('/action/profile/load');
  },

  changePassword: function changePassword(data) {
    return api.json('/action/user/password/change', data, 'POST');
  }

};

module.exports = AdminAPI;

},{"./base":461,"moment":"moment"}],460:[function(require,module,exports){
'use strict';

var api = require('./base');

var ManageAlertsAPI = {
  getAllUtilities: function getAllUtilities() {
    return api.json('/action/utility/current');
  },
  getTips: function getTips(locale) {
    return api.json('/action/tip/localized/' + locale);
  },
  saveActiveTips: function saveActiveTips(changedRows) {
    return api.json('/action/tip/status/save', changedRows.map(function (r) {
      return { id: r.id, active: r.active };
    }));
  },
  insertTip: function insertTip(tip) {
    return api.json('/action/tip/save', tip);
  },
  deleteTip: function deleteTip(tip) {
    return api.json('/action/tip/delete/' + tip.id, {});
  },
  getAllUtilityUsers: function getAllUtilityUsers() {
    return api.json('/action/utility/user/all');
  },
  getAnnouncements: function getAnnouncements() {
    return api.json('/action/announcement/history');
  },
  broadcastAnnouncement: function broadcastAnnouncement(users, announcement) {
    var receivers = [];
    for (var obj in users) {
      receivers.push({ accountId: users[obj].id, username: users[obj].username });
    }
    return api.json('/action/announcement/broadcast', { announcement: announcement, receivers: receivers });
  },
  getAllGroups: function getAllGroups() {
    return api.json('/action/groups');
  },
  getUsersOfGroup: function getUsersOfGroup(key) {
    return api.json('/action/group/members/' + key);
  },
  deleteAnnouncement: function deleteAnnouncement(announcement) {
    return api.json('/action/announcement/delete/' + announcement.id, {});
  },
  fetchAnnouncement: function fetchAnnouncement(announcement) {
    return api.json('/action/announcement/details/' + announcement.id);
  },
  getMessageStatistics: function getMessageStatistics(query) {
    return api.json('/action/recommendation/statistics', query);
  },
  getAlertReceivers: function getAlertReceivers(id, query) {
    return api.json('/action/alert/receivers/' + id, query);
  },
  getRecommendationReceivers: function getRecommendationReceivers(id, query) {
    return api.json('/action/recommendation/receivers/' + id, query);
  }
};

module.exports = ManageAlertsAPI;

},{"./base":461}],461:[function(require,module,exports){
'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var $ = require('jquery');
require('es6-promise').polyfill();

function updateCsrfToken(crsf) {
  $('meta[name=_csrf]').attr('content', crsf);
  $('input[name=_csrf]').val(crsf);
}

var _sendFile = function _sendFile(url, files, data) {
  var form = new FormData();

  for (var prop in data) {
    form.append(prop, data[prop]);
  }

  if (files) {
    for (var f = 0; f < files.length; f++) {
      form.append('files', files[f]);
    }
  }

  var request = {
    url: url,
    type: 'POST',
    data: form,
    enctype: 'multipart/form-data',
    processData: false,
    contentType: false,
    cache: false,
    beforeSend: function beforeSend(xhr) {
      xhr.setRequestHeader('X-CSRF-TOKEN', $('meta[name=_csrf]').attr('content'));
    }
  };

  return new Promise(function (resolve, reject) {
    $.ajax(request).done(function (data, textStatus, request) {
      updateCsrfToken(request.getResponseHeader('X-CSRF-TOKEN'));

      resolve(data);
    }).fail(function (jqXHR, textStatus, errorThrown) {
      updateCsrfToken(jqXHR.getResponseHeader('X-CSRF-TOKEN'));

      var status;

      switch (jqXHR.status) {
        case 401:
          if (jqXHR.getResponseHeader("X-Require-Authentication")) {
            document.cookie = 'daiad-utility-session=false; path=/;expires=Thu, 01 Jan 1970 00:00:01 GMT;';
          }
          break;
        case 400:
        case 403:
        case 404:
          status = jqXHR.status;
          break;
        default:
          status = 500;
          break;
      }

      var errors = [{
        code: 'Error.' + status,
        description: 'Error.' + status,
        details: errorThrown
      }];

      reject(errors);
    });
  });
};

var sendRequest = function sendRequest(url, data, contentType, method) {
  var request = {
    type: method || (data ? 'POST' : 'GET'),
    dataType: 'json',
    contentType: contentType,
    data: data,
    url: url,
    beforeSend: function beforeSend(xhr) {
      xhr.setRequestHeader('X-CSRF-TOKEN', $('meta[name=_csrf]').attr('content'));
    }
  };

  return new Promise(function (resolve, reject) {
    $.ajax(request).done(function (data, textStatus, request) {
      updateCsrfToken(request.getResponseHeader('X-CSRF-TOKEN'));

      resolve(data);
    }).fail(function (jqXHR, textStatus, errorThrown) {
      updateCsrfToken(jqXHR.getResponseHeader('X-CSRF-TOKEN'));

      var status;

      switch (jqXHR.status) {
        case 401:
          if (jqXHR.getResponseHeader("X-Require-Authentication")) {
            document.cookie = 'daiad-utility-session=false; path=/;expires=Thu, 01 Jan 1970 00:00:01 GMT;';
          }
          break;
        case 400:
        case 403:
        case 404:
          status = jqXHR.status;
          break;
        default:
          status = 500;
          break;
      }

      var errorCodeSuffix = status;

      if (jqXHR.responseJSON && jqXHR.responseJSON.errors && jqXHR.responseJSON.errors.length > 0) {
        errorCodeSuffix = jqXHR.responseJSON.errors[0].code;
      }

      var errors = [{
        code: 'Error.' + errorCodeSuffix,
        description: 'Error.' + errorCodeSuffix,
        details: errorThrown
      }];

      reject(errors);
    });
  });
};

var api = {
  submit: function submit(url, data) {
    if (data && (typeof data === 'undefined' ? 'undefined' : _typeof(data)) === 'object') {
      data._csrf = $('meta[name=_csrf]').attr('content');
    }

    return sendRequest(url, data, 'application/x-www-form-urlencoded; charset=UTF-8');
  },
  json: function json(url, data, method) {
    var serializedData = data;

    if (data && (typeof data === 'undefined' ? 'undefined' : _typeof(data)) === 'object') {
      serializedData = JSON.stringify(data);
    }

    return sendRequest(url, serializedData, 'application/json; charset=UTF-8', method);
  },
  sendFile: function sendFile(url, files, data) {
    return _sendFile(url, files, data);
  }
};

module.exports = api;

},{"es6-promise":"es6-promise","jquery":"jquery"}],462:[function(require,module,exports){
'use strict';

var api = require('./base');

var budgetAPI = {
  create: function create(data) {
    return api.json('/action/budget/', data, 'PUT');
  },
  remove: function remove(_ref) {
    var budgetKey = _ref.budgetKey;

    return api.json('/action/budget/' + budgetKey, null, 'DELETE');
  },
  activate: function activate(_ref2) {
    var budgetKey = _ref2.budgetKey;

    return api.json('/action/budget/' + budgetKey + '/activate', null, 'PUT');
  },
  deactivate: function deactivate(_ref3) {
    var budgetKey = _ref3.budgetKey;

    return api.json('/action/budget/' + budgetKey + '/deactivate', null, 'PUT');
  },
  schedule: function schedule(_ref4) {
    var budgetKey = _ref4.budgetKey,
        year = _ref4.year,
        month = _ref4.month;

    return api.json('/action/budget/compute/' + budgetKey + '/' + year + '/' + month, null, 'PUT');
  },
  find: function find(_ref5) {
    var budgetKey = _ref5.budgetKey;

    return api.json('/action/budget/' + budgetKey, null, 'GET');
  },
  query: function query(data) {
    return api.json('/action/budget/query', data);
  },
  exploreCluster: function exploreCluster(_ref6) {
    var budgetKey = _ref6.budgetKey,
        clusterKey = _ref6.clusterKey;

    return api.json('/action/budget/explore/cluster/' + budgetKey + '/' + clusterKey, null, 'GET');
  },
  exploreConsumer: function exploreConsumer(_ref7) {
    var budgetKey = _ref7.budgetKey,
        consumerKey = _ref7.consumerKey;

    return api.json('/action/budget/explore/consumer/' + budgetKey + '/' + consumerKey, null, 'GET');
  }

};

module.exports = budgetAPI;

},{"./base":461}],463:[function(require,module,exports){
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var api = require('./base');

var DataExportAPI = {

  getFiles: function getFiles() {
    var query = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    return api.json('/action/export/files', {
      query: _extends({}, query, {
        type: 'DATA_EXPORT'
      })
    });
  },

  getTrialFinalFiles: function getTrialFinalFiles() {
    return api.json('/action/export/files', {
      query: {
        type: 'DATA_EXPORT_TRIAL'
      }
    });
  }

};

module.exports = DataExportAPI;

},{"./base":461}],464:[function(require,module,exports){
'use strict';

var api = require('./base');

var DebugAPI = {

  createUser: function createUser(password) {
    return api.json('/action/debug/user/create', {
      password: password
    });
  },

  createAmphiro: function createAmphiro() {
    return api.json('/action/debug/amphiro/create');
  },

  generateAmphiroData: function generateAmphiroData(timezone, files) {
    return api.sendFile('/action/debug/amphiro/data/generate', files, {
      timezone: timezone,
      type: 'AMPHIRO_DATA'
    });
  }

};

module.exports = DebugAPI;

},{"./base":461}],465:[function(require,module,exports){
'use strict';

var api = require('./base');

var FavouritesAPI = {

  fetchFavouriteQueries: function fetchFavouriteQueries() {
    return api.json('/action/data/query/load');
  },
  addFavourite: function addFavourite(request) {
    return api.json('/action/data/query/store', request);
  },
  updateFavourite: function updateFavourite(request) {
    return api.json('/action/data/query/update', request);
  },
  deleteFavourite: function deleteFavourite(request) {
    return api.json('/action/data/query/delete', request);
  },
  pinFavourite: function pinFavourite(request) {
    return api.json('/action/data/query/pin', request);
  },
  unpinFavourite: function unpinFavourite(request) {
    return api.json('/action/data/query/unpin', request);
  }
};

module.exports = FavouritesAPI;

},{"./base":461}],466:[function(require,module,exports){
'use strict';

var api = require('./base');

var GroupAPI = {
  getGroup: function getGroup(groupKey) {
    return api.json('/action/group/' + groupKey);
  },

  getGroupMembers: function getGroupMembers(groupKey) {
    return api.json('/action/group/members/' + groupKey);
  },

  create: function create(title, members) {
    var data = {
      title: title,
      members: members
    };

    return api.json('/action/group', data, 'PUT');
  },

  remove: function remove(groupKey) {
    return api.json('/action/group/' + groupKey, null, 'DELETE');
  },

  getGroups: function getGroups(query) {
    return api.json('/action/group', query);
  },

  addFavorite: function addFavorite(groupKey) {
    return api.json('/action/group/favorite/' + groupKey, null, 'PUT');
  },

  removeFavorite: function removeFavorite(groupKey) {
    return api.json('/action/group/favorite/' + groupKey, null, 'DELETE');
  }
};

module.exports = GroupAPI;

},{"./base":461}],467:[function(require,module,exports){
'use strict';

var api = require('./base');

var LocaleAPI = {
	fetchMessages: function fetchMessages(locale) {
		return api.json('/assets/js/utility/i18n/' + locale + '.js');
	}
};

module.exports = LocaleAPI;

},{"./base":461}],468:[function(require,module,exports){
'use strict';

var api = require('./base');

var LoggingApi = {

  getEvents: function getEvents(query) {
    return api.json('/action/admin/logging/events', {
      query: query
    });
  }

};

module.exports = LoggingApi;

},{"./base":461}],469:[function(require,module,exports){
'use strict';

var api = require('./base');

var MapsAPI = {
  getMetersLocations: function getMetersLocations() {
    return api.json('/action/spatial/meters', null, 'GET');
  },
  getGroups: function getGroups() {
    return api.json('/action/spatial/group', null, 'GET');
  },
  getAreas: function getAreas(_ref) {
    var groupKey = _ref.groupKey;

    return api.json('/action/spatial/group/' + groupKey + '/area', null, 'GET');
  }
};

module.exports = MapsAPI;

},{"./base":461}],470:[function(require,module,exports){
'use strict';

var api = require('./base');

var ModeManagementAPI = {
	fetchUsers: function fetchUsers(filters) {
		return api.json('/action/profile/modes/list', filters);
	},

	fetchFilterOptions: function fetchFilterOptions() {
		return api.json('/action/profile/modes/filter/options');
	},

	saveModeChanges: function saveModeChanges(data) {
		return api.json('/action/profile/modes/save', data);
	},

	deactivateUser: function deactivateUser(user) {
		return api.json('/action/profile/deactivate', user);
	}
};

module.exports = ModeManagementAPI;

},{"./base":461}],471:[function(require,module,exports){
'use strict';

var api = require('./base');

var PasswordAPI = {

  reset: function reset(token, password) {
    return api.json('/action/user/password/reset/token/redeem', {
      token: token,
      password: password
    });
  }

};

module.exports = PasswordAPI;

},{"./base":461}],472:[function(require,module,exports){
'use strict';

var api = require('./base');

var QueryAPI = {
  queryMeasurements: function queryMeasurements(request) {
    request.query.usingPreAggregation = properties.dataApiUseAggregatedData || false;

    return api.json('/action/query', request);
  },
  queryForecast: function queryForecast(request) {
    request.query.usingPreAggregation = properties.dataApiUseAggregatedData || false;

    return api.json('/action/data/meter/forecast', request);
  }
};

module.exports = QueryAPI;

},{"./base":461}],473:[function(require,module,exports){
'use strict';

var api = require('./base');

var savingsAPI = {
  create: function create(data) {
    return api.json('/action/savings/', data, 'PUT');
  },
  refresh: function refresh(_ref) {
    var scenarioKey = _ref.scenarioKey;

    return api.json('/action/savings/refresh/' + scenarioKey, null, 'GET');
  },
  find: function find(_ref2) {
    var scenarioKey = _ref2.scenarioKey;

    return api.json('/action/savings/' + scenarioKey, null, 'GET');
  },
  query: function query(data) {
    return api.json('/action/savings/query', data);
  },
  explore: function explore(_ref3) {
    var scenarioKey = _ref3.scenarioKey,
        clusterKey = _ref3.clusterKey;

    return api.json('/action/savings/explore/' + scenarioKey + '/' + clusterKey, null, 'GET');
  },
  remove: function remove(_ref4) {
    var scenarioKey = _ref4.scenarioKey;

    return api.json('/action/savings/' + scenarioKey, null, 'DELETE');
  }
};

module.exports = savingsAPI;

},{"./base":461}],474:[function(require,module,exports){
'use strict';

var api = require('./base');

var SchedulerAPI = {

  getJobs: function getJobs() {
    return api.json('/action/scheduler/jobs');
  },

  getExecutions: function getExecutions(query) {
    return api.json('/action/scheduler/executions', {
      query: query
    });
  },

  disableJob: function disableJob(jobId) {
    return api.json('/action/scheduler/job/disable/' + jobId, null, "PUT");
  },

  enableJob: function enableJob(jobId) {
    return api.json('/action/scheduler/job/enable/' + jobId, null, "PUT");
  },

  launchJob: function launchJob(jobId) {
    return api.json('/action/scheduler/job/launch/' + jobId, null, "PUT");
  },

  viewExecutionMessage: function viewExecutionMessage(executionId) {
    return api.json('/action/scheduler/execution/' + executionId + '/message/', null);
  }

};

module.exports = SchedulerAPI;

},{"./base":461}],475:[function(require,module,exports){
'use strict';

var api = require('./base');

var SessionAPI = {
  login: function login(username, password) {
    return api.submit('/login?application=utility', { username: username, password: password });
  },
  logout: function logout() {
    return api.submit('/logout', {});
  },
  getProfile: function getProfile() {
    return api.json('/action/profile/load');
  },
  saveToProfile: function saveToProfile(data) {
    return api.json('/action/profile/save', data);
  }

};

module.exports = SessionAPI;

},{"./base":461}],476:[function(require,module,exports){
'use strict';

var api = require('./base');

var UserAPI = {

  getAccounts: function getAccounts(query) {
    return api.json('/action/user/search', {
      query: query
    });
  },

  fetchUser: function fetchUser(user_id) {
    return api.json('/action/user/' + user_id);
  },

  addFavorite: function addFavorite(userKey) {
    return api.json('/action/user/favorite/' + userKey, null, 'PUT');
  },

  removeFavorite: function removeFavorite(userKey) {
    return api.json('/action/user/favorite/' + userKey, null, 'DELETE');
  }
};

module.exports = UserAPI;

},{"./base":461}],477:[function(require,module,exports){
'use strict';

var _react2 = require('react');

var _react3 = _interopRequireDefault(_react2);

var _babelTransform = require('livereactload/babel-transform');

var _babelTransform2 = _interopRequireDefault(_babelTransform);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _components = {
  _component: {}
};

var _livereactloadBabelTransform2 = (0, _babelTransform2.default)({
  filename: '/home/daiad/Desktop/Development/home-web/utility/src/main/frontend/components/AlertDismissable.js',
  components: _components,
  locals: [],
  imports: [_react3.default]
});

function _wrapComponent(id) {
  return function (Component) {
    return _livereactloadBabelTransform2(Component, id);
  };
}

var React = require('react');
var FormattedMessage = require('react-intl').FormattedMessage;
var Alert = require('react-bootstrap').Alert;

var MessageAlert = _wrapComponent('_component')(React.createClass({
  displayName: 'MessageAlert',

  contextTypes: {
    intl: React.PropTypes.object
  },

  propTypes: {
    messages: React.PropTypes.array
  },

  getDefaultProps: function getDefaultProps() {
    return {
      show: true,
      messages: [],
      i18nNamespace: '',
      bsStyle: 'danger',
      title: 'Errors detected: ',
      format: 'paragraph',
      dismissFunc: null
    };
  },

  render: function render() {
    var self = this;

    if (!this.props.show || !this.props.messages || this.props.messages.length === 0) {
      return null;
    }

    var messages;
    var title = React.createElement(
      'h4',
      null,
      this.props.title
    );

    if (this.props.format === 'list') {
      messages = this.props.messages.map(function (m, index) {
        return React.createElement(
          'li',
          { key: m.code },
          React.createElement(FormattedMessage, { id: self.props.i18nNamespace + m.code })
        );
      });

      messages = React.createElement(
        'div',
        null,
        title,
        React.createElement(
          'ul',
          null,
          messages
        )
      );
    } else {
      messages = this.props.messages.map(function (m, index) {
        return React.createElement(
          'p',
          { key: m.code },
          React.createElement(FormattedMessage, { id: self.props.i18nNamespace + m.code })
        );
      });
    }

    if (this.props.dismissFunc) {
      return React.createElement(
        Alert,
        { bsStyle: this.props.bsStyle, onDismiss: this.props.dismissFunc },
        messages
      );
    } else {
      return React.createElement(
        Alert,
        { bsStyle: this.props.bsStyle },
        messages
      );
    }
  }
}));

module.exports = MessageAlert;

},{"livereactload/babel-transform":28,"react":"react","react-bootstrap":"react-bootstrap","react-intl":"react-intl"}],478:[function(require,module,exports){
'use strict';

var _react2 = require('react');

var _react3 = _interopRequireDefault(_react2);

var _babelTransform = require('livereactload/babel-transform');

var _babelTransform2 = _interopRequireDefault(_babelTransform);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _components = {
  _component: {}
};

var _livereactloadBabelTransform2 = (0, _babelTransform2.default)({
  filename: '/home/daiad/Desktop/Development/home-web/utility/src/main/frontend/components/CellCheckbox.js',
  components: _components,
  locals: [],
  imports: [_react3.default]
});

function _wrapComponent(id) {
  return function (Component) {
    return _livereactloadBabelTransform2(Component, id);
  };
}

var React = require('react');

var CellCheckbox = _wrapComponent('_component')(React.createClass({
  displayName: 'CellCheckbox',

  getDefaultProps: function getDefaultProps() {
    return {
      disabled: false,
      text: '',
      checked: false,
      onChange: null
    };
  },

  handleChange: function handleChange() {
    this.props.onUserClick(this.props.rowId, this.props.propertyName, this.props.checked);
  },

  render: function render() {
    var classNames = 'checkbox c-checkbox';
    if (this.props.draftFlag) {
      classNames = classNames + ' c-checkbox-warning';
    } else if (this.props.disabled) {
      classNames = classNames + ' c-checkbox-disabled';
    }

    if (this.props.text) {
      return React.createElement(
        'div',
        { className: classNames },
        React.createElement(
          'label',
          null,
          React.createElement('input', { type: 'checkbox',
            disabled: this.props.disabled ? "disabled" : false, checked: this.props.checked,
            ref: 'checkbox',
            onChange: this.handleChange
          }),
          React.createElement('span', { className: 'fa fa-check', style: { marginRight: 30 } }),
          ' ' + this.props.text
        )
      );
    }
    return React.createElement(
      'div',
      { className: classNames },
      React.createElement(
        'label',
        null,
        React.createElement('input', { type: 'checkbox',
          disabled: this.props.disabled ? "disabled" : false, checked: this.props.checked,
          ref: 'checkbox',
          onChange: this.handleChange
        }),
        React.createElement('span', { className: 'fa fa-check', style: { marginRight: 0 } })
      )
    );
  }
}));

module.exports = CellCheckbox;

},{"livereactload/babel-transform":28,"react":"react"}],479:[function(require,module,exports){
'use strict';

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

var React = require('react');
var Bootstrap = require('react-bootstrap');

var _require = require('react-intl'),
    FormattedMessage = _require.FormattedMessage;

var ReCAPTCHA = require('react-google-recaptcha');

var validatePassword = function validatePassword(username, password, confirmPassword) {
  if (!username) {
    throw new Error('noUsername');
  }
  if (!password) {
    throw new Error('noPassword');
  } else if (password !== confirmPassword) {
    throw new Error('passwordMismatch');
  } else if (password.length < 8) {
    throw new Error('passwordTooShort');
  }
  return Promise.resolve();
};

function ChangePasswordModal(props) {
  var _t = props._t,
      show = props.show,
      username = props.username,
      password = props.password,
      confirmPassword = props.confirmPassword,
      captcha = props.captcha,
      error = props.error,
      actions = _objectWithoutProperties(props, ['_t', 'show', 'username', 'password', 'confirmPassword', 'captcha', 'error']);

  var changePassword = actions.changePassword,
      hideChangePasswordModal = actions.hideChangePasswordModal,
      updateChangePasswordForm = actions.updateChangePasswordForm,
      setErrorChangePasswordForm = actions.setErrorChangePasswordForm;


  return React.createElement(
    Bootstrap.Modal,
    {
      animation: false,
      backdrop: 'static',
      show: show,
      onHide: hideChangePasswordModal
    },
    React.createElement(
      'form',
      {
        id: 'form-change-password',
        onSubmit: function onSubmit(e) {
          e.preventDefault();
          try {
            validatePassword(username, password, confirmPassword).then(function () {
              changePassword(username, password, captcha).then(function (result) {
                hideChangePasswordModal();
              }).catch(function (error) {
                setErrorChangePasswordForm('Error.' + error.message);
              });
            });
          } catch (error) {
            setErrorChangePasswordForm('ChangePasswordForm.Errors.' + error.message);
          }
        },
        autoComplete: 'form-change-password'
      },
      React.createElement(
        Bootstrap.Modal.Header,
        { closeButton: true },
        React.createElement(
          Bootstrap.Modal.Title,
          null,
          React.createElement(FormattedMessage, { id: 'ChangePasswordForm.title' }),
          React.createElement(
            'span',
            null,
            ' : ',
            username,
            ' '
          )
        )
      ),
      React.createElement(
        Bootstrap.Modal.Body,
        null,
        React.createElement(
          'div',
          null,
          React.createElement(Bootstrap.Input, {
            id: 'password',
            type: 'password',
            name: 'password',
            label: _t({ id: 'ChangePasswordForm.password' }),
            value: password,
            onChange: function onChange(e) {
              return updateChangePasswordForm({ password: e.target.value });
            },
            autoComplete: 'off'
          }),
          React.createElement(Bootstrap.Input, {
            id: 'password-confirm',
            type: 'password',
            name: 'password-confirm',
            label: _t({ id: 'ChangePasswordForm.password-confirm' }),
            value: confirmPassword,
            onChange: function onChange(e) {
              return updateChangePasswordForm({ confirmPassword: e.target.value });
            },
            autoComplete: 'off'
          }),
          React.createElement(
            'div',
            { className: 'form-group form-captcha' },
            React.createElement(ReCAPTCHA, {
              sitekey: properties.captchaKey,
              theme: 'light',
              onChange: function onChange(value) {
                return updateChangePasswordForm({ captcha: value });
              }
            })
          ),
          error && React.createElement(
            'p',
            { className: 'alert-danger', style: { padding: 10, borderRadius: 4 } },
            React.createElement(FormattedMessage, { id: error })
          )
        )
      ),
      React.createElement(
        Bootstrap.Modal.Footer,
        null,
        React.createElement(
          Bootstrap.Row,
          null,
          React.createElement(
            Bootstrap.Col,
            { xs: 6, className: 'text-left' },
            React.createElement(
              Bootstrap.Button,
              { onClick: hideChangePasswordModal },
              _t({ id: 'ChangePasswordForm.cancel' })
            )
          ),
          React.createElement(
            Bootstrap.Col,
            { xs: 6 },
            React.createElement(
              Bootstrap.Button,
              { bsStyle: 'success', type: 'submit' },
              _t({ id: 'ChangePasswordForm.update' })
            )
          )
        )
      )
    )
  );
}

module.exports = ChangePasswordModal;

},{"react":"react","react-bootstrap":"react-bootstrap","react-google-recaptcha":113,"react-intl":"react-intl"}],480:[function(require,module,exports){
(function (global){
'use strict';

var _react2 = require('react');

var _react3 = _interopRequireDefault(_react2);

var _babelTransform = require('livereactload/babel-transform');

var _babelTransform2 = _interopRequireDefault(_babelTransform);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _components = {
  _component: {}
};

var _livereactloadBabelTransform2 = (0, _babelTransform2.default)({
  filename: '/home/daiad/Desktop/Development/home-web/utility/src/main/frontend/components/Chart.js',
  components: _components,
  locals: [],
  imports: [_react3.default]
});

function _wrapComponent(id) {
  return function (Component) {
    return _livereactloadBabelTransform2(Component, id);
  };
}

var React = require('react');
var PortalMixin = require('./PortalMixin');
var echarts = (typeof window !== "undefined" ? window['echarts'] : typeof global !== "undefined" ? global['echarts'] : null);
var theme = require('./chart/themes/blue');
var clone = require('clone');

var Chart = _wrapComponent('_component')(React.createClass({
  displayName: 'Chart',

  contextTypes: {
    intl: React.PropTypes.object
  },

  mixins: [PortalMixin],

  getDefaultProps: function getDefaultProps() {
    return {
      type: 'line'
    };
  },

  onResize: function onResize() {
    this._chart.resize();
  },

  render: function render() {
    var _props = this.props,
        prefix = _props.prefix,
        style = _props.style;


    return React.createElement('div', { className: prefix + '-container', style: style });
  },

  componentDidMount: function componentDidMount() {
    this._chart = echarts.init(document.getElementById(this.getId()), this.props.theme || theme);

    var chartOptions = this.shapeData(this.props.type, this.props.options, this.props.data, this.context.intl);
    if (chartOptions) {
      this._chart.setOption(chartOptions, true);
    }
  },

  componentWillReceiveProps: function componentWillReceiveProps(nextProps, nextContext) {
    var chartOptions = this.shapeData(nextProps.type, nextProps.options, nextProps.data, nextContext.intl);

    if (this._chart && chartOptions) {
      this._chart.setOption(chartOptions, true);
    }
  },

  componentWillUnmount: function componentWillUnmount() {},

  getChart: function getChart() {
    return this._chart;
  },

  shapeData: function shapeData(type, options, data, intl) {
    if (!options && !data) {
      return null;
    }
    if (!data) {
      return options;
    }

    // Initialize
    var chartOptions = clone(options);

    if (!chartOptions.dataZoom) {
      chartOptions.dataZoom = {
        show: true,
        start: 0
      };
    }

    chartOptions.legend = {
      data: []
    };
    chartOptions.xAxis = [];
    chartOptions.yAxis = [];
    chartOptions.series = [];

    var getLabels = function getLabels(series) {
      return series.data.map(function (record) {
        var value = record[series.xAxis];
        if (value instanceof Date) {
          switch (chartOptions.dataZoom.format) {
            case 'day-hour':
              return intl.formatDate(value, { day: 'numeric', month: 'long', year: 'numeric' }) + ' ' + intl.formatTime(value, { hour: 'numeric', minute: 'numeric' });
            case 'day':
              return intl.formatDate(value, { day: 'numeric', month: 'long', year: 'numeric' });
          }
        }
        return value;
      });
    };

    var getValues = function getValues(series, decimalPlaces) {
      return series.data.map(function (record) {
        return record[series.yAxis].toFixed(decimalPlaces);
      });
    };

    for (var i = 0; i < data.series.length; i++) {
      var series = data.series[i];

      chartOptions.legend.data.push(series.legend);

      // Common configuration
      if (i === 0) {
        chartOptions.xAxis.push({
          type: 'category',
          data: getLabels(series),
          name: series.xAxisName || ''
        });

        chartOptions.yAxis.push({
          type: 'value',
          name: series.yAxisName || 'Volume',
          nameLocation: 'end',
          nameTextStyle: {
            color: '#000'
          }
        });
      }

      // Data series configuration
      var itemStyle = options.itemStyle || null;
      if (type === 'area') {
        itemStyle = itemStyle || {
          normal: {
            areaStyle: {
              type: 'default'
            }
          }
        };
      }

      // Point formatter configuration
      var tooltip = {
        show: true
      };
      if (series.formatter) {
        tooltip.formatter = series.formatter;
      }

      chartOptions.series.push({
        name: series.legend,
        type: type === 'area' ? 'line' : type,
        itemStyle: itemStyle,
        data: getValues(series, 0),
        tooltip: tooltip
      });
    }

    return chartOptions;
  }

}));

module.exports = Chart;

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"./PortalMixin":501,"./chart/themes/blue":513,"clone":"clone","livereactload/babel-transform":28,"react":"react"}],481:[function(require,module,exports){
'use strict';

var _react2 = require('react');

var _react3 = _interopRequireDefault(_react2);

var _babelTransform = require('livereactload/babel-transform');

var _babelTransform2 = _interopRequireDefault(_babelTransform);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _components = {
  _component: {}
};

var _livereactloadBabelTransform2 = (0, _babelTransform2.default)({
  filename: '/home/daiad/Desktop/Development/home-web/utility/src/main/frontend/components/Checkbox.js',
  components: _components,
  locals: [],
  imports: [_react3.default]
});

function _wrapComponent(id) {
  return function (Component) {
    return _livereactloadBabelTransform2(Component, id);
  };
}

var React = require('react');

var Checkbox = _wrapComponent('_component')(React.createClass({
  displayName: 'Checkbox',

  getDefaultProps: function getDefaultProps() {
    return {
      disabled: false,
      text: '',
      checked: false,
      onChange: null
    };
  },

  handleChange: function handleChange() {
    if (typeof this.props.onChange === 'function') {
      this.props.onChange(this.refs.checkbox.checked);
    }
    if (typeof this.props.onUserClick === 'function') {
      this.props.onUserClick(this.props.rowId, this.props.propertyName, this.refs.checkbox.defaultChecked);
    }
  },

  render: function render() {
    var classNames = 'checkbox c-checkbox';
    if (this.props.draftFlag) {
      classNames = classNames + ' c-checkbox-warning';
    } else if (this.props.disabled) {
      classNames = classNames + ' c-checkbox-disabled';
    }

    if (this.props.text) {
      return React.createElement(
        'div',
        { className: classNames },
        React.createElement(
          'label',
          null,
          React.createElement('input', { type: 'checkbox',
            disabled: this.props.disabled ? "disabled" : false, checked: this.props.checked,
            ref: 'checkbox',
            onChange: this.handleChange
          }),
          React.createElement('span', { className: 'fa fa-check', style: { marginRight: 30 } }),
          ' ' + this.props.text
        )
      );
    }
    return React.createElement(
      'div',
      { className: classNames },
      React.createElement(
        'label',
        null,
        React.createElement('input', { type: 'checkbox',
          disabled: this.props.disabled ? "disabled" : false, checked: this.props.checked,
          ref: 'checkbox',
          onChange: this.handleChange
        }),
        React.createElement('span', { className: 'fa fa-check', style: { marginRight: 0 } })
      )
    );
  }
}));

module.exports = Checkbox;

},{"livereactload/babel-transform":28,"react":"react"}],482:[function(require,module,exports){
'use strict';

var _react2 = require('react');

var _react3 = _interopRequireDefault(_react2);

var _babelTransform = require('livereactload/babel-transform');

var _babelTransform2 = _interopRequireDefault(_babelTransform);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _components = {
  _component: {}
};

var _livereactloadBabelTransform2 = (0, _babelTransform2.default)({
  filename: '/home/daiad/Desktop/Development/home-web/utility/src/main/frontend/components/Collapsible.js',
  components: _components,
  locals: [],
  imports: [_react3.default]
});

function _wrapComponent(id) {
  return function (Component) {
    return _livereactloadBabelTransform2(Component, id);
  };
}

var React = require('react');
var Panel = require('react-bootstrap').Panel;

var Collapsible = _wrapComponent('_component')(React.createClass({
  displayName: 'Collapsible',

  getDefaultProps: function getDefaultProps() {
    return {
      open: true
    };
  },

  render: function render() {
    return React.createElement(
      Panel,
      { bsClass: 'collapsible', collapsible: true, expanded: this.props.open },
      this.props.children
    );
  }
}));

module.exports = Collapsible;

},{"livereactload/babel-transform":28,"react":"react","react-bootstrap":"react-bootstrap"}],483:[function(require,module,exports){
'use strict';

var _react2 = require('react');

var _react3 = _interopRequireDefault(_react2);

var _babelTransform = require('livereactload/babel-transform');

var _babelTransform2 = _interopRequireDefault(_babelTransform);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _components = {
  _component: {}
};

var _livereactloadBabelTransform2 = (0, _babelTransform2.default)({
  filename: '/home/daiad/Desktop/Development/home-web/utility/src/main/frontend/components/Counter.js',
  components: _components,
  locals: [],
  imports: [_react3.default]
});

function _wrapComponent(id) {
  return function (Component) {
    return _livereactloadBabelTransform2(Component, id);
  };
}

var React = require('react');

var _require = require('react-router'),
    Link = _require.Link;

var FormattedMessage = require('react-intl').FormattedMessage;
var FormattedNumber = require('react-intl').FormattedNumber;

var Format = {
  Number: 'number',
  Currency: 'currency',
  Percent: 'percent',
  color: ''
};

var Counter = _wrapComponent('_component')(React.createClass({
  displayName: 'Counter',

  contextTypes: {
    intl: React.PropTypes.object
  },

  propTypes: {
    text: React.PropTypes.string,
    value: React.PropTypes.number,
    format: function format(props, propName, componentName) {
      if (!/number|currency|percent/.test(props[propName])) {
        return new Error('Validation failed!');
      }
    },
    color: React.PropTypes.string,
    variance: React.PropTypes.number,
    minusColor: React.PropTypes.string,
    plusColor: React.PropTypes.string,
    link: React.PropTypes.string
  },

  getDefaultProps: function getDefaultProps() {
    return {
      text: '',
      value: 0,
      format: Format.Number,
      color: '#5bc0de',
      variance: 0,
      minusColor: '#c0392b',
      plusColor: '#27ae60',
      link: ''
    };
  },

  render: function render() {
    var content,
        variance,
        footer,
        varianceText = '-';

    if (this.props.variance) {
      varianceText = React.createElement(FormattedNumber, { value: Math.abs(this.props.variance) });
    }
    if (this.props.variance !== null && this.props.variance !== 0) {
      if (this.props.variance > 0) {
        variance = React.createElement(
          'span',
          { style: { fontSize: 14 } },
          React.createElement('i', { className: 'fa fa-arrow-up fa-fw', style: { color: this.props.plusColor } }),
          React.createElement(
            'span',
            { style: { color: this.props.plusColor } },
            varianceText
          ),
          React.createElement(
            'span',
            null,
            ' since last week'
          )
        );
      } else {
        variance = React.createElement(
          'span',
          { style: { fontSize: 14 } },
          React.createElement('i', { className: 'fa fa-arrow-down fa-fw', style: { color: this.props.minusColor } }),
          React.createElement(
            'span',
            { style: { color: this.props.minusColor } },
            varianceText
          ),
          React.createElement(
            'span',
            null,
            ' since last week'
          )
        );
      }
    }
    switch (this.props.format) {
      case Format.Number:
        content = this.props.value !== null ? React.createElement(FormattedNumber, { value: this.props.value }) : '-';
        break;
      case Format.Percent:
        content = this.props.value !== null ? React.createElement(FormattedNumber, { value: this.props.value, style: 'percent' }) : '-';
        break;
      case Format.Currency:
        content = this.props.value !== null ? React.createElement(FormattedNumber, { value: this.props.value, style: 'currency', currency: 'EUR' }) : '-';
        break;
      default:
        content = React.createElement('span', null);
        break;
    }

    if (this.props.link) {
      footer = React.createElement(
        'h6',
        { className: 'text-right', style: { margin: 0 } },
        React.createElement(
          Link,
          { to: this.props.link },
          'See more...'
        )
      );
    }
    return React.createElement(
      'div',
      { style: { borderRadiusRight: 3,
          borderLeft: '5px solid ' + this.props.color } },
      React.createElement(
        'div',
        { style: { borderRadiusRight: 3,
            borderLeft: '0px none !important',
            border: '1px solid #F5F5F5',
            padding: 10 } },
        React.createElement(
          'h3',
          { style: { marginTop: 0 } },
          React.createElement(FormattedMessage, {
            id: this.props.text
          })
        ),
        React.createElement(
          'h4',
          null,
          content,
          variance
        ),
        footer
      )
    );
  }
}));

Counter.Format = Format;

module.exports = Counter;

},{"livereactload/babel-transform":28,"react":"react","react-intl":"react-intl","react-router":"react-router"}],484:[function(require,module,exports){
'use strict';

var _react2 = require('react');

var _react3 = _interopRequireDefault(_react2);

var _babelTransform = require('livereactload/babel-transform');

var _babelTransform2 = _interopRequireDefault(_babelTransform);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _components = {
  _component: {}
};

var _livereactloadBabelTransform2 = (0, _babelTransform2.default)({
  filename: '/home/daiad/Desktop/Development/home-web/utility/src/main/frontend/components/Device.js',
  components: _components,
  locals: [],
  imports: [_react3.default]
});

function _wrapComponent(id) {
  return function (Component) {
    return _livereactloadBabelTransform2(Component, id);
  };
}

var React = require('react');
var Bootstrap = require('react-bootstrap');

var _require = require('react-intl'),
    FormattedDate = _require.FormattedDate;

var _require2 = require('react-router'),
    Link = _require2.Link;

var Table = require('./Table');
var Chart = require('./Chart');

var Device = _wrapComponent('_component')(React.createClass({
  displayName: 'Device',

  contextTypes: {
    intl: React.PropTypes.object
  },

  render: function render() {
    var chartData = {
      series: [{
        legend: 'Amphiro Shower #1',
        xAxis: 'date',
        yAxis: 'volume',
        data: [{
          id: 1,
          name: 'Sales',
          volume: 25,
          date: new Date(2016, 1, 1),
          geometry: {}
        }, {
          id: 1,
          name: 'Sales',
          volume: 70,
          date: new Date(2016, 1, 2),
          geometry: {}
        }, {
          id: 1,
          name: 'Sales',
          volume: 75,
          date: new Date(2016, 1, 3),
          geometry: {}
        }, {
          id: 1,
          name: 'Sales',
          volume: 62,
          date: new Date(2016, 1, 4),
          geometry: {}
        }, {
          id: 1,
          name: 'Sales',
          volume: 53,
          date: new Date(2016, 1, 5),
          geometry: {}
        }, {
          id: 1,
          name: 'Sales',
          volume: 27,
          date: new Date(2016, 1, 6),
          geometry: {}
        }, {
          id: 1,
          name: 'Sales',
          volume: 41,
          date: new Date(2016, 1, 7),
          geometry: {}
        }, {
          id: 1,
          name: 'Sales',
          volume: 45,
          date: new Date(2016, 1, 8),
          geometry: {}
        }, {
          id: 1,
          name: 'Sales',
          volume: 13,
          date: new Date(2016, 1, 9),
          geometry: {}
        }]
      }]
    };

    var chartOptions = {
      tooltip: {
        show: true
      }
    };

    var sessions = {
      fields: [{
        name: 'id',
        title: 'Id'
      }, {
        name: 'createdOn',
        title: 'Date',
        type: 'datetime'
      }, {
        name: 'volume',
        title: 'Volume'
      }, {
        name: 'energy',
        title: 'Energy'
      }, {
        name: 'bar-chart',
        type: 'action',
        icon: 'bar-chart',
        handler: function handler() {}
      }],
      rows: [{
        id: 1,
        createdOn: new Date(new Date().getTime() + Math.random() * 3600000),
        volume: 130,
        energy: 2
      }, {
        id: 2,
        createdOn: new Date(new Date().getTime() + Math.random() * 3600000),
        volume: 14,
        energy: 0.1
      }, {
        id: 3,
        createdOn: new Date(new Date().getTime() + Math.random() * 3600000),
        volume: 71,
        energy: 3
      }],
      pager: {
        index: 0,
        size: 1,
        count: 3
      }
    };

    var profileTitle = React.createElement(
      'span',
      null,
      React.createElement('i', { className: 'fa fa-user fa-fw' }),
      React.createElement(
        'span',
        { style: { paddingLeft: 4 } },
        'Profile'
      ),
      React.createElement(
        'span',
        { style: { float: 'right', marginTop: -5 } },
        React.createElement(
          Bootstrap.SplitButton,
          { title: 'Actions', id: 'profile-actions' },
          React.createElement(
            Bootstrap.MenuItem,
            { eventKey: '1' },
            React.createElement('i', { className: 'fa fa-envelope-o fa-fw' }),
            React.createElement(
              'span',
              { style: { paddingLeft: 4 } },
              'Send Message'
            )
          ),
          React.createElement(
            Bootstrap.MenuItem,
            { eventKey: '1' },
            React.createElement('i', { className: 'fa fa-user-plus fa-fw' }),
            React.createElement(
              'span',
              { style: { paddingLeft: 4 } },
              'Add to group'
            )
          ),
          React.createElement(Bootstrap.MenuItem, { divider: true }),
          React.createElement(
            Bootstrap.MenuItem,
            { eventKey: '2' },
            React.createElement('i', { className: 'fa fa-cloud-download fa-fw' }),
            React.createElement(
              'span',
              { style: { paddingLeft: 4 } },
              'Export data'
            )
          )
        )
      )
    );

    var consumptionTitle = React.createElement(
      'span',
      null,
      React.createElement('i', { className: 'fa fa-bar-chart fa-fw' }),
      React.createElement(
        'span',
        { style: { paddingLeft: 4 } },
        'Consumption'
      )
    );
    var sessionTitle = React.createElement(
      'span',
      null,
      React.createElement('i', { className: 'fa fa-calendar fa-fw' }),
      React.createElement(
        'span',
        { style: { paddingLeft: 4 } },
        'Sessions'
      )
    );

    var propertiesTitle = React.createElement(
      'span',
      null,
      React.createElement('i', { className: 'fa fa-list fa-fw' }),
      React.createElement(
        'span',
        { style: { paddingLeft: 4 } },
        'Properties'
      )
    );

    var configTitle = React.createElement(
      'span',
      null,
      React.createElement('i', { className: 'fa fa-cogs fa-fw' }),
      React.createElement(
        'span',
        { style: { paddingLeft: 4 } },
        'Configuration'
      )
    );

    return React.createElement(
      'div',
      { className: 'container-fluid', style: { paddingTop: 10 } },
      React.createElement(
        'div',
        { className: 'row' },
        React.createElement(
          'div',
          { className: 'col-md-5' },
          React.createElement(
            'div',
            { className: 'row' },
            React.createElement(
              'div',
              { className: 'col-md-12' },
              React.createElement(
                Bootstrap.Panel,
                { header: profileTitle },
                React.createElement(
                  Bootstrap.ListGroup,
                  { fill: true },
                  React.createElement(
                    Bootstrap.ListGroupItem,
                    null,
                    React.createElement(
                      'div',
                      { className: 'row' },
                      React.createElement(
                        'div',
                        { className: 'col-md-4' },
                        React.createElement(
                          'div',
                          { style: { width: '100%', border: '#3498db solid 3px', borderRadius: '50%', padding: 3 } },
                          React.createElement('img', { src: '/assets/images/demo/profile.png', style: { borderRadius: '50%', width: '100%' } })
                        )
                      ),
                      React.createElement(
                        'div',
                        { className: 'col-md-8' },
                        React.createElement(
                          'table',
                          { className: 'table table-profile' },
                          React.createElement(
                            'tbody',
                            null,
                            React.createElement(
                              'tr',
                              null,
                              React.createElement(
                                'td',
                                null,
                                'First name'
                              ),
                              React.createElement(
                                'td',
                                null,
                                'User 1'
                              )
                            ),
                            React.createElement(
                              'tr',
                              null,
                              React.createElement(
                                'td',
                                null,
                                'Last name'
                              ),
                              React.createElement('td', null)
                            ),
                            React.createElement(
                              'tr',
                              null,
                              React.createElement(
                                'td',
                                null,
                                'Email'
                              ),
                              React.createElement(
                                'td',
                                null,
                                React.createElement(
                                  Link,
                                  { to: '/user/1' },
                                  'user1@daiad.eu'
                                )
                              )
                            ),
                            React.createElement(
                              'tr',
                              null,
                              React.createElement(
                                'td',
                                null,
                                'Registered on'
                              ),
                              React.createElement(
                                'td',
                                null,
                                React.createElement(FormattedDate, { value: new Date(), day: 'numeric', month: 'long', year: 'numeric' })
                              )
                            )
                          )
                        )
                      )
                    )
                  )
                )
              )
            )
          ),
          React.createElement(
            'div',
            { className: 'row' },
            React.createElement(
              'div',
              { className: 'col-md-12' },
              React.createElement(
                Bootstrap.Panel,
                { header: propertiesTitle },
                React.createElement(
                  Bootstrap.ListGroup,
                  { fill: true },
                  React.createElement(
                    Bootstrap.ListGroupItem,
                    null,
                    React.createElement(
                      'table',
                      { className: 'table table-profile' },
                      React.createElement(
                        'tbody',
                        null,
                        React.createElement(
                          'tr',
                          null,
                          React.createElement(
                            'td',
                            null,
                            'Name'
                          ),
                          React.createElement(
                            'td',
                            null,
                            'Amphiro Shower #1'
                          )
                        ),
                        React.createElement(
                          'tr',
                          null,
                          React.createElement(
                            'td',
                            null,
                            'Manufacturer'
                          ),
                          React.createElement(
                            'td',
                            null,
                            'Amphiro'
                          )
                        ),
                        React.createElement(
                          'tr',
                          null,
                          React.createElement(
                            'td',
                            null,
                            'Model'
                          ),
                          React.createElement(
                            'td',
                            null,
                            'B1'
                          )
                        ),
                        React.createElement(
                          'tr',
                          null,
                          React.createElement(
                            'td',
                            null,
                            'Registered on'
                          ),
                          React.createElement(
                            'td',
                            null,
                            React.createElement(FormattedDate, { value: new Date(), day: 'numeric', month: 'long', year: 'numeric' })
                          )
                        )
                      )
                    )
                  )
                )
              )
            )
          ),
          React.createElement(
            'div',
            { className: 'row clearfix' },
            React.createElement(
              'div',
              { className: 'col-md-12' },
              React.createElement(
                Bootstrap.Panel,
                { header: configTitle },
                React.createElement(
                  Bootstrap.ListGroup,
                  { fill: true },
                  React.createElement(
                    Bootstrap.ListGroupItem,
                    null,
                    React.createElement(
                      'table',
                      { className: 'table table-profile' },
                      React.createElement(
                        'tbody',
                        null,
                        React.createElement(
                          'tr',
                          null,
                          React.createElement(
                            'td',
                            null,
                            'Setting 1'
                          ),
                          React.createElement(
                            'td',
                            null,
                            '1'
                          )
                        ),
                        React.createElement(
                          'tr',
                          null,
                          React.createElement(
                            'td',
                            null,
                            'Setting 2'
                          ),
                          React.createElement(
                            'td',
                            null,
                            '3'
                          )
                        ),
                        React.createElement(
                          'tr',
                          null,
                          React.createElement(
                            'td',
                            null,
                            'Setting 3'
                          ),
                          React.createElement(
                            'td',
                            null,
                            '3'
                          )
                        ),
                        React.createElement(
                          'tr',
                          null,
                          React.createElement(
                            'td',
                            null,
                            'Frame'
                          ),
                          React.createElement(
                            'td',
                            null,
                            '1'
                          )
                        ),
                        React.createElement(
                          'tr',
                          null,
                          React.createElement(
                            'td',
                            null,
                            'Duration'
                          ),
                          React.createElement(
                            'td',
                            null,
                            '4'
                          )
                        )
                      )
                    ),
                    React.createElement(
                      'button',
                      { id: 'edit',
                        className: 'btn btn-primary' },
                      React.createElement('i', { className: 'fa fa-pencil fa-fw' }),
                      'Edit'
                    )
                  )
                )
              )
            )
          )
        ),
        React.createElement(
          'div',
          { className: 'col-md-7' },
          React.createElement(
            'div',
            { className: 'row' },
            React.createElement(
              'div',
              { className: 'col-md-12' },
              React.createElement(
                Bootstrap.Panel,
                { header: consumptionTitle },
                React.createElement(
                  Bootstrap.ListGroup,
                  { fill: true },
                  React.createElement(
                    Bootstrap.ListGroupItem,
                    null,
                    React.createElement(Chart, { style: { width: '100%', height: 400 },
                      elementClassName: 'mixin',
                      prefix: 'chart',
                      options: chartOptions,
                      data: chartData })
                  )
                )
              )
            )
          ),
          React.createElement(
            'div',
            { className: 'row' },
            React.createElement(
              'div',
              { className: 'col-md-12' },
              React.createElement(
                Bootstrap.Panel,
                { header: sessionTitle },
                React.createElement(
                  Bootstrap.ListGroup,
                  { fill: true },
                  React.createElement(
                    Bootstrap.ListGroupItem,
                    null,
                    React.createElement(Table, { data: sessions })
                  )
                )
              )
            )
          )
        )
      )
    );
  }
}));

module.exports = Device;

},{"./Chart":480,"./Table":502,"livereactload/babel-transform":28,"react":"react","react-bootstrap":"react-bootstrap","react-intl":"react-intl","react-router":"react-router"}],485:[function(require,module,exports){
'use strict';

var _react2 = require('react');

var _react3 = _interopRequireDefault(_react2);

var _babelTransform = require('livereactload/babel-transform');

var _babelTransform2 = _interopRequireDefault(_babelTransform);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _components = {
    _component: {}
};

var _livereactloadBabelTransform2 = (0, _babelTransform2.default)({
    filename: '/home/daiad/Desktop/Development/home-web/utility/src/main/frontend/components/DismissableFilterTag.js',
    components: _components,
    locals: [],
    imports: [_react3.default]
});

function _wrapComponent(id) {
    return function (Component) {
        return _livereactloadBabelTransform2(Component, id);
    };
}

var React = require('react');

var DismissableFilterTag = _wrapComponent('_component')(React.createClass({
    displayName: 'DismissableFilterTag',


    getDefaultProps: function getDefaultProps() {
        return {
            text: '',
            icon: '',
            filter: ''
        };
    },

    handleDFTagClose: function handleDFTagClose() {
        this.props.onSelect(this.props.filter);
    },

    render: function render() {
        return React.createElement(
            'div',
            { className: 'clearfix', key: this.props.key, style: { float: 'left', margin: 5, padding: 5, borderRadius: 2, background: '#2c3e50' } },
            React.createElement('i', { className: 'fa fa-' + this.props.icon, style: { color: '#fff', paddingRight: 5 } }),
            React.createElement(
                'span',
                { style: { color: '#fff' } },
                this.props.text
            ),
            React.createElement('i', { className: 'fa fa-times', style: { color: '#fff', cursor: 'pointer', paddingLeft: 5 }, onClick: this.handleDFTagClose })
        );
    }
}));

module.exports = DismissableFilterTag;

},{"livereactload/babel-transform":28,"react":"react"}],486:[function(require,module,exports){
'use strict';

var _react2 = require('react');

var _react3 = _interopRequireDefault(_react2);

var _babelTransform = require('livereactload/babel-transform');

var _babelTransform2 = _interopRequireDefault(_babelTransform);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _components = {
  _component: {}
};

var _livereactloadBabelTransform2 = (0, _babelTransform2.default)({
  filename: '/home/daiad/Desktop/Development/home-web/utility/src/main/frontend/components/DisplayParams.js',
  components: _components,
  locals: [],
  imports: [_react3.default]
});

function _wrapComponent(id) {
  return function (Component) {
    return _livereactloadBabelTransform2(Component, id);
  };
}

var React = require('react');

function DisplayParams(props) {
  var params = props.params,
      style = props.style,
      limit = props.limit,
      show = props.show,
      showAll = props.showAll;

  return React.createElement(
    'div',
    { style: style },
    React.createElement(
      'ul',
      { style: { listStyle: 'none', padding: 0 } },
      params.map(function (param, idx) {
        return React.createElement(
          'li',
          { key: idx },
          React.createElement(DisplayParamLine, { show: show, showAll: showAll, limit: limit, param: { key: param.key, value: toArray(param.value) } })
        );
      })
    )
  );
}

var DisplayParamLine = _wrapComponent('_component')(React.createClass({
  displayName: 'DisplayParamLine',

  getDefaultProps: function getDefaultProps() {
    return {
      limit: 10,
      show: 5
    };
  },
  getInitialState: function getInitialState() {
    return {
      hasMore: this.props.param.value.length > this.props.limit ? true : false,
      showMore: this.props.param.value.length > this.props.limit && this.props.showAll ? true : false
    };
  },
  componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
    if (nextProps.param && Array.isArray(nextProps.param.value)) {
      if (nextProps.param.value.length > this.props.limit) {
        this.setState({ hasMore: true });
      } else if (nextProps.param.value.length <= this.props.limit) {
        this.setState({ hasMore: false });
      }
    }
  },
  render: function render() {
    var _this = this;

    var show = this.props.show;
    var _props$param = this.props.param,
        key = _props$param.key,
        value = _props$param.value;
    var _state = this.state,
        hasMore = _state.hasMore,
        showMore = _state.showMore;

    return React.createElement(
      'div',
      null,
      key ? React.createElement(
        'span',
        { style: { fontSize: '1.1em', fontWeight: 500, color: '#666' } },
        key,
        ': '
      ) : React.createElement('span', null),
      React.createElement(
        'span',
        null,
        hasMore ? showMore ? React.createElement(
          'span',
          null,
          value.map(function (v, i, arr) {
            return i == arr.length - 1 ? React.createElement(
              'span',
              { key: i },
              v,
              ' '
            ) : React.createElement(
              'span',
              { key: i },
              v,
              ', '
            );
          }),
          React.createElement(
            'a',
            { href: '#', style: { whiteSpace: 'nowrap' }, onClick: function onClick(e) {
                e.preventDefault();_this.setState({ showMore: false });
              } },
            'Show less'
          )
        ) : React.createElement(
          'span',
          null,
          value.map(function (v, i, arr) {
            if (i < show) return React.createElement(
              'span',
              { key: i },
              v,
              ', '
            );else if (i === show) return React.createElement(
              'span',
              { key: i },
              '... , '
            );
          }),
          React.createElement(
            'a',
            { href: '#', style: { whiteSpace: 'nowrap' }, onClick: function onClick(e) {
                e.preventDefault();_this.setState({ showMore: true });
              } },
            'Show more'
          )
        ) : value.map(function (v, i, arr) {
          return i == arr.length - 1 ? React.createElement(
            'span',
            { key: i },
            v
          ) : React.createElement(
            'span',
            { key: i },
            v,
            ', '
          );
        })
      )
    );
  }
}));

function toArray(value) {
  if (!Array.isArray(value)) {
    return [value];
  }
  return value;
}

module.exports = DisplayParams;

},{"livereactload/babel-transform":28,"react":"react"}],487:[function(require,module,exports){
'use strict';

var _react2 = require('react');

var _react3 = _interopRequireDefault(_react2);

var _babelTransform = require('livereactload/babel-transform');

var _babelTransform2 = _interopRequireDefault(_babelTransform);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _components = {
  _component: {}
};

var _livereactloadBabelTransform2 = (0, _babelTransform2.default)({
  filename: '/home/daiad/Desktop/Development/home-web/utility/src/main/frontend/components/DropDown.js',
  components: _components,
  locals: [],
  imports: [_react3.default]
});

function _wrapComponent(id) {
  return function (Component) {
    return _livereactloadBabelTransform2(Component, id);
  };
}

var React = require('react');
var Bootstrap = require('react-bootstrap');

var DropDown = _wrapComponent('_component')(React.createClass({
  displayName: 'DropDown',

  getDefaultProps: function getDefaultProps() {
    return {
      title: '',
      options: [],
      onSelect: null,
      disabled: true
    };
  },

  render: function render() {
    var options = [];
    var self = this;

    this.props.options.forEach(function (value) {
      var eventKey = {
        value: value.value,
        label: value.label
      };
      options.push(React.createElement(
        Bootstrap.MenuItem,
        {
          eventKey: eventKey,
          key: value.key,
          onSelect: self.props.onSelect },
        value.label
      ));
    });

    return React.createElement(
      'div',
      { className: 'clearfix', style: { float: 'left', marginLeft: 5, paddingLeft: 5 } },
      React.createElement(
        Bootstrap.DropdownButton,
        {
          title: this.props.title,
          disabled: self.props.disabled,
          id: 'bg-nested-dropdown' },
        options
      )
    );
  }
}));

module.exports = DropDown;

},{"livereactload/babel-transform":28,"react":"react","react-bootstrap":"react-bootstrap"}],488:[function(require,module,exports){
'use strict';

var _react2 = require('react');

var _react3 = _interopRequireDefault(_react2);

var _babelTransform = require('livereactload/babel-transform');

var _babelTransform2 = _interopRequireDefault(_babelTransform);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _components = {
  _component: {}
};

var _livereactloadBabelTransform2 = (0, _babelTransform2.default)({
  filename: '/home/daiad/Desktop/Development/home-web/utility/src/main/frontend/components/DropDownFilter.js',
  components: _components,
  locals: [],
  imports: [_react3.default]
});

function _wrapComponent(id) {
  return function (Component) {
    return _livereactloadBabelTransform2(Component, id);
  };
}

var React = require('react');
var Bootstrap = require('react-bootstrap');

var DropDownFilter = _wrapComponent('_component')(React.createClass({
  displayName: 'DropDownFilter',

  getDefaultProps: function getDefaultProps() {
    return {
      title: '',
      options: [],
      onSelect: null,
      disabled: true
    };
  },

  render: function render() {
    var options = [];
    var self = this;

    this.props.options.forEach(function (value) {
      var eventKey = {
        filter: value.filter,
        value: value.value,
        label: value.label,
        icon: self.props.icon
      };
      options.push(React.createElement(
        Bootstrap.MenuItem,
        {
          eventKey: eventKey,
          key: value.key,
          onSelect: self.props.onSelect },
        value.label
      ));
    });

    return React.createElement(
      'div',
      { className: 'clearfix', style: { float: 'left', marginLeft: 5, paddingLeft: 5 } },
      React.createElement(
        Bootstrap.DropdownButton,
        {
          title: this.props.title,
          disabled: self.props.disabled,
          id: 'bg-nested-dropdown' },
        options
      )
    );
  }
}));

module.exports = DropDownFilter;

},{"livereactload/babel-transform":28,"react":"react","react-bootstrap":"react-bootstrap"}],489:[function(require,module,exports){
'use strict';

var _react2 = require('react');

var _react3 = _interopRequireDefault(_react2);

var _babelTransform = require('livereactload/babel-transform');

var _babelTransform2 = _interopRequireDefault(_babelTransform);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _components = {
  _component: {},
  _component2: {},
  _component3: {},
  _component4: {},
  _component5: {}
};

var _livereactloadBabelTransform2 = (0, _babelTransform2.default)({
  filename: '/home/daiad/Desktop/Development/home-web/utility/src/main/frontend/components/EditTable.js',
  components: _components,
  locals: [],
  imports: [_react3.default]
});

function _wrapComponent(id) {
  return function (Component) {
    return _livereactloadBabelTransform2(Component, id);
  };
}

var React = require('react');

var _require = require('react-intl'),
    FormattedMessage = _require.FormattedMessage,
    FormattedTime = _require.FormattedTime,
    FormattedDate = _require.FormattedDate;

var _require2 = require('react-router'),
    Link = _require2.Link;

var Bootstrap = require('react-bootstrap');
var CellCheckbox = require('./CellCheckbox');
var Checkbox = require('./Checkbox');
var IndeterminateCheckbox = require('./IndeterminateCheckbox');

var EditTable = _wrapComponent('_component')(React.createClass({
  displayName: 'EditTable',
  onPageIndexChange: function onPageIndexChange(event, selectedEvent) {
    this.props.setActivePage(selectedEvent.eventKey - 1);
  },


  syncStateData: function syncStateData() {
    var syncdData = this.props.data;
    var syncdRows = syncdData.rows;
    var self = this;
    for (var r = 0, len = syncdRows.length; r < len; r++) {
      var row = syncdRows[r];

      for (var m in self.props.modes[row.id].modes) {
        if (self.props.modes[row.id].modes.hasOwnProperty(m)) {
          row[m] = self.props.modes[row.id].modes[m].value;
        }
      }
    }
    syncdData.rows = syncdRows;
    return syncdData;
  },

  getVisibleCellsDraftFlags: function getVisibleCellsDraftFlags(visibleRows) {
    var visibleCellDraftFlags = {};
    var self = this;
    for (var r = 0, len = visibleRows.length; r < len; r++) {
      var row = visibleRows[r];
      var rowDraftFlags = {};
      for (var m in self.props.modes[row.id].modes) {
        rowDraftFlags[m] = self.props.modes[row.id].modes[m].draft;
      }
      visibleCellDraftFlags[row.id] = rowDraftFlags;
    }
    return visibleCellDraftFlags;
  },

  handleCheckboxChange: function handleCheckboxChange(rowId, propertyName, currentValue) {
    var truthTable = {
      'ON': true,
      'OFF': false
    };

    var inverseTruthTable = {
      true: 'ON',
      false: 'OFF'
    };

    var currentModesState = Object.assign({}, this.props.modes);

    if (currentModesState[rowId].modes[propertyName].value === 'NOT_APPLICABLE') {
      return;
    } else {
      currentModesState[rowId].modes[propertyName] = {
        value: inverseTruthTable[!truthTable[this.props.modes[rowId].modes[propertyName].value]],
        draft: !this.props.modes[rowId].modes[propertyName].draft
      };
    }

    this.props.setModes(currentModesState);
  },

  toggleCheckBoxes: function toggleCheckBoxes(propertyName, toggleState) {
    var truthTable = {
      'ON': true,
      'OFF': false
    };

    var inverseTruthTable = {
      true: 'ON',
      false: 'OFF'
    };

    var visibleRowIds = [];
    for (var i = 0; i < this.props.data.rows.length; i++) {
      visibleRowIds.push(this.props.data.rows[i].id);
    }

    var currentModesState = Object.assign({}, this.props.modes);
    switch (toggleState) {
      case 'indeterminate':
        for (var _r = 0, _len = visibleRowIds.length; _r < _len; _r++) {
          var rowId = visibleRowIds[_r];
          if (currentModesState[rowId].active === true) {
            if (currentModesState[rowId].modes[propertyName].draft === true) {
              if (currentModesState[rowId].modes[propertyName].value === 'NOT_APPLICABLE') {
                continue;
              } else {
                currentModesState[rowId].modes[propertyName] = {
                  value: inverseTruthTable[!truthTable[currentModesState[rowId].modes[propertyName].value]],
                  draft: false
                };
              }
            }
          }
        }
        break;
      case 'selectAll':
        for (var _r2 = 0, _len2 = visibleRowIds.length; _r2 < _len2; _r2++) {
          var _rowId = visibleRowIds[_r2];
          if (currentModesState[_rowId].active === true) {
            if (currentModesState[_rowId].modes[propertyName].value === 'NOT_APPLICABLE') {
              continue;
            } else {
              currentModesState[_rowId].modes[propertyName] = {
                value: 'ON',
                draft: truthTable[currentModesState[_rowId].modes[propertyName].value] === currentModesState[_rowId].modes[propertyName].draft ? true : false
              };
            }
          }
        }
        break;
      case 'unSelectAll':
        for (var r = 0, len = visibleRowIds.length; r < len; r++) {
          var _rowId2 = visibleRowIds[r];
          if (currentModesState[_rowId2].active === true) {
            if (currentModesState[_rowId2].modes[propertyName].value === 'NOT_APPLICABLE') {
              continue;
            } else {
              currentModesState[_rowId2].modes[propertyName] = {
                value: 'OFF',
                draft: truthTable[currentModesState[_rowId2].modes[propertyName].value] === currentModesState[_rowId2].modes[propertyName].draft ? false : true
              };
            }
          }
        }
        break;
    }
    this.props.setModes(currentModesState);
  },

  getDefaultProps: function getDefaultProps() {
    return {
      data: {
        fields: [],
        rows: [],
        pager: {
          index: 0,
          size: 20
        }
      }
    };
  },

  saveModeChanges: function saveModeChanges() {
    this.props.saveAction(this.getChangedRows());
  },

  countChangedRows: function countChangedRows() {
    var cnt = 0;
    for (var r in this.props.modes) {
      if (this.props.modes.hasOwnProperty(r)) {
        var row = this.props.modes[r];
        for (var p in row.modes) {
          if (row.modes.hasOwnProperty(p)) {
            var mode = row.modes[p];
            if (mode.draft === true) {
              cnt = cnt + 1;
              break;
            }
          }
        }
      }
    }
    return cnt;
  },

  getChangedRows: function getChangedRows() {
    var changedRows = [];
    for (var r in this.props.modes) {
      var row = this.props.modes[r];
      for (var p in row.modes) {
        if (row.modes.hasOwnProperty(p)) {
          var property = row.modes[p];
          if (property.draft === true) {
            changedRows.push({
              id: r,
              modes: row.modes
            });
            break;
          }
        }
      }
    }
    return changedRows;
  },

  render: function render() {
    var visibleData = Object.assign({}, this.syncStateData(this.props.data), { rows: this.props.data.rows.slice(this.props.activePage * this.props.data.pager.size, (this.props.activePage + 1) * this.props.data.pager.size)
    });
    var numberOfPages = Math.ceil(this.props.data.rows.length / this.props.data.pager.size);
    var saveButton;
    if (this.countChangedRows() > 0) {
      saveButton = React.createElement(
        'div',
        { className: 'pull-left', style: { marginTop: 20, marginBottom: 20 } },
        React.createElement(
          'button',
          { id: 'logout',
            type: 'submit',
            className: 'btn btn-primary',
            style: { height: 33 },
            onClick: this.saveModeChanges },
          React.createElement(FormattedMessage, { id: 'Table.Save' })
        )
      );
    }

    return React.createElement(
      'div',
      { className: 'clearfix' },
      React.createElement(
        Bootstrap.Table,
        { hover: true, style: { margin: 0, padding: 0 } },
        React.createElement(EditTable.Header, { data: this.props.data,
          toggleCheckBoxes: this.toggleCheckBoxes }),
        React.createElement(EditTable.Body, { data: visibleData,
          draftFlags: this.getVisibleCellsDraftFlags(visibleData.rows),
          checkboxHandler: this.handleCheckboxChange })
      ),
      saveButton,
      React.createElement(
        'div',
        { style: { float: 'right' } },
        React.createElement(Bootstrap.Pagination, { prev: true,
          next: true,
          first: true,
          last: true,
          ellipsis: true,
          items: numberOfPages,
          maxButtons: 7,
          activePage: this.props.activePage + 1,
          onSelect: this.onPageIndexChange })
      )
    );
  }
}));

var Header = _wrapComponent('_component2')(React.createClass({
  displayName: 'Header',

  contextTypes: {
    intl: React.PropTypes.object
  },

  render: function render() {
    var _t = this.context.intl.formatMessage;
    var self = this;

    var header = this.props.data.fields.filter(function (f) {
      return !f.hidden;
    }).map(function (field) {
      switch (field.type) {
        case 'action':
          return React.createElement(
            'th',
            { key: field.name, style: { width: 24 } },
            field.title ? _t({ id: field.title }) : ''
          );
        case 'boolean':
          return React.createElement(
            'th',
            { key: field.name, style: { width: 90 } },
            field.title ? _t({ id: field.title }) : ''
          );
        case 'property':
          return React.createElement(
            'th',
            { key: field.name, style: { width: 90 } },
            React.createElement(IndeterminateCheckbox, {
              propertyName: field.name,
              checked: true,
              disabled: false,
              action: self.props.toggleCheckBoxes
            }),
            field.title ? _t({ id: field.title }) : ''
          );
      }

      return React.createElement(
        'th',
        { key: field.name },
        field.title ? _t({ id: field.title }) : ''
      );
    });

    return React.createElement(
      'thead',
      null,
      React.createElement(
        'tr',
        null,
        header
      )
    );
  }
}));

var Body = _wrapComponent('_component3')(React.createClass({
  displayName: 'Body',

  render: function render() {
    var self = this;
    var rows = this.props.data.rows.map(function (row, rowIndex) {
      return React.createElement(EditTable.Row, { key: rowIndex,
        fields: self.props.data.fields,
        row: row,
        draftFlags: self.props.draftFlags[row.id],
        checkboxHandler: self.props.checkboxHandler });
    });

    return React.createElement(
      'tbody',
      null,
      rows
    );
  }
}));

var Row = _wrapComponent('_component4')(React.createClass({
  displayName: 'Row',

  render: function render() {
    var self = this;

    return React.createElement(
      'tr',
      null,
      this.props.fields.filter(function (f) {
        return !f.hidden;
      }).map(function (field, columnIndex) {
        return React.createElement(EditTable.Cell, { key: columnIndex,
          row: self.props.row,
          field: field,
          draftFlag: self.props.draftFlags[field.name],
          checkboxHandler: self.props.checkboxHandler });
      })
    );
  }
}));

var formatLink = function formatLink(route, row) {
  return Object.keys(row).reduce(function (link, key) {
    return link.replace(new RegExp('\{' + key + '\}'), row[key]);
  }, route);
};

var Cell = _wrapComponent('_component5')(React.createClass({
  displayName: 'Cell',

  render: function render() {
    var rowId = this.props.row.id;

    var value = this.props.row[this.props.field.name];
    var disabled = !this.props.row.active;
    var text;

    if (disabled) text = React.createElement(
      'span',
      { className: 'disabled' },
      value
    );else text = React.createElement(
      'span',
      null,
      value
    );

    if (this.props.field.hasOwnProperty('type')) {
      switch (this.props.field.type) {
        case 'action':
          if (disabled) {
            text = React.createElement('i', { className: 'fa fa-' + this.props.field.icon + ' fa-fw disabled-icon' });
          } else {
            text = React.createElement('i', { className: 'fa fa-' + this.props.field.icon + ' fa-fw table-action', onClick: this.props.field.handler.bind(this) });
          }
          break;
        case 'datetime':
          if (value) {
            text = React.createElement(FormattedTime, { value: value,
              day: 'numeric',
              month: 'numeric',
              year: 'numeric',
              hour: 'numeric',
              minute: 'numeric' });
          } else {
            text = '';
          }
          break;
        case 'time':
          text = React.createElement(FormattedTime, { value: value,
            hour: 'numeric',
            minute: 'numeric' });
          break;
        case 'progress':
          if (value !== null) {
            text = React.createElement(Bootstrap.ProgressBar, { now: value, label: '%(percent)s%' });
          } else {
            text = React.createElement('span', null);
          }
          break;
        case 'boolean':
          text = React.createElement(Checkbox, { checked: value, disabled: true });
          break;
        case 'property':
          if (typeof value === 'boolean') {
            text = React.createElement(CellCheckbox, { checked: value,
              disabled: disabled,
              rowId: rowId,
              propertyName: this.props.field.name,
              draftFlag: this.props.draftFlag,
              onUserClick: this.props.checkboxHandler });
          } else {
            if (value === 'NOT_APPLICABLE') {
              text = React.createElement(
                'div',
                { className: 'checkbox c-checkbox c-checkbox-disabled' },
                React.createElement(
                  'label',
                  null,
                  React.createElement('input', { type: 'checkbox',
                    disabled: true, checked: true
                  }),
                  React.createElement('span', { className: 'fa fa-times', style: { marginRight: 30 } })
                )
              );
            } else {
              switch (value) {
                case 'ON':
                  value = true;
                  break;
                case 'OFF':
                  value = false;
                  break;
              }
              text = React.createElement(CellCheckbox, { checked: value,
                disabled: disabled,
                rowId: rowId,
                propertyName: this.props.field.name,
                draftFlag: this.props.draftFlag,
                onUserClick: this.props.checkboxHandler });
            }
          }
          break;
        case 'date':
          text = React.createElement(FormattedDate, { value: value, day: 'numeric', month: 'long', year: 'numeric' });
          break;
        default:
          console.warn('Cell type [' + this.props.field.type + '] is not supported.');
          break;
      }
    } else {
      if (value instanceof Date) {
        text = React.createElement(FormattedDate, { value: value, day: 'numeric', month: 'long', year: 'numeric' });
      } else if (typeof value === 'boolean') {
        text = React.createElement(Checkbox, { checked: value, disabled: true });
      }
    }

    if (this.props.field.hasOwnProperty('link')) {
      if (typeof this.props.field.link === 'function') {
        text = React.createElement(
          Link,
          { to: formatLink(this.props.field.link(this.props.row), this.props.row) },
          text
        );
      } else {
        text = React.createElement(
          Link,
          { to: formatLink(this.props.field.link, this.props.row) },
          text
        );
      }
    }

    if (typeof this.props.field.className === 'function') {
      return React.createElement(
        'td',
        { className: this.props.field.className(value) },
        text
      );
    }

    if (this.props.field.hasOwnProperty('align')) {
      return React.createElement(
        'td',
        { style: { textAlign: this.props.field.align } },
        text
      );
    }

    return React.createElement(
      'td',
      null,
      text
    );
  }
}));

EditTable.Header = Header;

EditTable.Body = Body;

EditTable.Row = Row;

EditTable.Cell = Cell;

module.exports = EditTable;

},{"./CellCheckbox":478,"./Checkbox":481,"./IndeterminateCheckbox":493,"livereactload/babel-transform":28,"react":"react","react-bootstrap":"react-bootstrap","react-intl":"react-intl","react-router":"react-router"}],490:[function(require,module,exports){
'use strict';

var _react2 = require('react');

var _react3 = _interopRequireDefault(_react2);

var _babelTransform = require('livereactload/babel-transform');

var _babelTransform2 = _interopRequireDefault(_babelTransform);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _components = {
  _component: {}
};

var _livereactloadBabelTransform2 = (0, _babelTransform2.default)({
  filename: '/home/daiad/Desktop/Development/home-web/utility/src/main/frontend/components/FilterPanel.js',
  components: _components,
  locals: [],
  imports: [_react3.default]
});

function _wrapComponent(id) {
  return function (Component) {
    return _livereactloadBabelTransform2(Component, id);
  };
}

var React = require('react');
var Bootstrap = require('react-bootstrap');
var DropDownFilter = require('./DropDownFilter');
var DismissableFilterTag = require('./DismissableFilterTag');

var ModeManagementActions = require('../actions/ModeManagementActions');

var _require = require('react-redux'),
    connect = _require.connect;

var _require2 = require('redux'),
    bindActionCreators = _require2.bindActionCreators;

var FilterPanel = _wrapComponent('_component')(React.createClass({
  displayName: 'FilterPanel',


  contextTypes: {
    intl: React.PropTypes.object
  },

  getDefaultProps: function getDefaultProps() {
    return {
      filters: [],
      addFilter: null,
      removeFilter: null,
      filterStatus: {}
    };
  },

  render: function render() {
    var _t = this.context.intl.formatMessage;
    var self = this;

    var dropDownButtons = [];
    this.props.filters.forEach(function (filter) {
      var options = [];
      for (var k in filter.options) {
        if (filter.options.hasOwnProperty(k)) {
          var optObj = {
            label: k,
            value: filter.options[k],
            key: filter.id + '.' + filter.options[k],
            filter: filter.id
          };
          options.push(optObj);
        }
      }
      dropDownButtons.push(React.createElement(DropDownFilter, {
        title: filter.name,
        key: filter.name,
        options: options,
        onSelect: self.props.applyAddFilter,
        icon: filter.icon,
        disabled: typeof self.props.filterStatus[filter.id] !== 'undefined'
      }));
    });

    var filterTags = [];
    for (var k in this.props.filterStatus) {
      if (this.props.filterStatus[k]) {
        var tagText = React.createElement(
          'span',
          null,
          React.createElement(
            'b',
            null,
            this.props.filterStatus[k].name,
            ': '
          ),
          this.props.filterStatus[k].label
        );
        filterTags.push(React.createElement(DismissableFilterTag, {
          filter: this.props.filterStatus[k].name,
          key: this.props.filterStatus[k].name,
          text: tagText,
          icon: this.props.filterStatus[k].icon,
          onSelect: self.props.applyRemoveFilter
        }));
      }
    }

    var filterTagsListItem;
    if (filterTags.length > 0) {
      filterTagsListItem = React.createElement(
        Bootstrap.ListGroupItem,
        { className: 'clearfix' },
        React.createElement(
          'div',
          { className: 'pull-left' },
          filterTags
        )
      );
    }

    var filterPanelTitle = React.createElement(
      'span',
      null,
      React.createElement('i', { className: 'fa fa-filter fa-fw' }),
      React.createElement(
        'span',
        { style: { paddingLeft: 4 } },
        _t({ id: 'FilterBar.Filters' })
      ),
      React.createElement('span', { style: { float: 'right', marginTop: -3, marginLeft: 5 } })
    );

    return React.createElement(
      Bootstrap.Panel,
      { header: filterPanelTitle },
      React.createElement(
        Bootstrap.ListGroup,
        { fill: true },
        React.createElement(
          Bootstrap.ListGroupItem,
          { className: 'clearfix' },
          React.createElement(
            'div',
            { className: 'pull-left' },
            dropDownButtons
          )
        ),
        filterTagsListItem
      )
    );
  }
}));

function mapStateToProps(state) {
  return {
    filterStatus: state.mode_management.filterStatus
  };
}

function mapDispatchToProps(dispatch) {
  return {
    applyAddFilter: bindActionCreators(ModeManagementActions.applyAddFilter, dispatch),
    applyRemoveFilter: bindActionCreators(ModeManagementActions.applyRemoveFilter, dispatch)
  };
}

module.exports = connect(mapStateToProps, mapDispatchToProps)(FilterPanel);

},{"../actions/ModeManagementActions":443,"./DismissableFilterTag":485,"./DropDownFilter":488,"livereactload/babel-transform":28,"react":"react","react-bootstrap":"react-bootstrap","react-redux":"react-redux","redux":"redux"}],491:[function(require,module,exports){
'use strict';

var _react2 = require('react');

var _react3 = _interopRequireDefault(_react2);

var _babelTransform = require('livereactload/babel-transform');

var _babelTransform2 = _interopRequireDefault(_babelTransform);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _components = {
  _component: {}
};

var _livereactloadBabelTransform2 = (0, _babelTransform2.default)({
  filename: '/home/daiad/Desktop/Development/home-web/utility/src/main/frontend/components/Group.js',
  components: _components,
  locals: [],
  imports: [_react3.default]
});

function _wrapComponent(id) {
  return function (Component) {
    return _livereactloadBabelTransform2(Component, id);
  };
}

var React = require('react');
var Bootstrap = require('react-bootstrap');

var _require = require('react-intl'),
    FormattedDate = _require.FormattedDate;

var _require2 = require('react-router'),
    Link = _require2.Link;

var Table = require('./Table');

var _require3 = require('react-redux'),
    connect = _require3.connect;

var _require4 = require('redux'),
    bindActionCreators = _require4.bindActionCreators;

var GroupActions = require('../actions/GroupActions');
var GroupTablesSchema = require('../constants/GroupTablesSchema');

var Group = _wrapComponent('_component')(React.createClass({
  displayName: 'Group',

  contextTypes: {
    intl: React.PropTypes.object
  },

  componentWillMount: function componentWillMount() {
    this.props.showGroup(this.props.params.id);
  },

  componentWillUnmount: function componentWillUnmount() {
    this.props.resetComponent();
  },

  compareGroupMembers: function compareGroupMembers(a, b) {
    if (a.user == null) return -1;
    return a.user.localeCompare(b.user);
  },

  membersObjectToArray: function membersObjectToArray(membersObject) {
    var membersArray = [];

    for (var key in membersObject) {
      if (membersObject.hasOwnProperty(key)) {
        membersArray.push(membersObject[key]);
      }
    }

    return membersArray;
  },

  render: function render() {

    var self = this;
    var _t = this.context.intl.formatMessage;

    if (!this.props.currentMembers) return null;

    var rows = this.membersObjectToArray(Object.assign({}, this.props.currentMembers)).sort(this.compareGroupMembers);

    var currentMemberFields = GroupTablesSchema.Members.fields.map(function (field) {
      if (field.hasOwnProperty('name') && field.name === 'favourite') {
        var handler = function handler(field, row) {
          if (row.favourite) {
            self.props.removeFavorite(row.key);
          } else {
            self.props.addFavorite(row.key);
          }
        };
        var icon = function icon(field, row) {
          return row.favourite ? 'star' : 'star-o';
        };
        return Object.assign({}, field, { handler: handler, icon: icon });
      }

      return field;
    });

    var pager = {
      index: 0,
      size: 10,
      count: rows.length || 0,
      mode: Table.PAGING_CLIENT_SIDE
    };

    var groupTitle = null;
    if (this.props.groupInfo) {
      groupTitle = React.createElement(
        'span',
        null,
        React.createElement('i', { className: 'fa fa-group fa-fw' }),
        React.createElement(
          'span',
          { style: { paddingLeft: 4 } },
          this.props.groupInfo.name ? this.props.groupInfo.name : ''
        )
      );
    }

    var memberTitle = React.createElement(
      'span',
      null,
      React.createElement('i', { className: 'fa fa-user fa-fw' }),
      React.createElement(
        'span',
        { style: { paddingLeft: 4 } },
        _t({ id: 'Group.Members' })
      )
    );

    if (this.props.groupInfo && this.props.currentMembers) {
      return React.createElement(
        'div',
        { className: 'container-fluid', style: { paddingTop: 10 } },
        React.createElement(
          'div',
          { className: 'row' },
          React.createElement(
            'div',
            { className: 'col-md-4' },
            React.createElement(
              Bootstrap.Panel,
              { header: groupTitle },
              React.createElement(
                Bootstrap.ListGroup,
                { fill: true },
                React.createElement(
                  Bootstrap.ListGroupItem,
                  null,
                  React.createElement(
                    'div',
                    { className: 'row' },
                    React.createElement(
                      'table',
                      { className: 'table table-profile' },
                      React.createElement(
                        'tbody',
                        null,
                        React.createElement(
                          'tr',
                          null,
                          React.createElement(
                            'td',
                            null,
                            'Name'
                          ),
                          React.createElement(
                            'td',
                            null,
                            this.props.groupInfo.name ? this.props.groupInfo.name : ''
                          )
                        ),
                        React.createElement(
                          'tr',
                          null,
                          React.createElement(
                            'td',
                            null,
                            'Created on'
                          ),
                          React.createElement(
                            'td',
                            null,
                            React.createElement(FormattedDate, { value: this.props.groupInfo.createdOn ? this.props.groupInfo.createdOn : new Date(), day: 'numeric', month: 'long', year: 'numeric' })
                          )
                        ),
                        React.createElement(
                          'tr',
                          null,
                          React.createElement(
                            'td',
                            null,
                            'Country'
                          ),
                          React.createElement(
                            'td',
                            null,
                            this.props.groupInfo.country ? this.props.groupInfo.country : ''
                          )
                        ),
                        React.createElement(
                          'tr',
                          null,
                          React.createElement(
                            'td',
                            null,
                            'Size'
                          ),
                          React.createElement(
                            'td',
                            null,
                            this.props.groupInfo.size ? this.props.groupInfo.size : 0
                          )
                        )
                      )
                    )
                  )
                ),
                React.createElement(
                  Bootstrap.ListGroupItem,
                  { className: 'clearfix' },
                  React.createElement(
                    Link,
                    { className: 'pull-right', to: '/groups', style: { paddingLeft: 7, paddingTop: 12 } },
                    'Browse all groups'
                  )
                )
              )
            )
          ),
          React.createElement(
            'div',
            { className: 'col-md-8' },
            React.createElement(
              Bootstrap.Panel,
              { header: memberTitle },
              React.createElement(
                Bootstrap.ListGroup,
                { fill: true },
                React.createElement(
                  Bootstrap.ListGroupItem,
                  null,
                  React.createElement(Table, {
                    data: rows,
                    fields: currentMemberFields,
                    pager: pager
                  })
                ),
                React.createElement(
                  Bootstrap.ListGroupItem,
                  { className: 'clearfix' },
                  React.createElement(
                    Link,
                    { className: 'pull-right', to: '/users', style: { paddingLeft: 7, paddingTop: 12 } },
                    'Browse all users'
                  )
                )
              )
            )
          )
        )
      );
    } else {
      return React.createElement(
        'div',
        null,
        React.createElement('img', { className: 'preloader', src: '/assets/images/utility/preloader-counterclock.png' }),
        React.createElement('img', { className: 'preloader-inner', src: '/assets/images/utility/preloader-clockwise.png' })
      );
    }
  }
}));

function mapStateToProps(state) {
  return {
    isLoading: state.group.isLoading,
    groupInfo: state.group.groupInfo,
    currentMembers: state.group.currentMembers,
    application: state.group.application,
    accountId: state.group.accountId
  };
}

function mapDispatchToProps(dispatch) {
  return {
    showGroup: bindActionCreators(GroupActions.showGroup, dispatch),

    resetComponent: bindActionCreators(GroupActions.resetComponent, dispatch),

    addFavorite: bindActionCreators(GroupActions.addFavorite, dispatch),
    removeFavorite: bindActionCreators(GroupActions.removeFavorite, dispatch)
  };
}

module.exports = connect(mapStateToProps, mapDispatchToProps)(Group);

},{"../actions/GroupActions":436,"../constants/GroupTablesSchema":581,"./Table":502,"livereactload/babel-transform":28,"react":"react","react-bootstrap":"react-bootstrap","react-intl":"react-intl","react-redux":"react-redux","react-router":"react-router","redux":"redux"}],492:[function(require,module,exports){
'use strict';

var _react2 = require('react');

var _react3 = _interopRequireDefault(_react2);

var _babelTransform = require('livereactload/babel-transform');

var _babelTransform2 = _interopRequireDefault(_babelTransform);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _components = {
  _component: {}
};

var _livereactloadBabelTransform2 = (0, _babelTransform2.default)({
  filename: '/home/daiad/Desktop/Development/home-web/utility/src/main/frontend/components/GroupSearchTextBox.js',
  components: _components,
  locals: [],
  imports: [_react3.default]
});

function _wrapComponent(id) {
  return function (Component) {
    return _livereactloadBabelTransform2(Component, id);
  };
}

var React = require('react');
var Select = require('react-select').default;
var api = require('../api/base.js');

var _onChange = function _onChange(e) {
  this.setState({
    value: e
  });

  if (typeof this.props.onChange === 'function') {
    this.props.onChange(e);
  }
};

var _getOptions = function _getOptions(input) {
  if (!input) {
    return new Promise(function (resolve, reject) {
      resolve({
        options: []
      });
    });
  }

  return api.json('/action/group/query/' + input).then(function (response) {
    var result = {
      options: []
    };

    if (response.success) {
      result.options = response.groups.map(function (group) {
        group.value = group.key;
        if (group.type === 'SEGMENT') {
          group.label = group.cluster + ': ' + group.name;
        } else {
          group.label = group.name;
        }

        return group;
      });
    }

    return result;
  });
};

var GroupSearchTextBox = _wrapComponent('_component')(React.createClass({
  displayName: 'GroupSearchTextBox',

  contextTypes: {
    intl: React.PropTypes.object
  },

  getDefaultProps: function getDefaultProps() {
    return {
      name: 'grpup',
      onChange: null,
      multi: false
    };
  },

  getInitialState: function getInitialState() {
    return {
      value: null
    };
  },


  render: function render() {
    return React.createElement(Select.Async, { name: this.props.name,
      value: this.state.value,
      onChange: _onChange.bind(this),
      loadOptions: _getOptions.bind(this),
      clearable: true,
      multi: this.props.multi,
      noResultsText: 'No groups found',
      ignoreCase: false
    });
  }
}));

module.exports = GroupSearchTextBox;

},{"../api/base.js":461,"livereactload/babel-transform":28,"react":"react","react-select":"react-select"}],493:[function(require,module,exports){
'use strict';

var _react2 = require('react');

var _react3 = _interopRequireDefault(_react2);

var _babelTransform = require('livereactload/babel-transform');

var _babelTransform2 = _interopRequireDefault(_babelTransform);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _components = {
  _component: {}
};

var _livereactloadBabelTransform2 = (0, _babelTransform2.default)({
  filename: '/home/daiad/Desktop/Development/home-web/utility/src/main/frontend/components/IndeterminateCheckbox.js',
  components: _components,
  locals: [],
  imports: [_react3.default]
});

function _wrapComponent(id) {
  return function (Component) {
    return _livereactloadBabelTransform2(Component, id);
  };
}

var React = require('react');

var IndeterminateCheckbox = _wrapComponent('_component')(React.createClass({
  displayName: 'IndeterminateCheckbox',


  getDefaultProps: function getDefaultProps() {
    return {
      propertyName: '',
      disabled: false,
      checked: true,
      action: function action() {}
    };
  },

  getInitialState: function getInitialState() {
    return {
      mode: 'indeterminate',
      checked: true
    };
  },

  getNextMode: function getNextMode(currentMode) {
    switch (currentMode) {
      case 'indeterminate':
        return 'selectAll';
      case 'selectAll':
        return 'unSelectAll';
      case 'unSelectAll':
        return 'indeterminate';
    }
  },

  shiftMode: function shiftMode() {
    switch (this.state.mode) {
      case 'indeterminate':
        this.setState({ mode: this.getNextMode(this.state.mode), checked: true });
        break;
      case 'selectAll':
        this.setState({ mode: this.getNextMode(this.state.mode), checked: false });
        break;
      case 'unSelectAll':
        this.setState({ mode: this.getNextMode(this.state.mode), checked: true });
        break;
    }
  },

  onChange: function onChange() {
    var mode = this.getNextMode(this.state.mode);
    this.shiftMode();
    this.props.action(this.props.propertyName, mode);
  },

  render: function render() {
    var classNames = 'checkbox c-checkbox';

    var symbol;
    switch (this.state.mode) {
      case 'indeterminate':
        symbol = 'fa-minus';
        break;
      case 'selectAll':
        symbol = 'fa-check';
        break;
      case 'unSelectAll':
        symbol = '';
        break;
    }

    return React.createElement(
      'div',
      { className: classNames },
      React.createElement(
        'label',
        null,
        React.createElement('input', { type: 'checkbox',
          disabled: this.props.disabled ? "disabled" : false, checked: this.state.checked,
          ref: 'checkbox',
          onChange: this.onChange }),
        React.createElement('span', { className: 'fa ' + symbol, style: { marginRight: 0 } })
      )
    );
  }
}));

module.exports = IndeterminateCheckbox;

},{"livereactload/babel-transform":28,"react":"react"}],494:[function(require,module,exports){
'use strict';

var _react2 = require('react');

var _react3 = _interopRequireDefault(_react2);

var _babelTransform = require('livereactload/babel-transform');

var _babelTransform2 = _interopRequireDefault(_babelTransform);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _components = {
  _component: {}
};

var _livereactloadBabelTransform2 = (0, _babelTransform2.default)({
  filename: '/home/daiad/Desktop/Development/home-web/utility/src/main/frontend/components/InputTextModal.js',
  components: _components,
  locals: [],
  imports: [_react3.default]
});

function _wrapComponent(id) {
  return function (Component) {
    return _livereactloadBabelTransform2(Component, id);
  };
}

var React = require('react');
var Bootstrap = require('react-bootstrap');

var InputTextModal = _wrapComponent('_component')(React.createClass({
  displayName: 'InputTextModal',


  onChange: function onChange(e) {
    this.setState({
      text: this.refs.inputText.getValue()
    });
  },

  onClick: function onClick(key) {
    if (typeof this.props.handler === 'function') {
      this.props.handler(key, this.state.text);
    }
  },

  getInitialState: function getInitialState() {
    return {
      text: ''
    };
  },

  render: function render() {
    var actions = [],
        self = this;

    this.props.actions.forEach(function (action, i) {
      var button;
      if (action.style) {
        button = React.createElement(
          Bootstrap.Button,
          { bsStyle: action.style, key: action.key, onClick: self.onClick.bind(self, action.key) },
          action.text
        );
      } else {
        button = React.createElement(
          Bootstrap.Button,
          { key: action.key, onClick: self.onClick.bind(self, action.key) },
          action.text
        );
      }
      actions.push(button);
    });

    return React.createElement(
      Bootstrap.Modal,
      { animation: false, show: this.props.visible, onHide: this.props.onHide },
      React.createElement(
        Bootstrap.Modal.Header,
        { closeButton: true },
        React.createElement(
          Bootstrap.Modal.Title,
          null,
          this.props.title
        )
      ),
      React.createElement(
        Bootstrap.Modal.Body,
        null,
        React.createElement(Bootstrap.Input, {
          type: 'text',
          id: 'inputText', name: 'inputText', ref: 'inputText',
          placeholder: this.props.prompt,
          onChange: this.onChange,
          value: this.state.text }),
        React.createElement(
          'span',
          { className: 'help-block' },
          this.props.help
        )
      ),
      React.createElement(
        Bootstrap.Modal.Footer,
        null,
        actions
      )
    );
  }
}));

module.exports = InputTextModal;

},{"livereactload/babel-transform":28,"react":"react","react-bootstrap":"react-bootstrap"}],495:[function(require,module,exports){
'use strict';

var _react2 = require('react');

var _react3 = _interopRequireDefault(_react2);

var _babelTransform = require('livereactload/babel-transform');

var _babelTransform2 = _interopRequireDefault(_babelTransform);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _components = {
  _component: {}
};

var _livereactloadBabelTransform2 = (0, _babelTransform2.default)({
  filename: '/home/daiad/Desktop/Development/home-web/utility/src/main/frontend/components/LocaleSwitcher.js',
  components: _components,
  locals: [],
  imports: [_react3.default]
});

function _wrapComponent(id) {
  return function (Component) {
    return _livereactloadBabelTransform2(Component, id);
  };
}

var React = require('react');

var LOCALES = require('../constants/Constants').LOCALES;

var bs = require('react-bootstrap');

var LocaleSwitcher = _wrapComponent('_component')(React.createClass({
  displayName: 'LocaleSwitcher',

  contextTypes: {
    intl: React.PropTypes.object
  },

  handleChange: function handleChange(e, value) {
    this.props.onLocaleSwitch(value);
  },
  render: function render() {
    var locale = this.props.locale;
    var _t = this.context.intl.formatMessage;
    var translationKey = 'locale.' + locale;

    return React.createElement(
      bs.DropdownButton,
      {
        title: _t({ id: translationKey }),
        id: 'language-switcher',
        defaultValue: locale,
        onSelect: this.handleChange },
      LOCALES.map(function (locale) {
        var translationKey = 'locale.' + locale;
        return React.createElement(
          bs.MenuItem,
          { key: locale, eventKey: locale, value: locale },
          _t({ id: translationKey })
        );
      })
    );
  }
}));

module.exports = LocaleSwitcher;

},{"../constants/Constants":573,"livereactload/babel-transform":28,"react":"react","react-bootstrap":"react-bootstrap"}],496:[function(require,module,exports){
'use strict';

var _react2 = require('react');

var _react3 = _interopRequireDefault(_react2);

var _babelTransform = require('livereactload/babel-transform');

var _babelTransform2 = _interopRequireDefault(_babelTransform);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _components = {
  _component: {}
};

var _livereactloadBabelTransform2 = (0, _babelTransform2.default)({
  filename: '/home/daiad/Desktop/Development/home-web/utility/src/main/frontend/components/LoginForm.js',
  components: _components,
  locals: [],
  imports: [_react3.default]
});

function _wrapComponent(id) {
  return function (Component) {
    return _livereactloadBabelTransform2(Component, id);
  };
}

var React = require('react');
var FormattedMessage = require('react-intl').FormattedMessage;
var Panel = require('react-bootstrap').Panel;

var AlertDismissable = require('./AlertDismissable');

var LoginForm = _wrapComponent('_component')(React.createClass({
  displayName: 'LoginForm',

  getInitialState: function getInitialState() {
    return { showAlert: true };
  },

  contextTypes: {
    intl: React.PropTypes.object
  },

  dismissAlert: function dismissAlert() {
    this.setState({ showAlert: false });
  },

  onLogin: function onLogin(e) {
    this.setState({ showAlert: true });
    e.preventDefault();
    this.props.onLogin(this.refs.username.value, this.refs.password.value);
  },

  render: function render() {
    var _t = this.context.intl.formatMessage;

    return React.createElement(
      'div',
      null,
      React.createElement(
        'h4',
        { style: { textAlign: 'center' } },
        React.createElement(FormattedMessage, { id: 'LoginForm.title' })
      ),
      React.createElement(
        Panel,
        null,
        React.createElement(
          'form',
          { key: 'login', action: this.props.action },
          React.createElement(
            'div',
            { className: 'form-group' },
            React.createElement('input', { id: 'username', name: 'username', type: 'text', ref: 'username', autoFocus: true,
              placeholder: _t({ id: 'LoginForm.placehoder.username' }), className: 'form-control' })
          ),
          React.createElement(
            'div',
            { className: 'form-group' },
            React.createElement('input', { id: 'password', name: 'password', type: 'password', ref: 'password',
              placeholder: _t({ id: 'LoginForm.placehoder.password' }), className: 'form-control' }),
            React.createElement(
              'a',
              { style: { float: 'right', color: '#337ab7', fontSize: 12, marginTop: 10 }, href: '#' },
              React.createElement(FormattedMessage, { id: 'LoginForm.password.reset' })
            )
          ),
          React.createElement('br', null),
          React.createElement(
            'button',
            { type: 'submit',
              className: 'btn btn-success action-login' + (this.props.isLoading ? ' disabled' : ''),
              onClick: this.onLogin },
            React.createElement(
              'span',
              null,
              this.props.isLoading ? React.createElement('i', { className: 'fa fa-refresh fa-spin', style: { color: '#fff' } }) : '',
              this.props.isLoading ? React.createElement(
                'span',
                null,
                '\xA0'
              ) : '',
              React.createElement(FormattedMessage, { id: 'LoginForm.button.signin' })
            )
          )
        )
      ),
      React.createElement(
        'div',
        { style: { marginTop: 15 } },
        React.createElement(AlertDismissable, {
          show: this.state.showAlert,
          messages: this.props.errors,
          dismissFunc: this.dismissAlert
        })
      )
    );
  }

}));

module.exports = LoginForm;

},{"./AlertDismissable":477,"livereactload/babel-transform":28,"react":"react","react-bootstrap":"react-bootstrap","react-intl":"react-intl"}],497:[function(require,module,exports){
'use strict';

var _react2 = require('react');

var _react3 = _interopRequireDefault(_react2);

var _babelTransform = require('livereactload/babel-transform');

var _babelTransform2 = _interopRequireDefault(_babelTransform);

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _components = {
  _component: {
    isInFunction: true
  }
};

var _livereactloadBabelTransform2 = (0, _babelTransform2.default)({
  filename: '/home/daiad/Desktop/Development/home-web/utility/src/main/frontend/components/Maximizable.js',
  components: _components,
  locals: [],
  imports: [_react3.default]
});

function _wrapComponent(id) {
  return function (Component) {
    return _livereactloadBabelTransform2(Component, id);
  };
}

var React = require('react');
var bs = require('react-bootstrap');

var maximizable = function maximizable(Component) {
  var maximizableComponent = _wrapComponent('_component')(React.createClass({
    displayName: 'maximizableComponent',

    getInitialState: function getInitialState() {
      return {
        maximized: false
      };
    },
    getDefaultProps: function getDefaultProps() {
      return {
        maximizedStyle: {},
        maximizedProps: {},
        dialogClassName: 'maximized-modal'
      };
    },
    minimize: function minimize() {
      this.setState({ maximized: false });
    },
    maximize: function maximize() {
      this.setState({ maximized: true });
    },
    render: function render() {
      var maximized = this.state.maximized;
      var _props = this.props,
          maximizedProps = _props.maximizedProps,
          maximizedStyle = _props.maximizedStyle,
          dialogClassName = _props.dialogClassName;

      return React.createElement(
        'div',
        null,
        React.createElement(Component, _extends({}, this.props, {
          maximize: this.maximize
        })),
        React.createElement(
          bs.Modal,
          {
            animation: false,
            dialogClassName: dialogClassName,
            show: maximized,
            onHide: this.minimize
          },
          React.createElement(
            bs.Modal.Body,
            null,
            React.createElement(Component, _extends({}, this.props, maximizedProps, {
              maximized: maximized,
              minimize: this.minimize,
              style: _extends({
                height: '80vh',
                width: '100%'
              }, maximizedStyle)
            }))
          )
        )
      );
    }
  }));
  return maximizableComponent;
};
module.exports = maximizable;

},{"livereactload/babel-transform":28,"react":"react","react-bootstrap":"react-bootstrap"}],498:[function(require,module,exports){
'use strict';

var _react2 = require('react');

var _react3 = _interopRequireDefault(_react2);

var _babelTransform = require('livereactload/babel-transform');

var _babelTransform2 = _interopRequireDefault(_babelTransform);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _components = {
  _component: {}
};

var _livereactloadBabelTransform2 = (0, _babelTransform2.default)({
  filename: '/home/daiad/Desktop/Development/home-web/utility/src/main/frontend/components/Modal.js',
  components: _components,
  locals: [],
  imports: [_react3.default]
});

function _wrapComponent(id) {
  return function (Component) {
    return _livereactloadBabelTransform2(Component, id);
  };
}

var React = require('react');
var Bootstrap = require('react-bootstrap');

var Modal = _wrapComponent('_component')(React.createClass({
  displayName: 'Modal',


  getDefaultProps: function getDefaultProps() {
    return {
      backdrop: true,
      className: ''
    };
  },
  render: function render() {
    return React.createElement(
      Bootstrap.Modal,
      {
        animation: false,
        dialogClassName: this.props.className,
        show: this.props.show,
        backdrop: this.props.backdrop,
        onHide: this.props.onClose },
      React.createElement(
        Bootstrap.Modal.Header,
        { closeButton: true },
        React.createElement(
          Bootstrap.Modal.Title,
          null,
          this.props.title
        )
      ),
      React.createElement(
        Bootstrap.Modal.Body,
        null,
        this.props.text
      ),
      React.createElement(
        Bootstrap.Modal.Footer,
        null,
        this.props.actions.map(function (action) {
          return React.createElement(
            Bootstrap.Button,
            { key: action.name, bsStyle: action.style || 'default', onClick: action.action },
            action.name
          );
        })
      )
    );
  }
}));

module.exports = Modal;

},{"livereactload/babel-transform":28,"react":"react","react-bootstrap":"react-bootstrap"}],499:[function(require,module,exports){
'use strict';

var _react2 = require('react');

var _react3 = _interopRequireDefault(_react2);

var _babelTransform = require('livereactload/babel-transform');

var _babelTransform2 = _interopRequireDefault(_babelTransform);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var _components = {
  _component: {}
};

var _livereactloadBabelTransform2 = (0, _babelTransform2.default)({
  filename: '/home/daiad/Desktop/Development/home-web/utility/src/main/frontend/components/NavigationTree.js',
  components: _components,
  locals: [],
  imports: [_react3.default]
});

function _wrapComponent(id) {
  return function (Component) {
    return _livereactloadBabelTransform2(Component, id);
  };
}

var develop = "production" !== 'production';

var React = require('react');
var PropTypes = require('prop-types');

var _require = require('react-router'),
    Link = _require.Link;

var Collapsible = require('./Collapsible');

var _require2 = require('../constants/Constants'),
    ROLE = _require2.ROLE;

var NavigationTree = _wrapComponent('_component')(React.createClass({
  displayName: 'NavigationTree',

  contextTypes: {
    intl: React.PropTypes.object
  },

  propTypes: {
    roles: PropTypes.array,
    height: PropTypes.number
  },

  getDefaultProps: function getDefaultProps() {
    return {};
  },

  getInitialState: function getInitialState() {
    return {
      expand: {
        consumers: false,
        trials: false,
        support: false,
        analytics: false,
        alerts: false
      }
    };
  },


  _toggleExpand: function _toggleExpand(itemKey) {
    this.setState(function (prevState) {
      var expanded = prevState.expand;
      return {
        expand: Object.assign({}, expanded, _defineProperty({}, itemKey, !expanded[itemKey]))
      };
    });
  },

  render: function render() {
    var _this = this;

    var _t = this.context.intl.formatMessage;

    var development = null;
    if (develop) {
      development = React.createElement(
        'li',
        null,
        React.createElement(
          Link,
          { to: '/support/development' },
          React.createElement(
            'span',
            { style: { paddingLeft: 18 } },
            React.createElement('i', { className: 'fa fa-bug fa-fw' }),
            ' ' + _t({ id: 'Section.Support.Development' })
          )
        )
      );
    }

    var scheduler = null,
        log = null;
    if (this.props.roles.indexOf(ROLE.ROLE_SYSTEM_ADMIN) !== -1) {
      scheduler = React.createElement(
        'li',
        null,
        React.createElement(
          Link,
          { to: '/scheduler' },
          React.createElement('i', { className: 'fa fa-clock-o fa-fw' }),
          ' ' + _t({ id: 'Section.Scheduler.Title' })
        )
      );

      log = React.createElement(
        'li',
        null,
        React.createElement(
          Link,
          { to: '/support/logging' },
          React.createElement(
            'span',
            { style: { paddingLeft: 18 } },
            React.createElement('i', { className: 'fa fa-history fa-fw' }),
            ' ' + _t({ id: 'Section.Support.Logging.Title' })
          )
        )
      );
    }

    var height = this.props.height - 51;

    return React.createElement(
      'div',
      { className: 'navbar-default navbar-static-side', role: 'navigation', ref: function ref(el) {
          _this._element = el;
        }, style: { height: height } },
      React.createElement(
        'div',
        { className: 'sidebar-collapse' },
        React.createElement(
          'ul',
          { className: 'nav', id: 'side-menu' },
          React.createElement(
            'li',
            null,
            React.createElement(
              Link,
              { to: '/' },
              React.createElement('i', { className: 'fa fa-dashboard fa-fw' }),
              ' ' + _t({ id: 'Section.Dashboard' })
            )
          ),
          React.createElement(
            'li',
            null,
            React.createElement(
              'a',
              { href: '#', onClick: function onClick() {
                  return _this._toggleExpand('analytics');
                } },
              React.createElement('i', { className: 'fa fa-bar-chart fa-fw' }),
              ' ' + _t({ id: 'Section.Analytics-Group' }) + ' ',
              this.state.expand.analytics ? React.createElement('i', { className: 'fa fa-caret-up fa-fw' }) : React.createElement('i', { className: 'fa fa-caret-down fa-fw' })
            ),
            React.createElement(
              Collapsible,
              { open: this.state.expand.analytics },
              React.createElement(
                'ul',
                { className: 'nav' },
                React.createElement(
                  'li',
                  null,
                  React.createElement(
                    Link,
                    { to: '/analytics/panel' },
                    React.createElement(
                      'span',
                      { style: { paddingLeft: 18 } },
                      React.createElement('i', { className: 'fa fa-area-chart fa-fw' }),
                      ' ' + _t({ id: 'Section.Analytics.ReportPanel' })
                    )
                  )
                ),
                React.createElement(
                  'li',
                  null,
                  React.createElement(
                    Link,
                    { to: '/analytics/map' },
                    React.createElement(
                      'span',
                      { style: { paddingLeft: 18 } },
                      React.createElement('i', { className: 'fa fa-map-o fa-fw' }),
                      ' ' + _t({ id: 'Section.Analytics.Maps' })
                    )
                  )
                ),
                React.createElement(
                  'li',
                  null,
                  React.createElement(
                    Link,
                    { to: '/analytics/basic-reports' },
                    React.createElement(
                      'span',
                      { style: { paddingLeft: 18 } },
                      React.createElement('i', { className: 'fa fa-file-text fa-fw' }),
                      ' ' + _t({ id: 'Section.Analytics.BasicReports' })
                    )
                  )
                ),
                React.createElement(
                  'li',
                  null,
                  React.createElement(
                    Link,
                    { to: '/analytics/fav' },
                    React.createElement(
                      'span',
                      { style: { paddingLeft: 18 } },
                      React.createElement('i', { className: 'fa fa-diamond fa-fw' }),
                      ' ' + _t({ id: 'Section.Analytics.Fav.Title' })
                    )
                  )
                )
              )
            )
          ),
          React.createElement(
            'li',
            null,
            React.createElement(
              Link,
              { to: '/forecasting' },
              React.createElement('i', { className: 'fa fa-line-chart fa-fw' }),
              ' ' + _t({ id: 'Section.Forecasting' })
            )
          ),
          React.createElement(
            'li',
            null,
            React.createElement(
              'a',
              { href: '#', onClick: function onClick() {
                  return _this._toggleExpand('consumers');
                } },
              React.createElement('i', { className: 'fa fa-home fa-fw' }),
              ' ' + _t({ id: 'Section.Consumers' }) + ' ',
              this.state.expand.consumers ? React.createElement('i', { className: 'fa fa-caret-up fa-fw' }) : React.createElement('i', { className: 'fa fa-caret-down fa-fw' })
            ),
            React.createElement(
              Collapsible,
              { open: this.state.expand.consumers },
              React.createElement(
                'ul',
                { className: 'nav' },
                React.createElement(
                  'li',
                  null,
                  React.createElement(
                    Link,
                    { to: '/users' },
                    React.createElement(
                      'span',
                      { style: { paddingLeft: 18 } },
                      React.createElement('i', { className: 'fa fa-user fa-fw' }),
                      ' ' + _t({ id: 'Section.Users.Title' })
                    )
                  )
                ),
                React.createElement(
                  'li',
                  null,
                  React.createElement(
                    Link,
                    { to: '/groups' },
                    React.createElement(
                      'span',
                      { style: { paddingLeft: 18 } },
                      React.createElement('i', { className: 'fa fa-group fa-fw' }),
                      ' ' + _t({ id: 'Section.Groups.Title' })
                    )
                  )
                )
              )
            )
          ),
          scheduler,
          React.createElement(
            'li',
            null,
            React.createElement(
              'a',
              { href: '#', onClick: function onClick() {
                  return _this._toggleExpand('alerts');
                } },
              React.createElement('i', { className: 'fa fa-commenting-o fa-fw' }),
              ' ' + _t({ id: 'Section.Engagement.Title' }) + ' ',
              this.state.alerts ? React.createElement('i', { className: 'fa fa-caret-up fa-fw' }) : React.createElement('i', { className: 'fa fa-caret-down fa-fw' })
            ),
            React.createElement(
              Collapsible,
              { open: this.state.expand.alerts },
              React.createElement(
                'ul',
                { className: 'nav' },
                React.createElement(
                  'li',
                  null,
                  React.createElement(
                    Link,
                    { to: '/manage-alerts' },
                    React.createElement(
                      'span',
                      { style: { paddingLeft: 18 } },
                      React.createElement('i', { className: 'fa fa-list-ol fa-fw' }),
                      ' ' + _t({ id: 'Section.Engagement.Messages.Title' })
                    )
                  )
                ),
                React.createElement(
                  'li',
                  null,
                  React.createElement(
                    Link,
                    { to: '/announcements' },
                    React.createElement(
                      'span',
                      { style: { paddingLeft: 18 } },
                      React.createElement('i', { className: 'fa fa-wechat fa-fw' }),
                      ' ' + _t({ id: 'Section.Engagement.Announcements.Title' })
                    )
                  )
                ),
                React.createElement(
                  'li',
                  null,
                  React.createElement(
                    Link,
                    { to: '/savings' },
                    React.createElement(
                      'span',
                      { style: { paddingLeft: 18 } },
                      React.createElement('i', { className: 'fa fa-tint fa-fw' }),
                      ' ' + _t({ id: 'Section.Savings' })
                    )
                  )
                ),
                React.createElement(
                  'li',
                  null,
                  React.createElement(
                    Link,
                    { to: '/budgets' },
                    React.createElement(
                      'span',
                      { style: { paddingLeft: 18 } },
                      React.createElement('i', { className: 'fa fa-pie-chart fa-fw' }),
                      ' ' + _t({ id: 'Section.Budgets' })
                    )
                  )
                )
              )
            )
          ),
          React.createElement(
            'li',
            null,
            React.createElement(
              'a',
              { href: '#', onClick: function onClick() {
                  return _this._toggleExpand('trials');
                } },
              React.createElement('i', { className: 'fa fa-flask fa-fw' }),
              ' ' + _t({ id: 'Section.Trials.Group' }) + ' ',
              this.state.expand.trials ? React.createElement('i', { className: 'fa fa-caret-up fa-fw' }) : React.createElement('i', { className: 'fa fa-caret-down fa-fw' })
            ),
            React.createElement(
              Collapsible,
              { open: this.state.expand.trials },
              React.createElement(
                'ul',
                { className: 'nav' },
                React.createElement(
                  'li',
                  null,
                  React.createElement(
                    Link,
                    { to: '/trials/overview' },
                    React.createElement(
                      'span',
                      { style: { paddingLeft: 18 } },
                      React.createElement('i', { className: 'fa fa-table fa-fw' }),
                      ' ' + _t({ id: 'Section.Trials.Overview.Title' })
                    )
                  )
                ),
                React.createElement(
                  'li',
                  null,
                  React.createElement(
                    Link,
                    { to: '/trials/pilot-reports' },
                    React.createElement(
                      'span',
                      { style: { paddingLeft: 18 } },
                      React.createElement('i', { className: 'fa fa-pie-chart fa-fw' }),
                      ' ' + _t({ id: 'Section.Trials.PilotReports' })
                    )
                  )
                )
              )
            )
          ),
          React.createElement(
            'li',
            null,
            React.createElement(
              'a',
              { href: '#', onClick: function onClick() {
                  return _this._toggleExpand('support');
                } },
              React.createElement('i', { className: 'fa fa-support fa-fw' }),
              ' ' + _t({ id: 'Section.Support.Group' }) + ' ',
              this.state.expand.support ? React.createElement('i', { className: 'fa fa-caret-up fa-fw' }) : React.createElement('i', { className: 'fa fa-caret-down fa-fw' })
            ),
            React.createElement(
              Collapsible,
              { open: this.state.expand.support },
              React.createElement(
                'ul',
                { className: 'nav' },
                log,
                React.createElement(
                  'li',
                  null,
                  React.createElement(
                    Link,
                    { to: '/mode/management' },
                    React.createElement(
                      'span',
                      { style: { paddingLeft: 18 } },
                      React.createElement('i', { className: 'fa fa-sliders fa-fw' }),
                      ' ' + _t({ id: 'Section.ModeManagement' })
                    )
                  )
                ),
                React.createElement(
                  'li',
                  null,
                  React.createElement(
                    Link,
                    { to: '/support/data' },
                    React.createElement(
                      'span',
                      { style: { paddingLeft: 18 } },
                      React.createElement('i', { className: 'fa fa-database fa-fw' }),
                      ' ' + _t({ id: 'Section.Support.Data' })
                    )
                  )
                ),
                React.createElement(
                  'li',
                  null,
                  React.createElement(
                    Link,
                    { to: '/support/export' },
                    React.createElement(
                      'span',
                      { style: { paddingLeft: 18 } },
                      React.createElement('i', { className: 'fa fa-cloud-download fa-fw' }),
                      ' ' + _t({ id: 'Section.Support.DataExport.Title' })
                    )
                  )
                ),
                React.createElement(
                  'li',
                  null,
                  React.createElement(
                    Link,
                    { to: '/support/messages' },
                    React.createElement(
                      'span',
                      { style: { paddingLeft: 18 } },
                      React.createElement('i', { className: 'fa fa-commenting fa-fw' }),
                      ' ' + _t({ id: 'Section.Support.Messages.Title' })
                    )
                  )
                ),
                development
              )
            )
          ),
          React.createElement(
            'li',
            null,
            React.createElement(
              Link,
              { to: '/settings/user' },
              React.createElement('i', { className: 'fa fa-user fa-fw' }),
              ' ' + _t({ id: 'Settings.User' })
            )
          )
        )
      )
    );
  }
}));

module.exports = NavigationTree;

},{"../constants/Constants":573,"./Collapsible":482,"livereactload/babel-transform":28,"prop-types":35,"react":"react","react-router":"react-router"}],500:[function(require,module,exports){
'use strict';

var _react2 = require('react');

var _react3 = _interopRequireDefault(_react2);

var _babelTransform = require('livereactload/babel-transform');

var _babelTransform2 = _interopRequireDefault(_babelTransform);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _components = {
  _component: {}
};

var _livereactloadBabelTransform2 = (0, _babelTransform2.default)({
  filename: '/home/daiad/Desktop/Development/home-web/utility/src/main/frontend/components/PasswordReset.js',
  components: _components,
  locals: [],
  imports: [_react3.default]
});

function _wrapComponent(id) {
  return function (Component) {
    return _livereactloadBabelTransform2(Component, id);
  };
}

var React = require('react');

var _require = require('redux'),
    bindActionCreators = _require.bindActionCreators;

var _require2 = require('react-redux'),
    connect = _require2.connect;

var Panel = require('react-bootstrap').Panel;
var ReCAPTCHA = require("react-google-recaptcha");

var _require3 = require('react-intl'),
    FormattedMessage = _require3.FormattedMessage;

var AlertDismissable = require('./AlertDismissable');

var _require4 = require('../actions/PasswordActions'),
    reset = _require4.reset,
    setCaptchaValid = _require4.setCaptchaValid,
    clearErrors = _require4.clearErrors,
    setErrors = _require4.setErrors;

var PasswordReset = _wrapComponent('_component')(React.createClass({
  displayName: 'PasswordReset',


  contextTypes: {
    intl: React.PropTypes.object
  },

  onCaptchaChange: function onCaptchaChange(value) {
    this.props.actions.setCaptchaValid(value != null);
  },

  hideErrors: function hideErrors() {
    this.props.actions.clearErrors();
  },

  onResetPassword: function onResetPassword(e) {
    e.preventDefault();

    this.props.actions.clearErrors();

    var errors = [];

    if (!this.refs.password1.value) {
      errors.push({ code: 'PasswordErrorCode.INVALID_LENGTH' });
    } else if (this.refs.password1.value != this.refs.password2.value) {
      errors.push({ code: 'PasswordErrorCode.VERIFICATION_FAILED' });
    }
    if (!this.props.isCaptchaValid) {
      errors.push({ code: 'PasswordErrorCode.CAPTCHA_ERROR' });
    }

    if (errors.length > 0) {
      this.props.actions.setErrors(errors);
    } else {
      this.refs.recaptcha.reset();
      this.props.actions.setCaptchaValid(false);

      this.props.actions.reset(this.props.routeParams.token, this.refs.password1.value);
    }
  },

  renderForm: function renderForm() {
    var _t = this.context.intl.formatMessage;

    return React.createElement(
      'div',
      { style: { width: '100%' } },
      React.createElement(
        'nav',
        { className: 'navbar navbar-default navbar-fixed-top' },
        React.createElement(
          'div',
          { className: 'navbar-header', style: { paddingLeft: 15 } },
          React.createElement(
            'a',
            { className: 'navbar-brand', href: '#', style: { padding: 0, margin: 0 } },
            React.createElement('img', { alt: 'DAIAD', src: '/assets/images/shared/daiad-logo.svg', style: { marginTop: 15 } })
          )
        )
      ),
      React.createElement(
        'div',
        { style: { marginLeft: 'auto', marginRight: 'auto', width: '328px', marginTop: '80px' } },
        React.createElement(
          'h4',
          { style: { textAlign: 'center' } },
          React.createElement(FormattedMessage, { id: 'PasswordResetForm.title' })
        ),
        React.createElement(
          Panel,
          null,
          React.createElement(
            'form',
            { key: 'login', action: this.props.action },
            React.createElement(
              'div',
              { className: 'form-group' },
              React.createElement('input', { id: 'password1',
                name: 'password1',
                type: 'password',
                ref: 'password1',
                placeholder: _t({ id: 'PasswordResetForm.placehoder.password1' }),
                className: 'form-control' })
            ),
            React.createElement(
              'div',
              { className: 'form-group' },
              React.createElement('input', { id: 'password2',
                name: 'password2',
                type: 'password',
                ref: 'password2',
                placeholder: _t({ id: 'PasswordResetForm.placehoder.password2' }),
                className: 'form-control' })
            ),
            React.createElement(
              'div',
              { className: 'form-group' },
              React.createElement(ReCAPTCHA, { ref: 'recaptcha',
                sitekey: properties.captchaKey,
                onChange: this.onCaptchaChange
              })
            ),
            React.createElement(
              'button',
              { type: 'submit',
                className: 'btn btn-success action-login' + (this.props.isLoading ? ' disabled' : ''),
                onClick: this.onResetPassword },
              React.createElement(
                'span',
                null,
                this.props.isLoading ? React.createElement('i', { className: 'fa fa-refresh fa-spin', style: { color: '#fff' } }) : '',
                this.props.isLoading ? React.createElement(
                  'span',
                  null,
                  '\xA0'
                ) : '',
                React.createElement(FormattedMessage, { id: 'PasswordResetForm.button.reset' })
              )
            )
          )
        ),
        React.createElement(
          'div',
          { style: { marginTop: 15 } },
          React.createElement(AlertDismissable, { i18nNamespace: 'Error.',
            show: this.props.errors != null,
            messages: this.props.errors,
            dismissFunc: this.hideErrors })
        )
      )
    );
  },

  renderSuccess: function renderSuccess() {
    return React.createElement(
      'div',
      { style: { width: '100%' } },
      React.createElement(
        'nav',
        { className: 'navbar navbar-default navbar-fixed-top' },
        React.createElement(
          'div',
          { className: 'navbar-header', style: { paddingLeft: 15 } },
          React.createElement(
            'a',
            { className: 'navbar-brand', href: '#', style: { padding: 0, margin: 0 } },
            React.createElement('img', { alt: 'DAIAD', src: '/assets/images/shared/daiad-logo.svg', style: { marginTop: 15 } })
          )
        )
      ),
      React.createElement(
        'div',
        { style: { marginLeft: 'auto', marginRight: 'auto', width: '400px', marginTop: '80px' } },
        React.createElement(
          'a',
          { className: 'btn btn-success', style: { textAlign: 'center', fontSize: 'large', whiteSpace: 'normal' }, href: '/home/' },
          React.createElement(FormattedMessage, { id: 'PasswordResetForm.message.success' })
        )
      )
    );
  },

  render: function render() {
    if (this.props.success) {
      return this.renderSuccess();
    } else {
      return this.renderForm();
    }
  }

}));

PasswordReset.icon = 'key';
PasswordReset.title = 'Page.PasswordReset';

function mapStateToProps(state) {
  return {
    isAuthenticated: state.session.isAuthenticated,
    isLoading: state.password.isLoading,
    errors: state.password.errors,
    success: state.password.success,
    isCaptchaValid: state.password.reset.isCaptchaValid,
    routing: state.routing
  };
}

function mapDispatchToProps(dispatch) {
  return {
    actions: bindActionCreators(Object.assign({}, { reset: reset, setCaptchaValid: setCaptchaValid, clearErrors: clearErrors, setErrors: setErrors }), dispatch)
  };
}

module.exports = connect(mapStateToProps, mapDispatchToProps)(PasswordReset);

},{"../actions/PasswordActions":444,"./AlertDismissable":477,"livereactload/babel-transform":28,"react":"react","react-bootstrap":"react-bootstrap","react-google-recaptcha":113,"react-intl":"react-intl","react-redux":"react-redux","redux":"redux"}],501:[function(require,module,exports){
'use strict';

var React = require('react');
var ReactDOM = require('react-dom');

var _ = require('lodash');

var PortalMixin = {

  propTypes: {
    elementClassName: React.PropTypes.string,
    prefix: React.PropTypes.string
  },

  getDefaultProps: function getDefaultProps() {
    return {
      prefix: 'portal',
      elementClassName: 'mixin'
    };
  },

  _onResizeInternalHandler: function _onResizeInternalHandler() {
    this.getElement().style.width = this.getContainer().offsetWidth + 'px';

    if (typeof this.onResize === 'function') {
      this.onResize();
    }
  },

  _hasClass: function _hasClass(className) {
    if (this._element.classList) {
      return this._element.classList.contains(className);
    } else {
      return new RegExp('(^| )' + className + '( |$)', 'gi').test(className);
    }
  },

  _addClass: function _addClass(className) {
    if (this._element.classList) {
      this._element.classList.add(className);
    } else {
      this._element.className += ' ' + className;
    }
  },

  _removeClass: function _removeClass(className) {
    if (this._element.classList) {
      this._element.classList.remove(className);
    } else {
      this._element.className = this._element.className.replace(new RegExp('(^|\\b)' + className.split(' ').join('|') + '(\\b|$)', 'gi'), ' ');
    }
  },

  _createContainer: function _createContainer(id) {
    this._container = ReactDOM.findDOMNode(this) || document.body;
    this._element = this._container.appendChild(document.createElement('div'));

    this._element.setAttribute('id', id);

    if (this.props.elementClassName) {
      this._addClass(this.props.elementClassName);
    }
    if (window && this.onResize) {
      window.addEventListener('resize', this._onResizeInternalHandler);
    }
  },

  _destroyContainer: function _destroyContainer() {
    if (this._element) {
      this._element.parentNode.removeChild(this._element);
      if (window && this.onResize) {
        window.removeEventListener('resize', this._onResizeInternalHandler);
      }
    }
  },

  componentDidMount: function componentDidMount() {
    var id = null;
    if (this.props.prefix) {
      id = _.uniqueId(this.props.prefix);
    } else {
      id = _.uniqueId();
    }

    this._createContainer(id);
  },

  componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
    if (this.props.elementClassName != nextProps.elementClassName) {
      if (this.props.elementClassName) {
        this._removeClass(this.props.elementClassName);
      }

      if (nextProps.elementClassName) {
        this._addClass(nextProps.elementClassName);
      }
    }
  },

  shouldComponentUpdate: function shouldComponentUpdate(nextProps, nextState) {
    return false;
  },

  componentWillUnmount: function componentWillUnmount() {
    this._destroyContainer();
  },

  getId: function getId() {
    return this._element.getAttribute('id');
  },

  getElement: function getElement() {
    return this._element;
  },

  getContainer: function getContainer() {
    return this._container;
  },

  getElementClass: function getElementClass() {
    return this.elementClassName;
  }
};

module.exports = PortalMixin;

},{"lodash":"lodash","react":"react","react-dom":"react-dom"}],502:[function(require,module,exports){
'use strict';

var _react2 = require('react');

var _react3 = _interopRequireDefault(_react2);

var _babelTransform = require('livereactload/babel-transform');

var _babelTransform2 = _interopRequireDefault(_babelTransform);

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _components = {
  _component: {}
};

var _livereactloadBabelTransform2 = (0, _babelTransform2.default)({
  filename: '/home/daiad/Desktop/Development/home-web/utility/src/main/frontend/components/Table.js',
  components: _components,
  locals: [],
  imports: [_react3.default]
});

function _wrapComponent(id) {
  return function (Component) {
    return _livereactloadBabelTransform2(Component, id);
  };
}

var React = require('react');

var _require = require('react-intl'),
    injectIntl = _require.injectIntl,
    FormattedTime = _require.FormattedTime,
    FormattedDate = _require.FormattedDate;

var _require2 = require('react-router'),
    Link = _require2.Link;

var Bootstrap = require('react-bootstrap');
var Checkbox = require('./Checkbox');
var CellCheckbox = require('./CellCheckbox');

var PAGING_CLIENT_SIDE = 'client';
var PAGING_SERVER_SIDE = 'server';
var DEFAULT_PAGE = 1;

var Table = _wrapComponent('_component')(React.createClass({
  displayName: 'Table',

  getInitialState: function getInitialState() {
    return {
      activePage: this.props.defaultPage,
      sort: this.getSorter().defaultSort,
      order: this.getSorter().defaultOrder
    };
  },

  getDefaultProps: function getDefaultProps() {
    return {
      defaultPage: DEFAULT_PAGE,
      sortable: false,
      data: [],
      fields: [],
      pager: {
        size: 10,
        index: DEFAULT_PAGE - 1,
        mode: PAGING_CLIENT_SIDE
      },
      template: {
        empty: null
      },
      style: {}
    };
  },

  componentDidMount: function componentDidMount() {
    if (this.props.pager && this.props.pager.mode === PAGING_SERVER_SIDE) {
      if (typeof this.props.pager.onPageIndexChange !== 'function') {
        throw 'onPageIndexChange function must be provided as property in pager object for server side paging. Check Table';
      }
      if (this.props.sortable && typeof this.props.sorter.onSortChange !== 'function') {
        throw 'onSortChange function must be provided as property in sorter object with server side paging. Check Table';
      }
    }
  },

  componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
    //if data length is changed make sure to return to default page
    if (nextProps.pager && nextProps.pager.count != this.props.pager.count && this.state.activePage != this.props.defaultPage) {
      this.setState({ activePage: this.props.defaultPage });
    }
    if (nextProps.pager && nextProps.pager.index != this.props.pager.index) {
      this.setState({ activePage: nextProps.pager.index + 1 });
    }
  },

  getStyle: function getStyle() {
    return {
      table: _extends({}, this.props.style.table),
      header: _extends({
        textAlign: 'left'
      }, this.props.style.header),
      body: _extends({}, this.props.style.body),
      footer: _extends({}, this.props.style.footer),
      pager: _extends({
        float: 'right'
      }, this.props.style.pager),
      row: this.props.style.row
    };
  },

  getSorter: function getSorter() {
    var firstVisible = this.props.fields.find(function (it) {
      return !it.hidden;
    });
    return _extends({
      defaultSort: firstVisible ? firstVisible.name : null,
      defaultOrder: 'asc'
    }, this.props.sorter);
  },

  getPager: function getPager() {
    return _extends({
      count: Array.isArray(this.props.data) ? this.props.data.length : 0
    }, this.props.pager);
  },

  getSortOrderOnClick: function getSortOrderOnClick(key) {
    if (this.state.sort === key) {
      return this.state.order === 'asc' ? 'desc' : 'asc';
    } else {
      return 'asc';
    }
  },

  onSortChange: function onSortChange(key) {
    var order = this.getSortOrderOnClick(key);

    if (typeof this.getSorter().onSortChange === 'function') {
      this.getSorter().onSortChange(key, order);
    }

    this.setState({ sort: key, order: order });
    this.onPageIndexChange(this.props.defaultPage);
  },

  onPageIndexChange: function onPageIndexChange(index) {
    if (typeof this.props.pager.onPageIndexChange === 'function') {
      this.props.pager.onPageIndexChange(index - 1);
    }

    this.setState({
      activePage: index
    });
  },

  render: function render() {
    var _state = this.state,
        activePage = _state.activePage,
        sort = _state.sort,
        order = _state.order;
    var _props = this.props,
        fields = _props.fields,
        data = _props.data,
        template = _props.template,
        intl = _props.intl,
        sortable = _props.sortable;


    if (!Array.isArray(data)) {
      if (template.empty) {
        return template.empty;
      } else {
        return null;
      }
    }

    var pager = this.getPager();
    var style = this.getStyle();

    var totalPages = pager && pager.count && pager.size ? Math.ceil(pager.count / pager.size) : 1;

    var visibleFields = fields.filter(function (field) {
      return !field.hidden;
    });

    var filteredData = pager && pager.size && pager.mode && pager.mode === PAGING_CLIENT_SIDE ? data.sort(function (a, b) {
      var compA = normalize(a);
      var compB = normalize(b);
      if (compA[sort] > compB[sort]) {
        return order === 'asc' ? 1 : -1;
      } else if (compA[sort] < compB[sort]) {
        return order === 'asc' ? -1 : 1;
      }
      return 0;
    }).filter(function (row, idx) {
      return idx >= (activePage - 1) * pager.size && idx < activePage * pager.size;
    }) : data;

    if (filteredData.length === 0 && template.empty) {
      return template.empty;
    }
    return React.createElement(
      'div',
      { className: 'clearfix' },
      React.createElement(
        'div',
        { style: { overflow: 'auto' } },
        React.createElement(
          Bootstrap.Table,
          {
            hover: true,
            style: style.table
          },
          React.createElement(Header, {
            fields: visibleFields,
            intl: intl,
            style: style.header,
            sortable: sortable,
            onSortChange: this.onSortChange,
            activeSort: sort,
            activeSortOrder: order
          }),
          React.createElement(Body, {
            fields: visibleFields,
            data: filteredData,
            bodyStyle: style.body,
            rowStyle: style.row
          })
        )
      ),
      React.createElement(
        'div',
        { style: style.footer },
        React.createElement(Pager, {
          pager: pager != null,
          totalPages: totalPages,
          activePage: activePage,
          onPageIndexChange: this.onPageIndexChange,
          style: style.pager
        })
      )
    );
  }
}));

function Pager(props) {
  var pager = props.pager,
      totalPages = props.totalPages,
      activePage = props.activePage,
      onPageIndexChange = props.onPageIndexChange,
      style = props.style;


  if (!pager) {
    return React.createElement('div', null);
  }
  return React.createElement(
    'div',
    null,
    React.createElement(Bootstrap.Pagination, {
      prev: true,
      next: true,
      first: true,
      last: true,
      ellipsis: true,
      items: totalPages,
      maxButtons: 7,
      activePage: activePage,
      onSelect: function onSelect(event, selectedEvent) {
        event.preventDefault();
        onPageIndexChange(selectedEvent.eventKey);
      },
      style: style
    })
  );
}

function Header(props) {
  var fields = props.fields,
      intl = props.intl,
      style = props.style,
      sortable = props.sortable,
      activeSort = props.activeSort,
      activeSortOrder = props.activeSortOrder,
      onSortChange = props.onSortChange;

  var _t = intl.formatMessage;
  return React.createElement(
    'thead',
    null,
    React.createElement(
      'tr',
      null,
      fields.map(function (field) {
        return React.createElement(
          'th',
          {
            key: field.name,
            style: style
          },
          wrapWithSort(field.title ? _t({ id: field.title }) : '', field, sortable, onSortChange, activeSort === field.name, activeSortOrder)
        );
      })
    )
  );
}

function wrapWithSort(content, field, sortable, onSortChange, active, order) {
  return !sortable || field.sortable === false || field.type === 'action' || field.type === 'alterable-boolean' ? content : React.createElement(
    'a',
    {
      style: { cursor: 'pointer' },
      onClick: function onClick() {
        return onSortChange(field.name);
      } },
    content,
    '\xA0',
    active ? order === 'asc' ? React.createElement('i', { className: 'fa fa-angle-up' }) : React.createElement('i', { className: 'fa fa-angle-down' }) : React.createElement('i', null)
  );
}

function Body(props) {
  var data = props.data,
      fields = props.fields,
      bodyStyle = props.bodyStyle,
      rowStyle = props.rowStyle;

  return React.createElement(
    'tbody',
    { style: bodyStyle },
    data.map(function (row, rowIndex, total) {
      return React.createElement(Row, {
        key: rowIndex,
        fields: fields,
        row: row,
        style: getPropertyValue(rowStyle, row, rowIndex, total.length)
      });
    })
  );
}

function Row(props) {
  var fields = props.fields,
      row = props.row,
      style = props.style;

  return React.createElement(
    'tr',
    { style: style },
    fields.map(function (field, columnIdx) {
      return React.createElement(Cell, {
        key: columnIdx,
        row: row,
        field: field
      });
    })
  );
}

function Cell(props) {
  var row = props.row,
      field = props.field;


  var style = getPropertyValue(field.style, field, row);
  var className = getPropertyValue(field.className, field, row);

  var content = wrapWithLink(getCell(field, row, className), field.link, row);

  return React.createElement(
    'td',
    { style: style },
    content
  );
}

//helper functions
function getCell(field, row, className) {

  var value = row[field.name];

  //only action, alterable boolean allowed to have falsy value
  if (field.type !== 'action' && field.type !== 'alterable-boolean' && value == null) {
    return React.createElement('div', null);
  }

  if (!field.type) {
    return React.createElement(
      'div',
      { className: className },
      value
    );
  } else if (field.type === 'action') {

    var visible = getPropertyValue(field.visible, field, row);

    if (visible == null || visible) {
      var icon = getPropertyValue(field.icon, field, row);
      var image = getPropertyValue(field.image, field, row);
      var _className = icon ? 'fa fa-' + icon + ' fa-fw' : getPropertyValue(field.className, field, row);
      var color = getPropertyValue(field.color, field, row);
      var clickHandler = function clickHandler() {
        return getPropertyValue(field.handler, field, row);
      };
      var style = clickHandler ? { color: color, cursor: 'pointer' } : {};

      return React.createElement(
        'i',
        { className: _className,
          style: style,
          onClick: clickHandler
        },
        image ? React.createElement('img', { src: image }) : React.createElement('div', null)
      );
    } else {
      return React.createElement('div', null);
    }
  } else if (field.type === 'datetime') {
    return React.createElement(FormattedTime, {
      value: value,
      day: 'numeric',
      month: 'numeric',
      year: 'numeric',
      hour: 'numeric',
      minute: 'numeric'
    });
  } else if (field.type === 'date' || value instanceof Date) {
    return React.createElement(FormattedDate, {
      value: value,
      day: 'numeric',
      month: 'long',
      year: 'numeric'
    });
  } else if (field.type === 'time') {
    return React.createElement(FormattedTime, {
      value: value,
      hour: 'numeric',
      minute: 'numeric' });
  } else if (field.type === 'progress') {
    return React.createElement(Bootstrap.ProgressBar, {
      now: value,
      label: '%(percent)s%'
    });
  } else if (field.type === 'alterable-boolean') {
    return React.createElement(CellCheckbox, {
      checked: value,
      rowId: row.id,
      propertyName: field.name,
      disabled: false,
      onUserClick: field.handler
    });
  } else if (field.type === 'boolean' || typeof value === 'boolean') {
    return React.createElement(Checkbox, {
      checked: value,
      disabled: true
    });
  } else if (field.type === 'element') {
    return value;
  } else {
    console.warn('Cell type [' + field.type + '] is not supported.');
  }
}

function getPropertyValue(property) {
  //all args after first
  var args = Array.prototype.slice.call(arguments, 1);
  return typeof property === 'function' ? property.apply(null, args) : property;
}

function wrapWithLink(content, link, row) {
  return link ? React.createElement(
    Link,
    { to: formatLink(getPropertyValue(link, row), row) },
    content
  ) : content;
}

function formatLink(route, row) {
  return Object.keys(row).reduce(function (link, key) {
    return link && link.replace(new RegExp('\{' + key + '\}'), row[key]) || '';
  }, route);
}

function normalize(input) {
  if (typeof input === 'string') {
    return input.toLowerCase();
  }
  return input;
}

var IntlTable = injectIntl(Table);

IntlTable.PAGING_CLIENT_SIDE = PAGING_CLIENT_SIDE;
IntlTable.PAGING_SERVER_SIDE = PAGING_SERVER_SIDE;

module.exports = IntlTable;

},{"./CellCheckbox":478,"./Checkbox":481,"livereactload/babel-transform":28,"react":"react","react-bootstrap":"react-bootstrap","react-intl":"react-intl","react-router":"react-router"}],503:[function(require,module,exports){
'use strict';

var _react2 = require('react');

var _react3 = _interopRequireDefault(_react2);

var _babelTransform = require('livereactload/babel-transform');

var _babelTransform2 = _interopRequireDefault(_babelTransform);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _components = {
  _component: {}
};

var _livereactloadBabelTransform2 = (0, _babelTransform2.default)({
  filename: '/home/daiad/Desktop/Development/home-web/utility/src/main/frontend/components/Timeline.js',
  components: _components,
  locals: [],
  imports: [_react3.default]
});

function _wrapComponent(id) {
  return function (Component) {
    return _livereactloadBabelTransform2(Component, id);
  };
}

var React = require('react');
var Bootstrap = require('react-bootstrap');

var _refresh = function _refresh() {
  var index;

  if (this.state.index === this.props.values.length - 1) {
    index = 0;
  } else {
    index = this.state.index + 1;
  }

  this.setState({ index: index });

  if (typeof this.props.onChange === 'function') {
    this.props.onChange(this.props.values[index], this.props.labels[index], index);
  }
};

var _play = function _play() {
  var timeout = null;

  if (this.state.animate) {
    if (this.state.timeout) {
      clearInterval(this.state.timeout);
    }
  } else {
    timeout = setInterval(_refresh.bind(this), this.props.speed);
  }

  this.setState({
    animate: !this.state.animate,
    timeout: timeout
  });
};

var _click = function _click() {
  if (this.state.animate) {
    _play.bind(this)();
  }
};

var _move = function _move(value, e) {
  var index = parseInt(this.refs.slider.value) - 1;

  this.setState({
    index: index
  });

  if (typeof this.props.onChange === 'function') {
    this.props.onChange(this.props.values[index], this.props.labels[index], index);
  }
};

var Timeline = _wrapComponent('_component')(React.createClass({
  displayName: 'Timeline',

  getInitialState: function getInitialState() {
    return {
      index: null,
      animate: false,
      timeout: this.props.value
    };
  },

  componentWillMount: function componentWillMount() {
    this.setState({
      index: this.props.defaultIndex
    });
  },

  componentWillUnmount: function componentWillUnmount() {
    if (this.state.timeout) {
      clearInterval(this.state.timeout);
    }
  },

  getDefaultProps: function getDefaultProps() {
    return {
      labels: [],
      values: [],
      defaultIndex: 0,
      speed: 1000
    };
  },

  getLabel: function getLabel() {
    var index = this.state.index;

    if (this.props.labels && index >= 0 && index < this.props.labels.length) {
      return React.createElement(
        'span',
        null,
        this.props.labels[index]
      );
    }
    return React.createElement('span', null);
  },

  render: function render() {
    var style = this.props.style;


    return React.createElement(
      'div',
      { className: 'row', style: style },
      React.createElement(
        'div',
        { style: { float: 'left', marginLeft: 12 } },
        React.createElement(
          Bootstrap.Button,
          { bsStyle: 'default', className: 'btn-circle', style: { marginRight: 10 }, onClick: _play.bind(this) },
          React.createElement('i', { className: 'fa fa-' + (this.state.animate ? 'pause' : 'play') + ' fa-fw' })
        )
      ),
      React.createElement(
        'div',
        { style: { float: 'left', paddingTop: 6 } },
        this.getLabel()
      ),
      React.createElement(
        'div',
        { className: 'col-md-6', style: { float: 'right', paddingTop: 5 } },
        React.createElement('input', { type: 'range', min: 1,
          max: this.props.labels.length,
          step: 1,
          value: this.state.index + 1,
          ref: 'slider',
          onChange: _move.bind(this),
          onClick: _click.bind(this)
        })
      )
    );
  }
}));

module.exports = Timeline;

},{"livereactload/babel-transform":28,"react":"react","react-bootstrap":"react-bootstrap"}],504:[function(require,module,exports){
'use strict';

var _react2 = require('react');

var _react3 = _interopRequireDefault(_react2);

var _babelTransform = require('livereactload/babel-transform');

var _babelTransform2 = _interopRequireDefault(_babelTransform);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _components = {
  _component: {},
  _component2: {},
  _component3: {},
  _component4: {},
  _component5: {}
};

var _livereactloadBabelTransform2 = (0, _babelTransform2.default)({
  filename: '/home/daiad/Desktop/Development/home-web/utility/src/main/frontend/components/TipsEditTable.js',
  components: _components,
  locals: [],
  imports: [_react3.default]
});

function _wrapComponent(id) {
  return function (Component) {
    return _livereactloadBabelTransform2(Component, id);
  };
}

var React = require('react');

var _require = require('react-intl'),
    FormattedMessage = _require.FormattedMessage,
    FormattedTime = _require.FormattedTime,
    FormattedDate = _require.FormattedDate;

var Bootstrap = require('react-bootstrap');
var Checkbox = require('./Checkbox');
var IndeterminateCheckbox = require('./IndeterminateCheckbox');

var justSaved = false;
var saveDisabled;

var EditTable = _wrapComponent('_component')(React.createClass({
  displayName: 'EditTable',
  onPageIndexChange: function onPageIndexChange(event, selectedEvent) {
    this.props.setActivePage(selectedEvent.eventKey - 1);
  },


  syncStateData: function syncStateData() {
    var syncdData = this.props.data;
    var syncdRows = syncdData.rows;
    if (this.props.currentTip) {
      for (var r = 0, len = syncdRows.length; r < len; r++) {
        var row = syncdRows[r];
        if (row.id == this.props.currentTip.id) {
          row.title = this.props.currentTip.title;
          row.description = this.props.currentTip.description;
        }
      }
    }
    syncdData.rows = syncdRows;
    return syncdData;
  },
  syncInitialRows: function syncInitialRows() {
    var syncdData = this.props.initialRows;
    var syncdRows = syncdData.rows;
    if (this.props.currentTip) {
      for (var r = 0, len = syncdRows.length; r < len; r++) {
        var row = syncdRows[r];
        if (row.id == this.props.currentTip.id) {
          row.title = this.props.currentTip.title;
          row.description = this.props.currentTip.description;
          row.active = this.props.currentTip.active;
        }
      }
    }
    syncdData.rows = syncdRows;
    return syncdData;
  },
  getVisibleCellsDraftFlags: function getVisibleCellsDraftFlags(visibleRows) {
    var visibleCellDraftFlags = {};
    for (var r = 0, len = visibleRows.length; r < len; r++) {
      var row = visibleRows[r];
      var rowDraftFlags = {};
      visibleCellDraftFlags[row.id] = rowDraftFlags;
    }
    return visibleCellDraftFlags;
  },

  handleCheckboxChange: function handleCheckboxChange(rowId, propertyName, currentValue) {
    var newData = Object.assign({}, this.props.data);
    for (var i in newData.rows) {
      if (newData.rows[i].index == rowId) {
        newData.rows[i].active = !newData.rows[i].active;
        break;
      }
    }
    this.props.setActivationChanged(newData);
  },
  getDefaultProps: function getDefaultProps() {
    return {
      data: {
        fields: [],
        rows: [],
        pager: {
          index: 0,
          size: 8
        }
      }
    };
  },
  saveActiveStatusChanges: function saveActiveStatusChanges() {
    this.props.saveActiveStatusAction(this.getChangedRows());
    justSaved = true;
  },

  getChangedRows: function getChangedRows() {
    var changedRows = [];

    var a1 = this.props.initialRows.rows;
    var a2 = this.props.data.rows;
    for (var i = 0; i < a1.length; i++) {
      if (a1[i].active !== a2[i].active) {
        changedRows.push(a2[i]);
      }
    }
    return changedRows;
  },

  render: function render() {
    var visibleData = Object.assign({}, this.syncStateData(this.props.data), { rows: this.props.data.rows.slice(this.props.activePage * this.props.data.pager.size, (this.props.activePage + 1) * this.props.data.pager.size)
    });

    var numberOfPages = Math.ceil(this.props.data.rows.length / this.props.data.pager.size);
    var saveButton;

    if (justSaved) {
      saveDisabled = true;
    } else if (!_.isEqual(this.props.initialRows.rows, this.props.data.rows)) {
      saveDisabled = false;
    } else {
      saveDisabled = true;
    }
    justSaved = false;
    saveButton = React.createElement(
      'div',
      { className: 'pull-left', style: { marginTop: 20, marginBottom: 20 } },
      React.createElement(
        'button',
        { id: 'logout',
          type: 'submit',
          className: 'btn btn-primary',
          style: { height: 33 },
          disabled: saveDisabled,
          onClick: this.saveActiveStatusChanges },
        React.createElement(FormattedMessage, { id: 'Table.Save' })
      )
    );

    return React.createElement(
      'div',
      { className: 'clearfix' },
      React.createElement(
        Bootstrap.Table,
        { hover: true, style: { margin: 0, padding: 0 } },
        React.createElement(EditTable.Header, {
          data: this.props.data }),
        React.createElement(EditTable.Body, { data: visibleData,
          draftFlags: this.getVisibleCellsDraftFlags(visibleData.rows),
          checkboxHandler: this.handleCheckboxChange })
      ),
      saveButton,
      React.createElement(
        'div',
        { style: { float: 'right' } },
        React.createElement(Bootstrap.Pagination, { prev: true, next: true, first: true, last: true, ellipsis: true,
          items: numberOfPages,
          maxButtons: 7,
          activePage: this.props.activePage + 1,
          onSelect: this.onPageIndexChange
        })
      )
    );
  }
}));

var Header = _wrapComponent('_component2')(React.createClass({
  displayName: 'Header',

  contextTypes: {
    intl: React.PropTypes.object
  },

  render: function render() {
    var _t = this.context.intl.formatMessage;
    var self = this;

    var header = this.props.data.fields.filter(function (f) {
      return !f.hidden;
    }).map(function (field) {
      switch (field.type) {
        case 'action':
          return React.createElement(
            'th',
            { key: field.name, style: { width: 24 } },
            field.title ? _t({ id: field.title }) : ''
          );
        case 'boolean':
          return React.createElement(
            'th',
            { key: field.name, style: { width: 90 } },
            field.title ? _t({ id: field.title }) : ''
          );
        case 'property':
          return React.createElement(
            'th',
            { key: field.name, style: { width: 90 } },
            React.createElement(IndeterminateCheckbox, {
              propertyName: field.name,
              checked: true,
              disabled: false,
              action: self.props.toggleCheckBoxes
            }),
            field.title ? _t({ id: field.title }) : ''
          );
      }

      return React.createElement(
        'th',
        { key: field.name },
        field.title ? _t({ id: field.title }) : ''
      );
    });

    return React.createElement(
      'thead',
      null,
      React.createElement(
        'tr',
        null,
        header
      )
    );
  }
}));

var Body = _wrapComponent('_component3')(React.createClass({
  displayName: 'Body',

  render: function render() {
    var self = this;
    var rows = this.props.data.rows.map(function (row, rowIndex) {
      return React.createElement(EditTable.Row, { key: rowIndex,
        fields: self.props.data.fields,
        row: row,
        draftFlags: self.props.draftFlags[row.id],
        checkboxHandler: self.props.checkboxHandler });
    });

    return React.createElement(
      'tbody',
      null,
      rows
    );
  }
}));

var Row = _wrapComponent('_component4')(React.createClass({
  displayName: 'Row',

  render: function render() {
    var self = this;

    return React.createElement(
      'tr',
      null,
      this.props.fields.filter(function (f) {
        return !f.hidden;
      }).map(function (field, columnIndex) {
        return React.createElement(EditTable.Cell, { key: columnIndex,
          row: self.props.row,
          field: field,
          draftFlag: self.props.draftFlags[field.name],
          checkboxHandler: self.props.checkboxHandler });
      })
    );
  }
}));

var Cell = _wrapComponent('_component5')(React.createClass({
  displayName: 'Cell',


  render: function render() {

    var rowId = this.props.row.index;
    var value = this.props.row[this.props.field.name];
    var disabled = !this.props.row.active;
    var text;
    if (disabled) text = React.createElement(
      'span',
      { className: 'disabled' },
      value
    );else text = React.createElement(
      'span',
      null,
      value
    );

    if (this.props.field.hasOwnProperty('type')) {
      switch (this.props.field.type) {
        case 'action':
          text = React.createElement('i', { className: 'fa fa-' + this.props.field.icon + ' fa-fw table-action', onClick: this.props.field.handler.bind(this) });
          break;
        case 'datetime':
          if (value) {
            text = React.createElement(FormattedTime, {
              value: value,
              day: 'numeric',
              month: 'numeric',
              year: 'numeric',
              hour: 'numeric',
              minute: 'numeric' });
          } else {
            text = '';
          }
          break;
        case 'time':
          text = React.createElement(FormattedTime, {
            value: value,
            hour: 'numeric',
            minute: 'numeric' });
          break;
        case 'progress':
          if (value !== null) {
            text = React.createElement(Bootstrap.ProgressBar, { now: value, label: '%(percent)s%' });
          } else {
            text = React.createElement('span', null);
          }
          break;
        case 'boolean':
          text = React.createElement(Checkbox, { checked: value,
            disabled: false,
            rowId: rowId,
            propertyName: this.props.field.name,
            draftFlag: this.props.draftFlag,
            onUserClick: this.props.checkboxHandler });
          break;

        case 'date':
          text = React.createElement(FormattedDate, { value: value, day: 'numeric', month: 'long', year: 'numeric' });
          break;
        default:
          console.warn('Cell type [' + this.props.field.type + '] is not supported.');
          break;
      }
    } else {
      if (value instanceof Date) {
        text = React.createElement(FormattedDate, { value: value, day: 'numeric', month: 'long', year: 'numeric' });
      }
    }

    if (typeof this.props.field.className === 'function') {
      return React.createElement(
        'td',
        { className: this.props.field.className(value) },
        text
      );
    }

    if (this.props.field.hasOwnProperty('align')) {
      return React.createElement(
        'td',
        { style: { textAlign: this.props.field.align } },
        text
      );
    }

    return React.createElement(
      'td',
      null,
      text
    );
  }
}));

EditTable.Header = Header;

EditTable.Body = Body;

EditTable.Row = Row;

EditTable.Cell = Cell;

module.exports = EditTable;

},{"./Checkbox":481,"./IndeterminateCheckbox":493,"livereactload/babel-transform":28,"react":"react","react-bootstrap":"react-bootstrap","react-intl":"react-intl"}],505:[function(require,module,exports){
'use strict';

var _react2 = require('react');

var _react3 = _interopRequireDefault(_react2);

var _babelTransform = require('livereactload/babel-transform');

var _babelTransform2 = _interopRequireDefault(_babelTransform);

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _components = {
  _component: {}
};

var _livereactloadBabelTransform2 = (0, _babelTransform2.default)({
  filename: '/home/daiad/Desktop/Development/home-web/utility/src/main/frontend/components/User.js',
  components: _components,
  locals: [],
  imports: [_react3.default]
});

function _wrapComponent(id) {
  return function (Component) {
    return _livereactloadBabelTransform2(Component, id);
  };
}

var React = require('react');
var Bootstrap = require('react-bootstrap');

var _require = require('react-intl'),
    FormattedMessage = _require.FormattedMessage,
    FormattedTime = _require.FormattedTime,
    FormattedDate = _require.FormattedDate;

var _require2 = require('react-router'),
    Link = _require2.Link;

var Table = require('./Table');
var Chart = require('./reports-measurements/chart');
var echarts = require('react-echarts');
var numeral = require('numeral');
var theme = require('./chart/themes/blue');

var _require3 = require('react-redux'),
    connect = _require3.connect;

var _require4 = require('redux'),
    bindActionCreators = _require4.bindActionCreators;

var UserActions = require('../actions/UserActions');

var _viewAmphiroConfiguration = function _viewAmphiroConfiguration(device) {
  this.props.showAmphiroConfig(device);
};

var _getAmphiroConfig = function _getAmphiroConfig(self, device) {
  var configuration = device.configuration;

  switch (configuration.title) {
    case 'Off Configuration':
      return React.createElement(
        'div',
        { style: { marginTop: 5, marginBottom: 5 }, className: 'log_debug' },
        'Disabled',
        React.createElement('i', { style: { textAlign: 'right', cursor: 'pointer' },
          className: 'fa fa-search fa-fw',
          onClick: _viewAmphiroConfiguration.bind(self, device) })
      );
    case 'Enabled Configuration (Metric Units)':
      return React.createElement(
        'div',
        { style: { marginTop: 5, marginBottom: 5 }, className: 'log_info' },
        'Enabled (Metric Units)',
        React.createElement('i', { style: { textAlign: 'right', cursor: 'pointer' },
          className: 'fa fa-search fa-fw',
          onClick: _viewAmphiroConfiguration.bind(self, device) })
      );
    case 'Enabled Configuration (Imperial Units)':
      return React.createElement(
        'div',
        { style: { marginTop: 5, marginBottom: 5 }, className: 'log_info' },
        'Enabled (Imperial Units)',
        React.createElement('i', { style: { textAlign: 'right', cursor: 'pointer' },
          className: 'fa fa-search fa-fw',
          onClick: _viewAmphiroConfiguration.bind(self, device) })
      );
    default:
      return React.createElement(
        'div',
        { style: { marginTop: 5, marginBottom: 5 }, className: 'log_error' },
        'Unknown'
      );
  }
};

var _getUtilityMode = function _getUtilityMode(mode) {
  switch (mode) {
    case 1:
      return React.createElement(
        'div',
        { style: { marginTop: 5, marginBottom: 5 }, className: 'log_info' },
        'Enabled'
      );
    case 2:
      return React.createElement(
        'div',
        { style: { marginTop: 5, marginBottom: 5 }, className: 'log_debug' },
        'Disabled'
      );
    default:
      return '-';
  }
};

var _getHomeMode = function _getHomeMode(mode) {
  switch (mode) {
    case 1:
      return React.createElement(
        'div',
        { style: { marginTop: 5, marginBottom: 5 }, className: 'log_info' },
        'Enabled'
      );
    case 2:
      return React.createElement(
        'div',
        { style: { marginTop: 5, marginBottom: 5 }, className: 'log_debug' },
        'Disabled'
      );
    default:
      return '-';
  }
};

var _getMobileMode = function _getMobileMode(mode) {
  switch (mode) {
    case 1:
      return React.createElement(
        'div',
        { style: { marginTop: 5, marginBottom: 5 }, className: 'log_info' },
        'Enabled'
      );
    case 2:
      return React.createElement(
        'div',
        { style: { marginTop: 5, marginBottom: 5 }, className: 'log_debug' },
        'Disabled'
      );
    case 3:
      return React.createElement(
        'div',
        { style: { marginTop: 5, marginBottom: 5 }, className: 'log_warn' },
        'Learning'
      );
    case 4:
      return React.createElement(
        'div',
        { style: { marginTop: 5, marginBottom: 5 }, className: 'log_error' },
        'Blocked'
      );
    default:
      return '-';
  }
};

var _getOsView = function _getOsView(os) {
  switch (os) {
    case 'iOS':
      return React.createElement(
        'span',
        null,
        React.createElement('i', { className: 'fa fa-apple fa-lg' }),
        '\xA0iOS'
      );
    case 'Android':
      return React.createElement(
        'span',
        null,
        React.createElement('i', { className: 'fa fa-android fa-lg' }),
        '\xA0Android'
      );
    default:
      return '-';
  }
};

var _showChart = function _showChart(type, key, e) {
  switch (type) {
    case 'METER':
      this.setState({ groupChartButtonsHidden: false });
      this.props.getMeters(this.props.user.id);
      break;
    case 'AMPHIRO':
      this.setState({ groupChartButtonsHidden: true });
      this.props.getSessions(this.props.user.id, key);
      break;
  }
};

var _clearGroupSeries = function _clearGroupSeries() {
  this.props.clearGroupSeries();
};

var _toggleFavorite = function _toggleFavorite() {
  if (this.props.favorite) {
    this.props.removeFavorite(this.props.user.id);
  } else {
    this.props.addFavorite(this.props.user.id);
  }
};

var _exportData = function _exportData() {
  this.props.exportData(this.props.user.id, this.props.user.email);
};

var User = _wrapComponent('_component')(React.createClass({
  displayName: 'User',

  contextTypes: {
    intl: React.PropTypes.object
  },

  getInitialState: function getInitialState() {
    return {
      draw: false,
      groupChartButtonsHidden: false
    };
  },

  componentWillMount: function componentWillMount() {

    var profile = this.props.profile;
    this.props.showUser(this.props.params.id, profile.timezone);
    this.setState({ draw: true });
  },

  getSimplifiedGroups: function getSimplifiedGroups(groups) {

    var simplifiedGroups = [];
    groups.forEach(function (group) {
      simplifiedGroups.push({
        id: group.id,
        name: group.name,
        size: group.numberOfMembers,
        createdOn: new Date(group.creationDateMils)
      });
    });

    return simplifiedGroups;
  },

  membersObjectToArray: function membersObjectToArray(membersObject) {
    var membersArray = [];

    for (var id in membersObject) {
      if (membersObject.hasOwnProperty(id)) {
        membersArray.push(membersObject[id]);
      }
    }

    return membersArray;
  },

  compareGroups: function compareGroups(a, b) {
    return a.name.localeCompare(b.name);
  },

  render: function render() {
    var _this = this;

    var groupFields = [{
      name: 'id',
      title: 'Table.Group.id',
      hidden: true
    }, {
      name: 'name',
      title: 'Table.Group.name',
      link: '/group/{id}'
    }, {
      name: 'size',
      title: 'Table.Group.size'
    }, {
      name: 'createdOn',
      type: 'datetime',
      title: 'Table.Group.createdOn'
    }, {
      name: 'chart',
      type: 'action',
      icon: 'bar-chart-o',
      handler: function (field, row) {
        if (this.props.data.devices) {
          return;
        }

        var selectedGroup = this.props.groups.filter(function (g) {
          return g.name == row.name;
        });
        var utility = this.props.profile.utility;
        var clusters = this.props.config.utility.clusters;

        for (var i = 0; i < clusters.length; i++) {
          var clusterGroups = clusters[i].groups;
          var clusterGroup = clusterGroups.filter(function (group) {
            return group.key == selectedGroup[0].id;
          });
          if (clusterGroup.length > 0) {
            var pop = clusterGroup[0];
            break;
          }
        }

        if (!pop) {
          population1 = [{ group: selectedGroup[0].id, label: "GROUP:" + selectedGroup[0].id + '/' + row.name, type: "GROUP" }];
          this.props.getGroupChart(population1, row.name, utility.timezone);
        } else {
          var clusterKey = pop.clusterKey;
          var population1 = [{ group: pop.key, label: "CLUSTER:" + clusterKey + ":" + pop.key, type: "GROUP" }];
          this.props.getGroupChart(population1, row.name, utility.timezone);
        }

        this.setState({ draw: true });

        /*
        var utility = this.props.profile.utility;
        this.props.getGroupSeries(row.id, row.name, utility.timezone);
        */
      }.bind(this)
    }];

    var groupData = this.props.groups ? this.getSimplifiedGroups(this.membersObjectToArray(Object.assign({}, this.props.groups))).sort(this.compareGroups) : [];

    var profileTitle = React.createElement(
      'span',
      null,
      React.createElement('i', { className: 'fa fa-user fa-fw' }),
      React.createElement(
        'span',
        { style: { paddingLeft: 4 } },
        'Profile'
      ),
      React.createElement(
        'span',
        { style: { float: 'right', marginTop: -3, marginLeft: 5 } },
        React.createElement(
          Bootstrap.Button,
          { bsStyle: 'default', className: 'btn-circle', onClick: _toggleFavorite.bind(this) },
          React.createElement('i', { className: this.props.favorite ? 'fa fa-star fa-lg' : 'fa fa-star-o fa-lg',
            title: this.props.favorite ? 'Remove from favorites' : 'Add to favorites' })
        )
      ),
      React.createElement(
        'span',
        { style: { float: 'right', marginTop: -3, marginLeft: 5 } },
        React.createElement(
          Bootstrap.Button,
          { bsStyle: 'default', className: 'btn-circle', onClick: _exportData.bind(this), title: 'Export data' },
          React.createElement('i', { className: 'fa fa-cloud-download fa-lg' })
        )
      ),
      React.createElement(
        'span',
        { style: { float: 'right', marginTop: -3, marginLeft: 5 } },
        React.createElement(
          Bootstrap.Button,
          { bsStyle: 'default', className: 'btn-circle', disabled: true },
          React.createElement('i', { className: 'fa fa-envelope-o fa-lg' })
        )
      )
    );

    var deviceTitle = React.createElement(
      'span',
      null,
      React.createElement('i', { className: 'fa fa-database fa-fw' }),
      React.createElement(
        'span',
        { style: { paddingLeft: 4 } },
        'Data Sources'
      )
    );

    var applicationTitle = React.createElement(
      'span',
      null,
      React.createElement('i', { className: 'fa fa-cubes fa-fw' }),
      React.createElement(
        'span',
        { style: { paddingLeft: 4 } },
        'Application Modes'
      )
    );

    var groupTitle = React.createElement(
      'span',
      null,
      React.createElement('i', { className: 'fa fa-group fa-fw' }),
      React.createElement(
        'span',
        { style: { paddingLeft: 4 } },
        'Groups'
      )
    );

    var applicationElements = [];

    if (this.props.user) {
      var mode = this.props.user.mode;

      applicationElements.push(React.createElement(
        Bootstrap.ListGroupItem,
        { key: applicationElements.length + 1, className: 'clearfix' },
        React.createElement(
          'div',
          { className: 'row' },
          React.createElement(
            'div',
            { className: 'col-md-6' },
            React.createElement(
              'b',
              null,
              'Utility'
            )
          ),
          React.createElement(
            'div',
            { className: 'col-md-6' },
            _getUtilityMode(mode.utilityMode)
          )
        ),
        React.createElement(
          'div',
          { className: 'row' },
          React.createElement(
            'div',
            { className: 'col-md-6' },
            React.createElement(
              'b',
              null,
              'Home'
            )
          ),
          React.createElement(
            'div',
            { className: 'col-md-6' },
            _getHomeMode(mode.homeMode)
          )
        ),
        React.createElement(
          'div',
          { className: 'row' },
          React.createElement(
            'div',
            { className: 'col-md-6' },
            React.createElement(
              'b',
              null,
              'Mobile'
            )
          ),
          React.createElement(
            'div',
            { className: 'col-md-6' },
            _getMobileMode(mode.mobileMode)
          )
        ),
        React.createElement(
          'div',
          { className: 'row' },
          React.createElement(
            'div',
            { className: 'col-md-6' },
            React.createElement(
              'b',
              null,
              'Last update'
            )
          ),
          React.createElement(
            'div',
            { className: 'col-md-6' },
            React.createElement(FormattedTime, { value: new Date(mode.updatedOn),
              day: 'numeric',
              month: 'numeric',
              year: 'numeric',
              hour: 'numeric',
              minute: 'numeric' })
          )
        ),
        React.createElement(
          'div',
          { className: 'row' },
          React.createElement(
            'div',
            { className: 'col-md-6' },
            React.createElement(
              'b',
              null,
              'Enabled On'
            )
          ),
          React.createElement(
            'div',
            { className: 'col-md-6' },
            mode.enabledOn ? React.createElement(FormattedTime, { value: new Date(mode.enabledOn),
              day: 'numeric',
              month: 'numeric',
              year: 'numeric',
              hour: 'numeric',
              minute: 'numeric' }) : '-'
          )
        ),
        React.createElement(
          'div',
          { className: 'row' },
          React.createElement(
            'div',
            { className: 'col-md-6' },
            React.createElement(
              'b',
              null,
              'Acknowledged On'
            )
          ),
          React.createElement(
            'div',
            { className: 'col-md-6' },
            mode.acknowledgedOn ? React.createElement(FormattedTime, { value: new Date(mode.acknowledgedOn),
              day: 'numeric',
              month: 'numeric',
              year: 'numeric',
              hour: 'numeric',
              minute: 'numeric' }) : '-'
          )
        )
      ));
    }

    var deviceElements = [];

    if (this.props.meters) {
      this.props.meters.forEach(function (m) {
        deviceElements.push(React.createElement(
          Bootstrap.ListGroupItem,
          { key: deviceElements.length + 1, className: 'clearfix' },
          React.createElement(
            'div',
            { style: { width: 24, float: 'left', textAlign: 'center', marginLeft: -5 } },
            React.createElement('img', { src: '/assets/images/utility/meter.svg' })
          ),
          React.createElement(
            'div',
            { style: { paddingTop: 2, float: 'left' } },
            m.serial
          ),
          React.createElement(
            'div',
            { style: { width: 24, float: 'right' } },
            React.createElement('i', { className: 'fa fa-bar-chart-o fa-fw table-action', onClick: _showChart.bind(_this, 'METER', m.deviceKey) })
          )
        ));
        deviceElements.push(React.createElement(
          Bootstrap.ListGroupItem,
          { key: deviceElements.length + 1 },
          React.createElement(
            'div',
            { className: 'row' },
            React.createElement(
              'div',
              { className: 'col-md-6' },
              React.createElement(
                'b',
                null,
                'Current value'
              )
            ),
            React.createElement(
              'div',
              { className: 'col-md-6' },
              m.volume,
              ' lt'
            )
          ),
          React.createElement(
            'div',
            { className: 'row' },
            React.createElement(
              'div',
              { className: 'col-md-6' },
              React.createElement(
                'b',
                null,
                'Last update'
              )
            ),
            React.createElement(
              'div',
              { className: 'col-md-6' },
              React.createElement(FormattedTime, { value: new Date(m.timestamp),
                day: 'numeric',
                month: 'numeric',
                year: 'numeric',
                hour: 'numeric',
                minute: 'numeric' })
            )
          )
        ));
      });
    }

    if (this.props.devices) {
      this.props.devices.forEach(function (d) {

        deviceElements.push(React.createElement(
          Bootstrap.ListGroupItem,
          { key: deviceElements.length + 1, className: 'clearfix' },
          React.createElement(
            'div',
            { style: { width: 24, float: 'left', textAlign: 'center', marginLeft: -5 } },
            React.createElement('img', { src: '/assets/images/utility/amphiro.svg' })
          ),
          React.createElement(
            'div',
            { style: { paddingTop: 2, float: 'left' } },
            d.name
          ),
          React.createElement(
            'div',
            { style: { width: 24, float: 'right' } },
            React.createElement('i', { className: 'fa fa-bar-chart-o fa-fw table-action', onClick: _showChart.bind(_this, 'AMPHIRO', d.deviceKey) })
          )
        ));
        deviceElements.push(React.createElement(
          Bootstrap.ListGroupItem,
          { key: deviceElements.length + 1 },
          React.createElement(
            'div',
            { className: 'row' },
            React.createElement(
              'div',
              { className: 'col-md-6' },
              React.createElement(
                'b',
                null,
                'Configuration'
              )
            ),
            React.createElement(
              'div',
              { className: 'col-md-6' },
              _getAmphiroConfig(_this, d)
            )
          ),
          React.createElement(
            'div',
            { className: 'row' },
            React.createElement(
              'div',
              { className: 'col-md-6' },
              React.createElement(
                'b',
                null,
                'Mode Changed On'
              )
            ),
            React.createElement(
              'div',
              { className: 'col-md-6' },
              React.createElement(FormattedTime, { value: new Date(d.configuration.createdOn),
                day: 'numeric',
                month: 'numeric',
                year: 'numeric',
                hour: 'numeric',
                minute: 'numeric' })
            )
          ),
          React.createElement(
            'div',
            { className: 'row' },
            React.createElement(
              'div',
              { className: 'col-md-6' },
              React.createElement(
                'b',
                null,
                'Enabled On'
              )
            ),
            React.createElement(
              'div',
              { className: 'col-md-6' },
              d.configuration.enabledOn ? React.createElement(FormattedTime, { value: new Date(d.configuration.enabledOn),
                day: 'numeric',
                month: 'numeric',
                year: 'numeric',
                hour: 'numeric',
                minute: 'numeric' }) : '-'
            )
          ),
          React.createElement(
            'div',
            { className: 'row' },
            React.createElement(
              'div',
              { className: 'col-md-6' },
              React.createElement(
                'b',
                null,
                'Acknowledged On'
              )
            ),
            React.createElement(
              'div',
              { className: 'col-md-6' },
              d.configuration.acknowledgedOn ? React.createElement(FormattedTime, { value: new Date(d.configuration.acknowledgedOn),
                day: 'numeric',
                month: 'numeric',
                year: 'numeric',
                hour: 'numeric',
                minute: 'numeric' }) : '-'
            )
          )
        ));
        if (d.sessions && d.sessions.length > 0) {
          var s = d.sessions[0];
          deviceElements.push(React.createElement(
            Bootstrap.ListGroupItem,
            { key: deviceElements.length + 1 },
            React.createElement(
              'div',
              { className: 'row' },
              React.createElement(
                'div',
                { className: 'col-md-6' },
                React.createElement(
                  'b',
                  null,
                  'Last Session'
                )
              ),
              React.createElement(
                'div',
                { className: 'col-md-6' },
                s.volume,
                ' lt'
              )
            ),
            React.createElement(
              'div',
              { className: 'row' },
              React.createElement(
                'div',
                { className: 'col-md-6' },
                React.createElement(
                  'b',
                  null,
                  'Last update'
                )
              ),
              React.createElement(
                'div',
                { className: 'col-md-6' },
                React.createElement(FormattedTime, { value: new Date(s.timestamp),
                  day: 'numeric',
                  month: 'numeric',
                  year: 'numeric',
                  hour: 'numeric',
                  minute: 'numeric' })
              )
            )
          ));
        }
      });
    }

    var chartTitleText = React.createElement(
      'span',
      null,
      React.createElement(
        'span',
        null,
        React.createElement('i', { className: 'fa fa-bar-chart fa-fw' }),
        React.createElement(
          'span',
          { style: { paddingLeft: 4 } },
          'Consumption - Last 30 days'
        )
      )
    );

    var chart = React.createElement(
      'span',
      null,
      'No meter data found.'
    );

    chartTitleText = React.createElement(
      'span',
      null,
      React.createElement(
        'span',
        null,
        React.createElement('i', { className: 'fa fa-bar-chart fa-fw' }),
        React.createElement(
          'span',
          { style: { paddingLeft: 4 } },
          'Consumption - Last 30 days'
        )
      ),
      React.createElement(
        'span',
        { style: { float: 'right', marginTop: -3, marginLeft: 5 } },
        React.createElement(
          Bootstrap.Button,
          { bsStyle: 'default', className: 'btn-circle', onClick: _clearGroupSeries.bind(this) },
          React.createElement('i', { className: 'fa fa-remove fa-fw' })
        )
      )
    );

    var multipleSeries = [];
    for (var key in this.props.charts) {
      var tempSeries = this.props.charts[key].series;
      if (tempSeries) {
        multipleSeries.push(tempSeries);
      }
    }

    var defaults = {
      chartProps: {
        width: 780,
        height: 300
      }
    };

    var fSeries = _.flatten(multipleSeries);
    var series = fSeries[0] ? fSeries : null;

    chart = React.createElement(Chart, _extends({}, defaults.chartProps, {
      draw: this.state.draw,
      field: "volume",
      level: "day",
      reportName: "avg",
      finished: this.props.finished,
      series: series,
      context: this.props.config,
      overlap: null,
      overlapping: false
    }));

    if (this.props.data.devices) {

      var devices = this.props.data.devices,
          deviceIndex = 0,
          d;

      for (d = 0; d < devices.length; d++) {
        if (devices[d].deviceKey === this.props.data.deviceKey) {
          deviceIndex = d;
          break;
        }
      }

      var size = devices[deviceIndex].sessions.length,
          device = devices[deviceIndex];
      var yData = [];
      chartTitleText = React.createElement(
        'span',
        null,
        React.createElement(
          'span',
          null,
          React.createElement('i', { className: 'fa fa-bar-chart fa-fw' }),
          React.createElement(
            'span',
            { style: { paddingLeft: 4 } },
            device.name,
            ' - Last 20 showers (most recent first) '
          )
        )
      );

      for (var s = size - 1; s >= 0; s--) {
        yData.push(device.sessions[s].volume);
      }

      //add two nulls at the start and end of x axis to avoid bars to overlap with y axis
      var yArray = [null];
      var bars = [{ name: 'amphiro b1', data: yArray.concat(yData, [null]) }];

      var xItems = ['-'];
      for (var n = 1; n < bars[0].data.length - 1; n++) {
        xItems.push('#' + n);
      }
      xItems.push('-');

      var xAxis = { name: "Sessions", data: xItems };

      chart = React.createElement(
        'div',
        { className: 'report-chart' },
        React.createElement(echarts.BarChart, {
          width: 780,
          height: 300,
          loading: this.props.finished ? null : { text: 'Loading data...' },
          tooltip: true,
          theme: theme,
          xAxis: xAxis,
          yAxis: {
            name: 'Volume (lt)',
            numTicks: 3,
            formatter: function formatter(y) {
              return numeral(y).format('0.0a');
            }
          },
          series: bars
        })
      );
    }

    var deviceListGroup = React.createElement(
      Bootstrap.ListGroup,
      { fill: true },
      deviceElements.length === 0 ? null : deviceElements
    );

    var applicationModeGroup = React.createElement(
      Bootstrap.ListGroup,
      { fill: true },
      applicationElements.length === 0 ? null : applicationElements
    );

    var amphiroConfigurationModal = React.createElement('div', null);
    if (this.props.activeDevice) {
      var activeDevice = this.props.activeDevice;
      var config = activeDevice.configuration;

      amphiroConfigurationModal = React.createElement(
        Bootstrap.Modal,
        { show: true, onHide: this.props.hideAmphiroConfig },
        React.createElement(
          Bootstrap.Modal.Header,
          { closeButton: true },
          React.createElement(
            Bootstrap.Modal.Title,
            null,
            activeDevice.name + ' - ' + activeDevice.deviceKey
          )
        ),
        React.createElement(
          Bootstrap.Modal.Body,
          null,
          React.createElement(
            'div',
            { className: 'row' },
            React.createElement(
              'div',
              { className: 'col-md-4' },
              React.createElement(
                'b',
                null,
                'Title'
              )
            ),
            React.createElement(
              'div',
              { className: 'col-md-8' },
              config.title
            )
          ),
          React.createElement(
            'div',
            { className: 'row' },
            React.createElement(
              'div',
              { className: 'col-md-4' },
              React.createElement(
                'b',
                null,
                'Version'
              )
            ),
            React.createElement(
              'div',
              { className: 'col-md-8' },
              config.version
            )
          ),
          React.createElement(
            'div',
            { className: 'row' },
            React.createElement(
              'div',
              { className: 'col-md-4' },
              React.createElement(
                'b',
                null,
                'Block'
              )
            ),
            React.createElement(
              'div',
              { className: 'col-md-8' },
              config.block
            )
          ),
          React.createElement(
            'div',
            { className: 'row' },
            React.createElement(
              'div',
              { className: 'col-md-4' },
              React.createElement(
                'b',
                null,
                'Frame Duration'
              )
            ),
            React.createElement(
              'div',
              { className: 'col-md-8' },
              config.frameDuration
            )
          ),
          React.createElement(
            'div',
            { className: 'row' },
            React.createElement(
              'div',
              { className: 'col-md-4' },
              React.createElement(
                'b',
                null,
                'Number Of Frames'
              )
            ),
            React.createElement(
              'div',
              { className: 'col-md-8' },
              config.numberOfFrames
            )
          ),
          React.createElement(
            'div',
            { className: 'row' },
            React.createElement(
              'div',
              { className: 'col-md-4' },
              React.createElement(
                'b',
                null,
                'Properties'
              )
            ),
            React.createElement(
              'div',
              { className: 'col-md-8' },
              config.properties.reduce(function (o, n, i, a) {
                return o.toString() ? o.toString() + ', ' + n.toString() : n.toString();
              }, '')
            )
          )
        ),
        React.createElement(
          Bootstrap.Modal.Footer,
          null,
          React.createElement(
            Bootstrap.Button,
            { onClick: this.props.hideAmphiroConfig },
            'Close'
          )
        )
      );
    }
    if (this.props.user) {
      var imageSource = '/assets/images/utility/profile.png';

      if (this.props.user.photo) {
        imageSource = "data:image/jpg;base64," + this.props.user.photo;
      }

      var userImage = React.createElement('img', { src: imageSource, style: { borderRadius: '50%', width: '100%', height: '100%' } });

      return React.createElement(
        'div',
        { className: 'container-fluid', style: { paddingTop: 10 } },
        amphiroConfigurationModal,
        React.createElement(
          'div',
          { className: 'row' },
          React.createElement(
            'div',
            { className: 'col-md-7' },
            React.createElement(
              Bootstrap.Panel,
              { header: profileTitle },
              React.createElement(
                Bootstrap.ListGroup,
                { fill: true },
                React.createElement(
                  Bootstrap.ListGroupItem,
                  null,
                  React.createElement(
                    'div',
                    { className: 'row' },
                    React.createElement(
                      'div',
                      { className: 'col-md-3' },
                      React.createElement(
                        'div',
                        { style: { width: '100px', height: '100px', border: '#3498db solid 3px', borderRadius: '50%', padding: 3 } },
                        userImage
                      )
                    ),
                    React.createElement(
                      'div',
                      { className: 'col-md-9' },
                      React.createElement(
                        'table',
                        { className: 'table table-profile' },
                        React.createElement(
                          'tbody',
                          null,
                          React.createElement(
                            'tr',
                            null,
                            React.createElement(
                              'td',
                              null,
                              'First name'
                            ),
                            React.createElement(
                              'td',
                              null,
                              this.props.user.firstName
                            )
                          ),
                          React.createElement(
                            'tr',
                            null,
                            React.createElement(
                              'td',
                              null,
                              'Last name'
                            ),
                            React.createElement(
                              'td',
                              null,
                              this.props.user.lastName
                            )
                          ),
                          React.createElement(
                            'tr',
                            null,
                            React.createElement(
                              'td',
                              null,
                              'Email'
                            ),
                            React.createElement(
                              'td',
                              null,
                              this.props.user.email
                            )
                          ),
                          React.createElement(
                            'tr',
                            null,
                            React.createElement(
                              'td',
                              null,
                              'Gender'
                            ),
                            React.createElement(
                              'td',
                              null,
                              this.props.user.gender ? React.createElement(FormattedMessage, { id: 'Gender.' + this.props.user.gender }) : ''
                            )
                          ),
                          React.createElement(
                            'tr',
                            null,
                            React.createElement(
                              'td',
                              null,
                              'Registered on'
                            ),
                            React.createElement(
                              'td',
                              null,
                              React.createElement(FormattedDate, { value: this.props.user.registeredOn, day: 'numeric', month: 'long', year: 'numeric' })
                            )
                          ),
                          React.createElement(
                            'tr',
                            null,
                            React.createElement(
                              'td',
                              null,
                              'Addrerss'
                            ),
                            React.createElement(
                              'td',
                              null,
                              this.props.user.address
                            )
                          ),
                          React.createElement(
                            'tr',
                            null,
                            React.createElement(
                              'td',
                              null,
                              'City'
                            ),
                            React.createElement(
                              'td',
                              null,
                              this.props.user.city
                            )
                          ),
                          React.createElement(
                            'tr',
                            null,
                            React.createElement(
                              'td',
                              null,
                              'Country'
                            ),
                            React.createElement(
                              'td',
                              null,
                              this.props.user.country
                            )
                          ),
                          React.createElement(
                            'tr',
                            null,
                            React.createElement(
                              'td',
                              null,
                              'Postal code'
                            ),
                            React.createElement(
                              'td',
                              null,
                              this.props.user.postalCode
                            )
                          ),
                          React.createElement(
                            'tr',
                            null,
                            React.createElement(
                              'td',
                              null,
                              'Smart Phone OS'
                            ),
                            React.createElement(
                              'td',
                              null,
                              _getOsView(this.props.user.smartPhoneOs)
                            )
                          ),
                          React.createElement(
                            'tr',
                            null,
                            React.createElement(
                              'td',
                              null,
                              'Tablet OS'
                            ),
                            React.createElement(
                              'td',
                              null,
                              _getOsView(this.props.user.tabletOs)
                            )
                          )
                        )
                      )
                    )
                  )
                ),
                React.createElement(
                  Bootstrap.ListGroupItem,
                  { className: 'clearfix' },
                  React.createElement(
                    Link,
                    { className: 'pull-right', to: '/users', style: { paddingLeft: 7, paddingTop: 12 } },
                    'Browse all users'
                  )
                )
              )
            )
          ),
          React.createElement(
            'div',
            { className: 'col-md-5' },
            React.createElement(
              Bootstrap.Panel,
              { header: groupTitle },
              React.createElement(
                Bootstrap.ListGroup,
                { fill: true },
                React.createElement(
                  Bootstrap.ListGroupItem,
                  null,
                  React.createElement(Table, {
                    fields: groupFields,
                    data: groupData
                  })
                ),
                React.createElement(
                  Bootstrap.ListGroupItem,
                  { className: 'clearfix' },
                  React.createElement(
                    Link,
                    { className: 'pull-right', to: '/groups', style: { paddingLeft: 7, paddingTop: 12 } },
                    'Browse all groups'
                  )
                )
              )
            )
          )
        ),
        React.createElement(
          'div',
          { className: 'row' },
          React.createElement(
            'div',
            { className: 'col-md-4' },
            React.createElement(
              Bootstrap.Panel,
              { header: deviceTitle },
              deviceListGroup
            ),
            React.createElement(
              Bootstrap.Panel,
              { header: applicationTitle },
              applicationModeGroup
            )
          ),
          React.createElement(
            'div',
            { className: 'col-md-8' },
            React.createElement(
              Bootstrap.Panel,
              { header: chartTitleText },
              React.createElement(
                Bootstrap.ListGroup,
                { fill: true },
                React.createElement(
                  Bootstrap.ListGroupItem,
                  null,
                  chart
                )
              )
            )
          )
        )
      );
    } else {
      return null;
    }
  }
}));

function mapStateToProps(state) {
  return {
    isLoading: state.user.isLoading,
    favorite: state.user.favorite,
    user: state.user.user,
    meters: state.user.meters,
    devices: state.user.devices,
    data: state.user.data,
    groups: state.user.groups,
    application: state.user.application,
    activeDevice: state.user.activeDevice,
    accountId: state.user.accountId,
    profile: state.session.profile,
    charts: state.user.charts,
    finished: state.user.finished,
    config: state.config
  };
}

function mapDispatchToProps(dispatch) {
  return {
    showUser: bindActionCreators(UserActions.showUser, dispatch),
    showFavouriteAccountForm: bindActionCreators(UserActions.showFavouriteAccountForm, dispatch),
    hideFavouriteAccountForm: bindActionCreators(UserActions.hideFavouriteAccountForm, dispatch),
    getSessions: bindActionCreators(UserActions.getSessions, dispatch),
    getMeters: bindActionCreators(UserActions.getMeters, dispatch),
    getGroupChart: bindActionCreators(UserActions.getGroupChart, dispatch),
    clearGroupSeries: bindActionCreators(UserActions.clearGroupSeries, dispatch),
    exportData: bindActionCreators(UserActions.exportData, dispatch),
    addFavorite: bindActionCreators(UserActions.addFavorite, dispatch),
    removeFavorite: bindActionCreators(UserActions.removeFavorite, dispatch),
    showAmphiroConfig: bindActionCreators(UserActions.showAmphiroConfig, dispatch),
    hideAmphiroConfig: bindActionCreators(UserActions.hideAmphiroConfig, dispatch)
  };
}

module.exports = connect(mapStateToProps, mapDispatchToProps)(User);

},{"../actions/UserActions":449,"./Table":502,"./chart/themes/blue":513,"./reports-measurements/chart":515,"livereactload/babel-transform":28,"numeral":"numeral","react":"react","react-bootstrap":"react-bootstrap","react-echarts":109,"react-intl":"react-intl","react-redux":"react-redux","react-router":"react-router","redux":"redux"}],506:[function(require,module,exports){
'use strict';

var _react2 = require('react');

var _react3 = _interopRequireDefault(_react2);

var _babelTransform = require('livereactload/babel-transform');

var _babelTransform2 = _interopRequireDefault(_babelTransform);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _components = {
  _component: {}
};

var _livereactloadBabelTransform2 = (0, _babelTransform2.default)({
  filename: '/home/daiad/Desktop/Development/home-web/utility/src/main/frontend/components/UserSearchTextBox.js',
  components: _components,
  locals: [],
  imports: [_react3.default]
});

function _wrapComponent(id) {
  return function (Component) {
    return _livereactloadBabelTransform2(Component, id);
  };
}

var React = require('react');
var Select = require('react-select').default;
var api = require('../api/base.js');

var _onChange = function _onChange(e) {
  this.setState({
    value: e
  });

  if (typeof this.props.onChange === 'function') {
    this.props.onChange(e);
  }
};

var _getOptions = function _getOptions(input) {
  if (!input) {
    return new Promise(function (resolve, reject) {
      resolve({
        options: []
      });
    });
  }

  return api.json('/action/user/search/prefix/' + input).then(function (response) {
    var result = {
      options: []
    };

    if (response.success) {
      result.options = response.users.map(function (user) {
        return {
          value: user.id,
          label: user.firstName + ' ' + user.lastName || user.email
        };
      });
    }

    return result;
  });
};

var UserSearchTextBox = _wrapComponent('_component')(React.createClass({
  displayName: 'UserSearchTextBox',

  contextTypes: {
    intl: React.PropTypes.object
  },

  getDefaultProps: function getDefaultProps() {
    return {
      name: 'username',
      onChange: null,
      multi: false,
      noResults: 'No users found'
    };
  },

  getInitialState: function getInitialState() {
    return {
      value: null
    };
  },


  render: function render() {
    return React.createElement(Select.Async, { name: this.props.name,
      value: this.state.value,
      onChange: _onChange.bind(this),
      loadOptions: _getOptions.bind(this),
      clearable: true,
      multi: this.props.multi,
      noResultsText: this.props.noResults
    });
  }
}));

module.exports = UserSearchTextBox;

},{"../api/base.js":461,"livereactload/babel-transform":28,"react":"react","react-select":"react-select"}],507:[function(require,module,exports){
'use strict';

var _react2 = require('react');

var _react3 = _interopRequireDefault(_react2);

var _babelTransform = require('livereactload/babel-transform');

var _babelTransform2 = _interopRequireDefault(_babelTransform);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _components = {
  _component: {},
  _component2: {},
  _component3: {},
  _component4: {},
  _component5: {}
};

var _livereactloadBabelTransform2 = (0, _babelTransform2.default)({
  filename: '/home/daiad/Desktop/Development/home-web/utility/src/main/frontend/components/UserTable.js',
  components: _components,
  locals: [],
  imports: [_react3.default]
});

function _wrapComponent(id) {
  return function (Component) {
    return _livereactloadBabelTransform2(Component, id);
  };
}

var React = require('react');

var _require = require('react-intl'),
    FormattedTime = _require.FormattedTime,
    FormattedDate = _require.FormattedDate;

var _require2 = require('react-router'),
    Link = _require2.Link;

var Bootstrap = require('react-bootstrap');
var Checkbox = require('./Checkbox');
var CellCheckbox = require('./CellCheckbox');

var PAGING_CLIENT_SIDE = 'client';
var PAGING_SERVER_SIDE = 'server';

var current;
var Table = _wrapComponent('_component')(React.createClass({
  displayName: 'Table',

  getInitialState: function getInitialState() {
    return {
      activePage: this.props.data.pager.index
    };
  },

  onPageIndexChange: function onPageIndexChange(event, selectedEvent) {
    this.setState({
      activePage: selectedEvent.eventKey - 1
    });
    if (typeof this.props.onPageIndexChange === 'function') {
      this.props.onPageIndexChange(selectedEvent.eventKey - 1);
    }
  },


  getDefaultProps: function getDefaultProps() {
    return {
      data: {
        fields: [],
        rows: [],
        allChecked: false,
        pager: {
          index: 0,
          size: 10,
          count: 0,
          mode: PAGING_CLIENT_SIDE
        }
      },
      template: {
        empty: null
      }
    };
  },

  toggleCheckBoxes: function toggleCheckBoxes(selected) {
    this.props.setSelectedAll(this, selected);
  },

  suspendUI: function suspendUI() {
    this.setState({ loading: false });
  },

  resumeUI: function resumeUI() {
    this.setState({ loading: true });
  },

  render: function render() {
    current = this;

    var totalPages = Math.ceil(this.props.data.pager.count / this.props.data.pager.size);
    var currentPageIndex = this.state.activePage + 1 > totalPages ? totalPages : this.state.activePage + 1;

    if (this.props.data.rows.length === 0 && this.props.template.empty) {
      return this.props.template.empty;
    }

    return React.createElement(
      'div',
      { className: 'clearfix' },
      React.createElement(
        Bootstrap.Table,
        { hover: true, style: { margin: 0, padding: 0 } },
        React.createElement(Table.Header, { data: this.props.data, toggleCheckBoxes: this.toggleCheckBoxes }),
        React.createElement(Table.Body, { data: this.props.data, activePageIndex: currentPageIndex - 1 })
      ),
      React.createElement(
        'div',
        { style: { float: 'right' } },
        React.createElement(Bootstrap.Pagination, { prev: true,
          next: true,
          first: true,
          last: true,
          ellipsis: true,
          items: totalPages,
          maxButtons: 7,
          activePage: currentPageIndex,
          onSelect: this.onPageIndexChange })
      )
    );
  }
}));

var Header = _wrapComponent('_component2')(React.createClass({
  displayName: 'Header',

  contextTypes: {
    intl: React.PropTypes.object
  },

  render: function render() {
    var self = this;
    var _t = this.context.intl.formatMessage;
    var header = this.props.data.fields.filter(function (f) {
      return !f.hidden;
    }).map(function (field) {
      var style = {};
      if (field.hasOwnProperty('align')) {
        style.textAlign = field.align;
      }

      switch (field.type) {
        case 'action':
          style.width = field.width || 24;
          break;
        case 'boolean':
          style.width = field.width || 90;
          break;
        case 'alterable-boolean':
          return React.createElement(
            'th',
            { style: { width: 24 } },
            React.createElement(Checkbox, {
              checked: current.props.allChecked,
              disabled: false,
              onChange: self.props.toggleCheckBoxes
            })
          );

        default:
          if (field.width && field.width > 0) {
            style.width = field.width;
          }
          break;
      }

      return React.createElement(
        'th',
        { key: field.name, style: style },
        field.title ? _t({ id: field.title }) : ''
      );
    });

    return React.createElement(
      'thead',
      null,
      React.createElement(
        'tr',
        null,
        header
      )
    );
  }
}));

var Body = _wrapComponent('_component3')(React.createClass({
  displayName: 'Body',

  render: function render() {
    var self = this;

    var pager = self.props.data.pager;
    var filtered = self.props.data.rows;

    if (!pager.mode || pager.mode === PAGING_CLIENT_SIDE) {
      filtered = self.props.data.rows.reduce(function (newArray, currentValue, currentIndex) {

        if (self.props.activePageIndex * pager.size <= currentIndex && currentIndex < (self.props.activePageIndex + 1) * pager.size) {
          newArray.push(currentValue);
        }
        return newArray;
      }, []);
    }

    var rows = filtered.map(function (row, rowIndex) {
      return React.createElement(Table.Row, { key: rowIndex,
        fields: self.props.data.fields,
        row: row });
    });

    return React.createElement(
      'tbody',
      null,
      rows
    );
  }
}));

var Row = _wrapComponent('_component4')(React.createClass({
  displayName: 'Row',

  render: function render() {
    var self = this;

    return React.createElement(
      'tr',
      null,
      this.props.fields.filter(function (f) {
        return !f.hidden;
      }).map(function (field, columnIndex) {
        return React.createElement(Table.Cell, { key: columnIndex, row: self.props.row, field: field });
      })
    );
  }
}));

var formatLink = function formatLink(route, row) {
  return Object.keys(row).reduce(function (link, key) {
    return link.replace(new RegExp('\{' + key + '\}'), row[key]);
  }, route);
};

var Cell = _wrapComponent('_component5')(React.createClass({
  displayName: 'Cell',

  render: function render() {
    var value = this.props.row[this.props.field.name];
    var text = React.createElement(
      'span',
      null,
      value
    );

    var rowId = null;
    if (this.props.row.hasOwnProperty('id')) {
      rowId = this.props.row.id;
    }

    if (this.props.field.hasOwnProperty('type')) {
      switch (this.props.field.type) {
        case 'action':
          var visible = true;
          if (typeof this.props.field.visible === 'function') {
            visible = this.props.field.visible(this.props.field, this.props.row);
          }
          if (visible) {
            if (this.props.field.icon) {
              var color = this.props.field.color || '#000000';
              if (typeof color === 'function') {
                color = color(this.props.field, this.props.row) || '#000000';
              }
              var icon = this.props.field.icon;
              if (typeof icon === 'function') {
                icon = icon(this.props.field, this.props.row);
              }
              text = React.createElement('i', { className: 'fa fa-' + icon + ' fa-fw table-action',
                style: { color: color },
                onClick: this.props.field.handler.bind(this, this.props.field, this.props.row) });
            } else {
              text = React.createElement(
                'i',
                { className: 'table-action',
                  onClick: this.props.field.handler.bind(this, this.props.field, this.props.row) },
                React.createElement('img', { src: this.props.field.image })
              );
            }
          }
          break;
        case 'datetime':
          if (value) {
            text = React.createElement(FormattedTime, { value: value,
              day: 'numeric',
              month: 'numeric',
              year: 'numeric',
              hour: 'numeric',
              minute: 'numeric' });
          } else {
            text = '';
          }
          break;
        case 'time':
          text = React.createElement(FormattedTime, { value: value,
            hour: 'numeric',
            minute: 'numeric' });
          break;
        case 'progress':
          if (value !== null) {
            text = React.createElement(Bootstrap.ProgressBar, { now: value, label: '%(percent)s%' });
          } else {
            text = React.createElement('span', null);
          }
          break;
        case 'boolean':
          text = React.createElement(Checkbox, { checked: value, disabled: true });
          break;
        case 'alterable-boolean':
          text = React.createElement(CellCheckbox, {
            checked: value,
            rowId: rowId,
            propertyName: this.props.field.name,
            disabled: false,
            onUserClick: this.props.field.handler
          });
          break;
        case 'date':
          text = React.createElement(FormattedDate, { value: value, day: 'numeric', month: 'long', year: 'numeric' });
          break;
        case 'property':
          break;
        default:
          console.warn('Cell type [' + this.props.field.type + '] is not supported.');
          break;
      }
    } else {
      if (value instanceof Date) {
        text = React.createElement(FormattedDate, { value: value, day: 'numeric', month: 'long', year: 'numeric' });
      } else if (typeof value === 'boolean') {
        text = React.createElement(Checkbox, { checked: value, disabled: true });
      }
    }

    if (this.props.field.hasOwnProperty('link')) {
      if (typeof this.props.field.link === 'function') {
        var href = this.props.field.link(this.props.row);
        if (href) {
          text = React.createElement(
            Link,
            { to: formatLink(this.props.field.link(this.props.row), this.props.row) },
            text
          );
        }
      } else {
        text = React.createElement(
          Link,
          { to: formatLink(this.props.field.link, this.props.row) },
          text
        );
      }
    }

    var style = {};
    if (this.props.field.width && this.props.field.width > 0) {
      style.width = this.props.field.width;
    }
    if (this.props.field.hasOwnProperty('align')) {
      style.textAlign = this.props.field.align;
    }

    if (typeof this.props.field.className === 'function') {
      return React.createElement(
        'td',
        null,
        React.createElement(
          'div',
          { style: style, className: this.props.field.className(value) },
          text
        )
      );
    } else {
      return React.createElement(
        'td',
        null,
        React.createElement(
          'div',
          { style: style },
          text
        )
      );
    }
  }
}));

Table.Header = Header;

Table.Body = Body;

Table.Row = Row;

Table.Cell = Cell;

Table.PAGING_CLIENT_SIDE = PAGING_CLIENT_SIDE;
Table.PAGING_SERVER_SIDE = PAGING_SERVER_SIDE;

module.exports = Table;

},{"./CellCheckbox":478,"./Checkbox":481,"livereactload/babel-transform":28,"react":"react","react-bootstrap":"react-bootstrap","react-intl":"react-intl","react-router":"react-router"}],508:[function(require,module,exports){
'use strict';

var _react2 = require('react');

var _react3 = _interopRequireDefault(_react2);

var _babelTransform = require('livereactload/babel-transform');

var _babelTransform2 = _interopRequireDefault(_babelTransform);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _components = {
  _component: {}
};

var _livereactloadBabelTransform2 = (0, _babelTransform2.default)({
  filename: '/home/daiad/Desktop/Development/home-web/utility/src/main/frontend/components/UtilityDropDown.js',
  components: _components,
  locals: [],
  imports: [_react3.default]
});

function _wrapComponent(id) {
  return function (Component) {
    return _livereactloadBabelTransform2(Component, id);
  };
}

var React = require('react');
var Bootstrap = require('react-bootstrap');

var UtilityDropDown = _wrapComponent('_component')(React.createClass({
  displayName: 'UtilityDropDown',

  getDefaultProps: function getDefaultProps() {
    return {
      title: '',
      options: [],
      onSelect: null,
      disabled: true
    };
  },

  render: function render() {
    var options = [];
    var self = this;

    this.props.options.forEach(function (value) {
      var eventKey = {
        value: value.value,
        label: value.label
      };
      options.push(React.createElement(
        Bootstrap.MenuItem,
        {
          eventKey: eventKey,
          key: value.key,
          onSelect: self.props.onSelect },
        value.label
      ));
    });

    return React.createElement(
      'div',
      { className: 'clearfix', style: { float: 'left', marginLeft: 5, paddingLeft: 5 } },
      React.createElement(
        Bootstrap.DropdownButton,
        {
          title: this.props.title,
          disabled: self.props.disabled,
          id: 'bg-nested-dropdown' },
        options
      )
    );
  }
}));

module.exports = UtilityDropDown;

},{"livereactload/babel-transform":28,"react":"react","react-bootstrap":"react-bootstrap"}],509:[function(require,module,exports){
'use strict';

var _react2 = require('react');

var _react3 = _interopRequireDefault(_react2);

var _babelTransform = require('livereactload/babel-transform');

var _babelTransform2 = _interopRequireDefault(_babelTransform);

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _components = {
  _component: {}
};

var _livereactloadBabelTransform2 = (0, _babelTransform2.default)({
  filename: '/home/daiad/Desktop/Development/home-web/utility/src/main/frontend/components/Widget.js',
  components: _components,
  locals: [],
  imports: [_react3.default]
});

function _wrapComponent(id) {
  return function (Component) {
    return _livereactloadBabelTransform2(Component, id);
  };
}

var React = require('react');

var _require = require('react-dom'),
    findDOMNode = _require.findDOMNode;

var bs = require('react-bootstrap');

var _require2 = require('react-echarts'),
    BarChart = _require2.BarChart;

var _require3 = require('react-leaflet-wrapper'),
    Map = _require3.Map,
    TileLayer = _require3.TileLayer,
    HeatLayer = _require3.HeatLayer;

var DisplayParams = require('./DisplayParams');
var maximizable = require('./Maximizable');

function Widget(props) {
  var error = props.error,
      display = props.display,
      title = props.title,
      footer = props.footer,
      _props$maximizable = props.maximizable,
      maximizable = _props$maximizable === undefined ? false : _props$maximizable,
      maximized = props.maximized,
      maximize = props.maximize,
      minimize = props.minimize;
  //const innerProps = maximized ? { ...props, ...maximizedProps } : props;

  return React.createElement(
    'div',
    { className: 'infobox' },
    React.createElement(
      'div',
      { className: 'infobox-header' },
      maximizable ? maximized ? React.createElement(
        'h1',
        { style: { marginLeft: 20 } },
        title ? React.createElement(
          'span',
          null,
          title
        ) : React.createElement('div', null),
        React.createElement(
          bs.Button,
          { style: { float: 'right' }, bsStyle: 'default', onClick: minimize },
          React.createElement('i', { className: 'fa fa-search-minus' })
        )
      ) : React.createElement(
        'h4',
        null,
        title ? React.createElement(
          'span',
          null,
          title
        ) : React.createElement('div', null),
        React.createElement(
          bs.Button,
          { style: { float: 'right' }, bsStyle: 'default', onClick: maximize },
          React.createElement('i', { className: 'fa fa-search-plus' })
        )
      ) : title ? React.createElement(
        'h4',
        null,
        title
      ) : React.createElement('div', null)
    ),
    React.createElement(
      'div',
      { className: 'infobox-body' },
      function () {
        if (error) {
          return React.createElement('div', null);
        } else {
          if (display === 'stat') {
            return React.createElement(StatWidget, props);
          } else if (display === 'chart') {
            return React.createElement(BarChartWidget, props);
          } else if (display === 'map') {
            return React.createElement(HeatmapWidget, props);
          } else return null;
        }
      }()
    ),
    React.createElement(
      'div',
      { className: 'infobox-footer' },
      footer
    )
  );
}

function HeatmapWidget(props) {
  var _props$style = props.style,
      style = _props$style === undefined ? {} : _props$style,
      data = props.data;

  return React.createElement(
    Map,
    {
      center: [38.36, -0.479],
      zoom: 12,
      width: style.width,
      height: style.height
    },
    React.createElement(TileLayer, null),
    React.createElement(HeatLayer, {
      data: data,
      radius: 10
    })
  );
}

var BarChartWidget = _wrapComponent('_component')(React.createClass({
  displayName: 'BarChartWidget',

  componentDidMount: function componentDidMount() {
    this.node = findDOMNode(this);
  },
  render: function render() {
    var _props = this.props,
        xAxis = _props.xAxis,
        yAxis = _props.yAxis,
        series = _props.series,
        grid = _props.grid,
        _props$style2 = _props.style,
        style = _props$style2 === undefined ? {} : _props$style2,
        theme = _props.theme;

    return React.createElement(
      'div',
      { style: { height: style.height } },
      React.createElement(BarChart, {
        width: this.node ? this.node.clientWidth : null,
        height: this.node ? this.node.clientHeight : style.height,
        horizontal: true,
        legend: false,
        theme: theme,
        xAxis: _extends({
          boundaryGap: true
        }, xAxis),
        yAxis: _extends({
          formatter: function formatter(y) {
            return y.toString() + '%';
          },
          numTicks: 3,
          min: 0
        }, yAxis),
        grid: _extends({
          x: '15%',
          y: '-2%'
        }, grid),
        series: series
      })
    );
  }
}));

function StatWidget(props) {
  var highlight = props.highlight,
      info = props.info,
      limit = props.limit,
      show = props.show,
      _props$style3 = props.style,
      style = _props$style3 === undefined ? {} : _props$style3;

  return React.createElement(
    'div',
    { style: _extends({ height: 120 }, style) },
    React.createElement(
      'div',
      { style: { float: 'left', width: highlight ? Array.isArray(info) && info.length > 0 ? '40%' : '100%' : '0%' } },
      React.createElement(
        'h1',
        { style: { marginTop: 0, fontSize: '2.5em' } },
        highlight
      )
    ),
    React.createElement(
      'div',
      { style: { float: 'right', width: Array.isArray(info) && info.length > 0 ? highlight ? '55%' : '100%' : '0%' } },
      Array.isArray(info) ? React.createElement(DisplayParams, {
        params: info,
        limit: limit,
        show: show,
        style: { lineHeight: '1.7em' }
      }) : React.createElement('div', null)
    )
  );
}

module.exports = maximizable(Widget);

},{"./DisplayParams":486,"./Maximizable":497,"livereactload/babel-transform":28,"react":"react","react-bootstrap":"react-bootstrap","react-dom":"react-dom","react-echarts":109,"react-leaflet-wrapper":151}],510:[function(require,module,exports){
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

var React = require('react');
var bs = require('react-bootstrap');
var Widget = require('./Widget');

function toNlets(array, n) {
  return array.reduce(function (p, c, i, arr) {
    return i % n === 0 ? [].concat(_toConsumableArray(p), [arr.slice(i, i + n)]) : p;
  }, []);
}

function WidgetRow(props) {
  var widgets = props.widgets,
      _props$style = props.style,
      style = _props$style === undefined ? {} : _props$style,
      _props$itemsPerRow = props.itemsPerRow,
      itemsPerRow = _props$itemsPerRow === undefined ? 3 : _props$itemsPerRow;

  if (!Array.isArray(widgets)) return React.createElement('div', null);
  var nlets = toNlets(widgets, itemsPerRow);
  return React.createElement(
    'div',
    null,
    nlets.map(function (widgets, i) {
      return React.createElement(
        bs.Row,
        { key: i, style: _extends({ marginBottom: 20 }, style) },
        widgets.map(function (widget) {
          return React.createElement(
            bs.Col,
            { md: Math.floor(12 / itemsPerRow),
              key: widget.id
            },
            React.createElement(Widget, widget)
          );
        })
      );
    })
  );
}
module.exports = WidgetRow;

},{"./Widget":509,"react":"react","react-bootstrap":"react-bootstrap"}],511:[function(require,module,exports){
'use strict';

var _react2 = require('react');

var _react3 = _interopRequireDefault(_react2);

var _babelTransform = require('livereactload/babel-transform');

var _babelTransform2 = _interopRequireDefault(_babelTransform);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _components = {
  _component: {}
};

var _livereactloadBabelTransform2 = (0, _babelTransform2.default)({
  filename: '/home/daiad/Desktop/Development/home-web/utility/src/main/frontend/components/chart/dimension/FilterTag.js',
  components: _components,
  locals: [],
  imports: [_react3.default]
});

function _wrapComponent(id) {
  return function (Component) {
    return _livereactloadBabelTransform2(Component, id);
  };
}

var React = require('react');

var FilterTag = _wrapComponent('_component')(React.createClass({
  displayName: 'FilterTag',

  getDefaultProps: function getDefaultProps() {
    return {
      text: '',
      icon: '',
      onClick: null
    };
  },

  render: function render() {
    var cursor = '';
    var textDecoration = '';

    if (typeof this.props.onClick === 'function') {
      cursor = 'pointer';
      textDecoration = 'underline';
    }
    return React.createElement(
      'div',
      { className: 'clearfix', style: { float: 'left', margin: 5, padding: 5, borderRadius: 2, background: '#2c3e50' } },
      React.createElement('i', { className: 'fa fa-' + this.props.icon, style: { color: '#fff', paddingRight: 5 } }),
      React.createElement(
        'span',
        { style: { color: '#fff', cursor: cursor, textDecoration: textDecoration },
          onClick: this.props.onClick },
        this.props.text
      )
    );
  }
}));

module.exports = FilterTag;

},{"livereactload/babel-transform":28,"react":"react"}],512:[function(require,module,exports){
'use strict';

module.exports = {
  color: ['#060b49', '#0f165c', '#1c236c', '#2d3480', '#464c8f', '#575d99', '#6e73a6', '#8185b2', '#979abe', '#abaecc', '#c4c6d9'],

  title: {
    textStyle: {
      fontSize: 15,
      fontWeight: 'normal',
      color: '#1790cf'
    }
  },

  dataRange: {
    color: ['#1178ad', '#72bbd0']
  },

  toolbox: {
    color: ['#1790cf', '#1790cf', '#1790cf', '#1790cf']
  },

  legend: {
    padding: 12,
    itemHeight: 10,
    itemGap: 6,
    itemWidth: 35,
    backgroundColor: '#fff',
    borderColor: '#ccc',
    borderWidth: 0,
    textStyle: {
      fontSize: 11,
      fontFamily: 'sans-serif'
      //'monospace', // needed only for vertical alignment
    },
    x: 'center',
    y: 0
  },

  tooltip: {
    backgroundColor: 'rgba(0,0,0,0.5)',
    axisPointer: {
      type: 'line',
      lineStyle: {
        color: '#1790cf',
        type: 'dashed'
      },
      crossStyle: {
        color: '#1790cf'
      },
      shadowStyle: {
        color: 'rgba(200,200,200,0.3)'
      }
    }
  },

  dataZoom: {
    dataBackgroundColor: '#eee',
    fillerColor: 'rgba(144,197,237,0.2)',
    handleColor: '#1790cf'
  },

  grid: {
    x: '10%',
    y: '9%',
    x2: '9%',
    y2: '9%',
    borderColor: '#bbb',
    borderWidth: 0
  },

  categoryAxis: {
    axisLine: {
      lineStyle: {
        width: 1,
        color: '#1790cf'
      }
    },
    axisTick: {
      lineStyle: {
        width: 1,
        color: '#1790cf'
      }
    },
    splitLine: {
      lineStyle: {
        color: ['#eee']
      }
    }
  },

  valueAxis: {
    axisLine: {
      lineStyle: {
        width: 1,
        color: '#1790cf'
      }
    },
    axisTick: {
      lineStyle: {
        width: 1,
        color: '#1790cf'
      }
    },
    splitArea: {
      show: true,
      areaStyle: {
        color: ['rgba(250,250,250,0.1)', 'rgba(200,200,200,0.1)']
      }
    },
    splitLine: {
      lineStyle: {
        color: ['#eee']
      }
    }
  },

  line: {
    itemStyle: {
      normal: {
        lineStyle: {
          width: 2,
          type: 'solid'
        }
      },
      emphasis: {}
    },
    smooth: false,
    symbol: 'emptyCircle',
    symbolSize: 4
  },

  timeline: {
    lineStyle: {
      color: '#1790cf'
    },
    controlStyle: {
      normal: {
        color: '#1790cf'
      },
      emphasis: {
        color: '#1790cf'
      }
    }
  },

  k: {
    itemStyle: {
      normal: {
        color: '#1bb2d8',
        color0: '#99d2dd',
        lineStyle: {
          width: 1,
          color: '#1c7099',
          color0: '#88b0bb'
        }
      }
    }
  },

  map: {
    itemStyle: {
      normal: {
        areaStyle: {
          color: '#ddd'
        },
        label: {
          textStyle: {
            color: '#c12e34'
          }
        }
      },
      emphasis: {
        areaStyle: {
          color: '#99d2dd'
        },
        label: {
          textStyle: {
            color: '#c12e34'
          }
        }
      }
    }
  },

  bar: {
    barGap: '20%',
    barCategoryGap: '25%',
    itemStyle: {
      normal: {
        barBorderWidth: 0,
        barBorderRadius: 0,
        label: {
          position: 'right',
          textStyle: {
            fontSize: 11
          }
        }
      },
      emphasis: {}
    }
  },

  force: {
    itemStyle: {
      normal: {
        linkStyle: {
          color: '#1790cf'
        }
      }
    }
  },

  chord: {
    padding: 4,
    itemStyle: {
      normal: {
        borderWidth: 1,
        borderColor: 'rgba(128, 128, 128, 0.5)',
        chordStyle: {
          lineStyle: {
            color: 'rgba(128, 128, 128, 0.5)'
          }
        }
      },
      emphasis: {
        borderWidth: 1,
        borderColor: 'rgba(128, 128, 128, 0.5)',
        chordStyle: {
          lineStyle: {
            color: 'rgba(128, 128, 128, 0.5)'
          }
        }
      }
    }
  },

  gauge: {
    axisLine: {
      show: true,
      lineStyle: {
        color: [[0.2, '#1bb2d8'], [0.8, '#1790cf'], [1, '#1c7099']],
        width: 8
      }
    },
    axisTick: {
      splitNumber: 10,
      length: 12,
      lineStyle: {
        color: 'auto'
      }
    },
    axisLabel: {
      textStyle: {
        color: 'auto'
      }
    },
    splitLine: {
      length: 18,
      lineStyle: {
        color: 'auto'
      }
    },
    pointer: {
      length: '90%',
      color: 'auto'
    },
    title: {
      textStyle: {
        color: '#333'
      }
    },
    detail: {
      textStyle: {
        color: 'auto'
      }
    }
  },

  textStyle: {
    fontFamily: 'Arial, Verdana, sans-serif'
  }
};

},{}],513:[function(require,module,exports){
'use strict';

module.exports = {
  color: ['#1790cf', '#1bb2d8', '#99d2dd', '#88b0bb', '#1c7099', '#038cc4', '#75abd0', '#afd6dd'],

  title: {
    textStyle: {
      fontSize: 15,
      fontWeight: 'normal',
      color: '#1790cf'
    }
  },

  dataRange: {
    color: ['#1178ad', '#72bbd0']
  },

  toolbox: {
    color: ['#1790cf', '#1790cf', '#1790cf', '#1790cf']
  },

  legend: {
    padding: 12,
    itemHeight: 10,
    itemGap: 6,
    itemWidth: 35,
    backgroundColor: '#fff',
    borderColor: '#ccc',
    borderWidth: 0,
    textStyle: {
      fontSize: 11,
      fontFamily: 'sans-serif'
      //'monospace', // needed only for vertical alignment
    },
    x: 'center',
    y: 0
  },

  tooltip: {
    backgroundColor: 'rgba(0,0,0,0.5)',
    axisPointer: {
      type: 'line',
      lineStyle: {
        color: '#1790cf',
        type: 'dashed'
      },
      crossStyle: {
        color: '#1790cf'
      },
      shadowStyle: {
        color: 'rgba(200,200,200,0.3)'
      }
    }
  },

  dataZoom: {
    dataBackgroundColor: '#eee',
    fillerColor: 'rgba(144,197,237,0.2)',
    handleColor: '#1790cf'
  },

  grid: {
    x: '10%',
    y: '9%',
    x2: '9%',
    y2: '9%',
    borderColor: '#bbb',
    borderWidth: 0
  },

  categoryAxis: {
    axisLine: {
      lineStyle: {
        width: 1,
        color: '#1790cf'
      }
    },
    axisTick: {
      lineStyle: {
        width: 1,
        color: '#1790cf'
      }
    },
    splitLine: {
      lineStyle: {
        color: ['#eee']
      }
    }
  },

  valueAxis: {
    axisLine: {
      lineStyle: {
        width: 1,
        color: '#1790cf'
      }
    },
    axisTick: {
      lineStyle: {
        width: 1,
        color: '#1790cf'
      }
    },
    splitArea: {
      show: true,
      areaStyle: {
        color: ['rgba(250,250,250,0.1)', 'rgba(200,200,200,0.1)']
      }
    },
    splitLine: {
      lineStyle: {
        color: ['#eee']
      }
    }
  },

  line: {
    itemStyle: {
      normal: {
        lineStyle: {
          width: 2,
          type: 'solid'
        }
      },
      emphasis: {}
    },
    smooth: false,
    symbol: 'emptyCircle',
    symbolSize: 4
  },

  bar: {
    barGap: '20%',
    barCategoryGap: '25%',
    itemStyle: {
      normal: {
        barBorderWidth: 0,
        barBorderRadius: 0,
        label: {
          position: 'right',
          textStyle: {
            fontSize: 11
          }
        }
      },
      emphasis: {}
    }
  },

  timeline: {
    lineStyle: {
      color: '#1790cf'
    },
    controlStyle: {
      normal: {
        color: '#1790cf'
      },
      emphasis: {
        color: '#1790cf'
      }
    }
  },

  k: {
    itemStyle: {
      normal: {
        color: '#1bb2d8',
        color0: '#99d2dd',
        lineStyle: {
          width: 1,
          color: '#1c7099',
          color0: '#88b0bb'
        }
      }
    }
  },

  map: {
    itemStyle: {
      normal: {
        areaStyle: {
          color: '#ddd'
        },
        label: {
          textStyle: {
            color: '#c12e34'
          }
        }
      },
      emphasis: {
        areaStyle: {
          color: '#99d2dd'
        },
        label: {
          textStyle: {
            color: '#c12e34'
          }
        }
      }
    }
  },

  force: {
    itemStyle: {
      normal: {
        linkStyle: {
          color: '#1790cf'
        }
      }
    }
  },

  chord: {
    padding: 4,
    itemStyle: {
      normal: {
        borderWidth: 1,
        borderColor: 'rgba(128, 128, 128, 0.5)',
        chordStyle: {
          lineStyle: {
            color: 'rgba(128, 128, 128, 0.5)'
          }
        }
      },
      emphasis: {
        borderWidth: 1,
        borderColor: 'rgba(128, 128, 128, 0.5)',
        chordStyle: {
          lineStyle: {
            color: 'rgba(128, 128, 128, 0.5)'
          }
        }
      }
    }
  },

  gauge: {
    axisLine: {
      show: true,
      lineStyle: {
        color: [[0.2, '#1bb2d8'], [0.8, '#1790cf'], [1, '#1c7099']],
        width: 8
      }
    },
    axisTick: {
      splitNumber: 10,
      length: 12,
      lineStyle: {
        color: 'auto'
      }
    },
    axisLabel: {
      textStyle: {
        color: 'auto'
      }
    },
    splitLine: {
      length: 18,
      lineStyle: {
        color: 'auto'
      }
    },
    pointer: {
      length: '90%',
      color: 'auto'
    },
    title: {
      textStyle: {
        color: '#333'
      }
    },
    detail: {
      textStyle: {
        color: 'auto'
      }
    }
  },

  textStyle: {
    fontFamily: 'Arial, Verdana, sans-serif'
  }
};

},{}],514:[function(require,module,exports){
'use strict';

var React = require('react');

var _require = require('react-redux'),
    connect = _require.connect;

var PropTypes = React.PropTypes;

var computeKey = require('../../reports').measurements.computeKey;

var Chart = require('./chart');

var _Chart = connect(function (state, ownProps) {
  var field = ownProps.field,
      level = ownProps.level,
      reportName = ownProps.reportName,
      reportKey = ownProps.reportKey;

  var _state = state.reports.measurements;
  var key = computeKey(field, level, reportName, reportKey);
  return !(key in _state) ? {} : _.pick(_state[key], ['finished', 'series']);
}, null)(Chart);

_Chart.propTypes.reportKey = PropTypes.string.isRequired;

module.exports = _Chart;

},{"../../reports":641,"./chart":515,"react":"react","react-redux":"react-redux"}],515:[function(require,module,exports){
'use strict';

var _react2 = require('react');

var _react3 = _interopRequireDefault(_react2);

var _babelTransform = require('livereactload/babel-transform');

var _babelTransform2 = _interopRequireDefault(_babelTransform);

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _components = {
  _component: {}
};

var _livereactloadBabelTransform2 = (0, _babelTransform2.default)({
  filename: '/home/daiad/Desktop/Development/home-web/utility/src/main/frontend/components/reports-measurements/chart.js',
  components: _components,
  locals: [],
  imports: [_react3.default]
});

function _wrapComponent(id) {
  return function (Component) {
    return _livereactloadBabelTransform2(Component, id);
  };
}

var _ = require('lodash');
var moment = require('moment');
var numeral = require('numeral');
var React = require('react');
var echarts = require('react-echarts');
var population = require('../../model/population');

var consolidateFuncs = require('../../reports').measurements.consolidateFuncs;

var _require = require('../../prop-types'),
    seriesPropType = _require.seriesPropType,
    configPropType = _require.configPropType;

var PropTypes = React.PropTypes;
var theme = require('../chart/themes/blue');

var Chart = _wrapComponent('_component')(React.createClass({
  displayName: 'Chart',

  statics: {
    nameTemplates: {
      basic: _.template('<%= metric %> of <%= label %>'),
      ranking: _.template('<%= ranking.type %>-<%= ranking.index + 1 %> of <%= label %>'),
      forecast: _.template('Forecast - <%= metric %> of <%= label %>')
    },

    defaults: {
      smooth: false,
      tooltip: true,
      fill: 0.3,
      xAxis: {
        dateformat: {
          'minute': 'HH:mm',
          'hour': 'HH:00',
          'day': 'D/MMM',
          'week': 'D/MMM',
          'month': 'MMM/YYYY',
          'quarter': 'Qo YYYY',
          'year': 'YYYY'
        }
      }
    }
  },

  propTypes: {
    field: PropTypes.string.isRequired,
    level: PropTypes.string.isRequired,
    reportName: PropTypes.string.isRequired,
    series: PropTypes.arrayOf(seriesPropType),
    finished: PropTypes.oneOfType([PropTypes.bool, PropTypes.number]),
    // Appearence
    draw: PropTypes.bool, // allow parental control on our updates 
    width: PropTypes.number.isRequired,
    height: PropTypes.number.isRequired,
    scaleTimeAxis: PropTypes.bool
  },

  contextTypes: { config: configPropType },

  getDefaultProps: function getDefaultProps() {
    return {
      draw: true,
      series: [],
      finished: true,
      scaleTimeAxis: false,
      overlap: null,
      overlapping: false,
      forecast: null
    };
  },

  shouldComponentUpdate: function shouldComponentUpdate(nextProps) {
    var update = nextProps.draw !== false;

    //if (!update) console.log('Skipping update of Chart!...');
    return update;
  },

  render: function render() {
    var _this = this;

    var defaults = this.constructor.defaults;
    var _props = this.props,
        field = _props.field,
        level = _props.level,
        reportName = _props.reportName,
        yAxis = _props.yAxis;
    var config = this.context.config;

    var _ref = typeof config === "undefined" ? this.props.context.reports.byType.measurements.fields[field] : config.reports.byType.measurements.fields[field],
        unit = _ref.unit,
        fieldName = _ref.name;

    //var {title, unit, name: fieldName} = config.reports.byType.measurements.fields[field];

    var _ref2 = this.props.overlapping ? this._overlapData() : this._consolidateData(),
        xaxisData = _ref2.xaxisData,
        series = _ref2.series;

    xaxisData || (xaxisData = []);

    series = (series || []).map(function (s) {
      return {
        name: _this._getNameForSeries(s),
        fill: defaults.fill,
        smooth: defaults.smooth,
        data: s.data
      };
    });

    var xf = defaults.xAxis.dateformat[level];
    var xAxis;
    if (this.props.overlapping) {

      var overlapFormat;

      if (this.props.overlap.value == 'month') {
        overlapFormat = 'DD';
      } else if (this.props.overlap.value == 'year') {
        overlapFormat = 'MMM';
      } else if (this.props.overlap.value == 'day') {
        overlapFormat = 'LT';
      } else {
        overlapFormat = xf;
      }
      //xAxis data are based on the level aggregation. e.g for week level and year overlapping we get 52 week dates.
      //The viewing of these dates is formatted based on the previous level of the overlap value.

      xAxis = {
        data: xaxisData,
        boundaryGap: false,
        formatter: function formatter(t) {
          return moment(t).utc().format(overlapFormat);
        }
      };
    } else {
      xAxis = {
        data: xaxisData,
        boundaryGap: false,
        formatter: function formatter(t) {
          return moment(t).utc().format(xf);
        }
      };
    }

    return React.createElement(
      'div',
      { className: 'report-chart', id: ['chart', field, level, reportName].join('--') },
      React.createElement(echarts.LineChart, {
        width: this.props.width,
        height: this.props.height,
        loading: this.props.finished ? null : { text: 'Loading data...' },
        tooltip: defaults.tooltip,
        theme: theme,
        xAxis: xAxis,
        yAxis: _extends({}, yAxis, {
          name: fieldName + (unit ? ' (' + unit + ')' : ''),
          numTicks: 4,
          formatter: function formatter(y) {
            return numeral(y).format('0.0a');
          }
        }),
        series: series
      })
    );
  },

  // Helpers

  _consolidateData: function _consolidateData() {
    var result = { xaxisData: null, series: null };
    var _props2 = this.props,
        level = _props2.level,
        reportName = _props2.reportName,
        series = _props2.series,
        scaleTimeAxis = _props2.scaleTimeAxis;
    var config = this.context.config;

    var _config;
    if (typeof config === "undefined") {
      _config = this.props.context.reports.byType.measurements;
    } else {
      _config = config.reports.byType.measurements;
    }

    if (!series || !series.length || series.every(function (s) {
      return !s.data.length;
    })) return result; // no data available

    var report = _config.levels[level].reports[reportName];

    var _ref3 = typeof config === "undefined" ? this.props.context.reports.levels[level] : config.reports.levels[level],
        bucket = _ref3.bucket,
        duration = _ref3.duration;

    var _duration = _slicedToArray(duration, 2),
        d = _duration[0],
        durationUnit = _duration[1];

    d = moment.duration(d, durationUnit);

    // Use a sorted (by timestamp t) copy of series data [t,y]

    series = series.map(function (s) {
      return _.extend({}, s, {
        data: s.data.slice(0).sort(function (p1, p2) {
          return p1[0] - p2[0];
        })
      });
    });

    // Find time range

    var start, end;
    if (scaleTimeAxis) {
      start = _.min(series.map(function (s) {
        return s.data[0][0];
      }));
      end = _.max(series.map(function (s) {
        return s.data[s.data.length - 1][0];
      }));
    } else {
      start = _.min(series.map(function (s) {
        return s.timespan[0];
      }));
      end = _.max(series.map(function (s) {
        return s.timespan[1];
      }));
    }

    var startx = moment(start).utc().startOf(bucket);
    var endx = moment(end).utc().endOf(bucket);

    // Generate x-axis data,
    result.xaxisData = [];
    for (var m = startx; m < endx; m.add(d)) {
      result.xaxisData.push(m.valueOf());
    }

    // Collect points in level-wide buckets
    var groupInBuckets = function groupInBuckets(data, boundaries) {
      // Group y values into buckets defined yb x-axis boundaries:
      var N = boundaries.length;
      // For i=0..N-2 all y with (b[i] <= y < b[i+1]) fall into bucket #i ((i+1)-th)
      var yb = []; // hold buckets of y values
      for (var i = 1, j = 0; i < N; i++) {
        yb.push([]);
        while (j < data.length && data[j][0] < boundaries[i]) {
          var y = data[j][1];
          y != null && yb[i - 1].push(y);
          j++;
        }
      }
      return yb;
    };

    // Consolidate
    var cf = consolidateFuncs[report.consolidate];
    result.series = series.map(function (s) {
      return _.extend({}, s, {
        data: groupInBuckets(s.data, result.xaxisData).map(cf)
      });
    });

    // The number of Y buckets is always N - 1, where N is the number of X points!
    result.xaxisData.pop();

    return result;
  },

  _overlapData: function _overlapData() {
    var result = { xaxisData: null, series: null };
    var _props3 = this.props,
        level = _props3.level,
        reportName = _props3.reportName,
        series = _props3.series;


    if (!series || !series.length || series.every(function (s) {
      return !s.data.length;
    })) {
      return result; // no data available    
    }

    var maxDuration = 0;
    var minStart = moment();

    for (var k = 0; k < series.length; k++) {
      var start1 = moment(series[k].timespan[0]);
      var end1 = moment(series[k].timespan[1]);
      var diff = moment(end1, "DD/MM/YYYY HH:mm:ss").diff(start1, "DD/MM/YYYY HH:mm:ss");
      if (diff < 0) {
        console.error('Invalid timespan');
      }
      if (diff > maxDuration) {
        maxDuration = diff;
      }
      if (start1.isBefore(minStart)) {
        minStart = start1;
      }
    }

    var config = this.context.config;

    var _config;

    var _ref4 = typeof config === "undefined" ? this.props.context.reports.levels[level] : config.reports.levels[level],
        bucket = _ref4.bucket,
        duration = _ref4.duration;

    if (typeof config === "undefined") {
      _config = this.props.context.reports.byType.measurements;
    } else {
      _config = config.reports.byType.measurements;
    }

    var report = _config.levels[level].reports[reportName];

    var _duration2 = _slicedToArray(duration, 2),
        d = _duration2[0],
        durationUnit = _duration2[1];

    d = moment.duration(d, durationUnit);

    // Use a sorted (by timestamp t) copy of series data [t,y]

    series = series.map(function (s) {
      return _.extend({}, s, {
        data: s.data.slice(0).sort(function (p1, p2) {
          return p1[0] - p2[0];
        })
      });
    });

    //shift series to reference same time period
    for (var n = 0; n < series.length; n++) {
      if (series[n].data.length === 0) {
        continue;
      }
      if (series[n].data[0][0] == minStart.valueOf()) {
        continue; //this serie defines the starting alignment and won 't be shifted.
      } else {
        //find shift value:
        var subtract = series[n].data[0][0] - minStart.valueOf();
        for (var m = 0; m < series[n].data.length; m++) {
          series[n].data[m][0] = series[n].data[m][0] - subtract;
        }
      }
    }

    //find time range from min start and max duration in order to overlap    
    var startx = moment(minStart).utc().startOf(bucket);
    var endx = moment(moment(minStart).add(maxDuration).valueOf()).utc().endOf(bucket);

    // Generate x-axis data
    result.xaxisData = [];
    for (var _m = startx; _m < endx; _m.add(d)) {
      result.xaxisData.push(_m.valueOf());
    }

    // Collect points in level-wide buckets
    var groupInBuckets = function groupInBuckets(data, boundaries) {
      // Group y values into buckets defined yb x-axis boundaries:
      var N = boundaries.length;
      // For i=0..N-2 all y with (b[i] <= y < b[i+1]) fall into bucket #i ((i+1)-th)
      var yb = []; // hold buckets of y values
      for (var i = 1, j = 0; i < N; i++) {
        yb.push([]);
        while (j < data.length && data[j][0] < boundaries[i]) {
          var y = data[j][1];
          y != null && yb[i - 1].push(y);
          j++;
        }
      }
      return yb;
    };

    // Consolidate
    var cf = consolidateFuncs[report.consolidate];
    result.series = series.map(function (s) {
      return _.extend({}, s, {
        data: groupInBuckets(s.data, result.xaxisData).map(cf)
      });
    });

    // The number of Y buckets is always N - 1, where N is the number of X points!
    result.xaxisData.pop();
    return result;
  },

  _getNameForSeries: function _getNameForSeries(_ref5) {
    var ranking = _ref5.ranking,
        target = _ref5.population,
        metric = _ref5.metric,
        timespan = _ref5.timespan,
        forecast = _ref5.forecast;

    //todo - refine label with shorter timelabel?
    var timeLabel = ' ' + moment(timespan[0]).format('DD/MM/YYYY') + '-' + moment(timespan[1]).format('DD/MM/YYYY');
    var nameTemplates = this.constructor.nameTemplates;
    var config = this.context.config;


    var label;
    if (target instanceof population.Utility) {
      // Use utility's friendly name
      label = 'Utility' + timeLabel; //config.utility.name;
    } else if (target instanceof population.ClusterGroup) {
      var cluster;
      // Use group's friendly name
      if (typeof config === "undefined") {
        cluster = this.props.context.utility.clusters.find(function (c) {
          return c.key == target.clusterKey;
        });
      } else {
        cluster = config.utility.clusters.find(function (c) {
          return c.key == target.clusterKey;
        });
      }
      label = cluster.name + ': ' + cluster.groups.find(function (g) {
        return g.key == target.key;
      }).name + timeLabel;
    } else if (target instanceof population.User) {

      label = target.name;
    } else {

      var customGroup = target.name ? target.name : 'Custom Group';

      label = this.props.forecast ? this.props.forecast.label : customGroup;
    }
    var tpl;

    if (forecast) {
      //label per serie if multiple
      tpl = nameTemplates.forecast;
    } else {
      tpl = ranking ? nameTemplates.ranking : nameTemplates.basic;
    }

    return tpl({ metric: metric, label: label, ranking: ranking });
  }
}));

module.exports = Chart;

},{"../../model/population":602,"../../prop-types":604,"../../reports":641,"../chart/themes/blue":513,"livereactload/babel-transform":28,"lodash":"lodash","moment":"moment","numeral":"numeral","react":"react","react-echarts":109}],516:[function(require,module,exports){
'use strict';

var React = require('react');

var views = require('./views');
var reports = require('./unit-reports');

var ReportByDay = function ReportByDay(reportProps) {
  return React.createElement(
    reports.ReportByDay,
    reportProps,
    React.createElement(views.Summary, null),
    React.createElement(views.SimpleChart, null),
    React.createElement(views.ComparisonChart, null)
  );
};

var ReportByWeek = function ReportByWeek(reportProps) {
  return React.createElement(
    reports.ReportByWeek,
    reportProps,
    React.createElement(views.Summary, null),
    React.createElement(views.SimpleChart, null),
    React.createElement(views.ComparisonChart, null)
  );
};

var ReportByMonth = function ReportByMonth(reportProps) {
  return React.createElement(
    reports.ReportByMonth,
    reportProps,
    React.createElement(views.Summary, null),
    React.createElement(views.SimpleChart, null),
    React.createElement(views.ComparisonChart, null)
  );
};

var ReportByYear = function ReportByYear(reportProps) {
  return React.createElement(
    reports.ReportByYear,
    reportProps,
    React.createElement(views.Summary, null),
    React.createElement(views.SimpleChart, null),
    React.createElement(views.ComparisonChart, null)
  );
};

module.exports = { ReportByDay: ReportByDay, ReportByWeek: ReportByWeek, ReportByMonth: ReportByMonth, ReportByYear: ReportByYear };

},{"./unit-reports":522,"./views":523,"react":"react"}],517:[function(require,module,exports){
'use strict';

var _react2 = require('react');

var _react3 = _interopRequireDefault(_react2);

var _babelTransform = require('livereactload/babel-transform');

var _babelTransform2 = _interopRequireDefault(_babelTransform);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _components = {
  _component: {}
};

var _livereactloadBabelTransform2 = (0, _babelTransform2.default)({
  filename: '/home/daiad/Desktop/Development/home-web/utility/src/main/frontend/components/reports-measurements/measurement-value.js',
  components: _components,
  locals: [],
  imports: [_react3.default]
});

function _wrapComponent(id) {
  return function (Component) {
    return _livereactloadBabelTransform2(Component, id);
  };
}

var numeral = require('numeral');
var React = require('react');

var _require = require('react-bootstrap'),
    Glyphicon = _require.Glyphicon;

var PropTypes = React.PropTypes;

var MeasurementValue = _wrapComponent('_component')(React.createClass({
  displayName: 'MeasurementValue',


  propTypes: {
    title: PropTypes.string.isRequired,
    subtitle: PropTypes.string,
    field: PropTypes.string.isRequired,
    unit: PropTypes.string.isRequired,
    value: PropTypes.number,
    prevValue: PropTypes.number,
    // Appearence
    formatter: PropTypes.func

  },

  getDefaultProps: function getDefaultProps() {
    return {
      formatter: function formatter(y) {
        return numeral(y).format('0.0a');
      }
    };
  },

  render: function render() {
    var _props = this.props,
        title = _props.title,
        subtitle = _props.subtitle,
        unit = _props.unit,
        value = _props.value,
        prevValue = _props.prevValue,
        f = _props.formatter;


    var dy, decr;
    if (value) {
      dy = value - prevValue;
      decr = dy < 0;
    }

    return React.createElement(
      'div',
      { className: 'measurement-value' },
      React.createElement(
        'div',
        { className: 'title' },
        title
      ),
      React.createElement(
        'div',
        { className: 'subtitle' },
        subtitle
      ),
      React.createElement(
        'div',
        { className: 'current-value' },
        React.createElement(
          'span',
          { className: 'value' },
          value ? f(value) : '--.-'
        ),
        '\xA0',
        React.createElement(
          'span',
          { className: 'unit' },
          unit
        )
      ),
      React.createElement(
        'div',
        { className: 'delta', style: { display: dy != null ? 'block' : 'none' } },
        React.createElement(
          'span',
          { className: 'sign' + ' ' + (decr ? 'negative' : 'non-negative') },
          React.createElement(Glyphicon, { glyph: decr ? 'arrow-down' : 'arrow-up' })
        ),
        '\xA0',
        React.createElement(
          'span',
          { className: 'value' },
          dy != null ? f(Math.abs(dy)) : ''
        ),
        '\xA0',
        React.createElement(
          'span',
          { className: 'unit' },
          unit
        )
      )
    );
  }
}));

module.exports = MeasurementValue;

},{"livereactload/babel-transform":28,"numeral":"numeral","react":"react","react-bootstrap":"react-bootstrap"}],518:[function(require,module,exports){
'use strict';

var _react2 = require('react');

var _react3 = _interopRequireDefault(_react2);

var _babelTransform = require('livereactload/babel-transform');

var _babelTransform2 = _interopRequireDefault(_babelTransform);

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _components = {
  _component: {},
  _component2: {},
  _component3: {}
};

var _livereactloadBabelTransform2 = (0, _babelTransform2.default)({
  filename: '/home/daiad/Desktop/Development/home-web/utility/src/main/frontend/components/reports-measurements/overview.js',
  components: _components,
  locals: [],
  imports: [_react3.default]
});

function _wrapComponent(id) {
  return function (Component) {
    return _livereactloadBabelTransform2(Component, id);
  };
}

var moment = require('moment');

var React = require('react');
var Bootstrap = require('react-bootstrap');
var ReactRedux = require('react-redux');
var Select = require('react-select').default;
var DatetimeInput = require('react-datetime');

var Panel = Bootstrap.Panel,
    PanelGroup = Bootstrap.PanelGroup,
    ListGroup = Bootstrap.ListGroup,
    ListGroupItem = Bootstrap.ListGroupItem,
    Button = Bootstrap.Button;

var PropTypes = React.PropTypes;

var _require = require('../../prop-types'),
    populationPropType = _require.populationPropType,
    reportPropType = _require.reportPropType,
    configPropType = _require.configPropType;

var _require2 = require('./common-reports'),
    ReportByDay = _require2.ReportByDay,
    ReportByWeek = _require2.ReportByWeek,
    ReportByMonth = _require2.ReportByMonth,
    ReportByYear = _require2.ReportByYear;

var commonPropTypes = {
  now: PropTypes.number.isRequired,
  source: PropTypes.string.isRequired,
  field: PropTypes.string.isRequired,
  uom: PropTypes.string.isRequired
};

var OverviewPanel = _wrapComponent('_component')(React.createClass({
  displayName: 'OverviewPanel',


  statics: {
    itemSpecs: {
      day: {
        title: 'Last Day',
        Report: ReportByDay
      },
      week: {
        title: 'Last Week',
        Report: ReportByWeek
      },
      month: {
        title: 'Last Month',
        Report: ReportByMonth
      },
      year: {
        title: 'Last Year',
        Report: ReportByYear
      }
    }
  },

  propTypes: _extends({}, commonPropTypes, {
    reports: PropTypes.shape({
      day: reportPropType,
      week: reportPropType,
      month: reportPropType,
      year: reportPropType
    }),
    reportKey: PropTypes.string,
    target: populationPropType,
    title: PropTypes.string.isRequired
  }),

  getDefaultProps: function getDefaultProps() {
    return {};
  },

  render: function render() {
    var itemSpecs = this.constructor.itemSpecs;
    var _props = this.props,
        now = _props.now,
        field = _props.field,
        source = _props.source,
        uom = _props.uom,
        reports = _props.reports,
        reportKey = _props.reportKey,
        target = _props.target;


    var reportProps = {
      now: now,
      source: source,
      field: field,
      uom: uom,
      reportKey: !reportKey ? target ? target.toString().toLowerCase() : 'utility' : reportKey,
      target: target
    };

    var items = _.values(_.mapValues(itemSpecs, function (y, k) {
      return React.createElement(
        ListGroupItem,
        { key: k },
        React.createElement(
          'h4',
          null,
          y.title
        ),
        React.createElement(y.Report, _extends({}, reportProps, { report: reports[k] }))
      );
    }));

    var header = React.createElement(
      'h3',
      null,
      this.props.title
    );

    return React.createElement(
      Panel,
      { header: header },
      React.createElement(
        ListGroup,
        { fill: true },
        items
      )
    );
  }
}));

var OverviewPanelGroup = _wrapComponent('_component2')(React.createClass({
  displayName: 'OverviewPanelGroup',


  propTypes: _extends({}, commonPropTypes, {
    reports: PropTypes.shape({
      day: reportPropType,
      week: reportPropType,
      month: reportPropType,
      year: reportPropType
    }),
    title: PropTypes.string.isRequired
  }),

  contextTypes: {
    config: configPropType
  },

  getInitialState: function getInitialState() {
    return {
      activeKey: 'utility'
    };
  },

  shouldComponentUpdate: function shouldComponentUpdate(nextProps, nextState) {
    return nextProps.now != this.props.now || nextProps.field != this.props.field || nextProps.source != this.props.source || nextState.activeKey != this.state.activeKey;
  },

  render: function render() {
    var _this = this;

    var _props2 = this.props,
        now = _props2.now,
        field = _props2.field,
        source = _props2.source,
        uom = _props2.uom,
        reports = _props2.reports,
        title = _props2.title;

    var visible = function visible(k) {
      return _this.state.activeKey == k;
    };

    var commonProps = { source: source, field: field, uom: uom, now: now };

    var reportProps = {
      utility: _extends({}, commonProps, {
        reportKey: 'utility',
        target: null,
        visible: visible('utility')
      }),
      perEfficiency: _extends({}, commonProps, {
        reportKey: 'per-efficiency',
        target: null, // Fixme provide population.Cluster instance
        visible: visible('per-efficiency')
      })
    };

    var panelProps = {
      utility: {
        id: 'overview-utility',
        header: React.createElement(
          'h3',
          null,
          title + ' - ' + 'Utility'
        ),
        eventKey: 'utility'
      },
      perEfficiency: {
        id: 'overview-per-efficiency',
        header: React.createElement(
          'h3',
          null,
          title + ' - ' + 'Per Customer Efficiency'
        ),
        eventKey: 'per-efficiency'
      }
    };

    return React.createElement(
      PanelGroup,
      { accordion: true, onSelect: this._selectPanel, activeKey: this.state.activeKey },
      React.createElement(
        Panel,
        panelProps.utility,
        React.createElement(
          ListGroup,
          { fill: true },
          React.createElement(
            ListGroupItem,
            null,
            React.createElement(
              'h4',
              null,
              reports.day.title,
              ' - Last Day'
            ),
            React.createElement(ReportByDay, _extends({}, reportProps.utility, { report: reports.day }))
          ),
          React.createElement(
            ListGroupItem,
            null,
            React.createElement(
              'h4',
              null,
              reports.week.title,
              ' - Last Week'
            ),
            React.createElement(ReportByWeek, _extends({}, reportProps.utility, { report: reports.week }))
          ),
          React.createElement(
            ListGroupItem,
            null,
            React.createElement(
              'h4',
              null,
              reports.month.title,
              ' - Last Month'
            ),
            React.createElement(ReportByMonth, _extends({}, reportProps.utility, { report: reports.month }))
          ),
          React.createElement(
            ListGroupItem,
            null,
            React.createElement(
              'h4',
              null,
              reports.year.title,
              ' - Last Year'
            ),
            React.createElement(ReportByYear, _extends({}, reportProps.utility, { report: reports.year }))
          )
        )
      )
    );
  },

  _selectPanel: function _selectPanel(key) {
    if (this.state.activeKey != key) this.setState({ activeKey: key });
    return true;
  }
}));

var Form = _wrapComponent('_component3')(React.createClass({
  displayName: 'Form',


  statics: {

    defaults: {
      datetimeProps: {
        dateFormat: 'D MMM[,] YYYY',
        timeFormat: null,
        inputProps: { size: 10 }
      }
    },

    _propsToState: function _propsToState(_ref) {
      var now = _ref.now,
          field = _ref.field,
          source = _ref.source;

      // Reset state according to newly received props
      return { now: now, field: field, source: source, submitted: false };
    }
  },

  contextTypes: {
    config: configPropType
  },

  propTypes: _extends({}, commonPropTypes, {
    generated: PropTypes.number
  }),

  getInitialState: function getInitialState() {
    return this.constructor._propsToState(this.props);
  },

  componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
    this.setState(this.constructor._propsToState(nextProps));
  },

  render: function render() {
    var _this2 = this;

    var defaults = this.constructor.defaults;
    var config = this.context.config;
    var _state = this.state,
        source = _state.source,
        field = _state.field,
        now = _state.now,
        submitted = _state.submitted;
    var _config$reports$byTyp = config.reports.byType.measurements,
        fields = _config$reports$byTyp.fields,
        sources = _config$reports$byTyp.sources;


    var sourceOptions = new Map(_.values(_.mapValues(sources, function (s, k) {
      return [k, s.title];
    })));

    var fieldOptions = new Map(_.values(_.mapValues(fields, function (y, k) {
      return y.sources.indexOf(source) < 0 ? null : [k, y.name];
    })).filter(function (y) {
      return y;
    }));

    return React.createElement(
      'form',
      { className: 'form-inline report-form' },
      React.createElement(
        'div',
        { className: 'form-group', title: 'Select source' },
        React.createElement(Select, { className: 'select-source',
          value: source,
          options: Array.from(sourceOptions.entries()).map(function (_ref2) {
            var _ref3 = _slicedToArray(_ref2, 2),
                k = _ref3[0],
                v = _ref3[1];

            return { value: k, label: v };
          }),
          searchable: false,
          clearable: false,
          onChange: function onChange(o) {
            return _this2.setState({ source: o.value }), false;
          }
        })
      ),
      React.createElement(
        'div',
        { className: 'form-group' },
        React.createElement(Select, { className: 'select-field',
          value: field,
          options: Array.from(fieldOptions.entries()).map(function (_ref4) {
            var _ref5 = _slicedToArray(_ref4, 2),
                k = _ref5[0],
                v = _ref5[1];

            return { value: k, label: v };
          }),
          searchable: false,
          clearable: false,
          onChange: function onChange(o) {
            return _this2.setState({ field: o.value }), false;
          }
        })
      ),
      React.createElement(
        'div',
        { className: 'form-group' },
        React.createElement(
          'label',
          null,
          'Use reference time:'
        ),
        React.createElement(DatetimeInput, _extends({}, defaults.datetimeProps, {
          value: now,
          onChange: function onChange(m) {
            return _this2.setState({ now: m.valueOf() }), false;
          }
        }))
      ),
      React.createElement(
        'div',
        { className: 'form-group submit-buttons' },
        React.createElement(
          Button,
          { className: 'submit-btn', bsStyle: 'default', title: 'Export to PDF',
            onClick: this._exportToPdf, disabled: true
          },
          React.createElement('i', { className: 'fa fa-send-o' }),
          '\xA0 Export'
        ),
        React.createElement(
          Button,
          { className: 'submit-btn', bsStyle: 'primary', title: 'Re-generate reports',
            onClick: this._submit, disabled: submitted
          },
          React.createElement('i', { className: "fa fa-refresh" + (submitted ? ' fa-spin' : '') }),
          '\xA0 Refresh'
        )
      )
    );
  },

  // Event handlers

  _exportToPdf: function _exportToPdf() {
    console.warn('Todo: Exporting to PDF...');
    return false;
  },

  _submit: function _submit() {
    if (!this.state.now) {
      console.warn('No reference time was given! Skipping refresh');
      return false;
    }

    var t = moment(this.state.now);
    if (!t.isValid()) {
      console.warn('Failed to convert to a valid moment! Skipping refresh');
      return false;
    }

    this.props.submit(this.state.source, this.state.field, t.valueOf());
    this.setState({ submitted: true });
    return false;
  }
}));

//
// Container components
//

var actions = require('../../actions/overview.js');
var connect = ReactRedux.connect;


var mapStateToProps = function mapStateToProps(state, ownProps) {
  var fields = state.config.reports.byType.measurements.fields;
  var _state$overview = state.overview,
      field = _state$overview.field,
      referenceTime = _state$overview.referenceTime,
      source = _state$overview.source,
      requested = _state$overview.requested;

  return {
    source: source,
    field: field,
    now: referenceTime,
    uom: fields[field].unit,
    title: fields[field].title,
    generated: requested // well, roughly
  };
};

OverviewPanel = connect(mapStateToProps, null)(OverviewPanel);

OverviewPanelGroup = connect(mapStateToProps, null)(OverviewPanelGroup);

Form = connect(mapStateToProps, function (dispatch, ownProps) {
  return {
    submit: function submit(source, field, now) {
      return dispatch(actions.setup(source, field, now));
    }
  };
})(Form);

// Export

module.exports = {
  OverviewPanelGroup: OverviewPanelGroup,
  OverviewPanel: OverviewPanel,
  Form: Form
};

},{"../../actions/overview.js":456,"../../prop-types":604,"./common-reports":516,"livereactload/babel-transform":28,"moment":"moment","react":"react","react-bootstrap":"react-bootstrap","react-datetime":"react-datetime","react-redux":"react-redux","react-select":"react-select"}],519:[function(require,module,exports){
'use strict';

var _react2 = require('react');

var _react3 = _interopRequireDefault(_react2);

var _babelTransform = require('livereactload/babel-transform');

var _babelTransform2 = _interopRequireDefault(_babelTransform);

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _ErrorMessages;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var _components = {
  _component: {},
  _component2: {}
};

var _livereactloadBabelTransform2 = (0, _babelTransform2.default)({
  filename: '/home/daiad/Desktop/Development/home-web/utility/src/main/frontend/components/reports-measurements/pane.js',
  components: _components,
  locals: [],
  imports: [_react3.default]
});

function _wrapComponent(id) {
  return function (Component) {
    return _livereactloadBabelTransform2(Component, id);
  };
}

var _ = require('lodash');
var moment = require('moment');
var sprintf = require('sprintf');

var React = require('react');
var ReactRedux = require('react-redux');
var Bootstrap = require('react-bootstrap');
var DatetimeInput = require('react-datetime');
var Select = require('react-select').default;
var Switch = require('rc-switch');

var toolbars = require('../toolbars');
var Errors = require('../../constants/Errors');
var Granularity = require('../../model/granularity');
var TimeSpan = require('../../model/timespan');
var population = require('../../model/population');

var _require = require('../../prop-types'),
    timespanPropType = _require.timespanPropType,
    populationPropType = _require.populationPropType,
    seriesPropType = _require.seriesPropType,
    configPropType = _require.configPropType;

var _require2 = require('../../helpers/comparators'),
    equalsPair = _require2.equalsPair;

var Chart = require('./chart');

var Panel = Bootstrap.Panel,
    ListGroup = Bootstrap.ListGroup,
    ListGroupItem = Bootstrap.ListGroupItem,
    Accordion = Bootstrap.Accordion;
var PropTypes = React.PropTypes;


var REPORT_KEY = 'pane';
var REPORT_MULTIPLE_KEY = 'pane/multiple';
var MAX_QUERIES = 3;
var LEVEL_OPTIONS = [{ value: 'hour', label: 'hour' }, { value: 'day', label: 'day' }, { value: 'week', label: 'week' }, { value: 'month', label: 'month' }, { value: 'year', label: 'year' }];

// Todo Move under react-intl
var ErrorMessages = (_ErrorMessages = {}, _defineProperty(_ErrorMessages, Errors.reports.measurements.TIMESPAN_INVALID, 'The given time range is invalid.'), _defineProperty(_ErrorMessages, Errors.reports.measurements.TIMESPAN_TOO_NARROW, 'The given time range is too narrow.'), _defineProperty(_ErrorMessages, Errors.reports.measurements.TIMESPAN_TOO_WIDE, 'The given time range is too wide.'), _ErrorMessages);

//
// Helpers
//

var checkTimespan = function checkTimespan(val, level) {
  var N = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 4;

  // Check if a timespan (given either as name or as pair of timestamps)
  var _computeTimespan = computeTimespan(val),
      _computeTimespan2 = _slicedToArray(_computeTimespan, 2),
      t0 = _computeTimespan2[0],
      t1 = _computeTimespan2[1];

  var dt = t1.valueOf() - t0.valueOf();
  if (dt <= 0) return Errors.reports.measurements.TIMESPAN_INVALID;

  var dl = Granularity.fromName(level).valueOf();
  if (dl >= dt) return Errors.reports.measurements.TIMESPAN_TOO_NARROW;

  if (dl * Math.pow(10, N) < dt) return Errors.reports.measurements.TIMESPAN_TOO_WIDE; // N orders of magnitude bigger than dl

  return 0;
};

var computeTimespan = function computeTimespan(val) {
  // Convert to a pair of moment instances
  if (_.isString(val)) {
    return TimeSpan.fromName(val).toRange();
  } else if (_.isArray(val)) {
    var _val = _slicedToArray(val, 2),
        t0 = _val[0],
        t1 = _val[1];

    return [moment(t0), moment(t1)];
  }
};

var getDefaultQuery = function getDefaultQuery(object) {
  var config = object.context.config;

  var defaultPopulation = new population.Utility(config.utility.key, config.utility.name);
  var _config = object.context.config.reports.byType.measurements;
  var defaultTimespan = _config.levels[object.props.level].reports[object.props.reportName].timespan;
  var defaultQuery = {
    id: 0,
    query: {
      timespan: defaultTimespan, population: defaultPopulation
    },
    series: null
  };

  return defaultQuery;
};

var mergeMultipleSeries = function mergeMultipleSeries(queries) {
  if (!queries) {
    return [];
  }

  var multipleSeries = [];
  for (var k = 0; k < queries.length; k++) {
    var series = queries[k].series ? queries[k].series : [];
    multipleSeries = multipleSeries.concat(series);
  }
  return multipleSeries;
};

var shapeFavouriteQueries = function shapeFavouriteQueries(favouriteQueries, config) {

  //var config = config1.config;
  var multipleQueries = [];
  for (var i = 0; i < favouriteQueries.length; i++) {
    var query = {};

    //set id
    query.id = i;

    //set overlapping
    query.overlap = {};
    query.overlap.value = favouriteQueries[i].overlap ? favouriteQueries[i].overlap : null;
    query.overlap.label = favouriteQueries[i].overlap ? favouriteQueries[i].overlap : null;

    query.query = {};

    //construct population 

    var _population$fromStrin = population.fromString(favouriteQueries[i].population[0].label),
        _population$fromStrin2 = _slicedToArray(_population$fromStrin, 1),
        g = _population$fromStrin2[0];

    var _population$extractGr = population.extractGroupParams(g),
        _population$extractGr2 = _slicedToArray(_population$extractGr, 2),
        clusterKey = _population$extractGr2[0],
        groupKey = _population$extractGr2[1];

    if (favouriteQueries[i].population.length === 1) {
      var target;
      if (!clusterKey && !groupKey) {
        target = new population.Utility(config.utility.key, config.utility.name);
      } else if (clusterKey && !groupKey) {
        target = new population.Cluster(clusterKey);
      } else if (!clusterKey && groupKey) {
        target = new population.Group(groupKey);
      } else {
        target = new population.ClusterGroup(clusterKey, groupKey);
      }
      query.query.population = target;
    } else {
      //favourite population contains groups of cluster. Construct the Cluster:
      if (!clusterKey) {
        console.error('Something went wrong. Malformed favourite population');
        target = new population.Utility(config.utility.key, config.utility.name);
      }
      query.query.population = new population.Cluster(clusterKey);
    }

    //construct timespan
    query.query.timespan = [favouriteQueries[i].time.start, favouriteQueries[i].time.end];
    multipleQueries.push(query);
  }

  return multipleQueries;
};

var getTags = function getTags(obj) {
  var source = obj.props.source;
  var level = obj.props.level;
  var queries = obj.props.multipleQueries;
  var time = '';
  var populationTag = '';

  for (var n = 0; n < queries.length; n++) {
    if (queries[n].query.population.name) {
      populationTag += '/' + queries[n].query.population.name;
    } else if (queries[n].query.population.type) {
      populationTag += '/' + queries[n].query.population.type;
    } else {
      populationTag += '/Cluster';
    }
  }

  if (obj.state.overlapping) {
    var maxDuration = 0;

    for (var k = 0; k < queries.length; k++) {
      var start1 = moment(queries[k].query.timespan[0]);
      var end1 = moment(queries[k].query.timespan[1]);
      var diff = moment(end1, "DD/MM/YYYY HH:mm:ss").diff(start1, "DD/MM/YYYY HH:mm:ss");
      if (diff < 0) {
        console.error('Invalid timespan');
      }
      if (diff > maxDuration) {
        maxDuration = diff;
      }
    }
    time = 'Overlap ' + moment.duration(maxDuration).humanize();
  } else {

    var q1t = computeTimespan(obj.props.multipleQueries[0].query.timespan);
    var q2t = computeTimespan(obj.props.multipleQueries[obj.props.multipleQueries.length - 1].query.timespan);
    var start = q1t[0].format("DD/MM/YYYY");
    var end = q2t[1].format("DD/MM/YYYY");
    time = start + ' to ' + end;
  }
  return 'Chart - ' + source + ' - ' + time + ' - ' + 'Level: ' + level + ' - ' + populationTag;
};

var optionRenderer = function optionRenderer(o) {
  if (o.header) {
    return React.createElement(
      'div',
      { className: 'text-muted', style: { fontSize: '0.8em' } },
      o.label
    );
  }
  return React.createElement(
    'div',
    null,
    o.label
  );
};

//
// Presentational components
//

var FormStatusParagraph = function FormStatusParagraph(_ref) {
  var errorMessage = _ref.errorMessage,
      dirty = _ref.dirty;

  if (errorMessage) {
    return React.createElement(
      'p',
      { className: 'help text-danger' },
      errorMessage
    );
  } else if (dirty) {
    return React.createElement(
      'p',
      { className: 'help text-info' },
      'Parameters have changed. Refresh to redraw data!'
    );
  } else {
    return React.createElement(
      'p',
      { className: 'help text-muted' },
      'Refresh to redraw data.'
    );
  }
};

var ReportPanel = _wrapComponent('_component')(React.createClass({
  displayName: 'ReportPanel',

  statics: {
    nameTemplates: {
      basic: _.template('<%= metric %> of <%= label %>'),
      ranking: _.template('<%= ranking.type %>-<%= ranking.index + 1 %> of <%= label %>')
    },
    defaults: {
      datetimeInputProps: {
        closeOnSelect: true,
        dateFormat: 'ddd D MMM[,] YYYY',
        timeFormat: null,
        inputProps: { size: 10 }
      },

      helpMessages: {
        'favourite': 'Open favourite settings for this chart.',
        'source': 'Specify the source device for measurements.',
        'population-group': 'Target a group (or cluster of groups) of consumers.',
        'timespan': 'Specify the time range you are interested into.',
        'report-name': 'Select the metric to be applied to measurements.',
        'level': 'Specify the level of detail (unit of time for charts).',
        'overlap': 'Switch to overlapping time series'
      },

      chartProps: {
        width: 780,
        height: 300
      }
    },

    templates: {
      reportTitle: _.template('<%= report.title %> - <%= populationName %>')
    },

    configForReport: function configForReport(props, _ref2) {
      var config = _ref2.config;

      return config.reports.byType.measurements.levels[props.level].reports[props.reportName];
    },

    toolbarSpec: [{
      key: 'shared-parameters',
      //component: 'div', // Note default is Bootstrap.ButtonGroup
      buttons: [{
        key: 'favourite',
        tooltip: { message: 'Favourite settings', placement: 'bottom' },
        iconName: 'star-o',
        //text: 'Favourite',
        buttonProps: { bsStyle: 'default' /*className: 'btn-circle'*/ }
      }, {
        key: 'source',
        tooltip: { message: 'Select source of measurements', placement: 'bottom' },
        iconName: 'cube',
        //text: 'Source',
        buttonProps: { bsStyle: 'default' /*className: 'btn-circle'*/ }
      }, {
        key: 'report',
        tooltip: { message: 'Choose type of report', placement: 'bottom' },
        iconName: 'area-chart',
        //text: 'Metric',
        buttonProps: { bsStyle: 'default' /*className: 'btn-circle'*/ }
      }]
    }, {
      key: 'actions',
      //component: 'div', // Note default is Bootstrap.ButtonGroup
      buttons: [{
        key: 'export',
        tooltip: { message: 'Export to a CSV table', placement: 'bottom' },
        text: 'Export',
        iconName: 'table',
        buttonProps: { disabled: true, bsStyle: 'default' /*className: 'btn-circle'*/ }
      }, {
        key: 'refresh',
        tooltip: { message: 'Re-generate report and redraw the chart', placement: 'bottom' },
        text: 'Refresh',
        iconName: 'refresh',
        buttonProps: { bsStyle: 'primary' /*className: 'btn-circle'*/ }
      }, {
        key: 'add',
        tooltip: { message: 'Add additional series', placement: 'bottom' },
        iconName: 'plus',
        text: 'Add Series',
        buttonProps: { bsStyle: 'default' /*className: 'btn-circle'*/ }
      }]
    }],
    parameters: [{
      key: 'query-parameters',
      buttons: [{
        key: 'timespan',
        tooltip: { message: 'Define a time range', placement: 'bottom' },
        iconName: 'calendar',
        buttonProps: { bsStyle: 'default' }
      }, {
        key: 'population-group',
        tooltip: { message: 'Define a population target', placement: 'bottom' },
        iconName: 'users',
        buttonProps: { bsStyle: 'default' }
      }]
    }]
  },

  propTypes: {
    // Model
    field: PropTypes.string.isRequired,
    title: PropTypes.string.isRequired,
    level: PropTypes.string.isRequired,
    reportName: PropTypes.string.isRequired,
    source: PropTypes.string,
    timespan: timespanPropType,
    population: populationPropType,
    finished: PropTypes.oneOfType([PropTypes.bool, PropTypes.number]),
    series: PropTypes.arrayOf(seriesPropType),

    // Funcs (dispatchers)
    initializeReport: PropTypes.func.isRequired,
    refreshData: PropTypes.func.isRequired,
    setReport: PropTypes.func.isRequired,
    setField: PropTypes.func.isRequired,
    setTimespan: PropTypes.func.isRequired,
    setPopulation: PropTypes.func.isRequired,
    setSource: PropTypes.func.isRequired,

    // Appearence
    fadeIn: PropTypes.oneOfType([PropTypes.bool, PropTypes.shape({
      className: PropTypes.string, // class to apply to fade-in elements
      duration: PropTypes.number // the duration of fade-in animation (seconds)
    })])
  },

  contextTypes: { config: configPropType },

  // Lifecycle

  getInitialState: function getInitialState() {
    return {
      draw: true,
      fadeIn: false, // animation effect in progress
      dirty: false,
      timespan: this.props.timespan,
      error: null,
      formFragment: 'report',
      parameterFragment: 'timespan',
      disabledButtons: '', // a '|' delimited string, e.g 'export|refresh',
      panelChanged: true,
      overlapping: false,
      viewMode: 'days',
      pickerOpen: false,
      overlapTimespan: null
    };
  },

  getDefaultProps: function getDefaultProps() {
    return {
      field: 'volume',
      level: 'week',
      reportName: null,
      source: null,
      timespan: null,
      population: null,
      finished: null,
      fadeIn: false, // {className: 'fade-in', duration: 0.5},
      defaultFavouriteValues: {
        timespan: false,
        source: false,
        population: false,
        metricLevel: false
      },
      multipleQueries: [],
      overlap: { value: 'day', label: 'day' },
      overlapping: false
    };
  },

  componentWillMount: function componentWillMount() {
    //initializing favourite view (if editing favourite)
    if (this.props.favouriteChart && this.props.favouriteChart.type == 'CHART') {
      if (this.props.favouriteChart.overlap) {
        var overlap = { value: this.props.favouriteChart.overlap, label: this.props.favouriteChart.overlap };
        this.setState({ overlapping: true });
        this._setOverlap(overlap);
      }
      this.props.initMultipleQueries(this.props.favouriteChart.field, this.props.favouriteChart.level, this.props.favouriteChart.reportName, shapeFavouriteQueries(this.props.favouriteChart.queries, this.context.config), this.props.favouriteChart.queries[0].source);
    }
  },
  componentDidMount: function componentDidMount() {
    var _this = this;

    var _props = this.props,
        field = _props.field,
        level = _props.level,
        reportName = _props.reportName;


    if (_.isEmpty(field) || _.isEmpty(level) || _.isEmpty(reportName)) {
      return; // cannot yet initialize the target report
    }

    if (!(this.props.favouriteChart && this.props.favouriteChart.type == 'CHART')) {
      var defaultQuery = getDefaultQuery(this);
      this.props.initMultipleQueries(field, level, reportName, [defaultQuery], null);
    }
    this.props.refreshMultipleData(field, level, reportName).then(function () {
      return _this.setState({ draw: true });
    });
  },

  componentWillReceiveProps: function componentWillReceiveProps(nextProps, nextContext) {

    // In any case, reset temporary copy of timespan, clear error/dirty flags
    this.setState({
      error: null,
      timespan: nextProps.timespan
    });

    // If moving to another report, take care to initialize it first
    if (nextProps.field != this.props.field || nextProps.level != this.props.level || nextProps.reportName != this.props.reportName) {
      // console.log(sprintf(
      //   'The panel will switch to report (%s, %s, %s)',
      //   nextProps.field, nextProps.level, nextProps.reportName
      // ));
      console.assert(nextContext.config == this.context.config, 'Unexpected change for configuration in context!');

      if (this.props.multipleQueries.length > 0) {
        nextProps.initMultipleQueries(nextProps.field, nextProps.level, nextProps.reportName, this.props.multipleQueries, null);
      } else {
        if (this.props.favouriteQuery) {
          nextProps.initMultipleQueries(this.props.favouriteQuery.field, this.props.favouriteQuery.level, this.props.favouriteQuery.reportName, shapeFavouriteQueries(this.props.favouriteQuery.queries, this.context.config), this.props.favouriteQuery.queries[0].source);
        } else {
          nextProps.initMultipleQueries(nextProps.field, nextProps.level, nextProps.reportName, [getDefaultQuery], null);
        }
      }

      setTimeout(function () {
        return nextProps.refreshMultipleData(nextProps.field, nextProps.level, nextProps.reportName);
      }, 100);
    }
  },

  shouldComponentUpdate: function shouldComponentUpdate(nextProps, nextState) {
    // Suppress some (rather expensive) updates

    if (this.state.panelChanged) {
      return true;
    }

    var changedProps, changedState;
    var ignoredNextState = {
      draw: false // i.e changed true -> false (a drawing request was fullfilled)
    };

    changedProps = _.differenceWith(_.toPairs(nextProps), _.toPairs(this.props), equalsPair);
    if (changedProps.length > 0) return true; // always update on incoming props

    changedState = _.differenceWith(_.toPairs(nextState), _.toPairs(this.state), equalsPair);
    changedState = _.differenceWith(changedState, _.toPairs(ignoredNextState), equalsPair);

    // if (changedState.length == 0) console.info('Skipping update of <ReportPanel>');
    return changedState.length > 0;
  },

  componentDidUpdate: function componentDidUpdate() {
    var _this2 = this;

    // The component has successfully updated

    // Check if redrawing or just redrawn
    if (this.state.draw) {
      var nextState = { dirty: false };
      if (_.isNumber(this.props.finished)) nextState.draw = false; // next drawing will happen only on-demand
      this.setState(nextState);
    }

    // If under a CSS animation, remember to clear the flag after the animation has ended.
    // This is needed, because only a change "" -> ".fade-in" can trigger a new animation.
    if (this.state.fadeIn) {
      setTimeout(function () {
        return _this2.state.fadeIn && _this2.setState({ fadeIn: false });
      }, (this.props.fadeIn.duration + 0.25) * 1e+3);
    }
    this.setState({ panelChanged: false });
  },

  render: function render() {
    var defaults = this.constructor.defaults;
    var _state2 = this.state,
        dirty = _state2.dirty,
        draw = _state2.draw,
        error = _state2.error;
    var _props2 = this.props,
        field = _props2.field,
        title = _props2.title,
        level = _props2.level,
        reportName = _props2.reportName,
        finished = _props2.finished;

    var series = this.props.series2;

    var toolbarSpec = this._specForToolbar();
    var parameters = this._specForParameters();
    var header = React.createElement(
      'div',
      { className: 'header-wrapper' },
      React.createElement(
        'h3',
        null,
        title
      ),
      React.createElement(toolbars.ButtonToolbar, { className: 'header-toolbar',
        groups: toolbarSpec,
        onSelect: this._handleToolbarEvent
      })
    );

    var footer = React.createElement(ReportInfo, {
      field: field,
      level: level,
      reportName: reportName,
      requested: this.props.requested,
      series: mergeMultipleSeries(this.props.multipleQueries),
      finished: this.props.finished });

    var formFragment = this._renderFormFragment();

    var parameterFragment;
    if (this.props.multipleQueries.length > 0) {
      parameterFragment = this._renderParameterFragment(this.props.multipleQueries[0]);
    } else {
      parameterFragment = this._renderParameterFragment(getDefaultQuery(this));
    }

    var reportTitle = this._titleForReport();

    var multipleSeries = [];
    var queryTitle = this.props.multipleQueries[0] ? this.getNameForQuery(0) : 'Default Series';
    var defaultTitle = React.createElement(
      'span',
      { style: { paddingLeft: 4 } },
      queryTitle
    );

    multipleSeries.push(React.createElement(
      Panel,
      { key: 0, header: defaultTitle, eventKey: 0 },
      React.createElement(
        'form',
        { className: 'report-form form-horizontal' },
        React.createElement(
          'fieldset',
          { className: !this.state.fadeIn ? '' : this.props.fadeIn.className },
          parameterFragment
        )
      ),
      React.createElement(toolbars.ButtonToolbar, { className: 'header-toolbar',
        groups: parameters,
        onSelect: this._handleToolbarEvent
      })
    ));

    for (var i = 1; i < this.props.multipleQueries.length; i++) {
      parameterFragment = this._renderParameterFragment(this.props.multipleQueries[i]);
      var multipleSerieTitle = React.createElement(
        'span',
        null,
        React.createElement(
          'span',
          null,
          React.createElement(
            'span',
            { style: { paddingLeft: 4 } },
            this.props.multipleQueries[i] ? this.getNameForQuery(i) : 'Series ' + i
          )
        ),
        React.createElement(
          'span',
          { style: { float: 'right', marginTop: -3, marginLeft: 5 } },
          React.createElement(
            Bootstrap.Button,
            {
              eventKey: i,
              bsStyle: 'default',
              className: 'btn-circle',
              onClick: this._removeSeries.bind(this, this.props.multipleQueries[i].id) },
            React.createElement('i', { className: 'fa fa-remove fa-fw' })
          )
        )
      );

      multipleSeries.push(React.createElement(
        Panel,
        { key: i, header: multipleSerieTitle, eventKey: i },
        React.createElement(
          'form',
          { className: 'report-form form-horizontal' },
          React.createElement(
            'fieldset',
            { className: !this.state.fadeIn ? '' : this.props.fadeIn.className },
            parameterFragment
          )
        ),
        React.createElement(toolbars.ButtonToolbar, { className: 'header-toolbar',
          groups: parameters,
          onSelect: this._handleToolbarEvent
        })
      ));
    }

    series = mergeMultipleSeries(this.props.multipleQueries);

    return React.createElement(
      Panel,
      { header: header, footer: footer },
      React.createElement(
        ListGroup,
        { fill: true },
        React.createElement(
          ListGroupItem,
          { className: 'report-form-wrapper' },
          React.createElement(
            'form',
            { className: 'report-form form-horizontal' },
            React.createElement(
              'fieldset',
              { className: !this.state.fadeIn ? '' : this.props.fadeIn.className },
              formFragment
            )
          ),
          React.createElement(
            'div',
            null,
            React.createElement(
              Accordion,
              null,
              multipleSeries
            )
          )
        ),
        React.createElement(
          ListGroupItem,
          { className: 'report-form-help report-title-wrapper' },
          React.createElement(
            'h4',
            null,
            reportTitle
          ),
          React.createElement(FormStatusParagraph, {
            dirty: dirty, errorMessage: !error ? null : ErrorMessages[error]
          })
        ),
        React.createElement(
          ListGroupItem,
          { className: 'report-chart-wrapper' },
          React.createElement(Chart, _extends({}, defaults.chartProps, {
            draw: draw,
            field: field,
            level: level,
            reportName: reportName,
            finished: finished,
            series: series,
            overlap: this.props.overlap,
            overlapping: this.state.overlapping
          }))
        )
      )
    );
  },

  getNameForQuery: function getNameForQuery(i) {
    var query = this.props.multipleQueries[i].query;
    var target = query.population;
    var timeLabel = _.isString(query.timespan) ? query.timespan : moment(query.timespan[0]).format('DD/MMM/YYYY') + ' - ' + moment(query.timespan[1]).format('DD/MMM/YYYY');

    var config = this.context.config;

    var label, cluster;
    if (target instanceof population.Utility) {
      // Use utility's friendly name
      label = 'Utility';
    } else if (target instanceof population.ClusterGroup) {
      // Use group's friendly name
      cluster = config.utility.clusters.find(function (c) {
        return c.key == target.clusterKey;
      });
      label = cluster.name + ': ' + cluster.groups.find(function (g) {
        return g.key == target.key;
      }).name;
    } else if (target instanceof population.Cluster) {
      cluster = config.utility.clusters.find(function (k) {
        return k.key == target.key;
      });
      label = cluster.name;
    }
    return label + ': ' + timeLabel; //todo - consider shorter time label
  },

  // Event handlers

  _handleToolbarEvent: function _handleToolbarEvent(groupKey, key) {
    switch (groupKey) {
      case 'shared-parameters':
        return this._switchToFormFragment(key);
      case 'query-parameters':
        return this._switchToParameterFragment(key);
      case 'actions':
        return this._performAction(key);
    }
  },

  _switchToFormFragment: function _switchToFormFragment(key) {
    if (this.state.formFragment != key) {
      var nextState = { formFragment: key };
      if (this.props.fadeIn) nextState.fadeIn = true;
      this.setState(nextState);
    }
    return false;
  },
  _switchToParameterFragment: function _switchToParameterFragment(key) {

    if (this.state.parameterFragment != key) {
      var nextState = { parameterFragment: key };
      if (this.props.fadeIn) nextState.fadeIn = true;
      this.setState(nextState);
    }
    return false;
  },
  _performAction: function _performAction(key) {
    var _props3 = this.props,
        field = _props3.field,
        level = _props3.level,
        reportName = _props3.reportName;

    switch (key) {
      case 'refresh':
        {
          // console.debug(sprintf(
          //   'About to refresh data for report (%s, %s, %s)...',
          //   field, level, reportName
          // ));
          this.props.refreshMultipleData(field, level, reportName);
          this.setState({ draw: true });
        }
        break;
      case 'export':
        // Todo
        break;
      case 'add':
        var multipleQueries = this.props.multipleQueries;


        var cls = this.constructor;

        var _cls$configForReport = cls.configForReport(this.props, this.context),
            timespan = _cls$configForReport.timespan;

        var popul = multipleQueries[multipleQueries.length - 1].query.population;
        var lastId = multipleQueries[multipleQueries.length - 1].id;
        var queryTemp = {};
        queryTemp.id = lastId + 1;

        queryTemp.query = {
          timespan: timespan,
          population: popul
        };

        queryTemp.series = null;

        var newMult = this.props.multipleQueries;
        newMult.push(queryTemp);
        this.props.addQuery(newMult);

        if (this.props.multipleQueries.length == MAX_QUERIES) {
          this.setState({ disabledButtons: 'add', dirty: true, panelChanged: true });
        } else {
          this.setState({ disabledButtons: '', dirty: true, panelChanged: true });
        }
        break;
    }
  },
  _removeSeries: function _removeSeries(i) {
    var newMults = this.props.multipleQueries.filter(function (obj) {
      return obj.id !== i;
    });

    this.props.removeSeries(newMults);
    this.setState({ panelChanged: true });
    if (this.props.multipleQueries.length == MAX_QUERIES) {
      this.setState({ disabledButtons: '' });
    }
  },

  _setSource: function _setSource(source) {
    //this.props.defaultFavouriteValues.source = false;
    this.props.setQuerySource(source.value);

    this.setState({ dirty: true });
    return false;
  },

  _setReport: function _setReport(level, reportName) {
    //this.props.defaultFavouriteValues.metricLevel = false;

    this.props.setReport(level, reportName);
    this.setState({ dirty: true });
    return false;
  },

  _setField: function _setField(field) {
    this.props.setField(field);
    this.setState({ dirty: true });
    return false;
  },

  _setTimespan: function _setTimespan(value) {

    //this.props.defaultFavouriteValues.timespan = false;

    var error = null,
        timespan = null;

    // Validate
    if (_.isString(value)) {
      // Assume a symbolic name is always valid
      timespan = value;
    } else if (_.isArray(value)) {
      // Check if given timespan is a valid range
      var _value = _slicedToArray(value, 2),
          t0 = _value[0],
          t1 = _value[1];

      console.assert(moment.isMoment(t0) && moment.isMoment(t1), 'Expected a pair of moment instances');
      error = checkTimespan(value, this.props.level);
      if (!error) {
        // Truncate the time part, we only care about integral days!
        t0.millisecond(0).second(0).minute(0).hour(0);
        t1.millisecond(0).second(0).minute(0).hour(0);
        // Make a pair of timestamps to dispatch upstairs
        timespan = [t0.valueOf(), t1.valueOf()];
      }
    }

    // If valid, invoke setTimespan()
    if (!error) {
      var _props4 = this.props,
          field = _props4.field,
          level = _props4.level,
          reportName = _props4.reportName;

      this.props.setTimespan(field, level, reportName, timespan);
    }

    // Update state with (probably invalid) timespan (to keep track of user input)
    this.setState({ dirty: true, timespan: value, error: error });
    return false;
  },

  //set overlapping timespan for current query
  _setQueryOverlappingTimespan: function _setQueryOverlappingTimespan(value, query) {

    var queryTimespan, overlapTimespan;
    if (this.state.overlapping) {
      switch (this.state.viewMode) {
        case 'years':
          queryTimespan = [value[0].valueOf(), moment(value[0]).add(1, 'year').valueOf()];
          overlapTimespan = value[0].format('YYYY');
          break;
        case 'months':
          queryTimespan = [value[0].valueOf(), moment(value[0]).add(1, 'month').valueOf()];
          overlapTimespan = value[0].format('MMM YYYY');
          break;
        case 'days':
          queryTimespan = [value[0].valueOf(), moment(value[0]).add(1, 'day').valueOf()];
          overlapTimespan = value[0].format('DD MMM YYYY');
          break;
      }
    } else {
      console.error('Setting overlap, but overlapping is disabled!');
    }

    var mq = this.props.multipleQueries;
    if (mq.length > 0) {
      for (var i in mq) {
        if (mq[i].id == query.id) {
          mq[i].query.timespan = queryTimespan;
        }
      }
    } else {
      var q = getDefaultQuery(this);
      q.query.timespan = queryTimespan;
      mq = [q];
    }

    this.props.changeMultipleQueries(mq);

    var error = null;

    // Update state with (probably invalid) timespan (to keep track of user input)
    this.setState({ dirty: true, timespan: value, error: error, panelChanged: true, pickerOpen: false, overlapTimespan: overlapTimespan });
    return false;
  },
  //set timespan for current query
  _setQueryTimespan: function _setQueryTimespan(value, query) {

    var error = null,
        queryTimespan = null;

    // Validate
    if (_.isString(value)) {
      // Assume a symbolic name is always valid
      queryTimespan = value;
    } else if (_.isArray(value)) {
      // Check if given timespan is a valid range
      var _value2 = _slicedToArray(value, 2),
          t0 = _value2[0],
          t1 = _value2[1];

      console.assert(moment.isMoment(t0) && moment.isMoment(t1), 'Expected a pair of moment instances');
      error = checkTimespan(value, this.props.level);
      if (!error) {
        // Truncate the time part, we only care about integral days!
        t0.millisecond(0).second(0).minute(0).hour(0);
        t1.millisecond(0).second(0).minute(0).hour(0);
        // Make a pair of timestamps to dispatch upstairs
        queryTimespan = [t0.valueOf(), t1.valueOf()];
      }
    }

    var mq = this.props.multipleQueries;

    if (mq.length > 0) {
      for (var i in mq) {
        if (mq[i].id == query.id) {
          mq[i].query.timespan = queryTimespan;
        }
      }
    } else {
      var q = getDefaultQuery(this);
      q.query.timespan = queryTimespan;
      mq = [q];
    }

    // If valid, change timespan of selected query
    if (!error) {
      this.props.changeMultipleQueries(mq);
    }

    // Update state with (probably invalid) timespan (to keep track of user input)
    this.setState({ dirty: true, timespan: value, error: error, panelChanged: true });
    return false;
  },

  _setPopulation: function _setPopulation(clusterKey, groupKey) {

    //this.props.defaultFavouriteValues.population = false;

    var _props5 = this.props,
        field = _props5.field,
        level = _props5.level,
        reportName = _props5.reportName;
    var config = this.context.config;


    var target;
    if (!clusterKey && !groupKey) {
      target = new population.Utility(config.utility.key, config.utility.name);
    } else if (clusterKey && !groupKey) {
      target = new population.Cluster(clusterKey);
    } else if (!clusterKey && groupKey) {
      target = new population.Group(groupKey);
    } else {
      target = new population.ClusterGroup(clusterKey, groupKey);
    }

    this.props.setPopulation(field, level, reportName, target);
    this.setState({ dirty: true });
    return false;
  },

  _setQueryPopulation: function _setQueryPopulation(clusterKey, groupKey, query) {
    var config = this.context.config;


    var target;
    if (!clusterKey && !groupKey) {
      target = new population.Utility(config.utility.key, config.utility.name);
    } else if (clusterKey && !groupKey) {
      target = new population.Cluster(clusterKey);
    } else if (!clusterKey && groupKey) {
      target = new population.Group(groupKey);
    } else {
      target = new population.ClusterGroup(clusterKey, groupKey);
    }

    var mq = this.props.multipleQueries;

    for (var i in mq) {
      if (mq[i].id == query.id) {
        mq[i].query.population = target;
      }
    }
    this.props.changeMultipleQueries(mq);
    this.setState({ dirty: true, panelChanged: true });
    return false;
  },

  // Helpers

  _renderFormFragment: function _renderFormFragment() {
    var _this3 = this;

    var defaults = this.constructor.defaults;
    var helpMessages = defaults.helpMessages;
    var config = this.context.config;
    var levels = config.reports.byType.measurements.levels;

    var overlap = config.reports.overlap.values;
    delete overlap.week; //excluding week from overlap options

    var level = this.props.level;

    var fragment1; // single element or array of keyed elements
    switch (this.state.formFragment) {
      case 'favourite':
        var favouriteButtonText = this.props.favouriteChart ? 'Update Favourite' : 'Add Favourite';
        {
          //Calculate tags
          var tags = getTags(this);

          var enableHelpText = this.state.dirty ? 'Refresh to enable saving.' : '';
          fragment1 = React.createElement(
            'div',
            null,
            React.createElement(
              'div',
              { className: 'col-md-3' },
              React.createElement('input', { id: 'label', name: 'favourite', type: 'favourite', ref: 'favourite', autoFocus: true,
                defaultValue: this.props.favouriteChart ? this.props.favouriteChart.title : null,
                placeholder: 'Label ...', className: 'form-control', style: { marginBottom: 15 } }),
              React.createElement(
                'span',
                { className: 'help-block' },
                'Insert a label for this favourite'
              )
            ),
            React.createElement(
              'div',
              { className: 'col-md-6' },
              React.createElement('input', { id: 'name', name: 'name', type: 'name', ref: 'name', autoFocus: true, disabled: true,
                placeholder: tags, className: 'form-control', style: { marginBottom: 15 } }),
              React.createElement(
                'span',
                { className: 'help-block' },
                'Auto-generated Identifier'
              )
            ),
            React.createElement(
              'div',
              { className: 'col-md-3' },
              React.createElement(
                Bootstrap.Button,
                {
                  onClick: this._clickedAddFavourite,
                  bsStyle: 'success', disabled: this.state.dirty },
                favouriteButtonText
              ),
              React.createElement(
                'span',
                { className: 'help-block' },
                enableHelpText
              )
            )
          );
        }
        break;
      case 'source':
        {
          var _ref3 = this.props.defaultFavouriteValues.source ? this.props.favouriteChart.queries[0].source : this.props,
              source = _ref3.source;

          if (source.toUpperCase() === 'AMPHIRO' || source.toUpperCase() === 'DEVICE') {
            source = 'device';
          } else if (source.toUpperCase() === 'METER') {
            source = 'meter';
          }
          fragment1 = React.createElement(
            'div',
            { className: 'form-group' },
            React.createElement(
              'label',
              { className: 'col-sm-2 control-label' },
              'Source:'
            ),
            React.createElement(
              'div',
              { className: 'col-sm-4' },
              React.createElement(Select, { className: 'select-source',
                value: source,
                options: [{ value: 'meter', label: 'Meter (SWM)' }, { value: 'device', label: 'Device (B1)' }],
                searchable: false,
                clearable: false,
                onChange: this._setSource
              }),
              React.createElement(
                'p',
                { className: 'help text-muted' },
                helpMessages['source']
              )
            )
          );
        }
        break;
      case 'report':
        {
          var reportName = this.props.reportName;

          var overlapOptions = Object.keys(overlap).map(function (key) {
            return { value: key, label: overlap[key].name };
          });

          var reportOptions2 = Object.keys(levels[level].reports).map(function (key) {
            return { value: key, label: levels[level].reports[key].title };
          });

          level = this.props.defaultFavouriteValues.metricLevel ? this.props.favouriteChart.level : level;

          fragment1 = [React.createElement(
            'div',
            { key: 'level', className: 'form-group' },
            React.createElement(
              'label',
              { className: 'col-sm-2 control-label' },
              'Level:'
            ),
            React.createElement(
              'div',
              { className: 'col-sm-3' },
              React.createElement(Select, { className: 'select-level',
                value: level,
                options: LEVEL_OPTIONS,
                onChange: function onChange(val) {
                  return _this3._setReport(val.value, reportName);
                },
                clearable: false,
                searchable: false
              }),
              React.createElement(
                'div',
                { className: 'col-sm-12' },
                React.createElement(
                  'p',
                  { className: 'help text-muted' },
                  helpMessages['level']
                )
              )
            )
          ), React.createElement(
            'div',
            { key: 'report-name', className: 'form-group' },
            React.createElement(
              'label',
              { className: 'col-sm-2 control-label' },
              'Metric:'
            ),
            React.createElement(
              'div',
              { className: 'col-sm-4' },
              React.createElement(Select, { className: 'select-report',
                value: reportName,
                options: reportOptions2,
                onChange: function onChange(val) {
                  return _this3._setReport(level, val.value);
                },
                clearable: false,
                searchable: false
              }),
              React.createElement(
                'p',
                { className: 'help text-muted' },
                helpMessages['report-name']
              )
            )
          ), React.createElement(
            'div',
            { key: 'overlap', className: 'form-group' },
            React.createElement(
              'label',
              { className: 'col-sm-2 control-label' },
              'Time Overlap:'
            ),
            React.createElement(
              'div',
              { className: 'col-sm-4' },
              React.createElement(Select, { name: 'select-overlap',
                value: this.props.overlap || 'UNDEFINED',
                options: overlapOptions,
                disabled: !this.state.overlapping,
                clearable: false,
                searchable: false,
                onChange: this._setOverlap
              }),
              React.createElement(
                'p',
                { className: 'help text-muted' },
                helpMessages['overlap']
              )
            ),
            React.createElement(
              'div',
              { className: 'col-sm-2' },
              React.createElement(Switch, { className: 'col-sm-2', style: { marginTop: 7 },
                onChange: this._handleOverlapSwitchChange,
                checked: this.state.overlapping
              })
            )
          )];
        }
        break;
      default:
        console.error(sprintf('Got unexpected key (%s) representing a form fragment', this.state.formFragment));
        break;
    }

    return fragment1;
  },

  _handleOverlapSwitchChange: function _handleOverlapSwitchChange() {
    var mq = this.props.multipleQueries;

    for (var j = 0; j < mq.length; j++) {
      var queryTimespan;
      var query = mq[j].query;

      var qTime = _.isString(query.timespan) ? computeTimespan(query.timespan)[0] : moment(query.timespan[0]);

      switch (this.props.overlap.value) {
        case 'year':
          queryTimespan = [qTime.valueOf(), moment(qTime).add(1, 'year').valueOf()];
          break;
        case 'month':
          queryTimespan = [qTime.valueOf(), moment(qTime).add(1, 'month').valueOf()];
          break;
        case 'day':
          queryTimespan = [qTime.valueOf(), moment(qTime).add(1, 'day').valueOf()];
          break;
      }

      mq[j].query.timespan = queryTimespan;
    }

    this.props.changeMultipleQueries(mq);
    this.setState({ dirty: true, overlapping: !this.state.overlapping });
  },

  _setOverlap: function _setOverlap(value) {
    this.props.setOverlap(value);
    var mq = this.props.multipleQueries;

    for (var j = 0; j < mq.length; j++) {
      var queryTimespan;
      var query = mq[j].query;

      var qTime = _.isString(query.timespan) ? computeTimespan(query.timespan)[0] : moment(query.timespan[0]);

      switch (value.value) {
        case 'year':
          queryTimespan = [qTime.valueOf(), moment(qTime).add(1, 'year').valueOf()];
          break;
        case 'month':
          queryTimespan = [qTime.valueOf(), moment(qTime).add(1, 'month').valueOf()];
          break;
        case 'day':
          queryTimespan = [qTime.valueOf(), moment(qTime).add(1, 'day').valueOf()];
          break;
      }

      mq[j].query.timespan = queryTimespan;
    }

    this.props.changeMultipleQueries(mq);

    var vm = value.value + 's'; //adding 's' to feed datePicker options

    this.setState({ dirty: true, panelChanged: true, viewMode: vm });
  },

  _renderParameterFragment: function _renderParameterFragment(query) {
    var _this4 = this;

    var defaults = this.constructor.defaults;
    var helpMessages = defaults.helpMessages;
    var config = this.context.config;
    var level = this.props.level;

    var fragment1; // single element or array of keyed elements
    switch (this.state.parameterFragment) {
      case 'timespan':
        {
          var timespan = query.query.timespan;

          var _computeTimespan3 = computeTimespan(timespan),
              _computeTimespan4 = _slicedToArray(_computeTimespan3, 2),
              t0 = _computeTimespan4[0],
              t1 = _computeTimespan4[1];

          if (timespan == null) {
            break;
          }

          var datetimeProps = _.merge({}, defaults.datetimeInputProps, {
            inputProps: {
              disabled: _.isString(timespan) ? 'disabled' : null
            }
          });

          //todo - At custom select put a single reference time for year
          var timespanOptions = new Map(Array.from(TimeSpan.common.entries()).map(function (_ref4) {
            var _ref5 = _slicedToArray(_ref4, 2),
                k = _ref5[0],
                u = _ref5[1];

            return [k, u.title];
          }).filter(function (_ref6) {
            var _ref7 = _slicedToArray(_ref6, 2),
                k = _ref7[0],
                u = _ref7[1];

            return checkTimespan(k, level) === 0;
          }));

          timespanOptions.set('', 'Custom...');

          var viewTimespan = _.isString(timespan) ? t0 : timespan[0];

          var overlapTimespan;
          switch (this.state.viewMode) {
            case 'years':
              overlapTimespan = moment(viewTimespan).format('YYYY');
              break;
            case 'months':
              overlapTimespan = moment(viewTimespan).format('MMM YYYY');
              break;
            case 'days':
              overlapTimespan = moment(viewTimespan).format('DD MMM YYYY');
              break;
          }

          if (this.state.overlapping) {
            fragment1 = React.createElement(
              'div',
              { className: 'form-group' },
              React.createElement(
                'label',
                { className: 'col-sm-2 control-label' },
                'Overlap Time:'
              ),
              React.createElement(
                'div',
                { className: 'col-sm-4' },
                React.createElement(DatetimeInput, {
                  closeOnSelect: true,
                  open: this.state.pickerOpen
                  //isValidDate - todo - restrict user to selected bucket (disable dates not)
                  , dateFormat: 'MMM[,] YYYY',
                  timeFormat: false,
                  viewMode: this.state.viewMode,
                  value: overlapTimespan,
                  onChange: function onChange(val) {
                    return _this4._setQueryOverlappingTimespan([val, t1], query);
                  }
                }),
                React.createElement(
                  'p',
                  { className: 'help text-muted' },
                  helpMessages['timespan']
                )
              )
            );
          } else {
            fragment1 = React.createElement(
              'div',
              { className: 'form-group' },
              React.createElement(
                'label',
                { className: 'col-sm-2 control-label' },
                'Time:'
              ),
              React.createElement(
                'div',
                { className: 'col-sm-9' },
                React.createElement(Select, { className: 'select-timespan',
                  value: _.isString(timespan) ? timespan : '',
                  options: Array.from(timespanOptions.entries()).map(function (_ref8) {
                    var _ref9 = _slicedToArray(_ref8, 2),
                        k = _ref9[0],
                        v = _ref9[1];

                    return { value: k, label: v };
                  }),
                  searchable: false,
                  clearable: false,
                  onChange: function onChange(o) {
                    return _this4._setQueryTimespan(o && o.value ? o.value : [t0, t1], query);
                  }
                }),
                '\xA0\xA0',
                React.createElement(DatetimeInput, _extends({}, datetimeProps, {
                  value: t0.toDate(),
                  onChange: function onChange(val) {
                    return _this4._setQueryTimespan([val, t1], query);
                  }
                })),
                '\xA0-\xA0',
                React.createElement(DatetimeInput, _extends({}, datetimeProps, {
                  value: t1.toDate(),
                  onChange: function onChange(val) {
                    return _this4._setQueryTimespan([t0, val], query);
                  }
                })),
                React.createElement(
                  'p',
                  { className: 'help text-muted' },
                  helpMessages['timespan']
                )
              )
            );
          }
        }
        break;
      case 'population-group':
        {
          var target = query.query.population;
          var clusters = config.utility.clusters;


          var clusterOptions = [{ value: '', label: 'None', header: false }, { value: 'Cluster By', label: 'Cluster By:', header: true, disabled: true }].concat(_toConsumableArray(_.sortBy(clusters, ['name']).map(function (c) {
            return { value: c.key, label: c.name, header: false };
          })));

          var _population$extractGr3 = population.extractGroupParams(target),
              _population$extractGr4 = _slicedToArray(_population$extractGr3, 2),
              clusterKey = _population$extractGr4[0],
              groupKey = _population$extractGr4[1];

          var selectedCluster = !clusterKey ? null : clusters.find(function (c) {
            return c.key == clusterKey;
          });

          var groupOptions = clusterKey ? [{ value: 'group-1', label: 'All groups', header: true, disabled: true }, { value: '', label: 'All', header: false }, { value: 'group-2', label: 'Pick a specific group:', header: true, disabled: true }].concat(_toConsumableArray(selectedCluster.groups.map(function (g) {
            return { value: g.key, label: selectedCluster.name + ': ' + g.name, header: false };
          }))) : [{ value: 'group-1', label: 'No groups', header: true, disabled: true }, { value: '', label: 'Everyone', header: false }];

          fragment1 = React.createElement(
            'div',
            { className: 'form-group' },
            React.createElement(
              'label',
              { className: 'col-sm-2 control-label' },
              'Group:'
            ),
            React.createElement(
              'div',
              { className: 'col-sm-9' },
              React.createElement(Select, { className: 'select-cluster',
                value: clusterKey || '',
                options: clusterOptions,
                searchable: false,
                clearable: false,
                onChange: function onChange(o) {
                  return _this4._setQueryPopulation(o.value, null, query);
                },
                optionRenderer: optionRenderer
              }),
              '\xA0\xA0',
              React.createElement(Select, { className: 'select-cluster-group',
                value: groupKey || '',
                options: groupOptions,
                searchable: false,
                clearable: false,
                onChange: function onChange(o) {
                  return _this4._setQueryPopulation(clusterKey, o.value, query);
                },
                optionRenderer: optionRenderer
              }),
              React.createElement(
                'p',
                { className: 'help text-muted' },
                helpMessages['population-group']
              )
            )
          );
        }
        break;
      default:
        console.error(sprintf('Got unexpected key (%s) representing a form fragment', this.state.parameterFragment));
        break;
    }
    return fragment1;
  },

  _enableButton: function _enableButton(key) {
    var flag = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
    var value = this.state.disabledButtons,
        nextValue = null;
    var disabledKeys = value ? value.split('|') : [];
    var i = disabledKeys.indexOf(key);

    if (flag && i >= 0) {
      // The button is currently disabled and must be enabled
      disabledKeys.splice(i, 1);
      nextValue = disabledKeys.join('|');
    } else if (!flag && i < 0) {
      // The button is currently enabled and must be disabled
      disabledKeys.push(key);
      nextValue = disabledKeys.sort().join('|');
    }

    if (nextValue != null) this.setState({ disabledButtons: nextValue });
  },

  _clickedAddFavourite: function _clickedAddFavourite() {
    var config = this.context.config;
    var levels = config.reports.byType.measurements.levels;

    var report = levels[this.props.level].reports[this.props.reportName];

    var queries = this.props.multipleQueries;
    var tags = getTags(this);

    var namedQuery = {};
    namedQuery.type = 'Chart';
    namedQuery.tags = tags;
    namedQuery.title = this.refs.favourite.value;
    namedQuery.reportName = this.props.reportName;
    namedQuery.level = this.props.level;
    namedQuery.field = this.props.field;
    namedQuery.overlap = this.state.overlapping ? this.props.overlap.value : null;

    namedQuery.queries = [];

    for (var m = 0; m < queries.length; m++) {
      namedQuery.queries[m] = {};

      var _computeTimespan5 = computeTimespan(queries[m].query.timespan),
          _computeTimespan6 = _slicedToArray(_computeTimespan5, 2),
          tt1 = _computeTimespan6[0],
          tt2 = _computeTimespan6[1];

      namedQuery.queries[m].source = this.props.source;
      namedQuery.queries[m].time = {};
      namedQuery.queries[m].time.start = tt1.valueOf();
      namedQuery.queries[m].time.end = tt2.valueOf();
      namedQuery.queries[m].time.granularity = report.granularity;

      //the metric should be same for all series, except on peaks that MIN and MAX are both required
      var tempMetrics = [];
      for (var j = 0; j < queries[m].series.length; j++) {
        tempMetrics.push(queries[m].series[j].metric);
      }
      var metricSet = [].concat(_toConsumableArray(new Set(tempMetrics)));
      namedQuery.queries[m].metrics = metricSet;

      var tempPop = [];
      for (var k = 0; k < queries[m].series.length; k++) {
        var popu = {};
        if (queries[m].series[k].ranking) {

          var target = queries[m].series[k].population;

          var _population$extractGr5 = population.extractGroupParams(target),
              _population$extractGr6 = _slicedToArray(_population$extractGr5, 2),
              clusterKey2 = _population$extractGr6[0],
              groupKey2 = _population$extractGr6[1];

          if (target instanceof population.Utility || target == null) {
            popu.label = 'UTILITY:' + queries[m].series[k].population.key.toString() + '/' + new population.Ranking(queries[m].series[k].ranking).toString();
            popu.utility = queries[m].series[k].population.key;
          } else if (target instanceof population.Cluster) {
            popu.label = 'CLUSTER:' + clusterKey2 + '/' + new population.Ranking(queries[m].series[k].ranking).toString();
            popu.group = groupKey2;
          } else if (target instanceof population.ClusterGroup) {
            popu.label = 'CLUSTER:' + clusterKey2 + ':' + groupKey2 + '/' + new population.Ranking(queries[m].series[k].ranking).toString();
            popu.group = groupKey2;
          }

          popu.type = queries[m].series[k].population.type;

          popu.ranking = {};
          popu.ranking.field = queries[m].series[k].ranking.field.toUpperCase();
          popu.ranking.limit = queries[m].series[k].ranking.limit;
          popu.ranking.metric = queries[m].series[k].ranking.metric;
          popu.ranking.type = queries[m].series[k].ranking.type;
          tempPop.push(popu);
        } else {
          tempPop.push(queries[m].series[k].population);
        }
      }
      namedQuery.queries[m].population = _.uniqBy(tempPop, function (popu) {
        return [popu.label, popu.key, popu.group, popu.utility, popu.ranking].join();
      });
    }
    var request = {
      'namedQuery': namedQuery
    };

    if (this.props.favouriteChart && this.props.favouriteChart.type == 'CHART') {
      namedQuery.id = this.props.favouriteChart.id;

      var previousTitle = this.props.favouriteChart.title;
      this.props.updateFavourite(request, previousTitle);
    } else {
      this.props.addFavourite(request);
    }
    this.setState({ dirty: true });
  },

  _specForToolbar: function _specForToolbar() {
    // Make a spec object suitable to feed toolbars.ButtonToolbar "groups" prop.
    // Note we must take into account our current state (disabled flags for buttons)

    // Todo This fuctionality fits better to the Toolbar component,
    // e.g.: <Toolbar spec={spec} enabledButtons={flags1} activeButtons={flags2} ... />

    var cls = this.constructor;
    var disabledButtons = this.state.disabledButtons;


    if (_.isEmpty(disabledButtons)) return cls.toolbarSpec; // return the original spec

    var disabledKeys = disabledButtons.split('|');
    return cls.toolbarSpec.map(function (spec) {
      return _extends({}, spec, {
        buttons: spec.buttons.map(function (b) {
          return _.merge({}, b, {
            buttonProps: {
              // A key disabled in the original spec cannot ever be enabled!
              disabled: b.buttonProps.disabled || disabledKeys.indexOf(b.key) >= 0
            }
          });
        })
      });
    });
  },

  _specForParameters: function _specForParameters() {
    var cls = this.constructor;
    var disabledButtons = this.state.disabledButtons;


    if (_.isEmpty(disabledButtons)) return cls.parameters; // return the original spec

    var disabledKeys = disabledButtons.split('|');
    return cls.parameters.map(function (spec) {
      return _extends({}, spec, {
        buttons: spec.buttons.map(function (b) {
          return _.merge({}, b, {
            buttonProps: {
              // A key disabled in the original spec cannot ever be enabled!
              disabled: b.buttonProps.disabled || disabledKeys.indexOf(b.key) >= 0
            }
          });
        })
      });
    });
  },

  _titleForReport: function _titleForReport() {
    var config = this.context.config;
    var _constructor = this.constructor,
        configForReport = _constructor.configForReport,
        templates = _constructor.templates;
    var target = this.props.population;


    var report = configForReport(this.props, { config: config });

    // Find a friendly name for population target
    var populationName = target ? target.name : 'Utility';
    var cluster;
    if (target instanceof population.Utility || target == null) {
      populationName = 'Utility'; //config.utility.name;
    } else if (target instanceof population.Cluster) {
      cluster = config.utility.clusters.find(function (c) {
        return c.key == target.key;
      });
      populationName = 'Cluster by: ' + cluster.name;
    } else if (target instanceof population.ClusterGroup) {
      cluster = config.utility.clusters.find(function (c) {
        return c.key == target.clusterKey;
      });
      var group = cluster.groups.find(function (g) {
        return g.key == target.key;
      });
      populationName = cluster.name + ': ' + group.name;
    }

    return templates.reportTitle({ report: report, populationName: populationName });
  }

  // Wrap dispatch actions
}));

var ReportInfo = _wrapComponent('_component2')(React.createClass({
  displayName: 'ReportInfo',

  statics: {},

  propTypes: {
    field: PropTypes.string.isRequired,
    level: PropTypes.string.isRequired,
    reportName: PropTypes.string.isRequired,
    requested: PropTypes.number,
    finished: PropTypes.oneOfType([PropTypes.bool, PropTypes.number]),
    errors: PropTypes.arrayOf(PropTypes.string),
    series: PropTypes.arrayOf(seriesPropType),
    requests: PropTypes.number
  },

  getDefaultProps: function getDefaultProps() {
    return {
      requested: null,
      finished: null
    };
  },

  shouldComponentUpdate: function shouldComponentUpdate(nextProps) {
    if (nextProps.field != this.props.field || nextProps.level != this.props.level || nextProps.reportName != this.props.reportName) return true;
    return _.isNumber(nextProps.finished);
  },

  render: function render() {
    var _props6 = this.props,
        field = _props6.field,
        level = _props6.level,
        reportName = _props6.reportName;
    var _props7 = this.props,
        errors = _props7.errors,
        finished = _props7.finished,
        series = _props7.series;

    var paragraph, message;

    var n = !series ? 0 : series.filter(function (s) {
      return s.data.length > 0;
    }).length;

    if (errors) {
      message = _.first(errors);
      paragraph = React.createElement(
        'p',
        { className: 'help text-danger' },
        message
      );
    } else if (!n) {
      message = _.isNumber(finished) ? 'No data received! Last attempt was at ' + moment(finished).format('HH:mm:ss') : 'No data!';
      paragraph = React.createElement(
        'p',
        { className: 'help text-warning' },
        message
      );
    } else {
      message = 'Everything is fine. Updated at ' + moment(finished).format('HH:mm:ss');
      paragraph = React.createElement(
        'p',
        { className: 'help text-muted' },
        message
      );
    }

    return React.createElement(
      'div',
      { className: 'report-info', id: ['info', field, level, reportName].join('--') },
      paragraph
    );
  }
}));

//
// Container components
//

var reportingActions = require('../../actions/reports-measurements');
var chartingActions = require('../../actions/charting');

ReportPanel = ReactRedux.connect(function (state, ownProps) {
  var stateProps;
  var fields = state.config.reports.byType.measurements.fields;
  var _state$charting = state.charting,
      field = _state$charting.field,
      level = _state$charting.level,
      reportName = _state$charting.reportName;


  stateProps = { field: field, level: level, reportName: reportName };

  if (!ownProps.title) {
    stateProps.title = fields[field].title;
  }

  var r2 = state.reports.measurements;
  if (r2) {

    stateProps.multipleQueries = r2.multipleQueries;
    stateProps.source = r2.source;
    stateProps.finished = r2.finished;
  }

  stateProps.overlap = state.reports.measurements.overlap;
  stateProps.overlapping = state.reports.measurements.overlapping;
  stateProps.multipleQueries = state.reports.measurements.multipleQueries;

  if (state.favourites.selectedFavourite && state.favourites.selectedFavourite.type == 'CHART') {
    stateProps.defaultFavouriteValues = state.defaultFavouriteValues;
    stateProps.favouriteChart = state.favourites.selectedFavourite;
    stateProps.favouriteSeries = state.favourites.data;
  }

  return stateProps;
}, function (dispatch, ownProps) {
  var _setField2 = chartingActions.setField,
      _setReport2 = chartingActions.setReport;
  var initialize = reportingActions.initialize,
      _setSource2 = reportingActions.setSource,
      _setQuerySource = reportingActions.setQuerySource,
      _setTimespan2 = reportingActions.setTimespan,
      _setPopulation2 = reportingActions.setPopulation,
      _refreshData = reportingActions.refreshData,
      _refreshMultipleData = reportingActions.refreshMultipleData,
      _addFavourite = reportingActions.addFavourite,
      _updateFavourite = reportingActions.updateFavourite,
      _addQuery = reportingActions.addQuery,
      _removeSeries2 = reportingActions.removeSeries,
      _initMultipleQueries = reportingActions.initMultipleQueries,
      _changeMultipleQueries = reportingActions.changeMultipleQueries,
      _setOverlap2 = reportingActions.setOverlap;

  return {
    setField: function setField(field) {
      return dispatch(_setField2(field));
    },
    setReport: function setReport(level, reportName) {
      return dispatch(_setReport2(level, reportName));
    },
    initializeReport: function initializeReport(field, level, reportName, defaults) {
      return dispatch(initialize(field, level, reportName, REPORT_KEY, defaults));
    },
    initMultipleQueries: function initMultipleQueries(field, level, reportName, defaults, multipleQueries, source) {
      return dispatch(_initMultipleQueries(field, level, reportName, REPORT_MULTIPLE_KEY, defaults, multipleQueries, source));
    },
    changeMultipleQueries: function changeMultipleQueries(multipleQueries) {
      return dispatch(_changeMultipleQueries(multipleQueries));
    },
    refreshData: function refreshData(field, level, reportName) {
      return dispatch(_refreshData(field, level, reportName, REPORT_KEY));
    },
    refreshMultipleData: function refreshMultipleData(field, level, reportName) {
      return dispatch(_refreshMultipleData(field, level, reportName, REPORT_MULTIPLE_KEY));
    },
    setSource: function setSource(field, level, reportName, source) {
      return dispatch(_setSource2(field, level, reportName, REPORT_KEY, source));
    },
    setQuerySource: function setQuerySource(field, level, reportName, source) {
      return dispatch(_setQuerySource(field, level, reportName, REPORT_KEY, source));
    },
    setTimespan: function setTimespan(field, level, reportName, ts) {
      return dispatch(_setTimespan2(field, level, reportName, REPORT_KEY, ts));
    },
    setPopulation: function setPopulation(field, level, reportName, p) {
      return dispatch(_setPopulation2(field, level, reportName, REPORT_KEY, p));
    },
    setOverlap: function setOverlap(overlap) {
      return dispatch(_setOverlap2(overlap));
    },
    addQuery: function addQuery(field, level, reportName, numberOfSeries) {
      return dispatch(_addQuery(field, level, reportName, REPORT_KEY, numberOfSeries));
    },
    removeSeries: function removeSeries(field, level, reportName, numberOfSeries) {
      return dispatch(_removeSeries2(field, level, reportName, REPORT_KEY, numberOfSeries));
    },
    addFavourite: function addFavourite(query) {
      return dispatch(_addFavourite(query));
    },
    updateFavourite: function updateFavourite(query, previousTitle) {
      return dispatch(_updateFavourite(query, previousTitle));
    }
  };
})(ReportPanel);

ReportInfo = ReactRedux.connect(function (state, ownProps) {
  var _state = state.reports.measurements;
  var infoState = _.pick(_state, ['requested', 'finished', 'requests', 'errors']);
  infoState.series = mergeMultipleSeries(_state.multipleQueries);
  return infoState ? {} : infoState;
}, null)(ReportInfo);

//
// Export
//

var ChartContainer = require('./chart-container');

module.exports = {
  Panel: ReportPanel,
  Info: ReportInfo,
  // eslint-disable-next-line react/display-name
  Chart: function Chart(props) {
    return React.createElement(ChartContainer, _extends({}, props, { displayName: 'Chart', reportKey: REPORT_KEY }));
  }
};

},{"../../actions/charting":452,"../../actions/reports-measurements":457,"../../constants/Errors":576,"../../helpers/comparators":596,"../../model/granularity":601,"../../model/population":602,"../../model/timespan":603,"../../prop-types":604,"../toolbars":559,"./chart":515,"./chart-container":514,"livereactload/babel-transform":28,"lodash":"lodash","moment":"moment","rc-switch":38,"react":"react","react-bootstrap":"react-bootstrap","react-datetime":"react-datetime","react-redux":"react-redux","react-select":"react-select","sprintf":"sprintf"}],520:[function(require,module,exports){
'use strict';

var _react2 = require('react');

var _react3 = _interopRequireDefault(_react2);

var _babelTransform = require('livereactload/babel-transform');

var _babelTransform2 = _interopRequireDefault(_babelTransform);

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _components = {
  _component: {},
  _component2: {}
};

var _livereactloadBabelTransform2 = (0, _babelTransform2.default)({
  filename: '/home/daiad/Desktop/Development/home-web/utility/src/main/frontend/components/reports-measurements/pilot-reports.js',
  components: _components,
  locals: [],
  imports: [_react3.default]
});

function _wrapComponent(id) {
  return function (Component) {
    return _livereactloadBabelTransform2(Component, id);
  };
}

var _ = require('lodash');
var moment = require('moment');
var sprintf = require('sprintf');

var React = require('react');
var Bootstrap = require('react-bootstrap');

var _require = require('react-redux'),
    connect = _require.connect;

var Select = require('react-select').default;

var Panel = Bootstrap.Panel,
    ListGroup = Bootstrap.ListGroup,
    ListGroupItem = Bootstrap.ListGroupItem,
    Button = Bootstrap.Button;

var PropTypes = React.PropTypes;

var _require2 = require('../../helpers/timestamps'),
    generateTimestamps = _require2.generateTimestamps;

var _require3 = require('../../helpers/array-funcs'),
    product = _require3.product;

var population = require('../../model/population');

var _require4 = require('../../prop-types'),
    configPropType = _require4.configPropType;

var Report = require('./sliding-report');

var Form = _wrapComponent('_component')(React.createClass({
  displayName: 'Form',

  propTypes: {
    defaultNow: PropTypes.number,
    setReferenceTime: PropTypes.func
  },

  statics: {
    _computeNextState: function _computeNextState(props, _ref) {
      var config = _ref.config;
      var period = config.trials.period;

      var start = moment(period.start).utc();
      var end = moment(start).add(period.duration, 'month');
      return { start: start, end: end, now: props.defaultNow || start };
    }
  },

  contextTypes: { config: configPropType },

  getInitialState: function getInitialState() {
    var computedState = this.constructor._computeNextState(this.props, this.context);
    return computedState;
  },

  componentWillReceiveProps: function componentWillReceiveProps(nextProps, nextContext) {
    var computedState = this.constructor._computeNextState(nextProps, nextContext);
    this.setState(computedState);
  },

  componentDidMount: function componentDidMount() {
    if (this.props.defaultNow == null) {
      // This means our reference time was never initialized, so initialize
      // it with the value we just read from configuration
      this.props.setReferenceTime(this.state.now.valueOf());
    }
  },

  render: function render() {
    var _this = this;

    var _state = this.state,
        now = _state.now,
        start = _state.start,
        end = _state.end;


    var monthOptions = new Map(Array.from(generateTimestamps(start, end, 'month')).map(function (t, i) {
      return [t.toString(), sprintf('M%d : %s', i + 1, moment(t).utc().format('MMMM YYYY'))];
    }));

    return React.createElement(
      'form',
      { className: 'form-inline report-form' },
      React.createElement(
        'div',
        { className: 'form-group' },
        React.createElement(
          'label',
          null,
          'Select month:'
        ),
        '\xA0',
        React.createElement(Select, { className: 'select-month',
          value: now.valueOf().toString(),
          options: Array.from(monthOptions.entries()).map(function (_ref2) {
            var _ref3 = _slicedToArray(_ref2, 2),
                k = _ref3[0],
                v = _ref3[1];

            return { value: k, label: v };
          }),
          searchable: false,
          clearable: false,
          onChange: function onChange(o) {
            return _this.setState({ now: moment(Number(o.value)) });
          }
        })
      ),
      React.createElement(
        'div',
        { className: 'form-group submit-buttons' },
        React.createElement(
          Button,
          { bsStyle: 'primary',
            onClick: function onClick() {
              return _this.props.setReferenceTime(now.valueOf());
            }
          },
          React.createElement('i', { className: 'fa fa-fw fa-refresh' }),
          '\xA0Refresh'
        )
      )
    );
  }
}));

Form.displayName = 'PilotReports.Form';

var ReportsPanel = _wrapComponent('_component2')(React.createClass({
  displayName: 'ReportsPanel',


  propTypes: {
    now: PropTypes.number
  },

  contextTypes: { config: configPropType },

  render: function render() {
    var config = this.context.config;
    var now = this.props.now;


    if (now == null) return React.createElement(
      'div',
      null,
      'No reference time yet...'
    );

    var sources = config.reports.byType.measurements.sources;
    var _config$trials = config.trials,
        reports = _config$trials.reports,
        targetNames = _config$trials.population;
    var clusters = config.utility.clusters;

    // Default clusters are not computed for all utilities. First 
    // resolve cluster from name and if it exists add it to targets.
    // The final result must be filtered for null values.

    var targets = targetNames.map(function (name) {
      if (name.startsWith('CLUSTER:')) {
        name = name.substring('CLUSTER:'.length);

        var cluster = clusters.find(function (c) {
          return c.name == name;
        });
        return cluster ? new population.Cluster(cluster.key, name) : null;
      } else {
        return new population.Utility(config.utility.key, config.utility.name);
      }
    }).filter(function (c) {
      return !!c;
    });

    var nameTarget = function nameTarget(target) {
      if (target instanceof population.Cluster) {
        return 'Cluster: ' + target.name;
      } else if (target == null || target instanceof population.Utility) {
        return 'Utility';
      }
    };

    var reportItems = product(reports, _.keys(sources), targets).map(function (_ref4, i) {
      var _ref5 = _slicedToArray(_ref4, 3),
          report = _ref5[0],
          source = _ref5[1],
          target = _ref5[2];

      return React.createElement(
        ListGroupItem,
        { key: i },
        React.createElement(
          'h4',
          null,
          report.title,
          ' - ',
          sources[source].name,
          ' - ',
          nameTarget(target)
        ),
        React.createElement(Report, {
          field: 'volume',
          source: source,
          now: now,
          report: report,
          target: target,
          reportKey: sprintf('pilot-%d-%s', i + 1, target.key)
        })
      );
    });

    var header = React.createElement(
      'h3',
      null,
      'Pilot Reports',
      React.createElement(
        'small',
        null,
        sprintf('The report was generated for %s', moment(now).utc().format('MMMM YYYY'))
      )
    );

    return React.createElement(
      Panel,
      { header: header },
      React.createElement(
        ListGroup,
        { fill: true },
        reportItems
      )
    );
  },

  shouldComponentUpdate: function shouldComponentUpdate(nextProps) {
    return nextProps.now != this.props.now;
  }
}));

ReportsPanel.displayName = 'PilotReports.ReportsPanel';

//
// Containers
//

var actions = require('../../actions/trials');

Form = connect(function (state, ownProps) {
  return {
    defaultNow: state.trials.referenceTime
  };
}, function (dispatch, ownProps) {
  return {
    setReferenceTime: function setReferenceTime(t) {
      return dispatch(actions.setReferenceTime(t));
    }
  };
})(Form);

ReportsPanel = connect(function (state, ownProps) {
  return {
    now: state.trials.referenceTime
  };
}, null)(ReportsPanel);

//
// Export
//

module.exports = { ReportsPanel: ReportsPanel, Form: Form };

},{"../../actions/trials":458,"../../helpers/array-funcs":594,"../../helpers/timestamps":598,"../../model/population":602,"../../prop-types":604,"./sliding-report":521,"livereactload/babel-transform":28,"lodash":"lodash","moment":"moment","react":"react","react-bootstrap":"react-bootstrap","react-redux":"react-redux","react-select":"react-select","sprintf":"sprintf"}],521:[function(require,module,exports){
'use strict';

var _react2 = require('react');

var _react3 = _interopRequireDefault(_react2);

var _babelTransform = require('livereactload/babel-transform');

var _babelTransform2 = _interopRequireDefault(_babelTransform);

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

var _components = {
  _component: {}
};

var _livereactloadBabelTransform2 = (0, _babelTransform2.default)({
  filename: '/home/daiad/Desktop/Development/home-web/utility/src/main/frontend/components/reports-measurements/sliding-report.js',
  components: _components,
  locals: [],
  imports: [_react3.default]
});

function _wrapComponent(id) {
  return function (Component) {
    return _livereactloadBabelTransform2(Component, id);
  };
}

var _ = require('lodash');
var moment = require('moment');

var React = require('react');

var _require = require('react-redux'),
    connect = _require.connect;

var PropTypes = React.PropTypes;

var _require2 = require('../../prop-types'),
    populationPropType = _require2.populationPropType,
    reportPropType = _require2.reportPropType,
    configPropType = _require2.configPropType;

var Chart = require('./chart-container');

// A simple sliding report (on "now")
// If "now" is updated, it dispatches the appropriate actions to
// refresh data of the examined report.

var Report = _wrapComponent('_component')(React.createClass({
  displayName: 'Report',

  statics: {
    defaults: {
      chartProps: {
        width: 780,
        height: 300
      }
    },

    _assertProps: function _assertProps(props, nextProps) {
      // A sanity check: we only expext "now" to change
      var b = props.source == nextProps.source && props.field == nextProps.field && props.reportKey == nextProps.reportKey && props.report == nextProps.report && (props.target == null && nextProps.target == null || props.target.toString() == nextProps.target.toString());
      console.assert(b, 'Unexpected change for props of <Report>! ');
    }
  },

  propTypes: {
    now: PropTypes.number.isRequired, // indicates the period under examination
    field: PropTypes.string.isRequired,
    source: PropTypes.string.isRequired,
    report: reportPropType,
    target: populationPropType,
    reportKey: PropTypes.string.isRequired
  },

  contextTypes: { config: configPropType },

  getDefaultProps: function getDefaultProps() {
    return {};
  },

  componentDidMount: function componentDidMount() {
    this.props.initialize();
    setTimeout(this.props.refreshData, _.random(100, 900));
  },

  componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
    this.constructor._assertProps(this.props, nextProps);
    nextProps.initialize(); // this is a noop, since only "now" is updated
    setTimeout(nextProps.refreshData, _.random(100, 900));
  },

  render: function render() {
    var _props = this.props,
        field = _props.field,
        _props$report = _props.report,
        level = _props$report.level,
        reportName = _props$report.reportName,
        reportKey = _props.reportKey;

    var chartProps = _extends({}, this.constructor.defaults.chartProps, {
      field: field,
      level: level,
      reportName: reportName,
      reportKey: reportKey
    });
    return React.createElement(Chart, chartProps);
  }
}));

Report.displayName = 'SlidingReport';

var actions = require('../../actions/reports-measurements');

Report = connect(function (state, ownProps) {
  return {};
}, function (dispatch, ownProps) {
  var _moment$utc;

  var now = ownProps.now,
      field = ownProps.field,
      source = ownProps.source,
      reportKey = ownProps.reportKey,
      target = ownProps.target;
  var _ownProps$report = ownProps.report,
      level = _ownProps$report.level,
      startsAt = _ownProps$report.startsAt,
      reportName = _ownProps$report.reportName,
      duration = _ownProps$report.duration;


  var t0 = moment(now).utc().startOf(startsAt);
  var t1 = (_moment$utc = moment(t0).utc()).add.apply(_moment$utc, _toConsumableArray(duration));
  t1.add(1, level); // to use as closure point
  t0 = t0.valueOf();
  t1 = t1.valueOf();
  var timespan = t0 < t1 ? [t0, t1] : [t1, t0];

  var initialize = function initialize() {
    dispatch(actions.initialize(field, level, reportName, reportKey, {
      timespan: timespan,
      source: source,
      population: target
    }));
  };

  var refreshData = function refreshData() {
    dispatch(actions.setTimespan(field, level, reportName, reportKey, timespan));
    dispatch(actions.refreshData(field, level, reportName, reportKey));
  };

  return { initialize: initialize, refreshData: refreshData };
})(Report);

module.exports = Report;

},{"../../actions/reports-measurements":457,"../../prop-types":604,"./chart-container":514,"livereactload/babel-transform":28,"lodash":"lodash","moment":"moment","react":"react","react-redux":"react-redux"}],522:[function(require,module,exports){
'use strict';

var _react2 = require('react');

var _react3 = _interopRequireDefault(_react2);

var _babelTransform = require('livereactload/babel-transform');

var _babelTransform2 = _interopRequireDefault(_babelTransform);

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

var _components = {
  _Report: {
    displayName: '_Report'
  }
};

var _livereactloadBabelTransform2 = (0, _babelTransform2.default)({
  filename: '/home/daiad/Desktop/Development/home-web/utility/src/main/frontend/components/reports-measurements/unit-reports.js',
  components: _components,
  locals: [],
  imports: [_react3.default]
});

function _wrapComponent(id) {
  return function (Component) {
    return _livereactloadBabelTransform2(Component, id);
  };
}

var _ = require('lodash');
var moment = require('moment');
var numeral = require('numeral');
var sprintf = require('sprintf');
var echarts = require('react-echarts');

var React = require('react');

var _require = require('react-redux'),
    connect = _require.connect;

var MeasurementValue = require('./measurement-value');

var _require2 = require('../../helpers/array-funcs'),
    pairWithNext = _require2.pairWithNext,
    padArrayRight = _require2.padRight,
    padArrayLeft = _require2.padLeft;

var _require3 = require('../../helpers/timestamps'),
    generateTimestamps = _require3.generateTimestamps;

var computeKey = require('../../reports').measurements.computeKey;

var PropTypes = React.PropTypes;

var _require4 = require('../../prop-types'),
    seriesPropType = _require4.seriesPropType,
    populationPropType = _require4.populationPropType,
    reportPropType = _require4.reportPropType;

var views = require('./views');

var computeTimeRange = function computeTimeRange(duration, startsAt, now) {
  var _moment;

  // Get a time range suitable for a given duration and starting point
  now = moment(now);
  var t0 = moment(now).startOf(startsAt);
  var t1 = (_moment = moment(t0)).add.apply(_moment, _toConsumableArray(duration));
  t0 = t0.valueOf();
  t1 = t1.valueOf();
  return t0 < t1 ? [t0, t1] : [t1, t0];
};

var checkData = function checkData(data, keys, k0, unit, level) {
  if (!keys.length) throw new Error('No data received');
  if (!keys.every(function (k) {
    return _.isNumber(k);
  })) throw new Error('Expected number keys!');

  var U = moment.duration(1, unit).valueOf();
  var step = moment.duration(1, level).valueOf();

  if (U < step || U % step !== 0) throw new Error(sprintf('Expected that unit (%s) is a multiple of step (%s)', unit, level));

  var checkStepInsideUnit = function checkStepInsideUnit(k) {
    return data.get(k).points.map(function (v) {
      return v[0];
    }).map(pairWithNext).slice(0, -1).every(function (_ref) {
      var _ref2 = _slicedToArray(_ref, 2),
          ta = _ref2[0],
          tb = _ref2[1];

      // Note Must compute the diff at the given level (not as milliseconds!): 
      // not all days have 24 hours (DST), not all months 30 days etc.
      var ma = moment(ta).utc();
      var mb = moment(tb).utc();
      return mb.diff(ma, level, true) === 1;
    });
  };

  if (!keys.every(checkStepInsideUnit)) throw new Error(sprintf('Expected that data points have regular steps (1 %s)', level));

  var checkStepToNextUnit = function checkStepToNextUnit(_ref3) {
    var _ref4 = _slicedToArray(_ref3, 2),
        ka = _ref4[0],
        kb = _ref4[1];

    var pa = _.last(data.get(ka).points);
    var pb = _.first(data.get(kb).points);
    // Compare at UTC offset 0, to avoid false alarms with DST
    var ma = moment(pa[0]).utc();
    var mb = moment(pb[0]).utc();
    return mb.diff(ma, level, true) === 1;
  };

  if (!keys.map(pairWithNext).slice(0, -1).every(checkStepToNextUnit)) throw new Error(sprintf('Expected that the step to the next unit is 1 %s', level));

  var i0 = keys.indexOf(k0);
  if (i0 < 0) throw new Error(sprintf('No consumption data for current time unit (%s)', unit));else if (i0 === 0) console.error(sprintf('No consumption data for previous time unit (%s)', unit));

  return;
};

var densifyPoints = function densifyPoints(points, defaultValue, unit, level, startsAt) {
  // Make a dense array of points (ensure regular step)

  var p0 = points.map(function (p) {
    return p[0];
  });
  var t0 = _.first(p0);
  var ts = moment(t0).utc().startOf(startsAt);
  var te = moment(t0).utc().endOf(startsAt);
  var n = _.ceil(moment(te).diff(ts, level, true), 3);

  console.assert(n >= points.length, 'Received too many points!');

  if (n == points.length) {
    // This array doesnt seem to have gaps: return as is
    return points;
  }

  var timestamps = Array.from(generateTimestamps(ts, te, level));
  console.assert(n == timestamps.length, sprintf('Expected exactly %d timestamps (got %.1f)', timestamps.length, n));

  // console.debug(sprintf(
  //   'About to densify points for report (%s, level: %s): +%d points',
  //   unit, level, n - points.length
  // ));

  var result = timestamps.map(pairWithNext).reduce(function (res, _ref5) {
    var _ref6 = _slicedToArray(_ref5, 2),
        tx = _ref6[0],
        tx1 = _ref6[1];

    var i0;
    // If a data point concurs with tx, pick it
    i0 = p0.indexOf(tx);
    if (i0 >= 0) {
      res.push([tx, points[i0][1]]);
      return res;
    }

    // If a data point falls inside the bucket of (tx, tx1), pick it
    i0 = p0.findIndex(function (t) {
      return t > tx && (tx1 == null || t < tx1);
    });
    if (i0 >= 0) {
      // console.info(sprintf(
      //   'A data point at `%s` is picked for the bucket of 1 %s starting at `%s`',
      //   moment(points[i0][0]).format(), level, moment(tx).format()
      // ));
      res.push([tx, points[i0][1]]);
      return res;
    }

    // Nothing found, push default value
    res.push([tx, defaultValue]);
    return res;
  }, []);

  return result;
};

//
// Presentational components
//

var _Report = _wrapComponent('_Report')(function (_React$Component) {
  _inherits(_Report, _React$Component);

  _createClass(_Report, null, [{
    key: 'momentToKey',
    value: function momentToKey(t) {
      return moment(t).valueOf(); // override!
    }
  }, {
    key: '_propsToState',
    value: function _propsToState(props) {
      // Compute state from received props.

      var cls = this;

      var unit = cls.unit;

      var now = props.now,
          _props$report = props.report,
          level = _props$report.level,
          startsAt = _props$report.startsAt,
          _props$report$duratio = _slicedToArray(_props$report.duration, 2),
          unit1 = _props$report$duratio[1],
          series = props.series;

      var data, keys, totals, forecast;

      if (unit != unit1) throw new Error(sprintf('Expected that report\'s unit (%s) is same with ours (%s)', unit1, unit));

      var emptyState = {
        moment0: null, data: null, keys: null, totals: null, forecast: null
      };

      // A moment that represents the period under examination
      var moment0 = moment(now);
      moment0 = moment0.add(moment0.utcOffset(), 'minute').utc(); // move to same wall-clock in UTC
      moment0 = moment0.add(-1, unit).startOf(startsAt);

      // The key of this period (e.g. day-of-year)
      var k0 = cls.momentToKey(moment0);

      if (!series) return _extends({}, emptyState, { moment0: moment0 });

      if (level != series.granularity.toLowerCase()) throw new Error(sprintf('Expected that report\'s level (%s) is same with series granularity (%s)', level, series.granularity));

      // Sort data points by timestamp
      var seriesData = _.sortBy(series.data, 0);

      // Group series data by our key (e.g. day-of-year)
      var densify = _.partialRight(densifyPoints, unit, level, startsAt);
      data = new Map(_.toPairs(_.groupBy(seriesData, function (v) {
        return cls.momentToKey(v[0]);
      })).map(function (_ref7) {
        var _ref8 = _slicedToArray(_ref7, 2),
            k = _ref8[0],
            p = _ref8[1];

        return [Number(k), { points: densify(p, 0) }];
      })
      // Sort pairs in-place by the first timestamp
      .sort(function (_ref9, _ref10) {
        var _ref12 = _slicedToArray(_ref9, 2),
            k1 = _ref12[0],
            p1 = _ref12[1];

        var _ref11 = _slicedToArray(_ref10, 2),
            k2 = _ref11[0],
            p2 = _ref11[1];

        return p1.points[0][0] - p2.points[0][0];
      }));
      keys = Array.from(data.keys());

      // Validate received data
      try {
        checkData(data, keys, k0, unit, level);
      } catch (er) {
        console.error('Check has failed: ' + er.message);
        return _extends({}, emptyState, { moment0: moment0, data: false });
      }

      // Do we have forecast data? Todo maybe as separate series?
      // var i0 = keys.indexOf(k0), k1r = keys[i0 + 1];
      forecast = false; // Fixme k1r && (data.get(k1r).points.length >= N);

      // Compute total consumption for each slot in our window
      totals = new Map(Array.from(data.entries()).map(function (_ref13) {
        var _ref14 = _slicedToArray(_ref13, 2),
            k = _ref14[0],
            p = _ref14[1];

        return [k, _.sumBy(p.points, 1)];
      }));

      // For each slot, add a closure point (preferrably the 1st point of next slot).
      keys.map(pairWithNext).forEach(function (_ref15) {
        var _ref16 = _slicedToArray(_ref15, 2),
            k1 = _ref16[0],
            k2 = _ref16[1];

        var _$last = _.last(data.get(k1).points),
            _$last2 = _slicedToArray(_$last, 1),
            t1e = _$last2[0];

        var _ref17 = k2 ? _.first(data.get(k2).points) : [],
            _ref18 = _slicedToArray(_ref17, 2),
            t2s = _ref18[0],
            v2s = _ref18[1];

        var t1c = moment(t1e).add(1, level).valueOf();
        data.get(k1).closurePoint = [t1c, t2s && t1c == t2s ? v2s : null];
      });

      return { moment0: moment0, data: data, keys: keys, totals: totals, forecast: forecast };
    }
  }, {
    key: 'unit',
    get: function get() {
      return 'ms'; // override!
    }
  }, {
    key: 'defaults',
    get: function get() {
      return {
        charts: {
          xaxis: {
            // The x-axis covers exactly the examined period
            normal: {
              formatter: function formatter(t) {
                return moment(t).utc().format();
              }
            },
            // The x-axis spans over the examined period (e.g at forecast charts)
            wide: {
              formatter: function formatter(t) {
                return moment(t).utc().format();
              }
            },
            // The x-axis for the comparison chart
            comparison: {
              formatter: function formatter(t) {
                return moment(t).utc().format();
              }
            }
          },
          legend: true,
          lineWidth: 1,
          color: ['#2D6E8D', '#DB5563', '#9056B4'],
          grid: { x: '50', x2: '22', y: '30', y2: '30' },
          yAxis: {
            formatter: function formatter(y) {
              return numeral(y).format('0.0a');
            }
          }
        }
      };
    }
  }]);

  function _Report(props) {
    _classCallCheck(this, _Report);

    var _this = _possibleConstructorReturn(this, (_Report.__proto__ || Object.getPrototypeOf(_Report)).call(this, props));

    var initialState = _this.constructor._propsToState(props);
    _this.state = _extends({}, initialState, { shouldRefresh: true });
    return _this;
  }

  _createClass(_Report, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      this._initialize();
      if (this.props.visible) {
        this._refreshData();
      }
    }
  }, {
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(nextProps) {
      var nextState = this.constructor._propsToState(nextProps);

      // Decide if a refresh should be requested (when we update and become visible)  
      nextState.shouldRefresh = !this.props.visible && this.state.shouldRefresh || // carry a shouldRefresh from past changes
      nextProps.now != this.props.now || nextProps.field != this.props.field || nextProps.target != this.props.target || nextProps.source != this.props.source;

      this.setState(nextState);
    }
  }, {
    key: 'shouldComponentUpdate',
    value: function shouldComponentUpdate(nextProps, nextState) {
      // Skip unwanted updates caused by internal state changes
      return nextProps.now != this.props.now || nextProps.field != this.props.field || nextProps.target != this.props.target || nextProps.source != this.props.source || nextProps.visible != this.props.visible || nextProps.series != this.props.series;
    }
  }, {
    key: 'componentDidUpdate',
    value: function componentDidUpdate() {
      if (this.props.visible && this.state.shouldRefresh) {
        this._refreshData();
      }
    }
  }, {
    key: 'render',
    value: function render() {
      var _this2 = this;

      var children = this.props.children;

      return React.createElement(
        'div',
        { className: 'clearfix unit-view' },
        React.Children.map(children, function (c) {
          return _this2._rendererForView(c.type)(c.props);
        })
      );
    }

    // Helper methods for dispatch props

  }, {
    key: '_initialize',
    value: function _initialize() {
      return this.props.initialize();
    }
  }, {
    key: '_refreshData',
    value: function _refreshData() {
      // Schedule a refresh after this state transition
      var delay = 400 + Math.floor(Math.random() * 200); // millis
      setTimeout(this.props.refreshData, delay);
      this.setState({ shouldRefresh: false });
    }

    // Provide specific views

  }, {
    key: '_rendererForView',
    value: function _rendererForView(viewType) {
      // Map view (by class) to a rendering method

      var method = function method() {
        return null;
      };
      switch (viewType) {
        case views.Summary:
          method = this._renderSummary;
          break;
        case views.SimpleChart:
          method = this._renderSimpleChart;
          break;
        case views.ComparisonChart:
          method = this._renderComparisonChart;
          break;
        case views.ForecastingChart:
          method = this._renderForecastingChart;
          break;
      }
      return method.bind(this);
    }
  }, {
    key: '_renderSummary',
    value: function _renderSummary(viewProps) {
      // A summary of the examined perid

      var _props = this.props,
          title = _props.title,
          formatDate = _props.formatDate,
          field = _props.field,
          uom = _props.uom;
      var _state2 = this.state,
          moment0 = _state2.moment0,
          data = _state2.data,
          keys = _state2.keys,
          totals = _state2.totals;


      var k0 = this.constructor.momentToKey(moment0),
          i0,
          k1;
      if (data) {
        i0 = keys.indexOf(k0);
        k1 = keys[i0 - 1];
      }
      return React.createElement(
        'div',
        { className: viewProps.className, key: 'summary' },
        React.createElement(MeasurementValue, {
          title: formatDate(moment0),
          subtitle: title,
          field: field,
          unit: uom,
          value: totals ? totals.get(k0) : null,
          prevValue: totals && k1 ? totals.get(k1) : null
        })
      );
    }
  }, {
    key: '_renderForecastingChart',
    value: function _renderForecastingChart(viewProps) {
      // A forecasting chart that spans over 2 periods: {k0, k1r}

      var _constructor = this.constructor,
          defaults = _constructor.defaults,
          unit = _constructor.unit,
          momentToKey = _constructor.momentToKey;
      var _props2 = this.props,
          level = _props2.report.level,
          field = _props2.field,
          uom = _props2.uom;
      var _state3 = this.state,
          moment0 = _state3.moment0,
          data = _state3.data,
          keys = _state3.keys,
          forecast = _state3.forecast;


      if (!forecast) {
        return React.createElement(
          'div',
          null,
          'No forecasting data!'
        );
      }

      var k0 = momentToKey(moment0),
          i0;
      if (data) {
        i0 = keys.indexOf(k0);
      }

      var chartProps = {
        legend: defaults.charts.legend,
        lineWidth: defaults.charts.lineWidth,
        grid: defaults.charts.grid,
        color: defaults.charts.color,
        loading: data != null ? false : { text: 'Loading...' },
        yAxis: _extends({}, defaults.charts.yAxis, {
          name: sprintf('%s (%s)', field, uom)
        })
      };

      var k1r = data ? keys[i0 + 1] : null;

      // Fixme: This computation for N is not always correct
      var N = moment.duration(1, unit).as(level);

      return React.createElement(
        'div',
        { className: viewProps.className, key: "forecasting-chart" },
        React.createElement(echarts.LineChart, _extends({}, chartProps, {
          xAxis: _extends({}, defaults.charts.xaxis.wide, {
            data: !data ? [] : [].concat(data.get(k0).points, data.get(k1r).points).map(function (v) {
              return v[0];
            })
          }),
          series: [
          // Actual consumption (1st half)
          {
            data: data ? padArrayRight(data.get(k0).points.map(function (v) {
              return v[1];
            }), 2 * N) : null,
            name: 'Consumption'
          },
          // Forecast (2nd half)
          {
            data: data ? padArrayLeft(data.get(k1r).points.map(function (v) {
              return v[1];
            }), 2 * N) : null,
            name: 'Forecast'
          }]
        }))
      );
    }
  }, {
    key: '_renderSimpleChart',
    value: function _renderSimpleChart(viewProps) {
      // A simple chart for the exact period

      var _constructor2 = this.constructor,
          defaults = _constructor2.defaults,
          momentToKey = _constructor2.momentToKey;
      var _props3 = this.props,
          formatDate = _props3.formatDate,
          field = _props3.field,
          uom = _props3.uom;
      var _state4 = this.state,
          moment0 = _state4.moment0,
          data = _state4.data;


      var k0 = momentToKey(moment0),
          data0,
          data0p1;
      if (data) {
        data0 = data.get(k0);
        data0p1 = data0.points.concat([data0.closurePoint]);
      }

      var chartProps = {
        legend: defaults.charts.legend,
        lineWidth: defaults.charts.lineWidth,
        grid: defaults.charts.grid,
        color: defaults.charts.color,
        loading: data != null ? false : { text: 'Loading...' },
        yAxis: _extends({}, defaults.charts.yAxis, {
          name: sprintf('%s (%s)', field, uom)
        })
      };
      return React.createElement(
        'div',
        { className: viewProps.className, key: "simple-chart" },
        React.createElement(echarts.LineChart, _extends({}, chartProps, {
          xAxis: _extends({}, defaults.charts.xaxis.normal, {
            data: data ? data0p1.map(function (v) {
              return v[0];
            }) : []
          }),
          series: [{
            data: data ? data0p1.map(function (v) {
              return v[1];
            }) : [],
            name: formatDate(moment0)
          }]
        }))
      );
    }
  }, {
    key: '_renderComparisonChart',
    value: function _renderComparisonChart(viewProps) {
      // A comparison chart (compare last K periods)

      var _constructor3 = this.constructor,
          defaults = _constructor3.defaults,
          momentToKey = _constructor3.momentToKey;

      var _props4 = this.props,
          _props4$report$durati = _slicedToArray(_props4.report.duration, 1),
          K = _props4$report$durati[0],
          formatDate = _props4.formatDate,
          field = _props4.field,
          uom = _props4.uom;

      var _state5 = this.state,
          moment0 = _state5.moment0,
          data = _state5.data,
          keys = _state5.keys;


      var k0 = momentToKey(moment0),
          i0;
      if (data) {
        i0 = keys.indexOf(k0);
      }

      var chartProps = {
        legend: defaults.charts.legend,
        lineWidth: defaults.charts.lineWidth,
        grid: defaults.charts.grid,
        color: defaults.charts.color,
        loading: data != null ? false : { text: 'Loading...' },
        yAxis: _extends({}, defaults.charts.yAxis, {
          name: sprintf('%s (%s)', field, uom)
        })
      };

      var comparisonKeys = (keys || []).filter(function (k, i) {
        return i <= i0;
      }).slice(K);
      var kX = _.maxBy(comparisonKeys, function (k) {
        return data.get(k).points.length;
      });
      var dataX = data ? data.get(kX) : null;

      return React.createElement(
        'div',
        { className: viewProps.className, key: "comparison-chart" },
        React.createElement(echarts.LineChart, _extends({}, chartProps, {
          xAxis: _extends({}, defaults.charts.xaxis.comparison, {
            data: data ? dataX.points.map(function (v) {
              return v[0];
            }).concat(dataX.closurePoint[0]) : []
          }),
          series: !data ? [] : comparisonKeys.reverse().map(function (k) {
            var dataY = data.get(k);
            return {
              data: padArrayRight(dataY.points.map(function (v) {
                return v[1];
              }).concat([dataY.closurePoint[1]]), dataX.points.length + 1),
              name: sprintf('%s', formatDate(dataY.points[0][0], true))
            };
          })
        }))
      );
    }
  }]);

  return _Report;
}(React.Component));

_Report.defaultProps = {
  source: 'meter',
  field: 'volume',
  uom: null,
  reportKey: null,
  visible: true,
  report: null,
  formatDate: function formatDate(m) {
    var brief = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
    return moment(m).format('LTS');
  },
  target: null,
  series: null
};

_Report.propTypes = {
  source: PropTypes.string,
  field: PropTypes.string.isRequired,
  uom: PropTypes.string.isRequired,
  now: PropTypes.number.isRequired,
  reportKey: PropTypes.string.isRequired,
  visible: PropTypes.bool,
  report: reportPropType,
  target: populationPropType,
  title: PropTypes.string,
  formatDate: PropTypes.func,
  // Injected from ReactRedux
  series: seriesPropType,
  initialize: PropTypes.func,
  refreshData: PropTypes.func
};

// Daily

var ReportByDay = function (_Report2) {
  _inherits(ReportByDay, _Report2);

  function ReportByDay() {
    _classCallCheck(this, ReportByDay);

    return _possibleConstructorReturn(this, (ReportByDay.__proto__ || Object.getPrototypeOf(ReportByDay)).apply(this, arguments));
  }

  _createClass(ReportByDay, null, [{
    key: 'momentToKey',
    value: function momentToKey(t) {
      return moment(t).utc().dayOfYear();
    }
  }, {
    key: 'unit',
    get: function get() {
      return 'day';
    }
  }, {
    key: 'defaults',
    get: function get() {
      return _.merge({}, _Report.defaults, {
        charts: {
          xaxis: {
            normal: {
              formatter: function formatter(t) {
                return moment(t).utc().format('hA');
              }
            },
            wide: {
              formatter: function formatter(t) {
                var m = moment(t).utc();
                return m.hour() != 0 ? m.format('hA') : m.format('ddd hA');
              }
            },
            comparison: {
              formatter: function formatter(t) {
                return moment(t).utc().format('hA');
              }
            }
          }
        }
      });
    }
  }]);

  return ReportByDay;
}(_Report);

ReportByDay.defaultProps = _.extend({}, _Report.defaultProps, {
  formatDate: function formatDate(m) {
    var brief = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
    return moment(m).utc().format(brief ? 'D/MMM' : 'ddd D MMM');
  },
  title: 'Daily Consumption'
});

// Weekly

var ReportByWeek = function (_Report3) {
  _inherits(ReportByWeek, _Report3);

  function ReportByWeek() {
    _classCallCheck(this, ReportByWeek);

    return _possibleConstructorReturn(this, (ReportByWeek.__proto__ || Object.getPrototypeOf(ReportByWeek)).apply(this, arguments));
  }

  _createClass(ReportByWeek, null, [{
    key: 'momentToKey',
    value: function momentToKey(t) {
      return moment(t).utc().isoWeek();
    }
  }, {
    key: 'unit',
    get: function get() {
      return 'week';
    }
  }, {
    key: 'defaults',
    get: function get() {
      return _.merge({}, _Report.defaults, {
        charts: {
          xaxis: {
            normal: {
              formatter: function formatter(t) {
                return moment(t).utc().format('dd');
              }
            },
            wide: {
              formatter: function formatter(t) {
                return moment(t).utc().format('D/M');
              }
            },
            comparison: {
              formatter: function formatter(t) {
                return moment(t).utc().format('dd');
              }
            }
          }
        }
      });
    }
  }]);

  return ReportByWeek;
}(_Report);

ReportByWeek.defaultProps = _.extend({}, _Report.defaultProps, {
  formatDate: function formatDate(m) {
    var brief = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

    m = moment(m).utc();
    if (brief) return m.format('[Week #]W');
    var m0 = m.clone().startOf('isoweek');
    var m1 = m.clone().endOf('isoweek');
    return m0.format('D MMM') + ' - ' + m1.format('D MMM');
  },
  title: 'Weekly Consumption'
});

// Monthly 

var ReportByMonth = function (_Report4) {
  _inherits(ReportByMonth, _Report4);

  function ReportByMonth() {
    _classCallCheck(this, ReportByMonth);

    return _possibleConstructorReturn(this, (ReportByMonth.__proto__ || Object.getPrototypeOf(ReportByMonth)).apply(this, arguments));
  }

  _createClass(ReportByMonth, null, [{
    key: 'momentToKey',
    value: function momentToKey(t) {
      return moment(t).utc().month();
    }
  }, {
    key: 'unit',
    get: function get() {
      return 'month';
    }
  }, {
    key: 'defaults',
    get: function get() {
      return _.merge({}, _Report.defaults, {
        charts: {
          xaxis: {
            normal: {
              formatter: function formatter(t) {
                return moment(t).utc().format('dd D');
              }
            },
            wide: {
              formatter: function formatter(t) {
                return moment(t).utc().format('D MMM');
              }
            },
            comparison: {
              labelFilter: function labelFilter(i, t) {
                return i % 5 == 0;
              }, // place 1 every 5 items
              formatter: function formatter(t, i) {
                return moment(t).utc().format('D');
              }
            }
          }
        }
      });
    }
  }]);

  return ReportByMonth;
}(_Report);

ReportByMonth.defaultProps = _.extend({}, _Report.defaultProps, {
  formatDate: function formatDate(m) {
    var brief = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
    return moment(m).utc().format(brief ? 'MMM' : 'MMMM YYYY');
  },
  title: 'Monthly Consumption'
});

// Yearly

var ReportByYear = function (_Report5) {
  _inherits(ReportByYear, _Report5);

  function ReportByYear() {
    _classCallCheck(this, ReportByYear);

    return _possibleConstructorReturn(this, (ReportByYear.__proto__ || Object.getPrototypeOf(ReportByYear)).apply(this, arguments));
  }

  _createClass(ReportByYear, null, [{
    key: 'momentToKey',
    value: function momentToKey(t) {
      return moment(t).utc().year();
    }
  }, {
    key: 'unit',
    get: function get() {
      return 'year';
    }
  }, {
    key: 'defaults',
    get: function get() {
      return _.merge({}, _Report.defaults, {
        charts: {
          xaxis: {
            normal: {
              formatter: function formatter(t) {
                return moment(t).utc().format('MMM');
              }
            },
            wide: {
              formatter: function formatter(t) {
                return moment(t).utc().format('MMM');
              }
            },
            comparison: {
              formatter: function formatter(t, i) {
                return moment(t).utc().format('MMM');
              }
            }
          }
        }
      });
    }
  }]);

  return ReportByYear;
}(_Report);

ReportByYear.defaultProps = _.extend({}, _Report.defaultProps, {
  formatDate: function formatDate(m) {
    var brief = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
    return moment(m).utc().format('YYYY');
  },
  title: 'Yearly Consumption'
});

//
// Container components
//

var actions = require('../../actions/reports-measurements');

var mapStateToProps = function mapStateToProps(state, ownProps) {
  // A default implementation for a Redux state selector.
  var field = ownProps.field,
      reportKey = ownProps.reportKey,
      _ownProps$report = ownProps.report,
      duration = _ownProps$report.duration,
      level = _ownProps$report.level,
      reportName = _ownProps$report.reportName;

  var _duration = _slicedToArray(duration, 2),
      unit = _duration[1];

  var _state = state.reports.measurements;
  var series = null;
  if (!_.isEmpty(_state)) {
    var k = computeKey(field, level, reportName, [reportKey, unit]);
    series = k in _state ? _.first(_state[k].series) : null;
  }
  return { series: series };
};

var mapDispatchToProps = function mapDispatchToProps(dispatch, ownProps) {
  // A default implementation for a Redux dispatch mapper.

  var now = ownProps.now,
      field = ownProps.field,
      source = ownProps.source,
      target = ownProps.target;
  var reportKey = ownProps.reportKey,
      _ownProps$report2 = ownProps.report,
      startsAt = _ownProps$report2.startsAt,
      duration = _ownProps$report2.duration,
      level = _ownProps$report2.level,
      reportName = _ownProps$report2.reportName;


  var ts = computeTimeRange(duration, startsAt, now);

  var _duration2 = _slicedToArray(duration, 2),
      unit = _duration2[1];

  var reportArgs = [field, level, reportName, [reportKey, unit]];

  var initialize = function initialize() {
    return dispatch(actions.initialize.apply(actions, reportArgs));
  };

  var refreshData = function refreshData() {
    dispatch(actions.setTimespan.apply(actions, reportArgs.concat([ts])));
    if (target) dispatch(actions.setPopulation.apply(actions, reportArgs.concat([target])));
    if (source) dispatch(actions.setSource.apply(actions, reportArgs.concat([source])));
    return dispatch(actions.refreshData.apply(actions, reportArgs));
  };

  return { initialize: initialize, refreshData: refreshData };
};

module.exports = {
  ReportByDay: connect(mapStateToProps, mapDispatchToProps)(ReportByDay),
  ReportByWeek: connect(mapStateToProps, mapDispatchToProps)(ReportByWeek),
  ReportByMonth: connect(mapStateToProps, mapDispatchToProps)(ReportByMonth),
  ReportByYear: connect(mapStateToProps, mapDispatchToProps)(ReportByYear)
};

},{"../../actions/reports-measurements":457,"../../helpers/array-funcs":594,"../../helpers/timestamps":598,"../../prop-types":604,"../../reports":641,"./measurement-value":517,"./views":523,"livereactload/babel-transform":28,"lodash":"lodash","moment":"moment","numeral":"numeral","react":"react","react-echarts":109,"react-redux":"react-redux","sprintf":"sprintf"}],523:[function(require,module,exports){
'use strict';

// Define views that can be enabled (as drop-in) on unit reports. 
// A view instance is intended to be owned (as a child) by a report. It is up to the 
// report component how to actually present these views.

var Summary = function Summary(_ref) {
  var className = _ref.className,
      numericFormat = _ref.numericFormat;
  return null;
};

Summary.defaultProps = {
  className: 'report-view summary',
  numericFormat: '0.0a'
};

var SimpleChart = function SimpleChart(_ref2) {
  var className = _ref2.className;
  return null;
};

SimpleChart.defaultProps = {
  className: 'report-view simple-chart'
};

var ComparisonChart = function ComparisonChart(_ref3) {
  var className = _ref3.className;
  return null;
};

ComparisonChart.defaultProps = {
  className: 'report-view comparison-chart'
};

var ForecastingChart = function ForecastingChart(_ref4) {
  var className = _ref4.className;
  return null;
};

ForecastingChart.defaultProps = {
  className: 'report-view forecasting-chart'
};

module.exports = { Summary: Summary, SimpleChart: SimpleChart, ComparisonChart: ComparisonChart, ForecastingChart: ForecastingChart };

},{}],524:[function(require,module,exports){
'use strict';

var _react2 = require('react');

var _react3 = _interopRequireDefault(_react2);

var _babelTransform = require('livereactload/babel-transform');

var _babelTransform2 = _interopRequireDefault(_babelTransform);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _components = {
  _component: {}
};

var _livereactloadBabelTransform2 = (0, _babelTransform2.default)({
  filename: '/home/daiad/Desktop/Development/home-web/utility/src/main/frontend/components/reports-system/data-transmission.js',
  components: _components,
  locals: [],
  imports: [_react3.default]
});

function _wrapComponent(id) {
  return function (Component) {
    return _livereactloadBabelTransform2(Component, id);
  };
}

var _ = require('lodash');

var React = require('react');

var PropTypes = React.PropTypes;
var commonPropTypes = {
  level: PropTypes.string.isRequired,
  reportName: PropTypes.string.isRequired
};

var Report = _wrapComponent('_component')(React.createClass({
  displayName: 'Report',

  statics: {},

  propTypes: _.extend({}, commonPropTypes),

  render: function render() {
    return React.createElement(
      'div',
      null,
      'Todo report'
    );
  }
}));

module.exports = { Report: Report };

},{"livereactload/babel-transform":28,"lodash":"lodash","react":"react"}],525:[function(require,module,exports){
'use strict';

var _react2 = require('react');

var _react3 = _interopRequireDefault(_react2);

var _babelTransform = require('livereactload/babel-transform');

var _babelTransform2 = _interopRequireDefault(_babelTransform);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _components = {
  _component: {},
  _component2: {},
  _component3: {},
  _component4: {}
};

var _livereactloadBabelTransform2 = (0, _babelTransform2.default)({
  filename: '/home/daiad/Desktop/Development/home-web/utility/src/main/frontend/components/reports.js',
  components: _components,
  locals: [],
  imports: [_react3.default]
});

function _wrapComponent(id) {
  return function (Component) {
    return _livereactloadBabelTransform2(Component, id);
  };
}

var _ = require('lodash');
var moment = require('moment');

var React = require('react');
var ReactRedux = require('react-redux');

var PropTypes = React.PropTypes;

var _require = require('../prop-types'),
    configPropType = _require.configPropType;

var MeasurementsReportPanel = _wrapComponent('_component')(React.createClass({
  displayName: 'MeasurementsReportPanel',

  propTypes: {
    config: configPropType
  },

  childContextTypes: { config: configPropType },

  getChildContext: function getChildContext() {
    return { config: this.props.config };
  },

  render: function render() {
    var pane = require('./reports-measurements/pane');
    var config = this.props.config;


    var ready = !_.isEmpty(config) && !_.isEmpty(config.reports) && !_.isEmpty(config.utility);
    if (!ready) {
      return React.createElement(
        'div',
        null,
        'Loading configuration...'
      );
    }

    return React.createElement(
      'div',
      { className: 'reports reports-measurements' },
      React.createElement(pane.Panel, null)
    );
  }
}));

var SystemReportsSection = _wrapComponent('_component2')(React.createClass({
  displayName: 'SystemReportsSection',

  propTypes: {
    config: configPropType,
    level: PropTypes.string,
    reportName: PropTypes.string
  },

  childContextTypes: { config: configPropType },

  getChildContext: function getChildContext() {
    return { config: this.props.config };
  },

  render: function render() {
    var _props = this.props,
        config = _props.config,
        level = _props.level,
        reportName = _props.reportName;

    var _config = config.reports.byType.system;

    if (_.isEmpty(config)) {
      return React.createElement(
        'div',
        null,
        'Loading configuration...'
      );
    }

    var heading = React.createElement(
      'h3',
      null,
      _config.title,
      React.createElement(
        'span',
        { className: 'delimiter' },
        '\xA0/\xA0'
      ),
      _config.levels[level].title,
      React.createElement(
        'span',
        { className: 'delimiter' },
        '\xA0/\xA0'
      ),
      _config.levels[level].reports[reportName].title
    );

    var Report;
    switch (reportName) {
      default:
        Report = require('./reports-system/data-transmission').Report;
        break;
      case 'data-transmission':
        Report = require('./reports-system/data-transmission').Report;
        break;
    }

    return React.createElement(
      'section',
      { className: 'reports reports-system' },
      heading,
      React.createElement(Report, { level: level, reportName: reportName })
    );
  }
}));

var Overview = _wrapComponent('_component3')(React.createClass({
  displayName: 'Overview',

  propTypes: {
    config: configPropType,
    now: PropTypes.number
  },

  childContextTypes: { config: configPropType },

  getChildContext: function getChildContext() {
    return { config: this.props.config };
  },

  render: function render() {
    var overview = require('./reports-measurements/overview');
    var _props2 = this.props,
        config = _props2.config,
        now = _props2.now;


    var ready = !_.isEmpty(config) && !_.isEmpty(config.reports) && !_.isEmpty(config.utility) && !_.isEmpty(config.overview);
    if (!ready) {
      return React.createElement(
        'div',
        null,
        'Loading configuration...'
      );
    }

    return React.createElement(
      'div',
      { className: 'overview reports' },
      React.createElement(
        'h2',
        null,
        'Reports',
        React.createElement(
          'small',
          { className: 'info' },
          'Generated around a reference time of ',
          React.createElement(
            'strong',
            null,
            moment(now).format('D MMM, YYYY')
          )
        )
      ),
      React.createElement(overview.Form, null),
      React.createElement(overview.OverviewPanelGroup, { reports: config.overview.reports })
    );
  }
}));

var PilotReports = _wrapComponent('_component4')(React.createClass({
  displayName: 'PilotReports',


  propTypes: {
    config: configPropType
  },

  childContextTypes: { config: configPropType },

  getChildContext: function getChildContext() {
    return { config: this.props.config };
  },

  render: function render() {
    var reports = require('./reports-measurements/pilot-reports');

    var config = this.props.config;

    var ready = !_.isEmpty(config) && !_.isEmpty(config.reports) && !_.isEmpty(config.utility) && !_.isEmpty(config.overview);
    if (!ready) {
      return React.createElement(
        'div',
        null,
        'Loading configuration...'
      );
    }

    return React.createElement(
      'div',
      { className: 'reports-measurements reports pilot-reports' },
      React.createElement(reports.Form, null),
      React.createElement(reports.ReportsPanel, null)
    );
  }

}));

//
// Containers
//

Overview = ReactRedux.connect(function (state) {
  return { now: state.overview.referenceTime };
})(Overview);

//
// Export
//

module.exports = {
  MeasurementsReportPanel: MeasurementsReportPanel,
  SystemReportsSection: SystemReportsSection,
  Overview: Overview,
  PilotReports: PilotReports
};

},{"../prop-types":604,"./reports-measurements/overview":518,"./reports-measurements/pane":519,"./reports-measurements/pilot-reports":520,"./reports-system/data-transmission":524,"livereactload/babel-transform":28,"lodash":"lodash","moment":"moment","react":"react","react-redux":"react-redux"}],526:[function(require,module,exports){
'use strict';

var _react2 = require('react');

var _react3 = _interopRequireDefault(_react2);

var _babelTransform = require('livereactload/babel-transform');

var _babelTransform2 = _interopRequireDefault(_babelTransform);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _components = {
  _component: {}
};

var _livereactloadBabelTransform2 = (0, _babelTransform2.default)({
  filename: '/home/daiad/Desktop/Development/home-web/utility/src/main/frontend/components/section/Announcements.js',
  components: _components,
  locals: [],
  imports: [_react3.default]
});

function _wrapComponent(id) {
  return function (Component) {
    return _livereactloadBabelTransform2(Component, id);
  };
}

var React = require('react');
var Bootstrap = require('react-bootstrap');
var Table = require('../UserTable');
var Modal = require('../Modal');

var _require = require('react-intl'),
    FormattedMessage = _require.FormattedMessage,
    FormattedTime = _require.FormattedTime;

var DropDown = require('../DropDown');

var _require2 = require('react-redux'),
    connect = _require2.connect;

var _require3 = require('redux'),
    bindActionCreators = _require3.bindActionCreators;

var AnnouncementsActions = require('../../actions/AnnouncementsActions');
var self;

var Announcements = _wrapComponent('_component')(React.createClass({
  displayName: 'Announcements',

  contextTypes: {
    intl: React.PropTypes.object
  },

  componentWillMount: function componentWillMount() {
    this.props.getAnnouncementHistory();
    this.props.getCurrentUtilityUsers();
    this.props.fetchGroups();
  },

  setFilter: function setFilter(e) {
    this.props.setFilter(this.refs.filter.getValue());
  },

  clearFilter: function clearFilter(e) {
    this.props.setFilter('');
  },

  handleCurrentMembersCheckboxChange: function handleCurrentMembersCheckboxChange(rowId, row, checked) {
    this.props.toggleInitialUserSelected(this.props.accounts, rowId, checked);
  },

  handleAddedMembersCheckboxChange: function handleAddedMembersCheckboxChange(rowId, row, checked) {
    this.props.toggleAddedUserSelected(this.props.addedUsers, rowId, checked);
  },
  addUsersButtonClick: function addUsersButtonClick() {
    var addedAccounts = [];
    for (var obj in this.props.accounts) {

      for (var prop in this.props.accounts[obj]) {
        if (prop == "selected") {
          if (this.props.accounts[obj][prop] === true) {
            //id is the accountKey. If null the account is resolved from the username
            this.props.accounts[obj].id = null;
            addedAccounts.push(this.props.accounts[obj]);
          }
        }
      }
    }
    this.props.addUsers(addedAccounts);
  },

  removeUsersButtonClick: function removeUsersButtonClick() {
    var remainingAccounts = [];
    for (var obj in this.props.addedUsers) {
      for (var prop in this.props.addedUsers[obj]) {
        if (prop == "selected") {
          if (this.props.addedUsers[obj][prop] === false) {
            remainingAccounts.push(this.props.addedUsers[obj]);
          }
        }
      }
    }
    this.props.removeUsers(remainingAccounts);
  },

  render: function render() {
    var thisAnnouncements = this;
    self = this;
    var historyTable = {
      fields: [{
        name: 'id',
        title: 'Section.Engagement.Announcements.Table1.Id',
        hidden: true
      }, {
        name: 'title',
        title: 'Section.Engagement.Announcements.Table1.Title'
      }, {
        name: 'content',
        title: 'Section.Engagement.Announcements.Table1.Content'
      }, {
        name: 'createdOn',
        title: 'Section.Engagement.Announcements.Table1.DispatchedOn',
        type: 'datetime'
      }, {
        name: 'view',
        title: 'Section.Engagement.Announcements.Table1.Details',
        type: 'action',
        icon: 'group',
        handler: function handler() {
          self.props.showAnnouncementDetails(this.props.row);
        }
      }, {
        name: 'cancel',
        title: 'Section.Engagement.Announcements.Table1.Delete',
        type: 'action',
        icon: 'remove',
        handler: function handler() {
          self.props.setShowModal(this.props.row);
        }
      }],
      rows: this.props.announcements,
      pager: {
        index: 0,
        size: 3,
        count: this.props.announcements ? this.props.announcements.length : 0
      }
    };

    var filteredAccounts = [];
    if (this.props.accounts) {
      var records = this.props.accounts;
      for (var i = 0, count = records.length; i < count; i++) {
        if (!this.props.filter || records[i].username.indexOf(this.props.filter) !== -1) {
          filteredAccounts.push({
            id: records[i].id,
            username: records[i].username || '',
            lastName: records[i].lastName || '',
            selected: records[i].selected || false
          });
        }
      }
    }

    var currentUsersFields = {
      fields: [{
        name: 'accountId',
        title: 'Section.Engagement.Announcements.Table2.Id',
        hidden: true
      }, {
        name: 'lastName',
        title: 'Section.Engagement.Announcements.Table2.LastName'
      }, {
        name: 'username',
        title: 'Section.Engagement.Announcements.Table2.UserName'
      }, {
        name: 'all',
        title: 'Section.Engagement.Announcements.Table2.All'
      }, {
        name: 'selected',
        type: 'alterable-boolean',
        handler: function handler(field, row) {
          self.handleCurrentMembersCheckboxChange(field, row, this.checked);
        }
      }],
      rows: filteredAccounts,
      pager: {
        index: 0,
        size: 10,
        count: this.props.accounts ? this.props.accounts.length : 0
      }
    };

    var addedUsersFields = {
      fields: [{
        name: 'accountId',
        title: 'Section.Engagement.Announcements.Table3.Id',
        hidden: true
      }, {
        name: 'lastName',
        title: 'Section.Engagement.Announcements.Table3.LastName'
      }, {
        name: 'username',
        title: 'Section.Engagement.Announcements.Table3.UserName'
      }, {
        name: 'selected',
        type: 'boolean',
        handler: function handler(field, row) {
          self.handleAddedMembersCheckboxChange(field, row, this.checked);
        }
      }],
      rows: this.props.addedUsers,
      pager: {
        index: 0,
        size: 10,
        count: this.props.addedUsers ? this.props.addedUsers.length : 0
      }
    };

    var finalUsersFields = {
      fields: [{
        name: 'accountId',
        title: 'Section.Engagement.Announcements.Table4.Id',
        hidden: true
      }, {
        name: 'lastName',
        title: 'Section.Engagement.Announcements.Table4.LastName'
      }, {
        name: 'username',
        title: 'Section.Engagement.Announcements.Table4.UserName'
      }],
      rows: this.props.addedUsers,
      pager: {
        index: 0,
        size: 10,
        count: this.props.addedUsers ? this.props.addedUsers.length : 0
      }
    };

    var usersTitle = React.createElement(
      'span',
      null,
      React.createElement('i', { className: 'fa fa-calendar fa-fw' }),
      React.createElement(
        'span',
        { style: { paddingLeft: 4 } },
        'Users'
      ),
      React.createElement('span', { style: { float: 'right', marginTop: -3, marginLeft: 5 } })
    );

    var selectedUsersTitle = React.createElement(
      'span',
      null,
      React.createElement('i', { className: 'fa fa-calendar fa-fw' }),
      React.createElement(
        'span',
        { style: { paddingLeft: 4 } },
        'Selected Users'
      ),
      React.createElement('span', { style: { float: 'right', marginTop: -3, marginLeft: 5 } })
    );

    var historyTitle = React.createElement(
      'span',
      null,
      React.createElement('i', { className: 'fa fa-calendar fa-fw' }),
      React.createElement(
        'span',
        { style: { paddingLeft: 4 } },
        'History'
      ),
      React.createElement('span', { style: { float: 'right', marginTop: -3, marginLeft: 5 } })
    );

    var filter = React.createElement(
      'div',
      { className: 'col-md-12' },
      React.createElement(Bootstrap.Input, { type: 'text',
        id: 'filter', name: 'filter', ref: 'filter',
        placeholder: 'Search users by username ...',
        onChange: this.setFilter,
        value: this.props.filter,
        buttonAfter: React.createElement(
          Bootstrap.Button,
          { onClick: this.clearFilter, style: { paddingTop: 7, paddingBottom: 7 } },
          React.createElement('i', { className: 'fa fa-trash fa-fw' })
        )
      })
    );

    var groupOptions = [];
    groupOptions.push({ id: null, label: 'Everyone' });
    if (this.props.groups) {
      for (var obj in this.props.groups) {
        groupOptions.push({ value: this.props.groups[obj].id, label: this.props.groups[obj].name });
      }
    }

    var groupDisabled;
    var groupTitle;
    if (groupOptions.length === 1) {
      groupTitle = 'No groups available';
      groupDisabled = true;
    } else {
      groupTitle = 'Everyone';
      groupDisabled = false;
    }
    var groupDropDown = React.createElement(
      'div',
      { className: 'form-horizontal report-form' },
      React.createElement(
        'div',
        { className: 'col-sm-1 control-label' },
        React.createElement(
          'label',
          null,
          'Group:'
        )
      ),
      React.createElement(
        'div',
        { className: 'col-sm-9', style: { marginLeft: 8, marginBottom: 10 } },
        React.createElement(DropDown, {
          title: this.props.group ? this.props.group.label : groupTitle,
          options: groupOptions,
          disabled: groupDisabled,
          onSelect: this.props.setGroup
        })
      )
    );
    var usersTable = React.createElement(
      'div',
      null,
      React.createElement(Table, { data: currentUsersFields, setSelectedAll: this.props.setSelectedAll, allChecked: thisAnnouncements.props.checked })
    );

    var addedUsersTable = React.createElement(
      'div',
      null,
      React.createElement(Table, { data: addedUsersFields, setSelectedAll: this.props.setSelectedAll })
    );

    var finalUsersTable = React.createElement(
      'div',
      null,
      React.createElement(Table, { data: finalUsersFields })
    );

    var announcementForm = React.createElement(
      'div',
      null,
      React.createElement(
        Bootstrap.Row,
        null,
        React.createElement(
          Bootstrap.Col,
          { xs: 6 },
          React.createElement(
            'label',
            null,
            'Title'
          ),
          React.createElement('textarea', { name: 'title',
            rows: '1', cols: '120',
            ref: 'title',
            defaultValue: ""
          })
        )
      ),
      React.createElement(
        Bootstrap.Row,
        null,
        React.createElement(
          Bootstrap.Col,
          { xs: 6 },
          React.createElement(
            'label',
            null,
            'Content'
          ),
          React.createElement('textarea', { name: 'content',
            rows: '3', cols: '120',
            ref: 'content',
            defaultValue: ""
          })
        )
      ),
      React.createElement(
        Bootstrap.Row,
        null,
        React.createElement(
          Bootstrap.Col,
          { xs: 6 },
          React.createElement(
            'div',
            null,
            React.createElement(
              'button',
              { id: 'add',
                label: 'Add',
                type: 'submit',
                className: 'btn btn-primary',
                onClick: this.props.broadcastAnnouncement,
                style: { height: 33 } },
              React.createElement(FormattedMessage, { id: 'Section.Engagement.Announcements.Button.Broadcast' })
            ),
            React.createElement(
              'button',
              { id: 'cancel',
                label: 'Cancel',
                type: 'cancel',
                className: 'btn btn-primary',
                onClick: this.props.cancelShowForm,
                style: { height: 33, marginLeft: 10 } },
              React.createElement(FormattedMessage, { id: 'Section.Engagement.Announcements.Button.Cancel' })
            )
          )
        )
      )
    );

    if (this.props.showForm) {
      return React.createElement(
        'div',
        { className: 'container-fluid', style: { paddingTop: 10 } },
        React.createElement(
          'div',
          { className: 'row' },
          React.createElement(
            Bootstrap.Panel,
            { header: selectedUsersTitle },
            React.createElement(
              Bootstrap.ListGroup,
              { fill: true },
              React.createElement(
                Bootstrap.ListGroupItem,
                null,
                finalUsersTable
              )
            )
          )
        ),
        React.createElement(
          'div',
          { className: 'row' },
          announcementForm
        )
      );
    }

    if (this.props.showModal) {
      var title = 'Delete Announcement?';
      var actions = [{
        action: self.props.hideModal,
        name: "Cancel"
      }, {
        action: this.props.confirmDeleteAnnouncement,
        name: "Delete",
        style: 'danger'
      }];
      return React.createElement(
        'div',
        null,
        React.createElement(Modal, { show: this.props.showModal,
          onClose: this.props.hideModal,
          title: title,
          text: 'You are about to delete the announcement with title "' + this.props.announcement.title + '". This announcement will not be visible to users anymore. Are you sure?',
          actions: actions
        })
      );
    }

    if (this.props.showAnnouncementDetailsTable) {

      var receiversFields = {
        fields: [{
          name: 'accountId',
          title: 'id',
          hidden: true
        }, {
          name: 'fullName',
          title: 'Name'
        }, {
          name: 'username',
          title: 'Username'
        }, {
          name: 'acknowledgedOn',
          title: 'Acknowledged On',
          type: 'datetime'
        }],
        rows: this.props.receivers,
        pager: {
          index: 0,
          size: 10,
          count: this.props.receivers ? this.props.receivers.length : 0
        }
      };

      var receiversTitle = React.createElement(
        'span',
        null,
        React.createElement('i', { className: 'fa fa-calendar fa-fw' }),
        React.createElement(
          'span',
          { style: { paddingLeft: 4 } },
          'Users that received this announcement'
        ),
        React.createElement('span', { style: { float: 'right', marginTop: -3, marginLeft: 5 } })
      );

      var announcementTitle = React.createElement(
        'span',
        null,
        React.createElement('i', { className: 'fa fa-calendar fa-fw' }),
        React.createElement(
          'span',
          { style: { paddingLeft: 4 } },
          'Announcement Info'
        ),
        React.createElement('span', { style: { float: 'right', marginTop: -3, marginLeft: 5 } })
      );
      var receiversTable = React.createElement(
        'div',
        null,
        React.createElement(Table, { data: receiversFields })
      );

      var announcementInfo = React.createElement(
        'div',
        null,
        React.createElement(
          Bootstrap.Row,
          null,
          React.createElement(
            Bootstrap.Col,
            { xs: 6 },
            React.createElement(
              'label',
              null,
              'Title:'
            )
          ),
          React.createElement(
            Bootstrap.Col,
            { xs: 6 },
            React.createElement(
              'div',
              { style: { fontSize: 16 } },
              React.createElement(
                'label',
                null,
                this.props.announcement.title
              )
            )
          )
        ),
        React.createElement(
          Bootstrap.Row,
          null,
          React.createElement(
            Bootstrap.Col,
            { xs: 6 },
            React.createElement(
              'label',
              null,
              'Content:'
            )
          ),
          React.createElement(
            Bootstrap.Col,
            { xs: 6 },
            React.createElement(
              'div',
              { style: { fontSize: 16 } },
              React.createElement(
                'label',
                null,
                this.props.announcement.content
              )
            )
          )
        ),
        React.createElement(
          Bootstrap.Row,
          null,
          React.createElement(
            Bootstrap.Col,
            { xs: 6 },
            React.createElement(
              'label',
              null,
              'Dispatched On:'
            )
          ),
          React.createElement(
            Bootstrap.Col,
            { xs: 6 },
            React.createElement(
              'div',
              { style: { fontSize: 16 } },
              React.createElement(
                'label',
                null,
                React.createElement(FormattedTime, { value: this.props.announcement.createdOn,
                  day: 'numeric',
                  month: 'numeric',
                  year: 'numeric',
                  hour: 'numeric',
                  minute: 'numeric'
                })
              )
            )
          )
        )
      );

      return React.createElement(
        'div',
        { className: 'container-fluid', style: { paddingTop: 10 } },
        React.createElement(
          'div',
          { className: 'row' },
          React.createElement(
            Bootstrap.Panel,
            { header: announcementTitle },
            React.createElement(
              Bootstrap.ListGroup,
              { fill: true },
              React.createElement(
                Bootstrap.ListGroupItem,
                null,
                announcementInfo
              )
            )
          )
        ),
        React.createElement(
          'div',
          { className: 'row' },
          React.createElement(
            Bootstrap.Panel,
            { header: receiversTitle },
            React.createElement(
              Bootstrap.ListGroup,
              { fill: true },
              React.createElement(
                Bootstrap.ListGroupItem,
                null,
                receiversTable
              )
            )
          )
        ),
        React.createElement(
          'div',
          { className: 'row' },
          React.createElement(
            Bootstrap.Button,
            {
              onClick: this.props.goBack },
            'Back'
          )
        )
      );
    }

    if (this.props.groups && this.props.accounts && this.props.announcements && !this.props.isLoading) {
      return React.createElement(
        'div',
        { className: 'container-fluid', style: { paddingTop: 10 } },
        React.createElement(
          'div',
          { className: 'row' },
          React.createElement(
            'div',
            { className: 'col-md-5 equal-height-col' },
            React.createElement(
              Bootstrap.Panel,
              { header: usersTitle },
              React.createElement(
                Bootstrap.ListGroup,
                { fill: true },
                React.createElement(
                  Bootstrap.ListGroupItem,
                  null,
                  groupDropDown,
                  filter,
                  usersTable
                )
              )
            )
          ),
          React.createElement(
            'div',
            { className: 'col-md-2 equal-height-col' },
            React.createElement(
              'div',
              { className: 'div-centered', style: { marginTop: 120 } },
              React.createElement(
                'div',
                null,
                React.createElement(
                  Bootstrap.Button,
                  { onClick: this.addUsersButtonClick },
                  '>>>'
                )
              ),
              React.createElement('br', null),
              React.createElement(
                'div',
                null,
                React.createElement(
                  'div',
                  null,
                  React.createElement(
                    Bootstrap.Button,
                    { onClick: this.removeUsersButtonClick },
                    '<<<'
                  )
                )
              )
            )
          ),
          React.createElement(
            'div',
            { className: 'col-md-5 equal-height-col' },
            React.createElement(
              Bootstrap.Panel,
              { header: selectedUsersTitle },
              React.createElement(
                Bootstrap.ListGroup,
                { fill: true },
                React.createElement(
                  Bootstrap.ListGroupItem,
                  null,
                  addedUsersTable,
                  React.createElement(
                    'div',
                    null,
                    React.createElement(
                      Bootstrap.Button,
                      { disabled: this.props.addedUsers.length === 0, onClick: this.props.setShowForm },
                      'Form Announcement'
                    )
                  )
                )
              )
            )
          )
        ),
        React.createElement(
          'div',
          null,
          React.createElement(
            'div',
            { className: 'row' },
            React.createElement(
              'div',
              { className: 'col-md-12' },
              React.createElement(
                Bootstrap.Panel,
                { header: historyTitle },
                React.createElement(
                  Bootstrap.ListGroup,
                  { fill: true },
                  React.createElement(
                    Bootstrap.ListGroupItem,
                    null,
                    React.createElement(Table, { data: historyTable })
                  )
                )
              )
            )
          )
        )
      );
    } else {
      return React.createElement(
        'div',
        null,
        React.createElement('img', { className: 'preloader', src: '/assets/images/utility/preloader-counterclock.png' }),
        React.createElement('img', { className: 'preloader-inner', src: '/assets/images/utility/preloader-clockwise.png' })
      );
    }
  }
}));

function mapStateToProps(state) {
  return {
    accounts: state.announcements.accounts,
    announcements: state.announcements.announcements,
    initialUsers: state.announcements.initialUsers,
    addedUsers: state.announcements.addedUsers,
    rowIdToggled: state.announcements.rowIdToggled,
    showForm: state.announcements.showForm,
    filter: state.announcements.filter,
    groups: state.announcements.groups,
    group: state.announcements.group,
    checked: state.announcements.checked,
    showModal: state.announcements.showModal,
    announcement: state.announcements.announcement,
    showAnnouncementDetailsTable: state.announcements.showAnnouncementDetailsTable,
    receivers: state.announcements.receivers
  };
}

function mapDispatchToProps(dispatch) {
  return {
    fetchGroups: bindActionCreators(AnnouncementsActions.fetchGroups, dispatch),
    setGroup: function setGroup(event, group) {
      dispatch(AnnouncementsActions.setGroup(event, group));
      if (group.label == 'Everyone') {
        self.props.getCurrentUtilityUsers();
      } else {
        dispatch(AnnouncementsActions.getGroupUsers(group.value));
      }
    },
    getCurrentUtilityUsers: bindActionCreators(AnnouncementsActions.getCurrentUtilityUsers, dispatch),
    getAnnouncementHistory: bindActionCreators(AnnouncementsActions.getAnnouncementHistory, dispatch),
    toggleInitialUserSelected: function toggleInitialUserSelected(accounts, accountId, selected) {
      dispatch(AnnouncementsActions.setSelectedUser(accounts, accountId, selected));
    },
    toggleAddedUserSelected: function toggleAddedUserSelected(addedUsers, accountId, selected) {
      dispatch(AnnouncementsActions.setSelectedAddedUser(addedUsers, accountId, selected));
    },
    addUsers: bindActionCreators(AnnouncementsActions.addUsers, dispatch),
    removeUsers: bindActionCreators(AnnouncementsActions.removeUsers, dispatch),
    setShowForm: bindActionCreators(AnnouncementsActions.showForm, dispatch),
    cancelShowForm: bindActionCreators(AnnouncementsActions.cancelShowForm, dispatch),
    broadcastAnnouncement: function broadcastAnnouncement() {
      var announcement = { title: self.refs.title.value, content: self.refs.content.value };
      dispatch(AnnouncementsActions.broadCastAnnouncement(event, self.props.addedUsers, announcement));
    },
    setFilter: bindActionCreators(AnnouncementsActions.setFilter, dispatch),
    setSelectedAll: function setSelectedAll(event, selected) {
      dispatch(AnnouncementsActions.setSelectedAll(event, selected));
    },
    setShowModal: bindActionCreators(AnnouncementsActions.showModal, dispatch),
    hideModal: bindActionCreators(AnnouncementsActions.hideModal, dispatch),
    confirmDeleteAnnouncement: bindActionCreators(AnnouncementsActions.deleteAnnouncement, dispatch),
    showAnnouncementDetails: function showAnnouncementDetails(announcement) {
      dispatch(AnnouncementsActions.showAnnouncementDetails(event, announcement));
    },
    goBack: bindActionCreators(AnnouncementsActions.goBack, dispatch)
  };
}

Announcements.icon = 'wechat';
Announcements.title = 'Section.Messages.Announcements.Title';
module.exports = connect(mapStateToProps, mapDispatchToProps)(Announcements);

},{"../../actions/AnnouncementsActions":429,"../DropDown":487,"../Modal":498,"../UserTable":507,"livereactload/babel-transform":28,"react":"react","react-bootstrap":"react-bootstrap","react-intl":"react-intl","react-redux":"react-redux","redux":"redux"}],527:[function(require,module,exports){
'use strict';

var _react2 = require('react');

var _react3 = _interopRequireDefault(_react2);

var _babelTransform = require('livereactload/babel-transform');

var _babelTransform2 = _interopRequireDefault(_babelTransform);

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

var _components = {
  _component: {}
};

var _livereactloadBabelTransform2 = (0, _babelTransform2.default)({
  filename: '/home/daiad/Desktop/Development/home-web/utility/src/main/frontend/components/section/Dashboard.js',
  components: _components,
  locals: [],
  imports: [_react3.default]
});

function _wrapComponent(id) {
  return function (Component) {
    return _livereactloadBabelTransform2(Component, id);
  };
}

var React = require('react');

var _require = require('redux'),
    bindActionCreators = _require.bindActionCreators;

var _require2 = require('react-redux'),
    connect = _require2.connect;

var Bootstrap = require('react-bootstrap');

var _require3 = require('react-router'),
    Link = _require3.Link;

var Counter = require('../Counter');

var Chart = require('../reports-measurements/chart');

var _require4 = require('../../prop-types'),
    configPropType = _require4.configPropType;

var moment = require('moment');
var FilterTag = require('../chart/dimension/FilterTag');
var Timeline = require('../Timeline');

var _require5 = require('react-intl'),
    FormattedTime = _require5.FormattedTime;

var _require6 = require('react-leaflet-wrapper'),
    Map = _require6.Map,
    TileLayer = _require6.TileLayer,
    GeoJSON = _require6.GeoJSON,
    Choropleth = _require6.Choropleth,
    InfoControl = _require6.InfoControl;

var WidthProvider = require('react-grid-layout').WidthProvider;
var ResponsiveReactGridLayout = require('react-grid-layout').Responsive;
//var Maximizable = require('../Maximizable');

var _require7 = require('../../actions/DashboardActions'),
    getFeatures = _require7.getFeatures,
    getCounters = _require7.getCounters,
    getProfileLayout = _require7.getProfileLayout,
    fetchFavouriteQueries = _require7.fetchFavouriteQueries,
    saveLayout = _require7.saveLayout,
    unpin = _require7.unpin;

var _require8 = require('../../actions/MapActions'),
    getMetersLocations = _require8.getMetersLocations;

ResponsiveReactGridLayout = WidthProvider(ResponsiveReactGridLayout);
//Chart = Maximizable(Chart);

var defaultChartTitle = "Last 30 Days Average Consumption";
var defaultMapTitle = "Last 30 Days Consumption";

var getDefaultChart = function getDefaultChart(props) {
  var defaultChart = {
    id: 100000,
    title: defaultChartTitle,
    type: "CHART",
    tags: "Chart - Meter",
    reportName: "avg",
    level: "day",
    field: "volume",
    queries: [{
      time: {
        type: "ABSOLUTE",
        granularity: "DAY",
        start: moment().subtract(30, 'day').valueOf(),
        end: moment().valueOf(),
        durationTimeUnit: "HOUR"
      },
      population: [{
        type: "UTILITY",
        label: "UTILITY:" + props.profile.utility.key,
        ranking: null,
        utility: props.profile.utility.key
      }],
      source: "METER",
      metrics: ["AVERAGE"]
    }]
  };
  return defaultChart;
};

var getDefaultMap = function getDefaultMap(props) {
  var defaultMap = {
    id: 100001,
    title: defaultMapTitle,
    type: "MAP",
    tags: "Map - Meter",
    queries: [{
      time: {
        type: "ABSOLUTE",
        granularity: "DAY",
        start: moment().subtract(350, 'day').valueOf(),
        end: moment().valueOf(),
        durationTimeUnit: "HOUR"
      },
      population: [{
        type: "UTILITY",
        label: "Utility",
        ranking: null,
        utility: props.profile.utility.key
      }],
      source: "METER",
      metrics: ["SUM"]
    }]
  };
  return defaultMap;
};

var _getTimelineValues = function _getTimelineValues(timeline) {
  if (timeline) {
    return timeline.getTimestamps();
  }
  return [];
};

var _getTimelineLabels = function _getTimelineLabels(timeline) {
  if (timeline) {
    return timeline.getTimestamps().map(function (timestamp) {
      return React.createElement(FormattedTime, {
        value: new Date(timestamp),
        day: 'numeric',
        month: 'numeric',
        year: 'numeric' });
    });
  }
  return [];
};

var _onChangeTimeline = function _onChangeTimeline(title, id, value, label, index) {
  this.props.actions.getFeatures(index, value, null, id);
};

var Dashboard = _wrapComponent('_component')(React.createClass({
  displayName: 'Dashboard',


  _disabledActionHandler: function _disabledActionHandler(e) {
    e.stopPropagation();
    e.preventDefault();
  },

  contextTypes: {
    intl: React.PropTypes.object,
    config: configPropType
  },

  componentWillMount: function componentWillMount() {
    this.props.actions.getProfileLayout();
    //fetch meter geojson data
    if (!this.props.metersLocations) {
      this.props.actions.getMetersLocations();
    }
  },
  componentDidMount: function componentDidMount() {

    this.props.actions.fetchFavouriteQueries(this.props);
    this.props.actions.getCounters();
  },

  toggleSize: function toggleSize() {
    //console.log(this);
  },

  _unpin: function _unpin(fav, e) {
    var request = {
      'namedQuery': fav
    };
    this.props.actions.unpin(request, this.props);
  },

  _resolveMapCenter: function _resolveMapCenter() {
    var center = this.props.profile.utility.center;
    return center ? center.coordinates.reverse() : [38.36, -0.479];
  },

  createChartComponents: function createChartComponents(pinnedCharts) {

    var props = this.props;
    var defaults = {
      chartProps: {
        width: 450,
        height: 450
      }
    };

    var chPanels = [];
    pinnedCharts.push(getDefaultChart(this.props));

    for (var i = 0; i < pinnedCharts.length; i++) {

      var pCharts = props.chart.length > 0 ? props.chart.filter(function (propChart) {
        return propChart.id === pinnedCharts[i].id;
      }) : [];

      var pChart = pCharts[0];

      if (!pChart) {
        return [];
      }

      var unpinButton = pChart.id === 100000 ? null : React.createElement(
        Bootstrap.Button,
        {
          bsStyle: 'default',
          className: 'btn-circle',
          onClick: this._unpin.bind(this, pChart),
          type: 'button'
        },
        React.createElement('i', { className: 'fa fa-remove fa-fw' })
      );
      //maximize button
      //        <span style={{float: 'right',  marginTop: -3, marginLeft: 5 }}>
      //          <Bootstrap.Button  
      //            bsStyle='default' 
      //            className='btn-circle'
      //            onClick={this.toggleSize}
      //            >
      //            <i className='fa fa-arrows-alt fa-fw'></i>
      //          </Bootstrap.Button>
      //        </span>     
      var chartTitle = React.createElement(
        'span',
        null,
        React.createElement('i', { key: pChart.title, className: 'fa fa-bar-chart fa-fw' }),
        React.createElement(
          'span',
          { style: { paddingLeft: 4 } },
          pChart.title
        ),
        React.createElement(
          'span',
          { style: { float: 'right', marginTop: -3, marginLeft: 5 } },
          unpinButton
        )
      );

      //todo - in case of overlaping query, define way of showing interval
      var intervalLabel = ' ... ';
      if (pChart.data) {
        var start = moment(pChart.data[0].timespan[0]).format('DD/MM/YYYY');
        var end = moment(pChart.data[0].timespan[1]).format('DD/MM/YYYY');
        intervalLabel = start + ' - ' + end;
        if (start === end) {
          intervalLabel = start;
        }
      }

      var chartFilterTags = [];
      chartFilterTags.push(React.createElement(FilterTag, { key: 'time', text: intervalLabel, icon: 'calendar' }));
      chartFilterTags.push(React.createElement(FilterTag, { key: 'source', text: pChart.data ? pChart.data[0].source : ' ... ', icon: 'database' }));

      var overlap, overlapping;
      if (pinnedCharts[i].overlap) {
        overlap = { value: pinnedCharts[i].overlap, label: pinnedCharts[i].overlap };
        overlapping = true;
      } else {
        overlap = null;
        overlapping = false;
      }

      var chart = React.createElement(Chart, _extends({}, defaults.chartProps, {
        width: this.chartEl && this.chartEl.clientWidth || '100%',
        draw: pChart.draw,
        field: 'volume',
        level: pinnedCharts[i].level,
        reportName: pinnedCharts[i].reportName,
        finished: pChart.finished,
        series: pChart.data,
        context: props.config,
        scaleTimeAxis: false,
        overlapping: overlapping,
        overlap: overlap
      }));
      var link = React.createElement(
        Link,
        { className: 'pull-right', to: '/analytics/panel', style: { paddingLeft: 7, paddingTop: 12 } },
        'View Chart Analytics'
      );
      var chartPanel = React.createElement(
        Bootstrap.Panel,
        { header: chartTitle },
        React.createElement(
          Bootstrap.ListGroup,
          { fill: true },
          React.createElement(
            Bootstrap.ListGroupItem,
            { className: 'report-chart-wrapper' },
            chart
          ),
          React.createElement(
            Bootstrap.ListGroupItem,
            { className: 'clearfix' },
            React.createElement(
              'div',
              { className: 'pull-left' },
              chartFilterTags
            ),
            React.createElement(
              'span',
              { style: { paddingLeft: 7 } },
              ' '
            ),
            link
          )
        )
      );
      var cPanelWithKey = { panel: chartPanel, key: pChart.title };
      chPanels.push(cPanelWithKey);
    }

    return chPanels;
  },

  createMapComponents: function createMapComponents(pinnedMaps) {

    var props = this.props;
    var mPanels = [];
    pinnedMaps.push(getDefaultMap(this.props));
    for (var i = 0; i < pinnedMaps.length; i++) {

      //todo - merge returned pMap with its corresponding pinned object 
      //to keep info about timespan and source for the tags
      var pMaps = props.map.length > 0 ? props.map.filter(function (propMap) {
        return propMap.id === pinnedMaps[i].id;
      }) : [];

      var pMap = pMaps[0];

      if (!pMap) {
        return [];
      }

      var unpinButton = pMap.id === 100001 ? null : React.createElement(
        Bootstrap.Button,
        {
          bsStyle: 'default',
          className: 'btn-circle',
          onClick: this._unpin.bind(this, pMap),
          type: 'button'
        },
        React.createElement('i', { className: 'fa fa-remove fa-fw' })
      );

      var mapTitle = React.createElement(
        'span',
        null,
        React.createElement('i', { className: 'fa fa-map fa-fw' }),
        React.createElement(
          'span',
          { style: { paddingLeft: 4 } },
          pMap ? pMap.title : 'Loading...'
        ),
        React.createElement(
          'span',
          { style: { float: 'right', marginTop: -3, marginLeft: 5 } },
          unpinButton
        )
      );

      var intervalLabel = '';
      if (props.interval) {
        var start = moment(pinnedMaps[i].queries[0].time.start).format('DD/MM/YYYY');
        var end = moment(pinnedMaps[i].queries[0].time.end).format('DD/MM/YYYY');
        intervalLabel = start + ' - ' + end;
        if (start === end) {
          intervalLabel = start;
        }
      }

      var mapFilterTags = [];
      mapFilterTags.push(React.createElement(FilterTag, { key: 'time', text: intervalLabel, icon: 'calendar' }));

      mapFilterTags.push(React.createElement(FilterTag, { key: 'spatial', text: 'Alicante', icon: 'map' }));

      mapFilterTags.push(React.createElement(FilterTag, { key: 'source', text: 'Meter', icon: 'database' }));

      var link = React.createElement(
        Link,
        { className: 'pull-right', to: 'analytics/map', style: { paddingLeft: 7, paddingTop: 12 } },
        'View Map Analytics'
      );

      var timelineMin = pMap && pMap.timeline && pMap.timeline.min || 0;
      var timelineMax = pMap && pMap.timeline && pMap.timeline.max || 0;

      var timelineLabels = _getTimelineLabels(pMap.timeline);
      var timelineValues = _getTimelineValues(pMap.timeline);

      var timeline = timelineLabels.length > 0 ? React.createElement(Timeline, {
        onChange: _onChangeTimeline.bind(this, pMap.title, pMap.id),
        labels: pMap ? timelineLabels : [],
        values: pMap ? timelineValues : [],
        defaultIndex: pMap ? pMap.index : 0,
        speed: 1000,
        animate: false
      }) : null;

      var map = React.createElement(
        Bootstrap.ListGroup,
        { fill: true },
        React.createElement(
          Bootstrap.ListGroupItem,
          null,
          React.createElement(
            Map,
            {
              center: this._resolveMapCenter(),
              zoom: 13,
              width: '100%',
              height: 400
            },
            React.createElement(TileLayer, null),
            React.createElement(
              InfoControl,
              { position: 'topright' },
              React.createElement(Choropleth, {
                name: 'Areas',
                data: pMap ? pMap.features : null,
                legend: timelineMax === 0 ? null : 'bottomright',
                valueProperty: 'value',
                scale: ['white', 'red'],
                limits: [timelineMin, timelineMax],
                steps: 6,
                mode: 'e',
                infoContent: function infoContent(feature) {
                  return feature ? React.createElement(
                    'div',
                    null,
                    React.createElement(
                      'h5',
                      null,
                      feature.properties.label
                    ),
                    React.createElement(
                      'span',
                      null,
                      feature.properties.value
                    )
                  ) : React.createElement(
                    'div',
                    null,
                    React.createElement(
                      'h5',
                      null,
                      'Hover over an area...'
                    )
                  );
                },
                highlightStyle: { weight: 4 },
                style: {
                  fillColor: "#ffff00",
                  color: "#000",
                  weight: 3,
                  opacity: 1,
                  fillOpacity: 0.5
                }
              })
            ),
            React.createElement(GeoJSON, {
              name: 'Meters',
              data: this.props.metersLocations,
              popupContent: function popupContent(feature) {
                return React.createElement(
                  'div',
                  null,
                  React.createElement(
                    'h5',
                    null,
                    'Serial:'
                  ),
                  React.createElement(
                    'h5',
                    null,
                    feature.properties.serial
                  )
                );
              },
              circleMarkers: true,
              style: {
                radius: 8,
                fillColor: "#ff7800",
                color: "#000",
                weight: 1,
                opacity: 1,
                fillOpacity: 0.8
              }
            })
          )
        ),
        React.createElement(
          Bootstrap.ListGroupItem,
          null,
          timeline
        ),
        React.createElement(
          Bootstrap.ListGroupItem,
          { className: 'clearfix' },
          React.createElement(
            'div',
            { className: 'pull-left' },
            mapFilterTags
          ),
          React.createElement(
            'span',
            { style: { paddingLeft: 7 } },
            ' '
          ),
          link
        )
      );

      var mapPanel = React.createElement(
        Bootstrap.Panel,
        { header: mapTitle },
        map
      );

      var mPanelWithKey = { panel: mapPanel, key: pinnedMaps[i].title };
      mPanels.push(mPanelWithKey);
    }

    return mPanels;
  },

  createForecastComponents: function createForecastComponents(pinnedForecasts) {

    var props = this.props;
    var defaults = {
      chartProps: {
        width: 450,
        height: 450
      }
    };

    var forPanels = [];

    for (var i = 0; i < pinnedForecasts.length; i++) {
      var pCharts = props.chart.length > 0 ? props.chart.filter(function (propChart) {
        return propChart.id === pinnedForecasts[i].id;
      }) : [];

      var pChart = pCharts[0];

      if (!pChart) {
        return [];
      }

      var unpinButton = pChart.id === 100000 ? null : React.createElement(
        Bootstrap.Button,
        {
          bsStyle: 'default',
          className: 'btn-circle',
          onClick: this._unpin.bind(this, pChart),
          type: 'button'
        },
        React.createElement('i', { className: 'fa fa-remove fa-fw' })
      );
      var chartTitle = React.createElement(
        'span',
        null,
        React.createElement('i', { key: pChart.title, className: 'fa fa-bar-chart fa-fw' }),
        React.createElement(
          'span',
          { style: { paddingLeft: 4 } },
          pChart.title
        ),
        React.createElement(
          'span',
          { style: { float: 'right', marginTop: -3, marginLeft: 5 } },
          unpinButton
        )
      );

      var intervalLabel = ' ... ';
      if (pChart.data) {
        var start = moment(pChart.data[0].timespan[0]).format('DD/MM/YYYY');
        var end = moment(pChart.data[0].timespan[1]).format('DD/MM/YYYY');
        intervalLabel = start + ' - ' + end;
        if (start === end) {
          intervalLabel = start;
        }
      }

      var chartFilterTags = [];
      chartFilterTags.push(React.createElement(FilterTag, { key: 'time', text: intervalLabel, icon: 'calendar' }));
      chartFilterTags.push(React.createElement(FilterTag, { key: 'source', text: pChart.data ? pChart.data[0].source : ' ... ', icon: 'database' }));

      var chart = React.createElement(Chart, _extends({}, defaults.chartProps, {
        width: this.chartEl && this.chartEl.clientWidth || '100%',
        draw: pChart.draw,
        field: 'volume',
        level: 'week',
        reportName: 'avg-daily-avg',
        finished: pChart.finished,
        series: pChart.data,
        context: props.config,
        scaleTimeAxis: false
      }));
      var link = React.createElement(
        Link,
        { className: 'pull-right', to: '/forecasting', style: { paddingLeft: 7, paddingTop: 12 } },
        'View Forecast'
      );
      var chartPanel = React.createElement(
        Bootstrap.Panel,
        { header: chartTitle },
        React.createElement(
          Bootstrap.ListGroup,
          { fill: true },
          React.createElement(
            Bootstrap.ListGroupItem,
            { className: 'report-chart-wrapper' },
            chart
          ),
          React.createElement(
            Bootstrap.ListGroupItem,
            { className: 'clearfix' },
            React.createElement(
              'div',
              { className: 'pull-left' },
              chartFilterTags
            ),
            React.createElement(
              'span',
              { style: { paddingLeft: 7 } },
              ' '
            ),
            link
          )
        )
      );
      var cPanelWithKey = { panel: chartPanel, key: pChart.title };
      forPanels.push(cPanelWithKey);
    }

    return forPanels;
  },

  render: function render() {
    var _this = this;

    if (this.props.isLoading) {
      return React.createElement(
        'div',
        null,
        React.createElement('img', { className: 'preloader', src: '/assets/images/utility/preloader-counterclock.png' }),
        React.createElement('img', { className: 'preloader-inner', src: '/assets/images/utility/preloader-clockwise.png' })
      );
    }
    if (!this.props.savedLayout) {
      return React.createElement(
        'div',
        null,
        ' Loading... '
      );
    }

    var pinnedComponents, pinnedCharts, pinnedMaps, pinnedForecasts, divCharts, divMaps, divForecasts;

    if (this.props.favourites) {
      pinnedComponents = this.props.favourites.filter(function (fav) {
        return fav.pinned === true;
      });

      pinnedCharts = pinnedComponents.filter(function (fav) {
        return fav.type === "CHART";
      });
      pinnedMaps = pinnedComponents.filter(function (fav) {
        return fav.type === "MAP";
      });
      pinnedForecasts = pinnedComponents.filter(function (fav) {
        return fav.type === "FORECAST";
      });

      divCharts = this.createChartComponents(pinnedCharts);
      divMaps = this.createMapComponents(pinnedMaps);
      divForecasts = this.createForecastComponents(pinnedForecasts);
    }

    var counters = this.props.counters;

    var counterComponents = React.createElement(
      'div',
      { className: 'row' },
      React.createElement(
        'div',
        { className: 'col-md-4' },
        React.createElement(
          'div',
          { style: { marginBottom: 20 } },
          React.createElement(Counter, { text: 'Counter.Users',
            value: counters && counters.user ? counters.user.value : null,
            variance: counters && counters.user ? counters.user.difference : null, link: '/users' })
        )
      ),
      React.createElement(
        'div',
        { className: 'col-md-4' },
        React.createElement(
          'div',
          { style: { marginBottom: 20 } },
          React.createElement(Counter, { text: 'Counter.Meters',
            value: counters && counters.meter ? counters.meter.value : null,
            variance: counters && counters.meter ? counters.meter.difference : null, color: '#1abc9c', link: '/users' })
        )
      ),
      React.createElement(
        'div',
        { className: 'col-md-4' },
        React.createElement(
          'div',
          { style: { marginBottom: 20 } },
          React.createElement(Counter, { text: 'Counter.Devices',
            value: counters && counters.amphiro ? counters.amphiro.value : null,
            variance: counters && counters.amphiro ? counters.amphiro.difference : null, color: '#27ae60', link: '/users' })
        )
      )
    );

    var onLayoutChange = function onLayoutChange(e) {

      if (!this.props.isLoading && this.props.savedLayout) {
        //compare previous with current layouts and prevent from saving
        if (JSON.stringify(e) !== JSON.stringify(this.props.savedLayout)) {
          var stillLoading = e.find(function (l) {
            return l.w === 1;
          });
          if (stillLoading) {
            //onLayout is getting triggered when rendering the components. do nothing
            return;
          }
          var layoutString = JSON.stringify({ "layout": e });
          var layoutRequest = { "configuration": layoutString };
          this.props.actions.saveLayout(layoutRequest);
        }
      }
    };

    var onBreakpointChange = function onBreakpointChange(e) {
      //console.log('onBreakpointChange');
      //console.log(e);
    };

    var onResizeStop = function onResizeStop(e) {
      //console.log('onResizeStop');
      //console.log(e);
    };

    var onDragStop = function onDragStop(e) {};

    var chartComponents = divCharts ? divCharts : [];
    var mapComponents = divMaps ? divMaps : [];
    var forecastComponents = divForecasts ? divForecasts : [];

    var lCharts = chartComponents ? chartComponents.map(function (chart) {
      return React.createElement(
        'div',
        {
          key: chart.key,
          ref: function ref(el) {
            _this.chartEl = el;
          },
          className: 'draggable'
        },
        chart.panel
      );
    }) : null;

    var lMaps = mapComponents ? mapComponents.map(function (map) {
      return React.createElement(
        'div',
        { key: map.key, className: 'draggable' },
        map.panel
      );
    }) : null;

    var lForecasts = forecastComponents ? forecastComponents.map(function (forecast) {
      return React.createElement(
        'div',
        { key: forecast.key, className: 'draggable' },
        forecast.panel
      );
    }) : null;

    var components = [].concat(_toConsumableArray(lCharts), _toConsumableArray(lMaps), _toConsumableArray(lForecasts));
    if (components.length !== this.props.savedLayout.length) {
      return React.createElement(
        'div',
        null,
        'Loading...'
      );
    }

    return React.createElement(
      'div',
      { className: 'container-fluid', style: { paddingTop: 10 } },
      counterComponents,
      React.createElement(
        'div',
        { className: 'row' },
        React.createElement(
          ResponsiveReactGridLayout,
          {
            className: 'clearfix',
            rowHeight: 600,
            onLayoutChange: onLayoutChange.bind(this),
            onBreakpointChange: onBreakpointChange.bind(this),
            onResizeStop: onResizeStop.bind(this),
            onDragStop: onDragStop.bind(this),
            layouts: { lg: this.props.savedLayout, md: this.props.savedLayout, sm: this.props.savedLayout },
            breakpoints: { lg: 2160, md: 1080, sm: 720, xs: 480, xxs: 200 } //lg: 1080, md: 650, sm: 200
            , cols: { lg: 24, md: 20, sm: 16, xs: 12, xxs: 8 } //lg: 16, md: 12, sm: 8, xs: 6, xxs: 4
            , autoSize: true,
            verticalCompact: true,
            isResizable: false,
            measureBeforeMount: true,
            draggableHandle: '.panel-heading',
            draggable: true
          },
          components
        )
      )
    );
  }
}));

Dashboard.icon = 'dashboard';
Dashboard.title = 'Section.Dashboard';

function mapStateToProps(state) {

  return {
    interval: state.dashboard.interval,
    map: state.dashboard.map,
    chart: state.dashboard.chart,
    counters: state.dashboard.statistics.counters,
    profile: state.session.profile,
    routing: state.routing,
    config: state.config,
    savedLayout: state.dashboard.savedLayout,
    favourites: state.dashboard.favourites,
    isLoading: state.dashboard.isLoading,
    metersLocations: state.map.metersLocations,
    width: state.viewport.width
  };
}

function mapDispatchToProps(dispatch) {
  return {
    actions: bindActionCreators(Object.assign({}, {
      getFeatures: getFeatures, getCounters: getCounters, fetchFavouriteQueries: fetchFavouriteQueries,
      getProfileLayout: getProfileLayout, saveLayout: saveLayout, unpin: unpin, getMetersLocations: getMetersLocations
    }), dispatch)
    //actions : bindActionCreators(Object.assign({}, { getTimeline, getFeatures, getCounters, getChart, getMetersLocations }) , dispatch)
  };
}

module.exports = connect(mapStateToProps, mapDispatchToProps)(Dashboard);

},{"../../actions/DashboardActions":431,"../../actions/MapActions":441,"../../prop-types":604,"../Counter":483,"../Timeline":503,"../chart/dimension/FilterTag":511,"../reports-measurements/chart":515,"livereactload/babel-transform":28,"moment":"moment","react":"react","react-bootstrap":"react-bootstrap","react-grid-layout":"react-grid-layout","react-intl":"react-intl","react-leaflet-wrapper":151,"react-redux":"react-redux","react-router":"react-router","redux":"redux"}],528:[function(require,module,exports){
'use strict';

var _react2 = require('react');

var _react3 = _interopRequireDefault(_react2);

var _babelTransform = require('livereactload/babel-transform');

var _babelTransform2 = _interopRequireDefault(_babelTransform);

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _components = {
  _component: {}
};

var _livereactloadBabelTransform2 = (0, _babelTransform2.default)({
  filename: '/home/daiad/Desktop/Development/home-web/utility/src/main/frontend/components/section/Forecasting.js',
  components: _components,
  locals: [],
  imports: [_react3.default]
});

function _wrapComponent(id) {
  return function (Component) {
    return _livereactloadBabelTransform2(Component, id);
  };
}

var React = require('react');

var _require = require('redux'),
    bindActionCreators = _require.bindActionCreators;

var _require2 = require('react-redux'),
    connect = _require2.connect;

var Bootstrap = require('react-bootstrap');

var _require3 = require('react-router'),
    Link = _require3.Link;

var Select = require('react-select').default;
var DateRangePicker = require('react-bootstrap-daterangepicker');
var UserSearchTextBox = require('../UserSearchTextBox');
var Chart = require('../reports-measurements/chart');

var _require4 = require('../../actions/ForecastingActions'),
    setUser = _require4.setUser,
    setGroup = _require4.setGroup,
    setInterval = _require4.setInterval,
    getUtilityChart = _require4.getUtilityChart,
    getUserChart = _require4.getUserChart,
    filterByType = _require4.filterByType,
    getGroups = _require4.getGroups,
    addFavourite = _require4.addFavourite;

var _filterByType = function _filterByType(e) {
  var profile = this.props.profile;
  this.props.actions.filterByType(e.value === 'UNDEFINED' ? null : e.value);
  if (e.value === 'UTILITY') {
    this.props.actions.getUtilityChart(null, profile.utility.key, profile.utility.name, profile.timezone);
  }
  this.setState({ isFavourite: false });
};

var _groupSelect = function _groupSelect(e) {
  this.props.actions.setGroup(e);
  this.setState({ isFavourite: false });
};

var _onUserSelect = function _onUserSelect(e) {
  //  var profile = this.props.profile;
  //  if(e) {
  //    if(e.value) {
  //      this.props.actions.getUserChart(e.value, e.label, profile.timezone);
  //    }
  //  }
  this.props.actions.setUser(e);
  this.setState({ dirty: true });
};

var Forecasting = _wrapComponent('_component')(React.createClass({
  displayName: 'Forecasting',

  contextTypes: {
    intl: React.PropTypes.object
  },

  getInitialState: function getInitialState() {
    return {
      isFavourite: false,
      dirty: true
    };
  },
  toggleView: function toggleView(view) {
    this.setState({ map: !this.state.map });
  },


  componentWillMount: function componentWillMount() {

    var profile = this.props.profile;
    this.props.actions.setUser(null);
    if (this.props.forecasting.query == null) {
      //this.props.actions.filterByType('UTILITY');
      this.props.actions.getUtilityChart(null, profile.utility.key, profile.utility.name, profile.timezone);
    }
    if (this.props.forecasting.groups == null) {
      this.props.actions.getGroups();
    }
  },

  _onIntervalChange: function _onIntervalChange(event, picker) {
    if (_.isEqual([picker.startDate, picker.endDate], this.props.forecasting.interval)) {
      return;
    }

    this.props.actions.setInterval([picker.startDate, picker.endDate]);
  },

  _addFavourite: function _addFavourite() {
    var namedQuery = this.props.forecasting.query;
    namedQuery.type = 'Forecast';
    namedQuery.reportName = 'sum';
    namedQuery.field = 'volume';
    namedQuery.level = 'week';

    var request;
    if (this.props.forecasting.populationType) {
      namedQuery.title = 'Forecast - ' + this.props.forecasting.group.label + ' from ' + this.props.forecasting.interval[0].format('DD/MM/YYYY') + ' to ' + this.props.forecasting.interval[1].format('DD/MM/YYYY');
      request = {
        'namedQuery': namedQuery
      };
      this.props.actions.addFavourite(request);
    } else {
      namedQuery.title = 'Forecast - Utility from ' + this.props.forecasting.interval[0].format('DD/MM/YYYY') + ' to ' + this.props.forecasting.interval[1].format('DD/MM/YYYY');
      request = {
        'namedQuery': namedQuery
      };
      this.props.actions.addFavourite(request);
    }
    this.setState({ isFavourite: true });
  },

  _refresh: function _refresh() {

    var population;
    var e = this.props.forecasting.group;
    var profile = this.props.profile;
    if (!e) {
      this.props.actions.getUtilityChart(null, profile.utility.key, profile.utility.name, profile.timezone);
    } else {
      if (e.group.type === 'SEGMENT') {
        var clusterKey = this.props.config.utility.clusters.filter(function (cluster) {
          return cluster.name == e.group.cluster;
        });
        population = [{ group: e.group.key, label: "CLUSTER:" + clusterKey[0].key + ":" + e.group.key, type: "GROUP" }];
        this.props.actions.getUtilityChart(population, profile.utility.key, profile.utility.name, profile.timezone);
      } else if (e.group.type === 'SET') {
        population = [{ group: e.group.key, label: "GROUP:" + e.group.key + '/' + e.name, type: "GROUP" }];
        this.props.actions.getUtilityChart(population, profile.utility.key, profile.utility.name, profile.timezone);
      }
    }
    //    if(this.props.forecasting.user){
    //      this.props.actions.getUserChart(this.props.forecasting.user.value, this.props.forecasting.user.label, profile.timezone);
    //    }
  },

  _userRefresh: function _userRefresh() {
    var profile = this.props.profile;
    if (this.props.forecasting.user) {
      this.props.actions.getUserChart(this.props.forecasting.user.value, this.props.forecasting.user.label, profile.timezone);
    }
    this.setState({ dirty: false });
  },

  render: function render() {

    var defaults = {
      chartProps: {
        width: 780,
        height: 300
      }
    };

    var favIcon = this.state.isFavourite ? 'star' : 'star-o';
    var title = React.createElement(
      'span',
      null,
      React.createElement(
        'span',
        null,
        React.createElement('i', { className: 'fa fa-bar-chart fa-fw' }),
        React.createElement(
          'span',
          { style: { paddingLeft: 4 } },
          'Water Consumption Forecasting'
        )
      ),
      React.createElement(
        'span',
        { style: { float: 'right', marginTop: -6, marginLeft: 5 } },
        React.createElement(
          Bootstrap.Button,
          { bsStyle: 'default' /*className='btn-circle'*/, onClick: this._addFavourite },
          React.createElement('i', { className: 'fa fa-' + favIcon + ' fa-fw' })
        ),
        React.createElement(
          Bootstrap.Button,
          { bsStyle: 'default', onClick: this._refresh },
          React.createElement('i', { className: 'fa fa-rotate-right fa-fw' })
        )
      )
    );

    var chart1 = React.createElement(
      Bootstrap.ListGroup,
      { fill: true },
      React.createElement(
        Bootstrap.ListGroupItem,
        { className: 'report-chart-wrapper' },
        React.createElement(Chart, _extends({}, defaults.chartProps, {
          draw: this.props.forecasting.groupDraw,
          field: "volume",
          level: "week",
          reportName: "sum",
          finished: this.props.forecasting.groupFinished,
          series: this.props.forecasting.groupSeries,
          context: this.props.config,
          overlap: null,
          overlapping: false,
          forecast: this.props.forecasting.group ? this.props.forecasting.group : null,
          yAxis: { min: 0 }
        }))
      )
    );

    var chart2 = React.createElement(
      Bootstrap.ListGroup,
      { fill: true },
      React.createElement(
        Bootstrap.ListGroupItem,
        { className: 'report-chart-wrapper' },
        React.createElement(Chart, _extends({}, defaults.chartProps, {
          draw: this.props.forecasting.userDraw,
          field: "volume",
          level: "week",
          reportName: "sum",
          finished: this.props.forecasting.userFinished,
          series: this.props.forecasting.userSeries,
          context: this.props.config,
          overlap: null,
          overlapping: false,
          forecast: this.props.forecasting.user ? this.props.forecasting.user : null,
          yAxis: { min: 0 }
        }))
      )
    );

    var typeOptions = [];
    if (this.props.forecasting.groups && this.props.forecasting.populationType) {
      typeOptions = this.props.forecasting.groups.filtered.map(function (group) {
        return {
          name: group.name,
          label: group.type == 'SEGMENT' ? group.cluster + ' ' + group.name : group.name,
          group: group
        };
      });
    }

    var intervalLabel = '';
    if (this.props.forecasting.interval.length > 0) {
      var start = this.props.forecasting.interval[0].format('DD/MM/YYYY');

      var end = this.props.forecasting.interval[1].format('DD/MM/YYYY');

      intervalLabel = start + ' - ' + end;
      if (start === end) {
        intervalLabel = start;
      }
    }
    var groupTypeSelect = React.createElement(
      'div',
      null,
      React.createElement(Select, { name: 'groupType',
        value: this.props.forecasting.populationType ? this.props.forecasting.populationType : 'UNDEFINED',
        options: [{ value: 'UNDEFINED', label: this.props.profile.utility.name }, { value: 'Income', label: 'Income' }, { value: 'Apartment Size', label: 'Apartment Size' }, { value: 'Household Members', label: 'Household Members' }, { value: 'Age', label: 'Age' }, { value: 'Consumption Class', label: 'Consumption Class' }, { value: 'SET', label: React.createElement(
            'i',
            null,
            'Custom Group'
          ) }],
        onChange: _filterByType.bind(this),
        clearable: false,
        searchable: false, className: 'form-group' }),
      React.createElement(
        'span',
        { className: 'help-block' },
        'Filter group type'
      )
    );

    var groupSelect = React.createElement(
      'div',
      null,
      React.createElement(Select, { name: 'group',
        value: this.props.forecasting.group ? { name: this.props.forecasting.group.name, label: this.props.forecasting.group.label } : { name: 'UNDEFINED', label: React.createElement(
            'i',
            null,
            'Everyone'
          ) },
        options: typeOptions,
        onChange: _groupSelect.bind(this),
        clearable: false,
        searchable: false, className: 'form-group' }),
      React.createElement(
        'span',
        { className: 'help-block' },
        'Select group'
      )
    );

    var intervalEditor = React.createElement(
      'div',
      null,
      React.createElement(
        DateRangePicker,
        { startDate: this.props.forecasting.interval[0],
          endDate: this.props.forecasting.interval[1],
          ranges: this.props.forecasting.ranges,
          onEvent: this._onIntervalChange,
          locale: this.props.dateRangePickerLocale },
        React.createElement(
          'div',
          { className: 'clearfix Select-control', style: { cursor: 'pointer', padding: '5px 10px', width: '100%' } },
          React.createElement(
            'span',
            null,
            intervalLabel
          )
        )
      ),
      React.createElement(
        'div',
        { style: { padding: '10px' } },
        React.createElement(
          'span',
          { className: 'help-block' },
          'Select time interval'
        )
      )
    );

    var srs = this.props.forecasting.userSeries;
    var chartDataHelp = srs && srs.length > 0 ? null : this.props.forecasting.user && !this.state.dirty ? 'No data' : null;

    var content = React.createElement(
      'div',
      { className: 'row' },
      React.createElement(
        'div',
        { className: 'col-lg-12' },
        React.createElement(
          Bootstrap.Panel,
          { header: title },
          React.createElement(
            Bootstrap.ListGroup,
            { fill: true },
            React.createElement(
              Bootstrap.ListGroupItem,
              null,
              React.createElement(
                'div',
                { className: 'row' },
                React.createElement(
                  'div',
                  { className: 'col-md-3' },
                  groupTypeSelect
                ),
                React.createElement(
                  'div',
                  { className: 'col-md-3' },
                  groupSelect
                ),
                React.createElement(
                  'div',
                  { className: 'col-md-3' },
                  intervalEditor
                )
              )
            ),
            React.createElement(
              Bootstrap.ListGroupItem,
              null,
              chart1
            ),
            React.createElement(
              Bootstrap.ListGroupItem,
              null,
              React.createElement(
                'div',
                { className: 'row' },
                React.createElement(
                  'div',
                  { className: 'col-md-3' },
                  React.createElement(UserSearchTextBox, { name: 'username',
                    noResults: 'Type a username...',
                    onChange: _onUserSelect.bind(this) }),
                  React.createElement(
                    'span',
                    { className: 'help-block' },
                    'Select a single user'
                  )
                ),
                React.createElement(
                  'div',
                  { className: 'col-md-3' },
                  React.createElement(
                    Bootstrap.Button,
                    { bsStyle: 'default', onClick: this._userRefresh },
                    React.createElement('i', { className: 'fa fa-rotate-right fa-fw' })
                  )
                )
              ),
              React.createElement(
                'div',
                { className: 'row' },
                React.createElement(
                  'div',
                  { className: 'col-md-3' },
                  React.createElement(
                    'span',
                    { className: 'help-block' },
                    React.createElement(
                      'i',
                      null,
                      chartDataHelp
                    )
                  )
                )
              )
            ),
            chart2,
            React.createElement(
              Bootstrap.ListGroupItem,
              { className: 'clearfix' },
              React.createElement(
                Link,
                { className: 'pull-right', to: '/scheduler', style: { paddingLeft: 7, paddingTop: 12 } },
                'Job Scheduler'
              )
            )
          )
        )
      )
    );

    return React.createElement(
      'div',
      { className: 'container-fluid', style: { paddingTop: 10 } },
      content
    );
  }
}));

Forecasting.icon = 'line-chart';
Forecasting.title = 'Section.Forecasting';

function mapStateToProps(state) {
  return {
    forecasting: state.forecasting,
    profile: state.session.profile,
    routing: state.routing,
    config: state.config,
    dateRangePickerLocale: state.i18n.data[state.i18n.locale].messages['Library.DateRangePicker.$locale']
  };
}

function mapDispatchToProps(dispatch) {
  return {
    actions: bindActionCreators(Object.assign({}, { setUser: setUser, setGroup: setGroup, setInterval: setInterval, getUtilityChart: getUtilityChart, getUserChart: getUserChart,
      filterByType: filterByType, getGroups: getGroups, addFavourite: addFavourite }), dispatch)
  };
}

module.exports = connect(mapStateToProps, mapDispatchToProps)(Forecasting);

},{"../../actions/ForecastingActions":435,"../UserSearchTextBox":506,"../reports-measurements/chart":515,"livereactload/babel-transform":28,"react":"react","react-bootstrap":"react-bootstrap","react-bootstrap-daterangepicker":"react-bootstrap-daterangepicker","react-redux":"react-redux","react-router":"react-router","react-select":"react-select","redux":"redux"}],529:[function(require,module,exports){
'use strict';

var _react2 = require('react');

var _react3 = _interopRequireDefault(_react2);

var _babelTransform = require('livereactload/babel-transform');

var _babelTransform2 = _interopRequireDefault(_babelTransform);

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _components = {
  _component: {}
};

var _livereactloadBabelTransform2 = (0, _babelTransform2.default)({
  filename: '/home/daiad/Desktop/Development/home-web/utility/src/main/frontend/components/section/GroupCatalog.js',
  components: _components,
  locals: [],
  imports: [_react3.default]
});

function _wrapComponent(id) {
  return function (Component) {
    return _livereactloadBabelTransform2(Component, id);
  };
}

var React = require('react');
var Bootstrap = require('react-bootstrap');

var _require = require('redux'),
    bindActionCreators = _require.bindActionCreators;

var _require2 = require('react-redux'),
    connect = _require2.connect;

var Select = require('react-select').default;
var Table = require('../Table');
var Chart = require('../reports-measurements/chart');

var _require3 = require('../../actions/GroupCatalogActions'),
    getGroups = _require3.getGroups,
    changeIndex = _require3.changeIndex,
    deleteGroup = _require3.deleteGroup,
    getGroupChart = _require3.getGroupChart,
    clearChart = _require3.clearChart,
    setChartMetric = _require3.setChartMetric,
    removeFavorite = _require3.removeFavorite,
    addFavorite = _require3.addFavorite,
    filterByType = _require3.filterByType,
    filterByName = _require3.filterByName,
    clearFilter = _require3.clearFilter;

var _handleKeyPress = function _handleKeyPress(e) {
  if (e.key === 'Enter') {
    this.refresh();
  }
};

var _setChartMetric = function _setChartMetric(e) {
  var utility = this.props.profile.utility;
  this.props.actions.setChartMetric(e.value, utility.name, utility.timezone);
};

var _clearChart = function _clearChart(e) {
  this.props.actions.clearChart();
};

var _filterByType = function _filterByType(e) {
  this.props.actions.filterByType(e.value === 'UNDEFINED' ? null : e.value);
};

var _filterByName = function _filterByName(e) {
  this.props.actions.filterByName(this.refs.nameFilter.getValue());
};

var GroupCatalog = _wrapComponent('_component')(React.createClass({
  displayName: 'GroupCatalog',

  contextTypes: {
    intl: React.PropTypes.object
  },

  getInitialState: function getInitialState() {
    return {
      draw: false
    };
  },

  componentWillMount: function componentWillMount() {
    if (this.props.groupCatalog.groups == null) {
      this.props.actions.getGroups();
    }
  },

  onPageIndexChange: function onPageIndexChange(index) {
    this.props.actions.changeIndex(index);
  },

  refresh: function refresh(e) {
    this.props.actions.getGroups();
  },

  render: function render() {
    var tableFields = [{
      name: 'id',
      hidden: true
    }, {
      name: 'type',
      hidden: true
    }, {
      name: 'typeLabel',
      title: 'Section.Groups.Table1.Type',
      width: 100
    }, {
      name: 'text',
      title: 'Section.Groups.Table1.Name',
      link: function link(row) {
        if (row.key) {
          return '/group/{key}/';
        }
        return null;
      }
    }, {
      name: 'size',
      title: 'Section.Groups.Table1.NumberOfMembers'
    }, {
      name: 'createdOn',
      title: 'Section.Groups.Table1.UpdatedOn',
      type: 'datetime'
    }, {
      name: 'favorite',
      type: 'action',
      icon: function icon(field, row) {
        if (row.type === 'SET') {
          return row.favorite ? 'star' : 'star-o';
        } else {
          return null;
        }
      },
      handler: function (field, row) {
        if (row.favorite) {
          this.props.actions.removeFavorite(row.key);
        } else {
          this.props.actions.addFavorite(row.key);
        }
      }.bind(this),
      visible: function (field, row) {
        return row.type == 'SET';
      }.bind(this)
    }, {
      name: 'chart',
      type: 'action',
      icon: 'bar-chart-o',
      handler: function (field, row) {
        var utility = this.props.profile.utility;

        var population;
        if (row.type === 'SEGMENT') {
          var clusterKey = this.props.config.utility.clusters.filter(function (cluster) {
            return cluster.name == row.cluster;
          });
          population = [{ group: row.key, label: "CLUSTER:" + clusterKey[0].key + ":" + row.key, type: "GROUP" }];
          this.props.actions.getGroupChart(population, utility.key, utility.name, utility.timezone);
          this.setState({ draw: true });
        } else if (row.type === 'SET') {

          population = [{ group: row.key, label: "GROUP:" + row.key + '/' + row.name, type: "GROUP" }];
          this.props.actions.getGroupChart(population, utility.key, utility.name, utility.timezone);
          this.setState({ draw: true });
        }
      }.bind(this)
    }, {
      name: 'delete',
      type: 'action',
      icon: function icon(field, row) {
        return row.type == 'SET' ? 'remove' : null;
      },
      handler: function (field, row) {
        if (row.type == 'SET') {
          this.props.actions.deleteGroup(row.key);
        }
      }.bind(this),
      visible: function (field, row) {
        return row.type == 'SET';
      }.bind(this)

    }];

    var tableData = this.props.groupCatalog.data.filtered || [];

    var tablePager = {
      index: 0,
      size: 10,
      count: this.props.groupCatalog.data.filtered.length || 0,
      onPageIndexChange: this.onPageIndexChange,
      mode: Table.PAGING_CLIENT_SIDE
    };
    var tableSorter = {
      defaultSort: 'size',
      defaultOrder: 'desc'
    };

    var tableStyle = {
      row: {
        height: 50
      }
    };

    var resetButton = React.createElement('div', null);

    if (this.props.groupCatalog.query.text || this.props.groupCatalog.query.serial) {
      resetButton = React.createElement(
        'div',
        { style: { float: 'right', marginLeft: 20 } },
        React.createElement(
          Bootstrap.Button,
          { bsStyle: 'default', onClick: this.clearFilter },
          'Reset'
        )
      );
    }

    var filterOptions = React.createElement(
      Bootstrap.ListGroupItem,
      null,
      React.createElement(
        'div',
        { className: 'row' },
        React.createElement(
          'div',
          { className: 'col-md-3' },
          React.createElement(Select, { name: 'groupType',
            value: this.props.groupCatalog.query.type || 'UNDEFINED',
            options: [{ value: 'UNDEFINED', label: '-' }, { value: 'SEGMENT', label: 'Group' }, { value: 'SET', label: 'Set' }],
            onChange: _filterByType.bind(this),
            clearable: false,
            searchable: false, className: 'form-group' }),
          React.createElement(
            'span',
            { className: 'help-block' },
            'Filter group type'
          )
        ),
        React.createElement(
          'div',
          { className: 'col-md-3' },
          React.createElement(Bootstrap.Input, {
            type: 'text',
            id: 'nameFilter', name: 'nameFilter', ref: 'nameFilter',
            placeholder: 'Name ...',
            onChange: _filterByName.bind(this),
            onKeyPress: _handleKeyPress.bind(this),
            value: this.props.groupCatalog.query.name || '' }),
          React.createElement(
            'span',
            { className: 'help-block' },
            'Filter by name'
          )
        ),
        React.createElement(
          'div',
          { className: 'col-md-4', style: { float: 'right' } },
          resetButton,
          React.createElement(
            'div',
            { style: { float: 'right' } },
            React.createElement(
              Bootstrap.Button,
              { bsStyle: 'primary', onClick: this.refresh },
              'Refresh'
            )
          )
        )
      )
    );

    var chartViewOptions = React.createElement(
      Bootstrap.ListGroupItem,
      null,
      React.createElement(
        'div',
        { className: 'row' },
        React.createElement(
          'div',
          { className: 'col-md-3' },
          React.createElement(Select, { name: 'chartMetric',
            value: this.props.groupCatalog.metric,
            options: [{ value: 'SUM', label: 'Total' }, { value: 'AVERAGE', label: 'Average' }, { value: 'MIN', label: 'Min' }, { value: 'MAX', label: 'Max' }],
            onChange: _setChartMetric.bind(this),
            clearable: false,
            searchable: false, className: 'form-group' }),
          React.createElement(
            'span',
            { className: 'help-block' },
            'Select value to display ....'
          )
        )
      )
    );

    var dataNotFound = React.createElement(
      'span',
      null,
      this.props.groupCatalog.isLoading ? 'Loading data ...' : 'No data found.'
    );

    var filterTitle = React.createElement(
      'span',
      null,
      React.createElement('i', { className: 'fa fa-search fa-fw' }),
      React.createElement(
        'span',
        { style: { paddingLeft: 4 } },
        'Search'
      ),
      React.createElement('span', { style: { float: 'right', marginTop: -3, marginLeft: 5 } })
    );

    var chartTitleText,
        chart = React.createElement(
      'span',
      null,
      'Select a group ...'
    );

    if (!Object.keys(this.props.groupCatalog.charts).length) {
      chartTitleText = React.createElement(
        'span',
        null,
        React.createElement('i', { className: 'fa fa-bar-chart fa-fw' }),
        React.createElement(
          'span',
          { style: { paddingLeft: 4 } },
          'Consumption - Last 30 days'
        )
      );
    } else {
      chartTitleText = React.createElement(
        'span',
        null,
        React.createElement(
          'span',
          null,
          React.createElement('i', { className: 'fa fa-bar-chart fa-fw' }),
          React.createElement(
            'span',
            { style: { paddingLeft: 4 } },
            'Consumption - Last 30 days'
          )
        ),
        React.createElement(
          'span',
          { style: { float: 'right', marginTop: -3, marginLeft: 5 } },
          React.createElement(
            Bootstrap.Button,
            { bsStyle: 'default', className: 'btn-circle', onClick: _clearChart.bind(this) },
            React.createElement('i', { className: 'fa fa-remove fa-fw' })
          )
        )
      );

      var multipleSeries = [];
      for (var key in this.props.groupCatalog.charts) {
        var tempSeries = this.props.groupCatalog.charts[key].groupSeries;

        if (tempSeries) {
          multipleSeries.push(tempSeries);
        }
      }

      var defaults = {
        chartProps: {
          width: 780,
          height: 300
        }
      };

      var fSeries = _.flatten(multipleSeries);

      var series = fSeries[0] ? fSeries : null;

      chart = React.createElement(Chart, _extends({}, defaults.chartProps, {
        draw: this.state.draw,
        field: "volume",
        level: "week",
        reportName: "avg-daily-avg",
        finished: this.props.groupCatalog.groupFinished,
        series: series,
        context: this.props.config,
        overlap: null,
        overlapping: false
      }));
    }

    return React.createElement(
      'div',
      { className: 'container-fluid', style: { paddingTop: 10 } },
      React.createElement(
        'div',
        { className: 'row' },
        React.createElement(
          'div',
          { className: 'col-md-12' },
          React.createElement(
            Bootstrap.Panel,
            { header: filterTitle },
            React.createElement(
              Bootstrap.ListGroup,
              { fill: true },
              filterOptions,
              React.createElement(
                Bootstrap.ListGroupItem,
                null,
                React.createElement(Table, {
                  sortable: true,
                  fields: tableFields,
                  data: tableData,
                  pager: tablePager,
                  sorter: tableSorter,
                  template: { empty: dataNotFound },
                  style: tableStyle
                })
              ),
              React.createElement(
                Bootstrap.ListGroupItem,
                { style: { background: '#f5f5f5' } },
                chartTitleText
              ),
              React.createElement(
                Bootstrap.ListGroupItem,
                null,
                chartViewOptions
              ),
              React.createElement(
                Bootstrap.ListGroupItem,
                null,
                chart
              )
            )
          )
        )
      )
    );
  }
}));

GroupCatalog.icon = 'group';
GroupCatalog.title = 'Section.Groups.Title';

function mapStateToProps(state) {
  return {
    groupCatalog: state.groupCatalog,
    profile: state.session.profile,
    routing: state.routing,
    config: state.config
  };
}

function mapDispatchToProps(dispatch) {
  return {
    actions: bindActionCreators(Object.assign({}, { getGroups: getGroups, changeIndex: changeIndex, deleteGroup: deleteGroup, getGroupChart: getGroupChart,
      clearChart: clearChart, setChartMetric: setChartMetric, removeFavorite: removeFavorite, addFavorite: addFavorite,
      filterByType: filterByType, filterByName: filterByName, clearFilter: clearFilter }), dispatch) };
}

module.exports = connect(mapStateToProps, mapDispatchToProps)(GroupCatalog);

},{"../../actions/GroupCatalogActions":437,"../Table":502,"../reports-measurements/chart":515,"livereactload/babel-transform":28,"react":"react","react-bootstrap":"react-bootstrap","react-redux":"react-redux","react-select":"react-select","redux":"redux"}],530:[function(require,module,exports){
'use strict';

var _react2 = require('react');

var _react3 = _interopRequireDefault(_react2);

var _babelTransform = require('livereactload/babel-transform');

var _babelTransform2 = _interopRequireDefault(_babelTransform);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _components = {
  _component: {}
};

var _livereactloadBabelTransform2 = (0, _babelTransform2.default)({
  filename: '/home/daiad/Desktop/Development/home-web/utility/src/main/frontend/components/section/ManageAlerts.js',
  components: _components,
  locals: [],
  imports: [_react3.default]
});

function _wrapComponent(id) {
  return function (Component) {
    return _livereactloadBabelTransform2(Component, id);
  };
}

var React = require('react');
var Bootstrap = require('react-bootstrap');
var UtilityDropDown = require('../UtilityDropDown');
var ManageAlertsActions = require('../../actions/ManageAlertsActions');

var _require = require('react-redux'),
    connect = _require.connect;

var _require2 = require('redux'),
    bindActionCreators = _require2.bindActionCreators;

var TipsEditTable = require('../TipsEditTable');

var _require3 = require('react-intl'),
    FormattedMessage = _require3.FormattedMessage;

var Schema = require('../../constants/ManageAlertsTableSchema');

var _require4 = require('../../actions/ManageAlertsActions'),
    cancelAddTip = _require4.cancelAddTip,
    showAddTipForm = _require4.showAddTipForm,
    beganEditingTip = _require4.beganEditingTip;

var Modal = require('../Modal');

var self;

var ManageAlerts = _wrapComponent('_component')(React.createClass({
  displayName: 'ManageAlerts',

  changedModes: [],
  contextTypes: {
    intl: React.PropTypes.object
  },
  getDefaultProps: function getDefaultProps() {
    return {
      defaultDropDownTitle: 'Select Utility',
      rowsChanged: [],
      saveButtonDisabled: true
    };
  },
  componentWillMount: function componentWillMount() {
    this.props.fetchUtilities();
  },

  editClickedTip: function editClickedTip(tip) {
    this.props.editTip(tip);
  },

  validateNewTipForm: function validateNewTipForm(title, description, image) {
    var errors = [];
    return errors;
  },

  processAddNewTipForm: function processAddNewTipForm() {
    var inputFieldsFormValues = {
      title: this.refs.title.getValue(),
      description: this.description.lastName.getValue(),
      image: this.refs.image.getValue()
    };
    var errors = this.validateNewTipForm(this.refs.title.getValue(), this.refs.description.getValue(), this.refs.image.getValue());
    if (errors.length === 0) {
      this.props.actions.addTipFillForm(inputFieldsFormValues);
      var tipInfo = {
        title: this.refs.lastName.getValue(),
        description: this.refs.email.getValue(),
        image: this.refs.address.getValue() === '' ? null : this.refs.address.getValue()
      };
      this.props.actions.addTip(tipInfo);
    } else {
      this.props.actions.addTipValidationsErrorsOccurred(errors);
    }
  },

  render: function render() {
    self = this;

    if (this.props.showModal) {
      var title = 'Delete Tip?';
      var actions = [{
        action: self.props.hideModal,
        name: "Cancel"
      }, {
        action: self.props.confirmDeleteTip,
        name: "Delete",
        style: 'danger'
      }];

      return React.createElement(
        'div',
        null,
        React.createElement(Modal, { show: this.props.showModal,
          onClose: self.props.hideModal,
          title: title,
          text: 'You are about to delete tip with ID ' + this.props.currentTip.index + ' permanently. Are you sure?',
          actions: actions
        })
      );
    }

    if (!this.props.isLoading && this.props.utilities) {

      var fieldsData = [{
        name: 'index',
        title: 'Section.Engagement.Messages.Table1.Id'
      }, {
        name: 'title',
        title: 'Section.Engagement.Messages.Table1.Title'
      }, {
        name: 'description',
        title: 'Section.Engagement.Messages.Table1.Description'
      }, {
        name: 'createdOn',
        title: 'Section.Engagement.Messages.Table1.Created',
        type: 'datetime'
      }, {
        name: 'modifiedOn',
        title: 'Section.Engagement.Messages.Table1.Modified',
        type: 'datetime'
      }, {
        name: 'active',
        title: 'Section.Engagement.Messages.Table1.Active',
        type: 'boolean',
        icon: 'check-square'
      }, {
        name: 'edit',
        type: 'action',
        icon: 'pencil',
        handler: function handler() {
          self.editClickedTip(this.props.row);
        }
      }, {
        name: 'cancel',
        type: 'action',
        icon: 'remove',
        handler: function handler() {
          self.props.setShowModal(this.props.row);
        }
      }];

      var data = {
        filters: Schema.filters,
        fields: fieldsData,
        rows: populateTips(this),
        pager: {
          index: 0,
          size: 8,
          count: 1
        }
      };

      var utilityOptions = populateUtilityOptions(this.props.utilities);

      var filterTitle = React.createElement(
        'span',
        null,
        React.createElement(
          'i',
          { className: 'fa fa-filter fa-fw' },
          ' '
        ),
        React.createElement(
          'span',
          { style: { paddingLeft: 4 } },
          ' Filter '
        ),
        React.createElement('span', { style: { float: 'left', marginTop: -3, marginLeft: 5 } })
      );
      var filter = React.createElement(
        'div',
        { className: 'row' },
        React.createElement(
          Bootstrap.Panel,
          { header: filterTitle },
          React.createElement(UtilityDropDown, {
            title: this.props.utility ? this.props.utility.label : this.props.defaultDropDownTitle,
            options: utilityOptions,
            disabled: false,
            onSelect: this.props.setUtility
          })
        )
      );

      var staticTipsTitle = React.createElement(
        'span',
        null,
        React.createElement(
          'i',
          { className: 'fa fa-commenting-o fa-fw' },
          ' '
        ),
        React.createElement(
          'span',
          { style: { paddingLeft: 4 } },
          ' Static Tips '
        ),
        React.createElement(
          'span',
          { style: { float: 'right', marginTop: -3, marginLeft: 5 } },
          React.createElement(
            Bootstrap.Button,
            { bsStyle: 'default', className: 'btn-circle', onClick: this.props.actions.showAddTipForm },
            React.createElement(Bootstrap.Glyphicon, { glyph: 'plus' })
          )
        )
      );

      var table = React.createElement(
        'div',
        { className: 'row' },
        React.createElement(
          Bootstrap.Panel,
          { header: staticTipsTitle },
          React.createElement(
            Bootstrap.ListGroup,
            { fill: true },
            React.createElement(
              Bootstrap.ListGroupItem,
              null,
              React.createElement(TipsEditTable, {
                data: this.props.data ? this.props.data : data,
                setActivePage: this.props.setActivePage,
                activePage: this.props.activePage,
                setActivationChanged: this.props.setActivationChanged,
                initialRows: data,
                saveActiveStatusAction: this.props.saveActiveStatusAction,
                changedRows: this.props.changedRows,
                currentTip: this.props.currentTip ? this.props.currentTip : null })
            )
          )
        )
      );

      var tipsBody = React.createElement(
        'div',
        { className: 'container-fluid', style: { paddingTop: 10 } },
        filter,
        table
      );

      var tipFormTitle = React.createElement(
        'span',
        null,
        React.createElement(
          'i',
          { className: 'fa fa-pencil fa-fw' },
          ' '
        ),
        React.createElement(
          'span',
          { style: { paddingLeft: 4 } },
          ' Edit '
        ),
        React.createElement('span', { style: { float: 'left', marginTop: -3, marginLeft: 5 } })
      );

      var tipForm = React.createElement(
        'div',
        { className: 'row' },
        React.createElement(
          Bootstrap.Panel,
          { header: tipFormTitle },
          React.createElement(
            Bootstrap.Row,
            null,
            React.createElement(
              Bootstrap.Col,
              { xs: 12 },
              React.createElement(
                'label',
                null,
                'Title'
              ),
              React.createElement('textarea', { name: 'Title',
                rows: '2',
                style: { "resize": "none", "width": "100%" },
                ref: 'title',
                index: this.props.currentTip ? this.props.currentTip.index : null,
                defaultValue: this.props.currentTip ? this.props.currentTip.title : ""
              })
            )
          ),
          React.createElement(
            Bootstrap.Row,
            null,
            React.createElement(
              Bootstrap.Col,
              { xs: 12 },
              React.createElement(
                'label',
                null,
                'Description'
              ),
              React.createElement('textarea', { name: 'Description',
                style: { "resize": "none", "width": "100%" },
                rows: '8',
                ref: 'description',
                defaultValue: this.props.currentTip ? this.props.currentTip.description : ""
              })
            )
          ),
          React.createElement(
            Bootstrap.Row,
            null,
            React.createElement(
              Bootstrap.Col,
              { xs: 6 },
              React.createElement(
                'div',
                null,
                React.createElement(
                  'button',
                  { id: 'add',
                    label: 'Add',
                    type: 'submit',
                    className: 'btn btn-primary',
                    style: { height: 33 },
                    onClick: this.props.saveCurrentTip,
                    disabled: this.props.saveTipDisabled },
                  React.createElement(FormattedMessage, { id: 'Section.Engagement.Messages.Button.Save' })
                ),
                React.createElement(
                  'button',
                  { id: 'cancel',
                    label: 'Cancel',
                    type: 'cancel',
                    className: 'btn btn-primary',
                    style: { height: 33, marginLeft: 10 },
                    onClick: this.props.actions.cancelAddTip },
                  React.createElement(FormattedMessage, { id: 'Section.Engagement.Messages.Button.Cancel' })
                )
              )
            )
          )
        )
      );

      var addTipForm = React.createElement(
        'div',
        { className: 'container-fluid', style: { paddingTop: 10 } },
        filter,
        tipForm
      );

      var visiblePart = this.props.show ? addTipForm : tipsBody; //lala

      return React.createElement(
        'div',
        { className: 'container-fluid', style: { paddingTop: 10 } },
        visiblePart
      );
    } else {
      return React.createElement(
        'div',
        null,
        React.createElement('img', { className: 'preloader', src: '/assets/images/utility/preloader-counterclock.png' }),
        React.createElement('img', { className: 'preloader-inner', src: '/assets/images/utility/preloader-clockwise.png' })
      );
    }
  }
}));

function populateUtilityOptions(utilities) {
  var utilityOptions = [];
  for (var obj in utilities) {
    var currentName, currentId, currentKey, currentLocale;
    for (var prop in utilities[obj]) {
      if (prop == "name") {
        currentName = utilities[obj][prop];
      } else if (prop == "id") {
        currentId = utilities[obj][prop];
      } else if (prop == "key") {
        currentKey = utilities[obj][prop];
      } else if (prop == "locale") {
        currentLocale = utilities[obj][prop];
      }
    }
    var option = { label: currentName, value: currentId, key: currentKey, locale: currentLocale };
    utilityOptions.push(option);
  }
  return utilityOptions;
}

function populateTips(object) {
  var element = {},
      populatedTips = [];
  if (object.props.tips == null) {
    return []; //admin has not selected a utility, return empty tips
  } else {
    for (var obj in object.props.tips) {
      var currentId, currentIndex, currentTitle, currentDescription, currentModifiedOn, currentCreatedOn, currentActive;

      for (var prop in object.props.tips[obj]) {
        if (prop == "id") {
          currentId = object.props.tips[obj][prop];
        } else if (prop == "index") {
          currentIndex = object.props.tips[obj][prop];
        } else if (prop == "title") {
          currentTitle = object.props.tips[obj][prop];
        } else if (prop == "description") {
          currentDescription = object.props.tips[obj][prop];
        } else if (prop == "createdOn") {
          currentCreatedOn = object.props.tips[obj][prop];
        } else if (prop == "modifiedOn") {
          currentModifiedOn = object.props.tips[obj][prop];
        } else if (prop == "active") {
          currentActive = object.props.tips[obj][prop];
        }
      }

      element = { id: currentId, index: currentIndex, title: currentTitle, description: currentDescription,
        createdOn: currentCreatedOn, modifiedOn: currentModifiedOn, active: currentActive };
      populatedTips.push(element);
    }

    populatedTips.sort(sortBy('index', true));

    return populatedTips;
  }
}

var sortBy = function sortBy(field, reverse) {
  var key = function key(x) {
    return x[field];
  };

  return function (a, b) {
    var keyA = key(a),
        keyB = key(b);
    return (keyA < keyB ? -1 : keyA > keyB ? 1 : 0) * [-1, 1][+!!reverse];
  };
};

function mapStateToProps(state) {
  return {
    utility: state.alerts.utility,
    tips: state.alerts.tips,
    utilities: state.alerts.utilities,
    currentUtility: state.alerts.currentUtility,
    isLoading: state.alerts.isLoading,
    activePage: state.alerts.activePage,
    show: state.alerts.show,
    currentTip: state.alerts.currentTip,
    data: state.alerts.data,
    changedRows: state.alerts.changedRows,
    showModal: state.alerts.showModal
  };
}

function mapDispatchToProps(dispatch) {

  return {
    actions: bindActionCreators(Object.assign({}, { beganEditingTip: beganEditingTip, showAddTipForm: showAddTipForm, cancelAddTip: cancelAddTip }), dispatch),
    editTip: bindActionCreators(ManageAlertsActions.editTip, dispatch),
    setShowModal: bindActionCreators(ManageAlertsActions.showModal, dispatch),
    hideModal: bindActionCreators(ManageAlertsActions.hideModal, dispatch),
    confirmDeleteTip: bindActionCreators(ManageAlertsActions.deleteTip, dispatch),
    setUtility: function setUtility(event, utility) {
      dispatch(ManageAlertsActions.setUtility(utility));
      dispatch(ManageAlertsActions.getStaticTips(utility, self.props.activePage));
    },
    saveCurrentTip: function saveCurrentTip() {
      var newTip;
      if (self.props.currentTip == null) {
        newTip = { title: self.refs.title.value, description: self.refs.description.value };
        dispatch(ManageAlertsActions.addTip(newTip, self.props.utility));
      } else {
        self.props.currentTip.title = self.refs.title.value;
        self.props.currentTip.description = self.refs.description.value;
        dispatch(ManageAlertsActions.addTip(self.props.currentTip));
      }
    },
    fetchUtilities: bindActionCreators(ManageAlertsActions.fetchUtilities, dispatch),
    setActivePage: function setActivePage(activePage) {
      dispatch(ManageAlertsActions.setActivePage(activePage));
    },
    setActivationChanged: function setActivationChanged(newData) {
      dispatch(ManageAlertsActions.setActivationChanged(newData));
    },
    saveActiveStatusAction: function saveActiveStatusAction(changedRows) {
      dispatch(ManageAlertsActions.saveActiveStatusChanges(changedRows, self.props.utility, self.props.activePage));
    }
  };
}

ManageAlerts.icon = 'commenting-o';
ManageAlerts.title = 'Section.Engagement.Messages.Title';
module.exports = connect(mapStateToProps, mapDispatchToProps)(ManageAlerts);

},{"../../actions/ManageAlertsActions":440,"../../constants/ManageAlertsTableSchema":583,"../Modal":498,"../TipsEditTable":504,"../UtilityDropDown":508,"livereactload/babel-transform":28,"react":"react","react-bootstrap":"react-bootstrap","react-intl":"react-intl","react-redux":"react-redux","redux":"redux"}],531:[function(require,module,exports){
'use strict';

var _react2 = require('react');

var _react3 = _interopRequireDefault(_react2);

var _babelTransform = require('livereactload/babel-transform');

var _babelTransform2 = _interopRequireDefault(_babelTransform);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _components = {
  _component: {}
};

var _livereactloadBabelTransform2 = (0, _babelTransform2.default)({
  filename: '/home/daiad/Desktop/Development/home-web/utility/src/main/frontend/components/section/Map.js',
  components: _components,
  locals: [],
  imports: [_react3.default]
});

function _wrapComponent(id) {
  return function (Component) {
    return _livereactloadBabelTransform2(Component, id);
  };
}

var React = require('react');

var _require = require('redux'),
    bindActionCreators = _require.bindActionCreators;

var _require2 = require('react-redux'),
    connect = _require2.connect;

var Bootstrap = require('react-bootstrap');

var _require3 = require('react-router'),
    Link = _require3.Link;

var Select = require('react-select').default;
var DateRangePicker = require('react-bootstrap-daterangepicker');
var FilterTag = require('../chart/dimension/FilterTag');
var Timeline = require('../Timeline');

var _require4 = require('react-intl'),
    FormattedTime = _require4.FormattedTime;

var moment = require('moment');
var _ = require('lodash');

var _require5 = require('react-leaflet-wrapper'),
    Map = _require5.Map,
    TileLayer = _require5.TileLayer,
    GeoJSON = _require5.GeoJSON,
    Choropleth = _require5.Choropleth,
    LayersControl = _require5.LayersControl,
    InfoControl = _require5.InfoControl,
    DrawControl = _require5.DrawControl;

var _require6 = require('../../actions/MapActions'),
    getTimeline = _require6.getTimeline,
    getFeatures = _require6.getFeatures,
    getChart = _require6.getChart,
    setEditor = _require6.setEditor,
    setEditorValue = _require6.setEditorValue,
    setTimezone = _require6.setTimezone,
    addFavourite = _require6.addFavourite,
    updateFavourite = _require6.updateFavourite,
    setEditorValuesBatch = _require6.setEditorValuesBatch,
    getMetersLocations = _require6.getMetersLocations,
    getGroups = _require6.getGroups,
    filterByType = _require6.filterByType,
    setGroup = _require6.setGroup;

var getTags = function getTags(props) {
  var tags = 'Map - ' + (props.defaultFavouriteValues.source ? props.favourite.queries[0].source : props.source) + ' - ' + props.interval[0].format("DD/MM/YYYY") + ' to ' + props.interval[1].format("DD/MM/YYYY") + (props.population ? ' - ' + props.population.label : '') + (props.geometry ? ' - Custom' : '');

  return tags;
};

var _filterRows = function _filterRows(rows, type, name) {
  var filteredRows = rows.filter(function (r) {
    if (name) {
      if (r.text.indexOf(name) === -1) {
        return false;
      }
    }
    if (type && type !== 'SET') {
      return r.cluster == type;
    }
    if (type && type === 'SET') {
      return r.type == type;
    }
    return true;
  });
  return filteredRows;
};

var _getTimelineValues = function _getTimelineValues(timeline) {
  if (timeline) {
    return timeline.getTimestamps();
  }
  return [];
};

var _getTimelineLabels = function _getTimelineLabels(timeline) {
  if (timeline) {
    return timeline.getTimestamps().map(function (timestamp) {
      return React.createElement(FormattedTime, { value: new Date(timestamp),
        day: 'numeric',
        month: 'numeric',
        year: 'numeric' });
    });
  }
  return [];
};

var _onChangeTimeline = function _onChangeTimeline(value, label, index) {
  this.props.actions.getFeatures(index, value);
};

var _onIntervalEditorChange = function _onIntervalEditorChange(event, picker) {
  this.props.defaultFavouriteValues.interval = false;
  this.props.actions.setEditorValue('interval', [picker.startDate, picker.endDate]);
};

var _onSourceEditorChange = function _onSourceEditorChange(e) {
  this.props.defaultFavouriteValues.source = false;
  this.props.actions.setEditorValue('source', e.value);
};

var _setEditor = function _setEditor(key) {
  this.props.actions.setEditor(key);
};

var _onFeatureChange = function _onFeatureChange(features) {
  if (!features || !features.features || !Array.isArray(features.features) || features.features.length === 0) {
    this.props.actions.setEditorValue('spatial', null);
  } else {
    this.props.actions.setEditorValue('spatial', features.features[0].geometry);
  }
};

var _filterByType = function _filterByType(e) {
  this.props.defaultFavouriteValues.population = false;
  this.props.actions.filterByType(e.value === 'UNDEFINED' ? null : e.value);

  if (e.value === 'UNDEFINED') {
    var utility = this.props.profile.utility;
    var population = {
      utility: utility.key,
      label: utility.name,
      type: 'UTILITY'
    };
    this.props.actions.getTimeline(population);
  }
};

var _groupSelect = function _groupSelect(e) {
  if (this.props.defaultFavouriteValues.population) {

    if (e.group.type === 'SET') {
      this.props.actions.filterByType('SET');
    } else {
      this.props.actions.filterByType(e.group.cluster === 'UNDEFINED' ? 'UNDEFINED' : e.group.cluster);
    }

    if (e.group.cluster === 'UNDEFINED') {
      this.props.actions.getTimeline(e.group);
    }
  }

  this.props.defaultFavouriteValues.population = false;
  this.props.actions.setGroup(e);
};

var AnalyticsMap = _wrapComponent('_component')(React.createClass({
  displayName: 'AnalyticsMap',


  contextTypes: {
    intl: React.PropTypes.object
  },

  componentWillMount: function componentWillMount() {
    var _this = this;

    if (!this.props.metersLocations) {
      this.props.actions.getMetersLocations();
    }

    var utility = this.props.profile.utility;

    this.props.actions.setTimezone(utility.timezone);

    if (this.props.map.groups == null) {
      this.props.actions.getGroups().then(function (response) {

        var isDefault;
        if (_this.props.favourite && _this.props.favourite.type == 'MAP') {
          isDefault = false;
          _this.props.defaultFavouriteValues.interval = true;
          _this.props.defaultFavouriteValues.source = true;
          _this.props.defaultFavouriteValues.population = true;
          _this.props.defaultFavouriteValues.spatial = true;

          _this.props.actions.setEditorValuesBatch(isDefault);

          if (!_this.props.map.timeline) {
            _this.props.actions.getTimeline(_this.props.favourite.queries[0].population[0]);
          }
        } else {
          isDefault = true;
          _this.props.defaultFavouriteValues.interval = false;
          _this.props.defaultFavouriteValues.source = false;
          _this.props.defaultFavouriteValues.population = false;
          _this.props.defaultFavouriteValues.spatial = false;

          _this.props.actions.setEditorValuesBatch(isDefault);

          if (!_this.props.map.timeline) {
            var population = {
              utility: utility.key,
              label: utility.name,
              type: 'UTILITY'
            };
            _this.props.actions.getTimeline(population);
          }
        }
      });
    }
  },

  componentDidMount: function componentDidMount() {},

  clickedAddFavourite: function clickedAddFavourite() {

    var tags = getTags(this.props);

    var namedQuery = {};
    namedQuery.queries = [this.props.map.query.query]; //set as array to align with chart multiple queries
    namedQuery.type = 'Map';
    namedQuery.tags = tags;
    namedQuery.title = this.refs.favouriteLabel.value;

    var request = {
      'namedQuery': namedQuery
    };

    if (this.props.favourite) {
      namedQuery.id = this.props.favourite.id;
      var previousTitle = this.props.favourite.title;
      this.props.actions.updateFavourite(request, previousTitle);
    } else {
      this.props.actions.addFavourite(request);
    }
  },

  render: function render() {
    if (!this.props.groups) {
      return React.createElement(
        'div',
        null,
        React.createElement('img', { className: 'preloader', src: '/assets/images/utility/preloader-counterclock.png' }),
        React.createElement('img', { className: 'preloader-inner', src: '/assets/images/utility/preloader-clockwise.png' })
      );
    }
    var favouriteIcon;
    if (this.props.favourite && this.props.favourite.type == 'CHART') {
      favouriteIcon = 'star-o';
    } else if (this.props.isBeingEdited && !this.props.favourite) {
      favouriteIcon = 'star-o';
    } else {
      favouriteIcon = 'star';
    }

    var tags = getTags(this.props);
    var _t = this.context.intl.formatMessage;

    // Filter configuration
    var intervalLabel = '';
    if (this.props.interval) {
      var start = this.props.defaultFavouriteValues.interval ? moment(this.props.favourite.queries[0].time.start).format('DD/MM/YYYY') : this.props.interval[0].format('DD/MM/YYYY');
      var end = this.props.defaultFavouriteValues.interval ? moment(this.props.favourite.queries[0].time.end).format('DD/MM/YYYY') : this.props.interval[1].format('DD/MM/YYYY');

      intervalLabel = start + ' - ' + end;
      if (start === end) {
        intervalLabel = start;
      }
    }

    var intervalEditor = React.createElement(
      'div',
      { className: 'col-md-3' },
      React.createElement(
        DateRangePicker,
        { startDate: this.props.defaultFavouriteValues.interval ? moment(this.props.favourite.queries[0].time.start) : this.props.interval[0],
          endDate: this.props.defaultFavouriteValues.interval ? moment(this.props.favourite.queries[0].time.end) : this.props.interval[1],
          ranges: this.props.ranges,
          locale: this.props.dateRangePickerLocale,
          onEvent: _onIntervalEditorChange.bind(this) },
        React.createElement(
          'div',
          { className: 'clearfix Select-control', style: { cursor: 'pointer', padding: '5px 10px', width: '100%' } },
          React.createElement(
            'span',
            null,
            intervalLabel
          )
        )
      ),
      React.createElement(
        'span',
        { className: 'help-block' },
        'Select time interval'
      )
    );

    var typeOptions = [];
    var customGroup;
    if (this.props.defaultFavouriteValues.population) {
      var favPop = this.props.favourite.queries[0].population[0];

      if (favPop.type === 'GROUP') {
        typeOptions = [];
        var customGroupArray = _.filter(this.props.groups.groups, function (g) {
          return g.key == favPop.group && g.type == 'SET';
        });

        customGroup = customGroupArray[0];
        if (customGroup) {

          var allCustomGroups = this.props.groups.groups.filter(function (g) {
            return g.type === 'SET';
          });
          typeOptions = allCustomGroups.map(function (group) {
            return {
              name: group.name,
              label: group.name,
              group: group
            };
          });
        } else {
          var cluster = favPop.label;
          var clusterName = cluster.substring(0, cluster.indexOf(":"));
          var filtered = _filterRows(this.props.groups.groups || [], clusterName, null);

          typeOptions = filtered.map(function (group) {
            return {
              name: group.name,
              label: group.type == 'SEGMENT' ? group.cluster + ': ' + group.name : group.name,
              group: group
            };
          });
        }
      }
    } else {
      if (this.props.groups && this.props.populationType) {
        typeOptions = this.props.groups.filtered.map(function (group) {
          return {
            name: group.name,
            label: group.type == 'SEGMENT' ? group.cluster + ': ' + group.name : group.name,
            group: group
          };
        });
      }
    }

    var groupTypeValue;
    if (this.props.defaultFavouriteValues.population) {
      if (customGroup) {
        groupTypeValue = 'SET';
      } else {
        if (this.props.populationType) {
          groupTypeValue = this.props.populationType;
        } else {
          groupTypeValue = 'UNDEFINED';
        }
      }
    } else {
      if (this.props.populationType) {
        groupTypeValue = this.props.populationType;
      } else {
        groupTypeValue = 'UNDEFINED';
      }
    }

    var groupTypeSelect = React.createElement(
      'div',
      null,
      React.createElement(Select, { name: 'groupType',
        value: groupTypeValue,

        options: [{ value: 'UNDEFINED', label: this.props.profile.utility.name }, { value: 'Income', label: 'Income' }, { value: 'Apartment Size', label: 'Apartment Size' }, { value: 'Household Members', label: 'Household Members' }, { value: 'Age', label: 'Age' }, { value: 'Consumption Class', label: 'Consumption Class' }, { value: 'SET', label: React.createElement(
            'i',
            null,
            'Custom Group'
          ) }],
        onChange: _filterByType.bind(this),
        clearable: false,
        searchable: false, className: 'form-group' }),
      React.createElement(
        'span',
        { className: 'help-block' },
        'Filter group type'
      )
    );

    var groupValue;
    if (this.props.defaultFavouriteValues.population) {
      if (favPop.type === 'UTILITY') {
        groupValue = { name: favPop.label, label: React.createElement(
            'i',
            null,
            'Everyone'
          ) };
      } else {
        groupValue = { name: favPop.label, label: favPop.label };
      }
    } else {
      if (this.props.group) {
        groupValue = { name: this.props.group.name, label: this.props.group.label };
      } else {
        groupValue = { name: 'UNDEFINED', label: React.createElement(
            'i',
            null,
            'Everyone'
          ) };
      }
    }

    var groupSelect = React.createElement(
      'div',
      null,
      React.createElement(Select, { name: 'group',
        value: groupValue,
        options: typeOptions,
        onChange: _groupSelect.bind(this),
        clearable: false,
        searchable: false, className: 'form-group' }),
      React.createElement(
        'span',
        { className: 'help-block' },
        'Select group'
      )
    );

    var addFavouriteText;
    if (this.props.favourite) {
      addFavouriteText = 'Buttons.UpdateFavourite';
    } else {
      addFavouriteText = 'Buttons.AddFavourite';
    }

    var favouriteEditor = React.createElement(
      'div',
      null,
      React.createElement(
        'div',
        { className: 'col-md-3' },
        React.createElement('input', { id: 'favouriteLabel', name: 'favouriteLabel', type: 'favourite', ref: 'favouriteLabel', autoFocus: true,
          defaultValue: this.props.favourite ? this.props.favourite.title : null,
          placeholder: this.props.favourite ? this.props.favourite.title : 'Label ...',
          className: 'form-control', style: { marginBottom: 15 } }),
        React.createElement(
          'span',
          { className: 'help-block' },
          'Insert a label for this favourite'
        )
      ),
      React.createElement(
        'div',
        { className: 'col-md-6' },
        React.createElement('input', { id: 'name', name: 'name', type: 'name', ref: 'name', autoFocus: true, disabled: true,
          placeholder: tags, className: 'form-control', style: { marginBottom: 15 } }),
        React.createElement(
          'span',
          { className: 'help-block' },
          'Auto-generated Identifier'
        )
      ),
      React.createElement(
        'div',
        { className: 'col-md-3' },
        React.createElement(
          Bootstrap.Button,
          { bsStyle: 'success', onClick: this.clickedAddFavourite, disabled: !this.props.isBeingEdited },
          _t({ id: addFavouriteText })
        )
      )
    );

    var sourceEditor = React.createElement(
      'div',
      { className: 'col-md-3' },
      React.createElement(Select, { name: 'source',
        value: this.props.defaultFavouriteValues.source ? this.props.favourite.queries[0].source : this.props.source,
        options: [{ value: 'METER', label: 'Meter' }, { value: 'AMPHIRO', label: 'Amphiro B1' }],
        onChange: _onSourceEditorChange.bind(this),
        clearable: false,
        searchable: false, className: 'form-group' }),
      React.createElement(
        'span',
        { className: 'help-block' },
        'Select a data source'
      )
    );

    var filter = null;

    switch (this.props.editor) {
      case 'interval':
        filter = React.createElement(
          Bootstrap.ListGroupItem,
          null,
          React.createElement(
            'div',
            { className: 'row' },
            intervalEditor
          )
        );
        break;

      case 'population':
        filter = React.createElement(
          Bootstrap.ListGroupItem,
          null,
          React.createElement(
            'div',
            { className: 'row' },
            React.createElement(
              'div',
              { className: 'col-md-3' },
              groupTypeSelect
            ),
            React.createElement(
              'div',
              { className: 'col-md-3' },
              groupSelect
            )
          )
        );
        break;

      case 'source':
        filter = React.createElement(
          Bootstrap.ListGroupItem,
          null,
          React.createElement(
            'div',
            { className: 'row' },
            sourceEditor
          )
        );
        break;
      case 'favourite':
        filter = React.createElement(
          Bootstrap.ListGroupItem,
          null,
          React.createElement(
            'div',
            { className: 'row' },
            favouriteEditor
          )
        );
        break;
    }

    // Map configuration
    var mapTitle = React.createElement(
      'span',
      null,
      React.createElement(
        'div',
        { className: 'header-wrapper' },
        React.createElement('i', { className: 'fa fa-map fa-fw' }),
        React.createElement(
          'span',
          { style: { paddingLeft: 4 } },
          'Map'
        ),
        React.createElement(
          'span',
          { style: { float: 'right', marginTop: -3, marginLeft: 0 } },
          React.createElement(
            Bootstrap.Button,
            { bsStyle: 'default', onClick: _setEditor.bind(this, 'source') },
            React.createElement('i', { className: 'fa fa-database fa-fw' })
          )
        ),
        React.createElement(
          'span',
          { style: { float: 'right', marginTop: -3, marginLeft: 0 } },
          React.createElement(
            Bootstrap.Button,
            { bsStyle: 'default', onClick: _setEditor.bind(this, 'population') },
            React.createElement('i', { className: 'fa fa-group fa-fw' })
          )
        ),
        React.createElement(
          'span',
          { style: { float: 'right', marginTop: -3, marginLeft: 0 } },
          React.createElement(
            Bootstrap.Button,
            { bsStyle: 'default', onClick: _setEditor.bind(this, 'interval') },
            React.createElement('i', { className: 'fa fa-calendar fa-fw' })
          )
        ),
        React.createElement(
          'span',
          { style: { float: 'right', marginTop: -3, marginLeft: 0 } },
          React.createElement(
            Bootstrap.Button,
            { bsStyle: 'default', onClick: _setEditor.bind(this, 'favourite') },
            React.createElement('i', { className: 'fa fa-' + favouriteIcon + ' fa-fw' })
          )
        )
      )
    );

    var chartData = {
      series: []
    };

    if (this.props.chart.series) {
      if (this.props.chart.series.meters) {
        chartData.series.push({
          legend: 'Meter',
          xAxis: 'date',
          yAxis: 'volume',
          data: this.props.chart.series.meters.data
        });
      }

      if (this.props.chart.series.devices) {
        chartData.series.push({
          legend: 'Amphiro B1',
          xAxis: 'date',
          yAxis: 'volume',
          data: this.props.chart.series.devices.data
        });
      }
    }

    var chartFilterTags = [],
        map,
        mapFilterTags = [];

    chartFilterTags.push(React.createElement(FilterTag, { key: 'time', text: intervalLabel, icon: 'calendar' }));
    chartFilterTags.push(React.createElement(FilterTag, { key: 'source', text: 'Meter, Amphiro B1', icon: 'database' }));

    mapFilterTags.push(React.createElement(FilterTag, { key: 'time', text: intervalLabel, icon: 'calendar' }));
    mapFilterTags.push(React.createElement(FilterTag, { key: 'population', text: this.props.population ? this.props.population.label : 'All', icon: 'group' }));
    mapFilterTags.push(React.createElement(FilterTag, { key: 'spatial', text: this.props.geometry ? 'Custom' : 'Alicante', icon: 'map' }));
    mapFilterTags.push(React.createElement(FilterTag, { key: 'source', text: this.props.defaultFavouriteValues.source ? this.props.favourite.queries[0].source : this.props.source, icon: 'database' }));

    var timelineMin = this.props.map.timeline && this.props.map.timeline.min || 0;
    var timelineMax = this.props.map.timeline && this.props.map.timeline.max || 0;
    map = React.createElement(
      Bootstrap.ListGroup,
      { fill: true },
      filter,
      React.createElement(
        Bootstrap.ListGroupItem,
        null,
        React.createElement(
          Map,
          {
            center: [38.36, -0.479],
            zoom: 13,
            width: '100%',
            height: 600
          },
          React.createElement(
            LayersControl,
            { position: 'topright' },
            React.createElement(TileLayer, null),
            React.createElement(DrawControl, {
              onFeatureChange: _onFeatureChange.bind(this)
            }),
            React.createElement(
              InfoControl,
              { position: 'bottomleft' },
              React.createElement(Choropleth, {
                name: 'Areas',
                data: this.props.map.features,
                legend: timelineMax === 0 ? null : 'bottomright',
                valueProperty: 'value',
                scale: ['white', 'red'],
                limits: [timelineMin, timelineMax],
                steps: 6,
                mode: 'e',
                infoContent: function infoContent(feature) {
                  return feature && feature.properties ? React.createElement(
                    'div',
                    null,
                    React.createElement(
                      'h5',
                      null,
                      feature.properties.label
                    ),
                    React.createElement(
                      'span',
                      null,
                      feature.properties.value
                    )
                  ) : React.createElement(
                    'div',
                    null,
                    React.createElement(
                      'h5',
                      null,
                      'Hover over an area...'
                    )
                  );
                },
                highlightStyle: { weight: 3 },
                onClick: function onClick(feature, layer, map) {
                  return map.fitBounds(layer.getBounds());
                },
                style: {
                  fillColor: "#ffff00",
                  color: "#000",
                  weight: 2,
                  opacity: 1,
                  fillOpacity: 0.5
                }
              })
            ),
            React.createElement(GeoJSON, {
              name: 'Meters',
              data: this.props.metersLocations,
              popupContent: function popupContent(feature) {
                return React.createElement(
                  'div',
                  null,
                  React.createElement(
                    'h5',
                    null,
                    'Serial:'
                  ),
                  React.createElement(
                    'h5',
                    null,
                    feature.properties.serial
                  )
                );
              },
              circleMarkers: true,
              style: {
                radius: 8,
                fillColor: "#ff7800",
                color: "#000",
                weight: 1,
                opacity: 1,
                fillOpacity: 0.8
              }
            })
          )
        )
      ),
      React.createElement(
        Bootstrap.ListGroupItem,
        null,
        React.createElement(Timeline, { onChange: _onChangeTimeline.bind(this),
          labels: _getTimelineLabels(this.props.map.timeline),
          values: _getTimelineValues(this.props.map.timeline),
          defaultIndex: this.props.map.index,
          speed: 1000,
          animate: false })
      ),
      React.createElement(
        Bootstrap.ListGroupItem,
        { className: 'clearfix' },
        React.createElement(
          'div',
          { className: 'pull-left' },
          mapFilterTags
        ),
        React.createElement(
          'span',
          { style: { paddingLeft: 7 } },
          ' '
        ),
        React.createElement(
          Link,
          { className: 'pull-right', to: '/', style: { paddingLeft: 7, paddingTop: 12 } },
          'View dashboard'
        )
      )
    );

    var mapPanel = React.createElement(
      Bootstrap.Panel,
      { header: mapTitle },
      map
    );

    return React.createElement(
      'div',
      { className: 'container-fluid', style: { paddingTop: 10 } },
      React.createElement(
        'div',
        { className: 'row' },
        React.createElement(
          'div',
          { className: 'col-md-12' },
          mapPanel
        )
      )
    );
  }
}));

AnalyticsMap.icon = 'map';
AnalyticsMap.title = 'Section.Map';

function mapStateToProps(state) {
  return {
    source: state.map.source,
    geometry: state.map.geometry,
    population: state.map.population,
    interval: state.map.interval,
    editor: state.map.editor,
    ranges: state.map.ranges,
    map: state.map.map,
    chart: state.map.chart,
    profile: state.session.profile,
    routing: state.routing,
    favourite: state.favourites.selectedFavourite,
    isBeingEdited: state.map.isBeingEdited,
    filtersChanged: state.map.filterChanged,
    defaultFavouriteValues: state.map.defaultFavouriteValues,
    metersLocations: state.map.metersLocations,
    groups: state.map.groups,
    group: state.map.group,
    populationType: state.map.populationType,
    dateRangePickerLocale: state.i18n.data[state.i18n.locale].messages['Library.DateRangePicker.$locale']
  };
}

function mapDispatchToProps(dispatch) {
  return {
    actions: bindActionCreators(Object.assign({}, {
      getTimeline: getTimeline, getFeatures: getFeatures, getChart: getChart,
      setEditor: setEditor, setEditorValue: setEditorValue, setTimezone: setTimezone,
      addFavourite: addFavourite, updateFavourite: updateFavourite, setEditorValuesBatch: setEditorValuesBatch,
      getMetersLocations: getMetersLocations, getGroups: getGroups, filterByType: filterByType, setGroup: setGroup
    }), dispatch)
  };
}

module.exports = connect(mapStateToProps, mapDispatchToProps)(AnalyticsMap);

},{"../../actions/MapActions":441,"../Timeline":503,"../chart/dimension/FilterTag":511,"livereactload/babel-transform":28,"lodash":"lodash","moment":"moment","react":"react","react-bootstrap":"react-bootstrap","react-bootstrap-daterangepicker":"react-bootstrap-daterangepicker","react-intl":"react-intl","react-leaflet-wrapper":151,"react-redux":"react-redux","react-router":"react-router","react-select":"react-select","redux":"redux"}],532:[function(require,module,exports){
'use strict';

var _react2 = require('react');

var _react3 = _interopRequireDefault(_react2);

var _babelTransform = require('livereactload/babel-transform');

var _babelTransform2 = _interopRequireDefault(_babelTransform);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _components = {
  _component: {}
};

var _livereactloadBabelTransform2 = (0, _babelTransform2.default)({
  filename: '/home/daiad/Desktop/Development/home-web/utility/src/main/frontend/components/section/Scheduler.js',
  components: _components,
  locals: [],
  imports: [_react3.default]
});

function _wrapComponent(id) {
  return function (Component) {
    return _livereactloadBabelTransform2(Component, id);
  };
}

var React = require('react');
var Bootstrap = require('react-bootstrap');

var _require = require('redux'),
    bindActionCreators = _require.bindActionCreators;

var _require2 = require('react-redux'),
    connect = _require2.connect;

var Select = require('react-select').default;
var Table = require('../Table');

var _require3 = require('../../actions/SchedulerActions'),
    jobChangeIndex = _require3.jobChangeIndex,
    getJobs = _require3.getJobs,
    executionChangeIndex = _require3.executionChangeIndex,
    getExecutions = _require3.getExecutions,
    filterExecutionByJobName = _require3.filterExecutionByJobName,
    filterExecutionByExitCode = _require3.filterExecutionByExitCode,
    clearExecutionFilter = _require3.clearExecutionFilter,
    enableJob = _require3.enableJob,
    disableJob = _require3.disableJob,
    launchJob = _require3.launchJob;

var Scheduler = _wrapComponent('_component')(React.createClass({
  displayName: 'Scheduler',

  contextTypes: {
    intl: React.PropTypes.object
  },

  componentWillMount: function componentWillMount() {
    if (this.props.scheduler.data.jobs.items == null) {
      this.props.actions.getJobs();
    }
  },

  onExecutionPageIndexChange: function onExecutionPageIndexChange(index) {
    this.props.actions.executionChangeIndex(index);
  },

  onJobPageIndexChange: function onJobPageIndexChange(index) {
    this.props.actions.jobChangeIndex(index);
  },

  filterExecutionByJobName: function filterExecutionByJobName(e) {
    this.props.actions.filterExecutionByJobName(e.value === 'UNDEFINED' ? null : e.value);
  },

  filterExecutionByExitCode: function filterExecutionByExitCode(e) {
    this.props.actions.filterExecutionByExitCode(e.value === 'UNDEFINED' ? null : e.value);
  },

  clearExecutionFilter: function clearExecutionFilter(e) {
    this.props.actions.clearExecutionFilter();
  },

  refreshExecutions: function refreshExecutions(e) {
    this.props.actions.getExecutions();
  },

  refreshJobs: function refreshJobs(e) {
    this.props.actions.getJobs();
  },

  render: function render() {
    var jobs = this.props.scheduler.data.jobs;

    var jobNames = [{ value: 'UNDEFINED', label: '-' }];
    if (jobs.items) {
      jobNames = jobs.items.reduce(function (newArray, currentValue, currentIndex) {
        newArray.push({ value: currentValue.name, label: currentValue.name });

        return newArray;
      }, [{ value: 'UNDEFINED', label: '-' }]);
    }

    var jobTableFields = [{
      name: 'id',
      title: 'Section.Scheduler.Table1.Id',
      hidden: true
    }, {
      name: 'category',
      title: 'Section.Scheduler.Table1.Category'
    }, {
      name: 'container',
      title: 'Section.Scheduler.Table1.Framwork'
    }, {
      name: 'name',
      title: 'Section.Scheduler.Table1.Name'
    }, {
      name: 'description',
      title: 'Section.Scheduler.Table1.Description'
    }, {
      name: 'lastExecution',
      title: 'Section.Scheduler.Table1.LastExecution',
      type: 'datetime'
    }, {
      name: 'nextExecution',
      title: 'Section.Scheduler.Table1.NextExecution',
      type: 'datetime'
    }, {
      name: 'enable',
      type: 'action',
      icon: function icon(field, row) {
        return 'clock-o';
      },
      color: function color(field, row) {
        if (!row.schedule) {
          return '#000000';
        }
        switch (row.schedule.type) {
          case 'CRON':case 'PERIOD':
            if (row.enabled) {
              return '#000000';
            } else {
              return '#9E9E9E';
            }
          default:
            return '#000000';
        }
      },
      handler: function (field, row) {
        switch (row.schedule.type) {
          case 'CRON':case 'PERIOD':
            if (row.enabled) {
              this.props.actions.disableJob(row.id);
            } else {
              this.props.actions.enableJob(row.id);
            }
            break;
          default:
            // No action is required
            break;
        }
      }.bind(this),
      visible: function visible(field, row) {
        if (!row.schedule) {
          return false;
        }
        switch (row.schedule.type) {
          case 'CRON':case 'PERIOD':
            return true;
          default:
            return false;
        }
      }
    }, {
      name: 'execute',
      type: 'action',
      icon: function icon(field, row) {
        if (row.running) {
          return 'cogs';
        }
        return 'play';
      },
      color: function color(field, row) {
        if (row.running) {
          return '#51A351';
        }
        return '#000000';
      },
      handler: function (field, row) {
        if (!row.running) {
          this.props.actions.launchJob(row.id);
        }
      }.bind(this)
    }];

    var jobTableData = jobs.items || [];

    var jobTablePager = {
      index: jobs.index || 0,
      size: 10,
      count: jobs.total || 0,
      onPageIndexChange: this.onJobPageIndexChange,
      mode: Table.PAGING_CLIENT_SIDE
    };

    var executions = this.props.scheduler.data.executions;

    var executionTableFields = [{
      name: 'jobId',
      hidden: true
    }, {
      name: 'instanceId',
      hidden: true
    }, {
      name: 'executionId',
      hidden: true
    }, {
      name: 'jobName',
      title: 'Section.Scheduler.Table2.Name'
    }, {
      name: 'startedOn',
      title: 'Section.Scheduler.Table2.StartedOn',
      type: 'datetime'
    }, {
      name: 'completedOn',
      title: 'Section.Scheduler.Table2.CompletedOn',
      type: 'datetime'
    }, {
      name: 'statusCode',
      title: 'Section.Scheduler.Table2.StatusCode',
      style: {
        align: 'center',
        width: 120
      },
      className: function className(field, row) {
        switch (row[field.name]) {
          case 'FAILED':
            return 'log_error';
          case 'COMPLETED':
            return 'log_success';
          case 'ABANDONED':
            return 'log_warn';
          default:
            return 'log_debug';
        }
      }
    }, {
      name: 'exitCode',
      title: 'Section.Scheduler.Table2.ExitCode',
      style: {
        align: 'center',
        width: 120
      },
      className: function className(field, row) {
        switch (row[field.name]) {
          case 'FAILED':
            return 'log_error';
          case 'COMPLETED':
            return 'log_success';
          default:
            return 'log_debug';
        }
      }
    }, {
      name: 'view',
      type: 'action',
      icon: 'search',
      visible: function visible(field, row) {
        return row.exitCode === 'FAILED';
      },
      handler: function handler(field, row) {}
    }];

    var executionTableData = executions.items || [];

    var executionTablePager = {
      index: executions.index || 0,
      size: executions.size || 10,
      count: executions.total || 0,
      onPageIndexChange: this.onExecutionPageIndexChange,
      mode: Table.PAGING_SERVER_SIDE
    };
    //};

    var jobDataNotFound = React.createElement(
      'span',
      null,
      'No jobs found.'
    );

    var executionDataNotFound = React.createElement(
      'span',
      null,
      'No executions found.'
    );

    var jobTableHeader = React.createElement(
      'span',
      null,
      React.createElement('i', { className: 'fa fa-cogs fa-fw' }),
      React.createElement(
        'span',
        { style: { paddingLeft: 4 } },
        'Jobs'
      ),
      React.createElement(
        'span',
        { style: { float: 'right', marginTop: -3, marginLeft: 5 } },
        React.createElement(
          Bootstrap.Button,
          { bsStyle: 'default', className: 'btn-circle', onClick: this.refreshJobs },
          React.createElement('i', { className: 'fa fa-refresh fa-fw' })
        )
      )
    );

    var executionFilterHeader = React.createElement(
      'span',
      null,
      React.createElement('i', { className: 'fa fa-history fa-fw' }),
      React.createElement(
        'span',
        { style: { paddingLeft: 4 } },
        'Executions'
      ),
      React.createElement('span', { style: { float: 'right', marginTop: -3, marginLeft: 5 } })
    );

    var resetButton = React.createElement('div', null);

    if (this.props.scheduler.query.execution.jobName || this.props.scheduler.query.execution.exitCode) {
      resetButton = React.createElement(
        'div',
        { style: { float: 'right', marginLeft: 20 } },
        React.createElement(
          Bootstrap.Button,
          { bsStyle: 'default', onClick: this.clearExecutionFilter },
          'Reset'
        )
      );
    }

    return React.createElement(
      'div',
      { className: 'container-fluid', style: { paddingTop: 10 } },
      React.createElement(
        'div',
        { className: 'row' },
        React.createElement(
          'div',
          { className: 'col-md-12' },
          React.createElement(
            Bootstrap.Panel,
            { header: jobTableHeader },
            React.createElement(
              Bootstrap.ListGroup,
              { fill: true },
              React.createElement(
                Bootstrap.ListGroupItem,
                null,
                React.createElement(Table, {
                  sortable: true,
                  sorter: {
                    defaultSort: 'category',
                    defaultOrder: 'desc'
                  },
                  fields: jobTableFields,
                  data: jobTableData,
                  pager: jobTablePager,
                  template: { empty: jobDataNotFound }
                })
              )
            )
          )
        )
      ),
      React.createElement(
        'div',
        { className: 'row' },
        React.createElement(
          'div',
          { className: 'col-md-12' },
          React.createElement(
            Bootstrap.Panel,
            { header: executionFilterHeader },
            React.createElement(
              Bootstrap.ListGroup,
              { fill: true },
              React.createElement(
                Bootstrap.ListGroupItem,
                null,
                React.createElement(
                  'div',
                  { className: 'row' },
                  React.createElement(
                    'div',
                    { className: 'col-md-3' },
                    React.createElement(Select, { name: 'jobName',
                      value: this.props.scheduler.query.execution.jobName || 'UNDEFINED',
                      options: jobNames,
                      onChange: this.filterExecutionByJobName,
                      clearable: false,
                      searchable: false, className: 'form-group' }),
                    React.createElement(
                      'span',
                      { className: 'help-block' },
                      'Filter by job name'
                    )
                  ),
                  React.createElement(
                    'div',
                    { className: 'col-md-2' },
                    React.createElement(Select, { name: 'exitCode',
                      value: this.props.scheduler.query.execution.exitCode || 'UNDEFINED',
                      options: [{ value: 'UNDEFINED', label: '-' }, { value: 'UNKNOWN', label: 'UNKNOWN' }, { value: 'EXECUTING', label: 'EXECUTING' }, { value: 'COMPLETED', label: 'COMPLETED' }, { value: 'FAILED', label: 'FAILED' }, { value: 'STOPPED', label: 'STOPPED' }],
                      onChange: this.filterExecutionByExitCode,
                      clearable: false,
                      searchable: false, className: 'form-group' }),
                    React.createElement(
                      'span',
                      { className: 'help-block' },
                      'Filter by exit code'
                    )
                  ),
                  React.createElement(
                    'div',
                    { className: 'col-md-4', style: { float: 'right' } },
                    resetButton
                  )
                )
              ),
              React.createElement(
                Bootstrap.ListGroupItem,
                null,
                React.createElement(Table, {
                  fields: executionTableFields,
                  data: executionTableData,
                  pager: executionTablePager,
                  template: { empty: executionDataNotFound }
                })
              )
            )
          )
        )
      )
    );
  }
}));

Scheduler.icon = 'clock-o';
Scheduler.title = 'Section.Scheduler.Title';

function mapStateToProps(state) {
  return {
    scheduler: state.scheduler,
    routing: state.routing
  };
}

function mapDispatchToProps(dispatch) {
  return {
    actions: bindActionCreators(Object.assign({}, {
      jobChangeIndex: jobChangeIndex,
      getJobs: getJobs,
      executionChangeIndex: executionChangeIndex,
      getExecutions: getExecutions,
      filterExecutionByJobName: filterExecutionByJobName,
      filterExecutionByExitCode: filterExecutionByExitCode,
      clearExecutionFilter: clearExecutionFilter,
      enableJob: enableJob,
      disableJob: disableJob,
      launchJob: launchJob
    }), dispatch)
  };
}

module.exports = connect(mapStateToProps, mapDispatchToProps)(Scheduler);

},{"../../actions/SchedulerActions":447,"../Table":502,"livereactload/babel-transform":28,"react":"react","react-bootstrap":"react-bootstrap","react-redux":"react-redux","react-select":"react-select","redux":"redux"}],533:[function(require,module,exports){
'use strict';

var _react2 = require('react');

var _react3 = _interopRequireDefault(_react2);

var _babelTransform = require('livereactload/babel-transform');

var _babelTransform2 = _interopRequireDefault(_babelTransform);

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _components = {
  _component: {}
};

var _livereactloadBabelTransform2 = (0, _babelTransform2.default)({
  filename: '/home/daiad/Desktop/Development/home-web/utility/src/main/frontend/components/section/UserCatalog.js',
  components: _components,
  locals: [],
  imports: [_react3.default]
});

function _wrapComponent(id) {
  return function (Component) {
    return _livereactloadBabelTransform2(Component, id);
  };
}

var React = require('react');
var Bootstrap = require('react-bootstrap');

var _require = require('redux'),
    bindActionCreators = _require.bindActionCreators;

var _require2 = require('react-redux'),
    connect = _require2.connect;

var Table = require('../Table');
var Chart = require('../reports-measurements/chart');
var InputTextModal = require('../InputTextModal');
var Switch = require('rc-switch');

var _require3 = require('../../actions/UserCatalogActions'),
    getAccounts = _require3.getAccounts,
    changeIndex = _require3.changeIndex,
    filterText = _require3.filterText,
    filterSerial = _require3.filterSerial,
    clearFilter = _require3.clearFilter,
    getMeter = _require3.getMeter,
    getUserChart = _require3.getUserChart,
    clearChart = _require3.clearChart,
    setSearchModeText = _require3.setSearchModeText,
    setSearchModeMap = _require3.setSearchModeMap,
    setGeometry = _require3.setGeometry,
    removeFavorite = _require3.removeFavorite,
    addFavorite = _require3.addFavorite,
    setSelectionMode = _require3.setSelectionMode,
    discardBagOfConsumers = _require3.discardBagOfConsumers,
    toggleConsumer = _require3.toggleConsumer,
    saveBagOfConsumers = _require3.saveBagOfConsumers,
    toggleFilterFavorite = _require3.toggleFilterFavorite;

var _require4 = require('react-leaflet-wrapper'),
    Map = _require4.Map,
    TileLayer = _require4.TileLayer,
    GeoJSON = _require4.GeoJSON,
    DrawControl = _require4.DrawControl;

var _setSelectionMode = function _setSelectionMode(e) {
  this.props.actions.setSelectionMode(!this.props.userCatalog.selection.enabled);
};

var _show = function _show() {
  if (Object.keys(this.props.userCatalog.selection.selected).length > 0) {
    this.setState({ modal: true });
  }
};

var _hide = function _hide() {
  this.setState({ modal: false });
};

var _setTitle = function _setTitle(key, text) {
  _hide.bind(this)();

  if (text && key === 'save') {
    _saveBagOfConsumers.bind(this)(text, Object.keys(this.props.userCatalog.selection.selected));
  }
};

var _saveBagOfConsumers = function _saveBagOfConsumers(title, members) {
  this.props.actions.saveBagOfConsumers(title, members);
};

var _discardBagOfConsumers = function _discardBagOfConsumers(e) {
  this.props.actions.discardBagOfConsumers();
};

var _handleKeyPress = function _handleKeyPress(e) {
  if (e.key === 'Enter') {
    this.refresh();
  }
};

var _setSearchMode = function _setSearchMode(e) {
  if (this.props.userCatalog.search === 'map') {
    this.props.actions.setSearchModeText();
  } else {
    this.props.actions.setSearchModeMap();
  }
};

var _onFeatureChange = function _onFeatureChange(features) {
  if (!features || !features.features || !Array.isArray(features.features) || features.features.length === 0) {
    this.props.actions.setGeometry(null);
  } else {
    this.props.actions.setGeometry(features.features[0].geometry);
  }
};

var _clearChart = function _clearChart() {
  this.props.actions.clearChart();
};

var UserCatalog = _wrapComponent('_component')(React.createClass({
  displayName: 'UserCatalog',

  contextTypes: {
    intl: React.PropTypes.object
  },

  getInitialState: function getInitialState() {
    return {
      modal: false,
      draw: false
    };
  },

  componentWillMount: function componentWillMount() {
    if (this.props.userCatalog.accounts == null) {
      this.props.actions.getAccounts();
    }
  },

  onPageIndexChange: function onPageIndexChange(index) {
    this.props.actions.changeIndex(index);
  },

  filterText: function filterText(e) {
    this.props.actions.filterText(this.refs.accountFilter.getValue());
  },

  filterSerial: function filterSerial(e) {
    this.props.actions.filterSerial(this.refs.serialFilter.getValue());
  },

  clearFilter: function clearFilter(e) {
    this.props.actions.clearFilter();
  },

  refresh: function refresh(e) {
    this.props.actions.getAccounts();
  },

  render: function render() {
    var _this = this;

    var tableFields = [{
      name: 'id',
      title: 'Id',
      hidden: true
    }, {
      name: 'email',
      title: 'Section.Users.Table1.User',
      link: function link(row) {
        if (row.id) {
          return '/user/{id}/';
        }
        return null;
      }
    }, {
      name: 'fullname',
      title: 'Section.Users.Table1.Name'
    }, {
      name: 'serial',
      title: 'Section.Users.Table1.SWM'
    }, {
      name: 'registrationDateMils',
      title: 'Section.Users.Table1.RegisteredOn',
      type: 'datetime'
    }, {
      name: 'favorite',
      type: 'action',
      icon: function icon(field, row) {
        return row.favorite ? 'star' : 'star-o';
      },
      handler: function (field, row) {
        if (row.favorite) {
          this.props.actions.removeFavorite(row.id);
        } else {
          this.props.actions.addFavorite(row.id);
        }
      }.bind(this)
    }, {
      name: 'chart',
      type: 'action',
      icon: 'bar-chart-o',
      handler: function (field, row) {
        if (row.serial) {
          var profile = this.props.profile;
          this.props.actions.getUserChart(row.id, row.fullname + ' - ' + row.serial, profile.timezone);
          this.setState({ draw: true });
        }
      }.bind(this),
      visible: function (field, row) {
        return row.meter !== null;
      }.bind(this)
    }];

    var tableData = this.props.userCatalog.data.accounts || [];
    var tablePager = {
      index: this.props.userCatalog.data.index || 0,
      size: this.props.userCatalog.data.size || 10,
      count: this.props.userCatalog.data.total || 0,
      onPageIndexChange: this.onPageIndexChange,
      mode: Table.PAGING_SERVER_SIDE
    };

    if (this.props.userCatalog.selection.enabled) {
      tableFields.splice(1, 0, {
        name: 'selected',
        title: '',
        type: 'alterable-boolean',
        width: 30,
        handler: function (id, name, value) {
          this.props.actions.toggleConsumer(id);
        }.bind(this)
      });
    }

    var tableStyle = {
      //border: '1px #666 solid'
      //row : {
      //  height: 50,
      //  rowHeight: 50
      //}
    };

    var resetButton = React.createElement('div', null);

    if (this.props.userCatalog.query.text || this.props.userCatalog.query.serial) {
      resetButton = React.createElement(
        'div',
        { style: { float: 'right', marginLeft: 20 } },
        React.createElement(
          Bootstrap.Button,
          { bsStyle: 'default', onClick: this.clearFilter },
          'Reset'
        )
      );
    }

    var filterOptions = React.createElement(
      Bootstrap.ListGroupItem,
      null,
      React.createElement(
        'div',
        { className: 'row' },
        React.createElement(
          'div',
          { className: 'col-md-4' },
          React.createElement(Bootstrap.Input, {
            type: 'text',
            id: 'accountFilter', name: 'accountFilter', ref: 'accountFilter',
            placeholder: 'Account or Name  ...',
            onChange: this.filterText,
            onKeyPress: _handleKeyPress.bind(this),
            value: this.props.userCatalog.query.text || '' }),
          React.createElement(
            'span',
            { className: 'help-block' },
            'Filter by name or account'
          )
        ),
        React.createElement(
          'div',
          { className: 'col-md-4' },
          React.createElement(Bootstrap.Input, {
            type: 'text',
            id: 'serialFilter', name: 'serialFilter', ref: 'serialFilter',
            placeholder: 'SWM Serial Number  ...',
            onChange: this.filterSerial,
            onKeyPress: _handleKeyPress.bind(this),
            value: this.props.userCatalog.query.serial || '' }),
          React.createElement(
            'span',
            { className: 'help-block' },
            'Filter meter serial number'
          )
        ),
        React.createElement(
          'div',
          { className: 'col-md-4' },
          React.createElement(
            'div',
            { className: 'clearfix form-group', style: { paddingBottom: 7 } },
            React.createElement(Switch, { className: 'col-sm-2', style: { marginTop: 7 },
              onChange: this.props.actions.toggleFilterFavorite,
              checked: this.props.userCatalog.query.favorite
            })
          ),
          React.createElement(
            'span',
            { className: 'help-block' },
            'Filter favorites'
          )
        )
      ),
      React.createElement(
        'div',
        { className: 'row' },
        React.createElement(
          'div',
          { className: 'col-md-12', style: { float: 'right' } },
          resetButton,
          React.createElement(
            'div',
            { style: { float: 'right' } },
            React.createElement(
              Bootstrap.Button,
              { bsStyle: 'primary', onClick: this.refresh },
              'Refresh'
            )
          )
        )
      )
    );

    var dataNotFound = React.createElement(
      'span',
      null,
      this.props.userCatalog.isLoading ? 'Loading data ...' : 'No data found.'
    );

    var filterTitle;
    if (this.props.userCatalog.selection.enabled) {
      filterTitle = React.createElement(
        'span',
        null,
        React.createElement('i', { className: 'fa fa-search fa-fw' }),
        React.createElement(
          'span',
          { style: { paddingLeft: 4 } },
          'Search'
        ),
        React.createElement(
          'span',
          { style: { float: 'right', marginTop: 2, marginLeft: 5 } },
          Object.keys(this.props.userCatalog.selection.selected).length + ' selected'
        ),
        React.createElement(
          'span',
          { style: { float: 'right', marginTop: -3, marginLeft: 5 } },
          React.createElement(
            Bootstrap.Button,
            { bsStyle: 'default', className: 'btn-circle', onClick: _discardBagOfConsumers.bind(this) },
            React.createElement('i', { className: 'fa fa-remove fa-lg' })
          )
        ),
        React.createElement(
          'span',
          { style: { float: 'right', marginTop: -3, marginLeft: 5 } },
          React.createElement(
            Bootstrap.Button,
            { bsStyle: 'default', className: 'btn-circle', onClick: _show.bind(this) },
            React.createElement('i', { className: 'fa fa-save fa-lg' })
          )
        )
      );
    } else {
      filterTitle = React.createElement(
        'span',
        null,
        React.createElement('i', { className: 'fa fa-search fa-fw' }),
        React.createElement(
          'span',
          { style: { paddingLeft: 4 } },
          'Search'
        ),
        React.createElement(
          'span',
          { style: { float: 'right', marginTop: -3, marginLeft: 5 } },
          React.createElement(
            Bootstrap.Button,
            { bsStyle: 'default', className: 'btn-circle', onClick: _setSelectionMode.bind(this), title: 'Create a new group' },
            React.createElement('i', { className: 'fa fa-shopping-basket fa-lg' })
          )
        )
      );
    }

    var mapTitle = React.createElement(
      'span',
      null,
      React.createElement(
        'span',
        null,
        React.createElement('i', { className: 'fa fa-map fa-fw' }),
        React.createElement(
          'span',
          { style: { paddingLeft: 4 } },
          'Map'
        )
      ),
      React.createElement(
        'span',
        { style: { float: 'right', marginTop: -3, marginLeft: 5 } },
        React.createElement(
          Bootstrap.Button,
          { bsStyle: 'default', className: 'btn-circle', onClick: _setSearchMode.bind(this) },
          React.createElement('i', { className: this.props.userCatalog.search === 'map' ? 'fa fa-undo fa-fw' : 'fa fa-pencil fa-fw' })
        )
      )
    );

    var map = React.createElement(
      Map,
      {
        width: '100%',
        height: 600,
        center: [38.35, -0.48],
        zoom: 13
      },
      React.createElement(TileLayer, null),
      this.props.userCatalog.search === 'map' ? React.createElement(DrawControl, {
        onFeatureChange: _onFeatureChange.bind(this)
      }) : React.createElement('div', null),
      React.createElement(GeoJSON, {
        name: 'Users',
        data: this.props.userCatalog.data.features,
        popupContent: function popupContent(feature) {
          return React.createElement(
            'div',
            null,
            React.createElement(
              'h4',
              null,
              feature.properties.name
            ),
            React.createElement(
              'h5',
              null,
              'Address: ',
              React.createElement(
                'span',
                null,
                feature.properties.address
              )
            ),
            React.createElement(
              'h5',
              null,
              'Meter id: \xA0',
              React.createElement(
                'a',
                {
                  href: '#',
                  onClick: function onClick(e) {
                    e.preventDefault();
                    var _feature$properties = feature.properties,
                        userKey = _feature$properties.userKey,
                        name = _feature$properties.name,
                        serial = _feature$properties.meter.serial;
                    var profile = _this.props.profile;

                    if (serial) {
                      _this.props.actions.getUserChart(userKey, name + ' - ' + serial, profile.timezone);
                      _this.setState({ draw: true });
                    }
                  }
                },
                feature.properties.meter.serial
              )
            )
          );
        }
      })
    );

    var chartTitleText,
        chart = React.createElement(
      'span',
      null,
      'Select a meter ...'
    );

    if (Object.keys(this.props.userCatalog.charts).length) {
      chartTitleText = React.createElement(
        'span',
        null,
        React.createElement(
          'span',
          null,
          React.createElement('i', { className: 'fa fa-bar-chart fa-fw' }),
          React.createElement(
            'span',
            { style: { paddingLeft: 4 } },
            'Consumption - Last 30 days'
          )
        ),
        React.createElement(
          'span',
          { style: { float: 'right', marginTop: -3, marginLeft: 5 } },
          React.createElement(
            Bootstrap.Button,
            { bsStyle: 'default', className: 'btn-circle', onClick: _clearChart.bind(this) },
            React.createElement('i', { className: 'fa fa-remove fa-fw' })
          )
        )
      );

      var multipleSeries = [];
      for (var key in this.props.userCatalog.charts) {
        var tempSeries = this.props.userCatalog.charts[key].series;
        if (tempSeries) {
          multipleSeries.push(tempSeries);
        }
      }

      var defaults = {
        chartProps: {
          width: 780,
          height: 300
        }
      };

      var fSeries = _.flatten(multipleSeries);

      var series = fSeries[0] ? fSeries : null;

      chart = React.createElement(Chart, _extends({}, defaults.chartProps, {
        draw: this.state.draw,
        field: "volume",
        level: "day",
        reportName: "avg",
        finished: this.props.userCatalog.finished,
        series: series,
        context: this.props.config,
        overlap: null,
        overlapping: false
      }));
    }

    return React.createElement(
      'div',
      { className: 'container-fluid', style: { paddingTop: 10 } },
      React.createElement(InputTextModal, {
        onHide: _hide.bind(this),
        title: 'Create Group',
        visible: this.state.modal,
        prompt: 'Title ...',
        help: 'Set title for the new group',
        actions: [{ style: 'default', key: 'save', text: 'Save' }, { style: 'danger', key: 'cancel', text: 'Cancel' }],
        handler: _setTitle.bind(this)
      }),
      React.createElement(
        'div',
        { className: 'row' },
        React.createElement(
          'div',
          { className: 'col-md-7' },
          React.createElement(
            Bootstrap.Panel,
            { header: filterTitle },
            React.createElement(
              Bootstrap.ListGroup,
              { fill: true },
              filterOptions,
              React.createElement(
                Bootstrap.ListGroupItem,
                null,
                React.createElement(Table, {
                  fields: tableFields,
                  data: tableData,
                  pager: tablePager,
                  template: { empty: dataNotFound },
                  style: {
                    table: tableStyle
                  }
                })
              )
            )
          )
        ),
        React.createElement(
          'div',
          { className: 'col-md-5' },
          React.createElement(
            Bootstrap.Panel,
            { header: mapTitle },
            React.createElement(
              Bootstrap.ListGroup,
              { fill: true },
              React.createElement(
                Bootstrap.ListGroupItem,
                null,
                map
              )
            )
          )
        )
      ),
      React.createElement(
        'div',
        { className: 'row' },
        React.createElement(
          'div',
          { className: 'col-md-12' },
          React.createElement(
            Bootstrap.Panel,
            { header: chartTitleText },
            React.createElement(
              Bootstrap.ListGroup,
              { fill: true },
              React.createElement(
                Bootstrap.ListGroupItem,
                null,
                chart
              )
            )
          )
        )
      )
    );
  }
}));

UserCatalog.icon = 'user';
UserCatalog.title = 'Section.Users.Title';

function mapStateToProps(state) {
  return {
    userCatalog: state.userCatalog,
    profile: state.session.profile,
    routing: state.routing,
    config: state.config
  };
}

function mapDispatchToProps(dispatch) {
  return {
    actions: bindActionCreators(Object.assign({}, {
      getAccounts: getAccounts, changeIndex: changeIndex, filterSerial: filterSerial, filterText: filterText, clearFilter: clearFilter,
      getMeter: getMeter, getUserChart: getUserChart, clearChart: clearChart, setSearchModeText: setSearchModeText,
      setSearchModeMap: setSearchModeMap, setGeometry: setGeometry, removeFavorite: removeFavorite, addFavorite: addFavorite,
      setSelectionMode: setSelectionMode, discardBagOfConsumers: discardBagOfConsumers, toggleConsumer: toggleConsumer,
      saveBagOfConsumers: saveBagOfConsumers, toggleFilterFavorite: toggleFilterFavorite
    }), dispatch)
  };
}

module.exports = connect(mapStateToProps, mapDispatchToProps)(UserCatalog);

},{"../../actions/UserCatalogActions":450,"../InputTextModal":494,"../Table":502,"../reports-measurements/chart":515,"livereactload/babel-transform":28,"rc-switch":38,"react":"react","react-bootstrap":"react-bootstrap","react-leaflet-wrapper":151,"react-redux":"react-redux","redux":"redux"}],534:[function(require,module,exports){
'use strict';

var _react2 = require('react');

var _react3 = _interopRequireDefault(_react2);

var _babelTransform = require('livereactload/babel-transform');

var _babelTransform2 = _interopRequireDefault(_babelTransform);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _components = {
  'Analytics.BasicReports': {
    displayName: 'Analytics.BasicReports'
  }
};

var _livereactloadBabelTransform2 = (0, _babelTransform2.default)({
  filename: '/home/daiad/Desktop/Development/home-web/utility/src/main/frontend/components/section/analytics/basic-reports.js',
  components: _components,
  locals: [],
  imports: [_react3.default]
});

function _wrapComponent(id) {
  return function (Component) {
    return _livereactloadBabelTransform2(Component, id);
  };
}

var React = require('react');
var Redux = require('react-redux');

var PropTypes = React.PropTypes;

var _require = require('../../reports'),
    BasicReports = _require.Overview;

var _require2 = require('../../../prop-types'),
    configPropType = _require2.configPropType;

var Page = _wrapComponent('Analytics.BasicReports')(React.createClass({
  displayName: 'Analytics.BasicReports',

  propTypes: {
    routes: PropTypes.array, // supplied by react-router
    config: configPropType
  },

  contextTypes: {
    intl: React.PropTypes.object
  },

  render: function render() {
    return React.createElement(
      'div',
      { className: 'container-fluid' },
      React.createElement(
        'div',
        { className: 'row' },
        React.createElement(
          'div',
          { className: 'col-md-12' },
          React.createElement(BasicReports, { config: this.props.config })
        )
      )
    );
  }

}));

Page.icon = 'bullseye';
Page.title = 'Section.Analytics.BasicReports';

function mapStateToProps(state, ownProps) {
  return {
    config: state.config
  };
}

function mapDispatchToProps(dispatch, ownProps) {
  return {};
}

module.exports = Redux.connect(mapStateToProps, mapDispatchToProps)(Page);

},{"../../../prop-types":604,"../../reports":525,"livereactload/babel-transform":28,"react":"react","react-redux":"react-redux"}],535:[function(require,module,exports){
'use strict';

var _react2 = require('react');

var _react3 = _interopRequireDefault(_react2);

var _babelTransform = require('livereactload/babel-transform');

var _babelTransform2 = _interopRequireDefault(_babelTransform);

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _components = {
  _component: {}
};

var _livereactloadBabelTransform2 = (0, _babelTransform2.default)({
  filename: '/home/daiad/Desktop/Development/home-web/utility/src/main/frontend/components/section/analytics/favorites.js',
  components: _components,
  locals: [],
  imports: [_react3.default]
});

function _wrapComponent(id) {
  return function (Component) {
    return _livereactloadBabelTransform2(Component, id);
  };
}

var React = require('react');
var sprintf = require('sprintf');
var Bootstrap = require('react-bootstrap');
var Modal = require('../../Modal');
var Timeline = require('../../Timeline');
var Table = require('../../Table');

var _require = require('react-intl'),
    FormattedTime = _require.FormattedTime;

var _require2 = require('react-router'),
    Link = _require2.Link;

var _require3 = require('redux'),
    bindActionCreators = _require3.bindActionCreators;

var _require4 = require('react-redux'),
    connect = _require4.connect;

var _require5 = require('react-leaflet-wrapper'),
    Map = _require5.Map,
    TileLayer = _require5.TileLayer,
    GeoJSON = _require5.GeoJSON,
    Choropleth = _require5.Choropleth,
    LayersControl = _require5.LayersControl,
    InfoControl = _require5.InfoControl;

var Chart = require('../../reports-measurements/chart');

var _require6 = require('../../../prop-types'),
    configPropType = _require6.configPropType;

var population = require('../../../model/population');

var _require7 = require('../../../actions/FavouritesActions'),
    setTimezone = _require7.setTimezone,
    fetchFavouriteQueries = _require7.fetchFavouriteQueries,
    openFavourite = _require7.openFavourite,
    closeFavourite = _require7.closeFavourite,
    setActiveFavourite = _require7.setActiveFavourite,
    addCopy = _require7.addCopy,
    deleteFavourite = _require7.deleteFavourite,
    openWarning = _require7.openWarning,
    closeWarning = _require7.closeWarning,
    resetMapState = _require7.resetMapState,
    getFavouriteMap = _require7.getFavouriteMap,
    getFavouriteChart = _require7.getFavouriteChart,
    getFavouriteForecast = _require7.getFavouriteForecast,
    getFeatures = _require7.getFeatures,
    getProfileLayout = _require7.getProfileLayout,
    pinToDashboard = _require7.pinToDashboard,
    unpin = _require7.unpin;

var _require8 = require('../../../actions/MapActions'),
    getMetersLocations = _require8.getMetersLocations;

var _getTimelineValues = function _getTimelineValues(timeline) {
  if (timeline) {
    return timeline.getTimestamps();
  }
  return [];
};

var _getTimelineLabels = function _getTimelineLabels(timeline) {
  if (timeline) {
    return timeline.getTimestamps().map(function (timestamp) {
      return React.createElement(FormattedTime, { value: new Date(timestamp),
        day: 'numeric',
        month: 'numeric',
        year: 'numeric' });
    });
  }
  return [];
};

var _onChangeTimeline = function _onChangeTimeline(value, label, index) {
  this.props.actions.getFeatures(index, value);
};

var Favourites = _wrapComponent('_component')(React.createClass({
  displayName: 'Favourites',

  contextTypes: {
    intl: React.PropTypes.object,
    config: configPropType,
    router: function router() {
      return React.PropTypes.func.isRequired;
    }
    //using this instead of  router: React.PropTypes.func due to warning
    //https://github.com/react-bootstrap/react-router-bootstrap/issues/91
  },

  getInitialState: function getInitialState() {
    return {
      expanded: null
    };
  },


  componentWillMount: function componentWillMount() {

    this.props.actions.resetMapState();

    //todo - close type Map after fixing issue with Leaflet unmounting
    if (this.props.selectedFavourite && this.props.selectedFavourite.type === 'CHART') {
      this.props.actions.closeFavourite();
    }

    this.props.actions.fetchFavouriteQueries();
    this.props.actions.getProfileLayout();
    //this.setState({points : createPoints()});

    if (!this.props.metersLocations) {
      this.props.actions.getMetersLocations();
    }
  },

  componentDidMount: function componentDidMount() {
    var utility = this.props.profile.utility;
    this.props.actions.setTimezone(utility.timezone);
  },

  clickedOpenFavourite: function clickedOpenFavourite(favourite) {
    var profile = this.props.profile;
    favourite.timezone = profile.utility.timezone;
    this.props.actions.closeFavourite();

    switch (favourite.type) {
      case 'MAP':
        this.props.actions.getFavouriteMap(favourite);
        break;
      case 'CHART':
        this.props.actions.getFavouriteChart(favourite);
        break;
      case 'FORECAST':
        var groupType = favourite.queries[0].population[0].type;
        var population1;
        if (groupType === 'UTILITY') {
          this.props.actions.getFavouriteForecast(null, profile.utility.key, profile.utility.name, profile.timezone);
        } else if (groupType === 'GROUP') {
          var _population$fromStrin = population.fromString(favourite.queries[0].population[0].label),
              _population$fromStrin2 = _slicedToArray(_population$fromStrin, 1),
              g = _population$fromStrin2[0];

          if (!g.clusterKey) {
            population1 = [{ group: g.key, label: "GROUP:" + g.key + '/' + favourite.title, type: "GROUP" }];
            this.props.actions.getFavouriteForecast(population1, profile.utility.key, profile.utility.name, profile.timezone);
          } else {
            population1 = [{ group: g.key, label: "CLUSTER:" + g.clusterKey + ":" + g.key, type: "GROUP" }];
            this.props.actions.getFavouriteForecast(population1, profile.utility.key, profile.utility.name, profile.timezone);
          }
        } else if (groupType === 'USER') {
          console.error('Single user forecast favourite not supported. ', favourite.queries[0].population[0]);
        }
        break;
      default:
        console.error(sprintf('Favourite type (%s) not supported.', favourite.type));
        break;
    }

    this.props.actions.openFavourite(favourite);
  },
  editFavourite: function editFavourite(favourite) {
    this.props.actions.setActiveFavourite(favourite);
    switch (favourite.type) {
      case 'MAP':
        this.context.router.push('/analytics/map');
        break;
      case 'CHART':
        this.context.router.push('/analytics/panel');
        break;
      default:
        console.warn('Favourite type [' + favourite.type + '] is not supported.');
        break;
    }
  },
  duplicateFavourite: function duplicateFavourite(namedQuery) {
    var request = {
      'namedQuery': namedQuery
    };
    namedQuery.title = namedQuery.title + ' (copy)';
    this.props.actions.addCopy(request);
    this.props.actions.fetchFavouriteQueries();
  },
  clickedDeleteFavourite: function clickedDeleteFavourite(namedQuery) {
    var request = {
      'namedQuery': namedQuery
    };
    this.props.actions.openWarning(request);
  },
  pinToDashboard: function pinToDashboard(namedQuery) {
    var request = {
      'namedQuery': namedQuery
    };
    this.props.actions.pinToDashboard(request);
  },


  unpin: function unpin(fav, e) {
    var request = {
      'namedQuery': fav
    };
    this.props.actions.unpin(request);
  },

  onLinkClick: function onLinkClick() {
    //todo - consider keeping or discarding favourite
  },


  render: function render() {
    if (this.props.isLoading) {
      return React.createElement(
        'div',
        null,
        React.createElement('img', { className: 'preloader', src: '/assets/images/utility/preloader-counterclock.png' }),
        React.createElement('img', { className: 'preloader-inner', src: '/assets/images/utility/preloader-clockwise.png' })
      );
    }

    var icon = 'list';
    var self = this;

    var dashboardLinkFooter = React.createElement(
      Bootstrap.ListGroupItem,
      null,
      React.createElement(
        'span',
        { style: { paddingLeft: 7 } },
        ' '
      ),
      React.createElement(
        Link,
        { to: '/', style: { paddingLeft: 7, float: 'right' } },
        'View Dashboard'
      )
    );

    var configTitle = React.createElement(
      'span',
      null,
      React.createElement('i', { className: 'fa fa-' + icon + ' fa-fw' }),
      React.createElement(
        'span',
        { style: { paddingLeft: 4 } },
        'Favourite Selection'
      )
    );

    var title, dataContent, footerContent, toggleTitle, togglePanel;

    var defaults = {
      chartProps: {
        width: 780,
        height: 300
      }
    };

    if (this.props.selectedFavourite) {
      var timelineMin = this.props.map.timeline && this.props.map.timeline.min || 0;
      var timelineMax = this.props.map.timeline && this.props.map.timeline.max || 0;
      switch (this.props.selectedFavourite.type) {
        case 'MAP':
          title = 'Map: ' + this.props.selectedFavourite.title;
          dataContent = React.createElement(
            Bootstrap.ListGroupItem,
            null,
            React.createElement(
              Map,
              {
                center: [38.36, -0.479],
                zoom: 13,
                width: '100%',
                height: 600,
                info: 'topright'
              },
              React.createElement(
                LayersControl,
                { position: 'topright' },
                React.createElement(TileLayer, null),
                React.createElement(
                  InfoControl,
                  { position: 'bottomleft' },
                  React.createElement(Choropleth, {
                    name: 'Areas',
                    data: this.props.map.features,
                    legend: timelineMax === 0 ? null : 'bottomright',
                    valueProperty: 'value',
                    scale: ['white', 'red'],
                    limits: [timelineMin, timelineMax],
                    steps: 6,
                    mode: 'e',
                    infoContent: function infoContent(feature) {
                      return feature && feature.properties ? React.createElement(
                        'div',
                        null,
                        React.createElement(
                          'h5',
                          null,
                          feature.properties.label
                        ),
                        React.createElement(
                          'span',
                          null,
                          feature.properties.value
                        )
                      ) : React.createElement(
                        'div',
                        null,
                        React.createElement(
                          'h5',
                          null,
                          'Hover over an area...'
                        )
                      );
                    },
                    highlightStyle: { weight: 4 },
                    style: {
                      fillColor: "#ffff00",
                      color: "#000",
                      weight: 3,
                      opacity: 1,
                      fillOpacity: 0.5
                    }
                  })
                ),
                React.createElement(GeoJSON, {
                  name: 'Meters',
                  data: this.props.metersLocations,
                  popupContent: function popupContent(feature) {
                    return React.createElement(
                      'div',
                      null,
                      React.createElement(
                        'h5',
                        null,
                        'Serial:'
                      ),
                      React.createElement(
                        'h5',
                        null,
                        feature.properties.serial
                      )
                    );
                  },
                  circleMarkers: true,
                  style: {
                    radius: 8,
                    fillColor: "#ff7800",
                    color: "#000",
                    weight: 1,
                    opacity: 1,
                    fillOpacity: 0.8
                  }
                })
              )
            ),
            React.createElement(Timeline, { onChange: _onChangeTimeline.bind(this),
              labels: _getTimelineLabels(this.props.map.timeline),
              values: _getTimelineValues(this.props.map.timeline),
              defaultIndex: this.props.map.index,
              speed: 1000,
              animate: false })
          );

          footerContent = React.createElement(
            Bootstrap.ListGroupItem,
            null,
            React.createElement(
              'span',
              { style: { paddingLeft: 7 } },
              ' '
            ),
            React.createElement(
              Link,
              {
                to: '/analytics/map',
                style: { paddingLeft: 7, float: 'right' },
                onClick: this.onLinkClick
              },
              'View Maps'
            ),
            React.createElement(
              'span',
              { style: { paddingLeft: 7 } },
              ' '
            ),
            React.createElement(
              Link,
              { to: '/', style: { paddingLeft: 7, float: 'right' } },
              'View Dashboard'
            )
          );
          break;
        case 'CHART':
          var overlap, overlapping;
          if (this.props.selectedFavourite.overlap) {
            overlap = { value: this.props.selectedFavourite.overlap, label: this.props.selectedFavourite.overlap };
            overlapping = true;
          } else {
            overlap = null;
            overlapping = false;
          }

          title = 'Chart: ' + this.props.selectedFavourite.title;
          dataContent = React.createElement(
            Bootstrap.ListGroup,
            { fill: true },
            React.createElement(
              Bootstrap.ListGroupItem,
              { className: 'report-chart-wrapper' },
              React.createElement(Chart, _extends({}, defaults.chartProps, {
                draw: this.props.draw,
                field: this.props.selectedFavourite.field,
                level: this.props.selectedFavourite.level,
                reportName: this.props.selectedFavourite.reportName,
                finished: this.props.finished,
                series: this.props.data,
                context: this.props.config,
                overlap: overlap,
                overlapping: overlapping
              }))
            )
          );

          footerContent = React.createElement(
            Bootstrap.ListGroupItem,
            null,
            React.createElement(
              'span',
              { style: { paddingLeft: 7 } },
              ' '
            ),
            React.createElement(
              Link,
              {
                to: '/analytics/panel',
                style: { paddingLeft: 7, float: 'right' },
                onClick: this.onLinkClick
              },
              'View Charts'
            ),
            React.createElement(
              'span',
              { style: { paddingLeft: 7 } },
              ' '
            ),
            React.createElement(
              Link,
              { to: '/', style: { paddingLeft: 7, float: 'right' } },
              'View Dashboard'
            )
          );

          break;
        case 'FORECAST':
          var forecastObject = null;
          var groupType = this.props.selectedFavourite.queries[0].population[0].type;
          if (groupType === 'UTILITY') {
            forecastObject = null;
          } else if (groupType === 'GROUP') {
            var _population$fromStrin3 = population.fromString(this.props.selectedFavourite.queries[0].population[0].label),
                _population$fromStrin4 = _slicedToArray(_population$fromStrin3, 1),
                g = _population$fromStrin4[0];

            if (!g.clusterKey) {
              forecastObject = { group: g.key, label: this.props.selectedFavourite.title, type: "GROUP" };
            } else {
              forecastObject = { group: g.key, label: "CLUSTER:" + g.clusterKey + ":" + g.key, type: "GROUP" };
            }
          }

          title = 'Chart: ' + this.props.selectedFavourite.title;
          dataContent = React.createElement(
            Bootstrap.ListGroup,
            { fill: true },
            React.createElement(
              Bootstrap.ListGroupItem,
              { className: 'report-chart-wrapper' },
              React.createElement(Chart, _extends({}, defaults.chartProps, {
                draw: this.props.draw,
                field: this.props.selectedFavourite.field,
                level: this.props.selectedFavourite.level,
                reportName: this.props.selectedFavourite.reportName,
                finished: this.props.finished,
                series: this.props.data,
                context: this.props.config,
                forecast: forecastObject
              }))
            )
          );

          footerContent = React.createElement(
            Bootstrap.ListGroupItem,
            null,
            React.createElement(
              'span',
              { style: { paddingLeft: 7 } },
              ' '
            ),
            React.createElement(
              Link,
              {
                to: '/analytics/panel',
                style: { paddingLeft: 7, float: 'right' },
                onClick: this.onLinkClick
              },
              'View Charts'
            ),
            React.createElement(
              'span',
              { style: { paddingLeft: 7 } },
              ' '
            ),
            React.createElement(
              Link,
              { to: '/', style: { paddingLeft: 7, float: 'right' } },
              'View Dashboard'
            )
          );
          break;
        default:
          title = this.props.selectedFavourite.type;
      }

      toggleTitle = React.createElement(
        'span',
        null,
        React.createElement(
          'span',
          null,
          React.createElement('i', { className: 'fa fa-' + icon + ' fa-fw' }),
          React.createElement(
            'span',
            { style: { paddingLeft: 4 } },
            title
          )
        ),
        React.createElement(
          'span',
          { style: { float: 'right', marginTop: -3, marginLeft: 5 } },
          React.createElement(
            Bootstrap.Button,
            { bsStyle: 'default', className: 'btn-circle', onClick: this.props.actions.closeFavourite },
            React.createElement('i', { className: 'fa fa-remove fa-fw' })
          )
        )
      );

      togglePanel = React.createElement(
        Bootstrap.Panel,
        { expanded: this.state.expanded, onSelect: this.toggleExpanded, header: toggleTitle },
        React.createElement(
          Bootstrap.ListGroup,
          { fill: true },
          dataContent,
          footerContent
        )
      );
    } else {

      var infoText = React.createElement(
        'span',
        null,
        'Click a favourite to view ...'
      );
      togglePanel = React.createElement(
        Bootstrap.Panel,
        null,
        React.createElement(
          Bootstrap.ListGroup,
          { fill: true },
          React.createElement(
            Bootstrap.ListGroupItem,
            null,
            infoText,
            dashboardLinkFooter
          )
        )
      );
    }

    var favsFields = [{
      name: 'id',
      hidden: true
    }, {
      name: 'title',
      title: 'Label'
    }, {
      name: 'tags',
      title: 'Tags'
    }, {
      name: 'createdOn',
      title: 'Date',
      type: 'datetime'
    }, {
      name: 'pin',
      title: 'Pinned',
      type: 'action',
      icon: function icon(field, row) {
        return row.pinned === false ? 'square-o' : 'check-square-o';
      },
      hidden: false,
      handler: function handler(field, row) {
        if (row.pinned) {
          self.unpin(row);
        } else {
          self.pinToDashboard(row);
        }
      }
    }, {
      name: 'view',
      type: 'action',
      icon: 'eye',
      handler: function handler(field, row) {
        self.clickedOpenFavourite(row);
      }
    }, {
      name: 'edit',
      type: 'action',
      icon: function icon(field, row) {
        return row.type === 'FORECAST' ? null : 'pencil'; //forecast edit action disabled
      },
      hidden: false,
      handler: function handler(field, row) {
        self.editFavourite(row);
      }
    }, {
      name: 'copy',
      type: 'action',
      icon: 'copy',
      handler: function handler(field, row) {
        self.duplicateFavourite(row);
      }
    },
    /* {
       name: 'link',
       type:'action',
       icon: 'link',
       handler: function() {
       }
       }, */
    {
      name: 'remove',
      type: 'action',
      icon: 'remove',
      handler: function handler(field, row) {
        self.clickedDeleteFavourite(row);
      }
    }];

    var favsData = this.props.favourites || [];

    var favsPager = {
      index: 0,
      size: 5,
      count: this.props.favourites ? this.props.favourites.length : 0
    };

    var favouriteContent = React.createElement(
      'div',
      { style: { padding: 10 } },
      React.createElement(Table, {
        fields: favsFields,
        data: favsData,
        pager: favsPager,
        template: { empty: React.createElement(
            'span',
            null,
            'No favorites found.'
          ) }
      })
    );

    if (this.props.showDeleteMessage) {
      var warning = 'Delete Favourite?';
      var actions = [{
        action: this.props.actions.closeWarning,
        name: "Cancel"
      }, {
        action: this.props.actions.deleteFavourite,
        name: "Delete",
        style: 'danger'
      }];

      return React.createElement(
        'div',
        { className: 'container-fluid', style: { paddingTop: 10 } },
        React.createElement(
          'div',
          { className: 'row' },
          React.createElement(
            'div',
            { className: 'col-lg-12' },
            React.createElement(
              Bootstrap.Panel,
              { header: configTitle },
              React.createElement(
                Bootstrap.ListGroup,
                { fill: true },
                favouriteContent
              )
            ),
            togglePanel
          )
        ),
        React.createElement(Modal, { show: this.props.showDeleteMessage,
          onClose: this.props.actions.closeWarning,
          title: warning,
          text: 'You are about to delete the favourite with label "' + this.props.favouriteToBeDeleted.namedQuery && this.props.favouriteToBeDeleted.namedQuery.title || '' + '". Are you sure?',
          actions: actions
        })
      );
    }

    if (this.props.favourites && !this.props.isLoading) {
      return React.createElement(
        'div',
        { className: 'container-fluid', style: { paddingTop: 10 } },
        React.createElement(
          'div',
          { className: 'row' },
          React.createElement(
            'div',
            { className: 'col-lg-12' },
            React.createElement(
              Bootstrap.Panel,
              { header: configTitle },
              React.createElement(
                Bootstrap.ListGroup,
                { fill: true },
                favouriteContent
              )
            ),
            togglePanel
          )
        )
      );
    } else {
      return React.createElement(
        'div',
        null,
        React.createElement('img', { className: 'preloader', src: '/assets/images/utility/preloader-counterclock.png' }),
        React.createElement('img', { className: 'preloader-inner', src: '/assets/images/utility/preloader-clockwise.png' })
      );
    }
  }
}));

function mapStateToProps(state) {
  return {
    profile: state.session.profile,
    showSelected: state.favourites.showSelected,
    selectedFavourite: state.favourites.selectedFavourite,
    favourites: state.favourites.favourites,
    showDeleteMessage: state.favourites.showDeleteMessage,
    favouriteToBeDeleted: state.favourites.favouriteToBeDeleted,
    map: state.favourites.map,
    source: state.favourites.source,
    geometry: state.favourites.geometry,
    population: state.favourites.population,
    interval: state.favourites.interval,
    config: state.config,
    draw: state.favourites.draw,
    finished: state.favourites.finished,
    data: state.favourites.data,
    metersLocations: state.map.metersLocations,
    savedLayout: state.favourites.savedLayout
  };
}

function mapDispatchToProps(dispatch) {
  return {
    actions: bindActionCreators(Object.assign({}, {
      setTimezone: setTimezone, fetchFavouriteQueries: fetchFavouriteQueries,
      openFavourite: openFavourite, closeFavourite: closeFavourite, setActiveFavourite: setActiveFavourite,
      addCopy: addCopy, deleteFavourite: deleteFavourite, openWarning: openWarning, closeWarning: closeWarning,
      resetMapState: resetMapState, getFavouriteMap: getFavouriteMap, getFavouriteChart: getFavouriteChart,
      getFavouriteForecast: getFavouriteForecast, getFeatures: getFeatures, getProfileLayout: getProfileLayout,
      pinToDashboard: pinToDashboard, unpin: unpin, getMetersLocations: getMetersLocations
    }), dispatch)
  };
}

Favourites.icon = 'bar-chart';
Favourites.title = 'Section.Analytics.Fav.Title';

module.exports = connect(mapStateToProps, mapDispatchToProps)(Favourites);

},{"../../../actions/FavouritesActions":434,"../../../actions/MapActions":441,"../../../model/population":602,"../../../prop-types":604,"../../Modal":498,"../../Table":502,"../../Timeline":503,"../../reports-measurements/chart":515,"livereactload/babel-transform":28,"react":"react","react-bootstrap":"react-bootstrap","react-intl":"react-intl","react-leaflet-wrapper":151,"react-redux":"react-redux","react-router":"react-router","redux":"redux","sprintf":"sprintf"}],536:[function(require,module,exports){
'use strict';

module.exports = {
  Fav: require('./favorites'),
  BasicReports: require('./basic-reports'), // i.e. canned reports
  ReportPanel: require('./report-panel') // i.e. report with user-supplied parameters
};

},{"./basic-reports":534,"./favorites":535,"./report-panel":537}],537:[function(require,module,exports){
'use strict';

var _react2 = require('react');

var _react3 = _interopRequireDefault(_react2);

var _babelTransform = require('livereactload/babel-transform');

var _babelTransform2 = _interopRequireDefault(_babelTransform);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _components = {
  'Analytics.ReportPanel': {
    displayName: 'Analytics.ReportPanel'
  }
};

var _livereactloadBabelTransform2 = (0, _babelTransform2.default)({
  filename: '/home/daiad/Desktop/Development/home-web/utility/src/main/frontend/components/section/analytics/report-panel.js',
  components: _components,
  locals: [],
  imports: [_react3.default]
});

function _wrapComponent(id) {
  return function (Component) {
    return _livereactloadBabelTransform2(Component, id);
  };
}

var React = require('react');
var Redux = require('react-redux');

var _require = require('../../reports'),
    MeasurementsReportPanel = _require.MeasurementsReportPanel;

var PropTypes = React.PropTypes;

var _require2 = require('../../../prop-types'),
    configPropType = _require2.configPropType;

var Page = _wrapComponent('Analytics.ReportPanel')(React.createClass({
  displayName: 'Analytics.ReportPanel',

  propTypes: {
    routes: PropTypes.array, // supplied by react-router
    config: configPropType
  },

  contextTypes: {
    intl: React.PropTypes.object
  },

  render: function render() {
    var config = this.props.config;

    return React.createElement(
      'div',
      { className: 'container-fluid' },
      React.createElement(
        'div',
        { className: 'row' },
        React.createElement(
          'div',
          { className: 'col-md-12' },
          React.createElement(MeasurementsReportPanel, { config: config })
        )
      )
    );
  }

}));

Page.icon = 'pie-chart';
Page.title = 'Section.Analytics.ReportPanel';

function mapStateToProps(state, ownProps) {
  return {
    config: state.config
  };
}

function mapDispatchToProps(dispatch, ownProps) {
  return {};
}

module.exports = Redux.connect(mapStateToProps, mapDispatchToProps)(Page);

},{"../../../prop-types":604,"../../reports":525,"livereactload/babel-transform":28,"react":"react","react-redux":"react-redux"}],538:[function(require,module,exports){
'use strict';

var _react2 = require('react');

var _react3 = _interopRequireDefault(_react2);

var _babelTransform = require('livereactload/babel-transform');

var _babelTransform2 = _interopRequireDefault(_babelTransform);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _components = {
  _component: {}
};

var _livereactloadBabelTransform2 = (0, _babelTransform2.default)({
  filename: '/home/daiad/Desktop/Development/home-web/utility/src/main/frontend/components/section/budget/ActiveList.js',
  components: _components,
  locals: [],
  imports: [_react3.default]
});

function _wrapComponent(id) {
  return function (Component) {
    return _livereactloadBabelTransform2(Component, id);
  };
}

var React = require('react');
var bs = require('react-bootstrap');

var _require = require('react-router'),
    Link = _require.Link;

var _require2 = require('react-intl'),
    FormattedDate = _require2.FormattedDate;

var Widget = require('../../Widget');

var ActiveBudgets = _wrapComponent('_component')(React.createClass({
  displayName: 'ActiveBudgets',

  componentWillMount: function componentWillMount() {
    this.props.actions.fetchActiveBudgets();
  },
  render: function render() {
    var _props = this.props,
        active = _props.active,
        actions = _props.actions;
    var goToListView = actions.goToListView;

    //TODO: have to unify this with Explore view widgets handling
    // leaving as is for now for mockup purposes

    var budgets = active.map(function (budget) {
      var activatedOn = budget.activatedOn,
          updatedOn = budget.updatedOn,
          _budget$expectation = budget.expectation,
          expectation = _budget$expectation === undefined ? {} : _budget$expectation,
          _budget$actual = budget.actual,
          actual = _budget$actual === undefined ? {} : _budget$actual,
          _budget$overlap = budget.overlap,
          overlap = _budget$overlap === undefined ? null : _budget$overlap,
          numberOfConsumers = budget.numberOfConsumers;

      var lastYear = 2015;
      var activeFor = 5.5;

      var widgets = [{
        id: 1,
        display: 'stat',
        title: 'Budget goal',
        highlight: expectation.savings ? expectation.savings + '%' : '-',
        info: [{
          value: React.createElement(
            'span',
            null,
            React.createElement(
              'b',
              null,
              (expectation.budget || '-') + ' lt'
            ),
            ' ',
            (expectation.budget < 0 ? 'less' : 'more') + ' than ' + lastYear
          )
        }, {
          value: React.createElement(
            'span',
            null,
            React.createElement(
              'b',
              null,
              'Max ' + (expectation.max || '-') + '% | Min ' + (expectation.min || '-') + '%'
            )
          )
        }, {
          value: React.createElement(
            'span',
            null,
            React.createElement(
              'b',
              null,
              numberOfConsumers + ' Consumers'
            )
          )
        }],
        footer: React.createElement(
          'span',
          null,
          activatedOn ? React.createElement(
            'span',
            null,
            'Set: ',
            React.createElement(FormattedDate, { value: activatedOn, day: 'numeric', month: 'numeric', year: 'numeric' })
          ) : 'Inactive'
        )

      }, {
        id: 2,
        display: 'stat',
        title: 'Savings',
        highlight: actual.savings ? actual.savings + '%' : '-',
        info: [{
          value: React.createElement(
            'span',
            null,
            React.createElement(
              'b',
              null,
              (actual.budget || '-') + ' lt'
            ),
            ' ',
            (actual.budget ? actual.budget < 0 ? 'less' : 'more' : '-') + ' than ' + lastYear
          )
        }, {
          value: React.createElement(
            'span',
            null,
            React.createElement(
              'b',
              null,
              'Max ' + (actual.max || '-') + '% | Min ' + (actual.min || '-') + '%'
            )
          )
        }, {
          value: React.createElement(
            'span',
            null,
            React.createElement(
              'b',
              null,
              'Active for ' + activeFor + ' months'
            )
          )
        }],
        footer: updatedOn ? React.createElement(
          'span',
          null,
          'Updated: ',
          React.createElement(FormattedDate, { value: updatedOn, day: 'numeric', month: 'numeric', year: 'numeric' })
        ) : React.createElement(
          'span',
          null,
          'Not estimated yet'
        )

      }];

      if (overlap) {
        widgets.push({
          id: 3,
          display: 'stat',
          title: 'Consumers',
          highlight: overlap.savings + '%',
          info: [{
            value: React.createElement(
              'span',
              null,
              React.createElement(
                'b',
                null,
                overlap.original - overlap.current + ' consumers changed to other budgets'
              )
            )
          }, {
            value: React.createElement(
              'b',
              null,
              'Original: ',
              overlap.original
            )
          }, {
            value: React.createElement(
              'b',
              null,
              'Current: ',
              overlap.current
            )
          }],
          footer: updatedOn ? React.createElement(
            'span',
            null,
            'Updated: ',
            React.createElement(FormattedDate, { value: updatedOn, day: 'numeric', month: 'numeric', year: 'numeric' })
          ) : React.createElement(
            'span',
            null,
            'Not estimated yet'
          )

        });
      } else {
        widgets.push({
          id: 3,
          display: 'stat',
          title: 'Consumers',
          highlight: 'No change',
          info: null,
          footer: updatedOn ? React.createElement(
            'span',
            null,
            'Updated: ',
            React.createElement(FormattedDate, { value: updatedOn, day: 'numeric', month: 'numeric', year: 'numeric' })
          ) : React.createElement(
            'span',
            null,
            'Not estimated yet'
          ),
          style: {
            color: '#666',
            textAlign: 'center',
            paddingTop: 20
          }
        });
      }
      return {
        name: budget.name,
        key: budget.key,
        widgets: widgets
      };
    });

    return React.createElement(
      bs.Panel,
      { header: React.createElement(
          'h3',
          null,
          'Active budgets'
        ) },
      React.createElement(
        bs.Row,
        null,
        React.createElement(
          bs.Col,
          { md: 12, style: { textAlign: 'right' } },
          React.createElement(
            bs.Button,
            { bsStyle: 'success', onClick: function onClick() {
                goToListView();
              } },
            React.createElement('i', { className: 'fa fa-chevron-left' }),
            ' Back to all'
          )
        )
      ),
      React.createElement('hr', null),
      budgets.length === 0 ? React.createElement(
        'h4',
        null,
        'No active budgets'
      ) : React.createElement('span', null),
      budgets.map(function (budget, i) {
        return React.createElement(
          bs.Row,
          { key: i, style: { marginBottom: 10 } },
          React.createElement(
            Link,
            { to: '/budgets/' + budget.key },
            React.createElement(
              'h3',
              { style: { marginLeft: 20, marginTop: 0 } },
              budget.name
            )
          ),
          budget.widgets.map(function (widget) {
            return React.createElement(
              bs.Col,
              { md: 4,
                key: widget.key
              },
              React.createElement(Widget, widget)
            );
          })
        );
      })
    );
  }
}));

module.exports = ActiveBudgets;

},{"../../Widget":509,"livereactload/babel-transform":28,"react":"react","react-bootstrap":"react-bootstrap","react-intl":"react-intl","react-router":"react-router"}],539:[function(require,module,exports){
'use strict';

var _react2 = require('react');

var _react3 = _interopRequireDefault(_react2);

var _babelTransform = require('livereactload/babel-transform');

var _babelTransform2 = _interopRequireDefault(_babelTransform);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _components = {
  _component: {}
};

var _livereactloadBabelTransform2 = (0, _babelTransform2.default)({
  filename: '/home/daiad/Desktop/Development/home-web/utility/src/main/frontend/components/section/budget/AddView.js',
  components: _components,
  locals: [],
  imports: [_react3.default]
});

function _wrapComponent(id) {
  return function (Component) {
    return _livereactloadBabelTransform2(Component, id);
  };
}

var React = require('react');

var bs = require('react-bootstrap');
var Wizard = require('../../wizard/Wizard');

var _require = require('../../wizard/items/'),
    SetName = _require.SetName,
    SelectWho = _require.SelectWho,
    SelectWhere = _require.SelectWhere,
    SelectBudgetType = _require.SelectBudgetType,
    SelectSavingsScenario = _require.SelectSavingsScenario,
    SetSavingsPercentage = _require.SetSavingsPercentage,
    SetGoal = _require.SetGoal,
    SelectDistribution = _require.SelectDistribution;

var _require2 = require('../../../helpers/common'),
    getFeature = _require2.getFeature;

var validateBudgetType = function validateBudgetType(_ref) {
  var value = _ref.type;

  if (!value) {
    throw 'noBudget';
  }
};

var validateWho = function validateWho(value) {
  if (!Array.isArray(value) && value.selected !== 'all' || Array.isArray(value) && value.length == 0) {
    throw 'noWho';
  }
};

var validateWhere = function validateWhere(value) {
  if (!Array.isArray(value) && value.selected !== 'all' || Array.isArray(value) && value.length == 0) {
    throw 'noWhere';
  }
};
var validateSavingsPercentage = function validateSavingsPercentage(_ref2) {
  var value = _ref2.savings;

  if (isNaN(value)) {
    throw 'notANumber';
  } else if (value <= 0 || value > 100) {
    throw 'notPercentage';
  }
};

var validateDistribution = function validateDistribution(_ref3) {
  var value = _ref3.type;

  if (!value) {
    throw 'noDistribution';
  }
};

var validateGoal = function validateGoal(_ref4) {
  var value = _ref4.goal;

  if (isNaN(value)) {
    throw 'notANumber';
  } else if (value <= 0 || value > 100) {
    throw 'notPercentage';
  }
};

var validateSavingsScenario = function validateSavingsScenario(_ref5) {
  var value = _ref5.key;

  if (!value) {
    throw 'noSavingsScenario';
  }
};

var validateName = function validateName(_ref6) {
  var value = _ref6.name;

  var existing = this.props.budgets.map(function (budget) {
    return budget.name;
  });

  if (!value) {
    throw 'noName';
  } else if (existing.includes(value)) {
    throw 'nameExists';
  }
};

var BudgetsAdd = _wrapComponent('_component')(React.createClass({
  displayName: 'BudgetsAdd',

  componentWillMount: function componentWillMount() {
    this.props.actions.fetchCompletedSavingsScenarios();
  },
  render: function render() {
    var _props = this.props,
        utility = _props.utility,
        groups = _props.groups,
        clusters = _props.clusters,
        actions = _props.actions,
        savings = _props.savings,
        intl = _props.intl;
    var goToListView = actions.goToListView,
        addBudget = actions.addBudget;

    var areas = this.props.areas.map(function (area) {
      return {
        key: area.key,
        value: area.key,
        label: area.title,
        feature: getFeature(area)
      };
    });

    var savingsItems = savings
    //.filter(scenario => scenario.completedOn != null)
    .map(function (scenario) {
      return {
        label: scenario.name,
        value: scenario.key,
        parameters: scenario.parameters
      };
    });
    var _t = function _t(x) {
      return intl.formatMessage({ id: x });
    };
    return React.createElement(
      bs.Panel,
      { header: React.createElement(
          'h3',
          null,
          _t('Budgets.Add.title')
        ) },
      React.createElement(
        bs.Row,
        null,
        React.createElement(bs.Col, { md: 6 }),
        React.createElement(
          bs.Col,
          { md: 6, style: { textAlign: 'right' } },
          React.createElement(
            bs.Button,
            { bsStyle: 'success', onClick: function onClick() {
                goToListView();
              } },
            React.createElement('i', { className: 'fa fa-chevron-left' }),
            ' Back to all'
          )
        )
      ),
      React.createElement('hr', null),
      React.createElement(
        Wizard,
        {
          onComplete: function onComplete(values) {
            addBudget(values);
            goToListView();
          },
          validateLive: true,
          childrenProps: { intl: intl }
        },
        React.createElement(SelectBudgetType, {
          id: 'budgetType',
          initialValue: {},
          next: function next(value) {
            return value.selected === 'estimate' ? 'goal' : 'scenario';
          },
          validate: validateBudgetType
        }),
        React.createElement(SelectSavingsScenario, {
          id: 'scenario',
          items: savingsItems,
          initialValue: {},
          validate: validateSavingsScenario
        }),
        React.createElement(SetSavingsPercentage, {
          id: 'savings',
          initialValue: { savings: parseFloat(0).toFixed(2) },
          validate: validateSavingsPercentage,
          next: function next(value) {
            return 'title';
          }
        }),
        React.createElement(SetGoal, {
          id: 'goal',
          initialValue: { goal: parseFloat(0).toFixed(2) },
          validate: validateGoal
        }),
        React.createElement(SelectDistribution, {
          id: 'distribution',
          initialValue: {},
          validate: validateDistribution
        }),
        React.createElement(SelectWho, {
          id: 'population',
          utility: utility,
          groups: groups,
          clusters: clusters,
          initialValue: {},
          validate: validateWho
        }),
        React.createElement(SelectWhere, {
          id: 'spatial',
          areas: areas,
          initialValue: {},
          validate: validateWhere
        }),
        React.createElement(SelectWho, {
          id: 'excludePopulation',
          initialValue: {},
          groups: groups,
          clusters: clusters,
          noAll: true
        }),
        React.createElement(SelectWhere, {
          id: 'excludeSpatial',
          areas: areas,
          initialValue: {},
          noAll: true
        }),
        React.createElement(SetName, {
          id: 'title',
          initialValue: '',
          validate: validateName.bind(this)
        }),
        React.createElement('div', {
          id: 'confirmation',
          initialValue: {}
        })
      )
    );
  }
}));

module.exports = BudgetsAdd;

},{"../../../helpers/common":595,"../../wizard/Wizard":560,"../../wizard/items/":570,"livereactload/babel-transform":28,"react":"react","react-bootstrap":"react-bootstrap"}],540:[function(require,module,exports){
'use strict';

var _react2 = require('react');

var _react3 = _interopRequireDefault(_react2);

var _babelTransform = require('livereactload/babel-transform');

var _babelTransform2 = _interopRequireDefault(_babelTransform);

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

var _components = {
  _component: {}
};

var _livereactloadBabelTransform2 = (0, _babelTransform2.default)({
  filename: '/home/daiad/Desktop/Development/home-web/utility/src/main/frontend/components/section/budget/ExploreView.js',
  components: _components,
  locals: [],
  imports: [_react3.default]
});

function _wrapComponent(id) {
  return function (Component) {
    return _livereactloadBabelTransform2(Component, id);
  };
}

var React = require('react');

var _require = require('react-redux'),
    connect = _require.connect;

var bs = require('react-bootstrap');
var moment = require('moment');

var _require2 = require('react-intl'),
    FormattedTime = _require2.FormattedTime;

var Table = require('../../Table');

var _require3 = require('react-leaflet-wrapper'),
    Map = _require3.Map,
    TileLayer = _require3.TileLayer,
    GeoJSON = _require3.GeoJSON,
    DrawControl = _require3.DrawControl;

var WidgetRow = require('../../WidgetRow');
var Modal = require('../../Modal');

var theme = require('../../chart/themes/blue-palette');

var _require4 = require('../../../schemas/budget'),
    exploreBudgetSchema = _require4.exploreBudgetSchema;

function BudgetDetails(props) {
  var budget = props.budget,
      actions = props.actions,
      tableFields = props.tableFields,
      data = props.data,
      tablePager = props.tablePager,
      tableStyle = props.tableStyle,
      query = props.query,
      intl = props.intl;
  var requestExploreData = actions.requestExploreData,
      setExploreQuery = actions.setExploreQuery,
      resetExploreQuery = actions.resetExploreQuery;
  var key = budget.key;


  var _t = function _t(x) {
    return intl.formatMessage({ id: x });
  };

  var dataNotFound = React.createElement(
    'span',
    null,
    query.loading ? _t('Budgets.Explore.loading') : _t('Budgets.Explore.empty')
  );
  return React.createElement(
    'div',
    null,
    React.createElement(
      'form',
      { onSubmit: function onSubmit(e) {
          e.preventDefault();requestExploreData(key);
        } },
      React.createElement(
        bs.Row,
        null,
        React.createElement(
          bs.Col,
          { md: 1 },
          React.createElement(
            'label',
            null,
            'Search:'
          )
        ),
        React.createElement(
          bs.Col,
          { md: 4 },
          React.createElement(bs.Input, {
            type: 'text',
            id: 'accountFilter',
            name: 'accountFilter',
            placeholder: 'Account or Name...',
            onChange: function onChange(e) {
              return setExploreQuery({ text: e.target.value });
            },
            value: query.text
          }),
          React.createElement(
            'span',
            { className: 'help-block' },
            'Filter by name or account'
          )
        ),
        React.createElement(
          bs.Col,
          { md: 4 },
          React.createElement(bs.Input, {
            type: 'text',
            id: 'serialFilter',
            name: 'serialFilter',
            placeholder: 'SWM serial number ...',
            onChange: function onChange(e) {
              return setExploreQuery({ serial: e.target.value });
            },
            value: query.serial
          }),
          React.createElement(
            'span',
            { className: 'help-block' },
            'Filter meter serial number'
          )
        ),
        React.createElement(
          bs.Col,
          { md: 3 },
          React.createElement(
            bs.Button,
            { style: { marginRight: 20 }, bsStyle: 'primary', type: 'submit' },
            'Refresh'
          ),
          React.createElement(
            bs.Button,
            { bsStyle: 'default', onClick: function onClick() {
                resetExploreQuery();requestExploreData(key);
              } },
            _t('Budgets.Explore.resetForm')
          )
        )
      ),
      React.createElement('br', null),
      React.createElement(
        Map,
        {
          width: '100%',
          height: 300,
          center: [38.35, -0.48],
          zoom: 13
        },
        React.createElement(TileLayer, null),
        React.createElement(DrawControl, {
          controlled: true,
          data: query.geometry,
          onFeatureChange: function onFeatureChange(features) {
            setExploreQuery({ geometry: features && features.features && Array.isArray(features.features) && features.features.length > 0 ? features.features[0].geometry : null });
            requestExploreData(key);
          }
        }),
        React.createElement(GeoJSON, {
          name: 'Users',
          data: data.features,
          popupContent: function popupContent(feature) {
            return React.createElement(
              'div',
              null,
              React.createElement(
                'h4',
                null,
                feature.properties.name
              ),
              React.createElement(
                'h5',
                null,
                'Address: ',
                React.createElement(
                  'span',
                  null,
                  feature.properties.address
                )
              ),
              React.createElement(
                'h5',
                null,
                'Meter id: ',
                feature.properties.meter.serial
              ),
              React.createElement(
                'h5',
                null,
                'Savings: ',
                feature.properties.savings,
                '%'
              ),
              React.createElement(
                'h5',
                null,
                'Budget: ',
                feature.properties.budget,
                ' lt'
              )
            );
          }
        })
      ),
      React.createElement('br', null),
      React.createElement(Table, {
        fields: tableFields,
        data: data.accounts,
        pager: tablePager,
        template: { empty: dataNotFound },
        style: {
          table: tableStyle
        }
      }),
      query.loading ? React.createElement(
        'div',
        null,
        React.createElement('img', { className: 'preloader', src: '/assets/images/utility/preloader-counterclock.png' }),
        React.createElement('img', { className: 'preloader-inner', src: '/assets/images/utility/preloader-clockwise.png' })
      ) : React.createElement('div', null),
      React.createElement('br', null)
    )
  );
}

var BudgetExplore = _wrapComponent('_component')(React.createClass({
  displayName: 'BudgetExplore',

  componentWillMount: function componentWillMount() {
    if (this.props.clusters) {
      this.props.actions.requestExploreData(this.props.params.id);
    }
  },
  componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
    if (nextProps.clusters && !this.props.clusters) {
      this.props.actions.requestExploreData(this.props.params.id);
    }
  },
  componentWillUnmount: function componentWillUnmount() {
    this.props.actions.resetExploreQuery();
  },
  render: function render() {
    var _props = this.props,
        budgets = _props.budgets,
        groups = _props.groups,
        clusters = _props.exploreClusters,
        actions = _props.actions,
        budgetToSet = _props.budgetToSet,
        budgetToReset = _props.budgetToReset,
        metersLocations = _props.metersLocations,
        exploreFields = _props.exploreFields,
        exploreUsers = _props.exploreUsers,
        explorePager = _props.explorePager,
        exploreQuery = _props.exploreQuery,
        intl = _props.intl,
        details = _props.details,
        stats = _props.stats;
    var goToListView = actions.goToListView,
        confirmSetBudget = actions.confirmSetBudget,
        confirmResetBudget = actions.confirmResetBudget,
        setActiveBudget = actions.setActiveBudget,
        resetActiveBudget = actions.resetActiveBudget,
        confirmRemoveBudgetScenario = actions.confirmRemoveBudgetScenario,
        scheduleBudget = actions.scheduleBudget;
    var id = this.props.params.id;

    var budget = budgets.find(function (budget) {
      return budget.key === id;
    });

    var _t = function _t(x) {
      return intl.formatMessage({ id: x });
    };
    if (!clusters) return null;
    if (budget == null) {
      return React.createElement(
        bs.Panel,
        { header: '404' },
        React.createElement(
          bs.Row,
          null,
          React.createElement(
            bs.Col,
            { md: 6 },
            React.createElement(
              'h4',
              null,
              _t('Budgets.Explore.notFound')
            )
          ),
          React.createElement(
            bs.Col,
            { md: 6, style: { textAlign: 'right' } },
            React.createElement(
              bs.Button,
              { bsStyle: 'success', onClick: function onClick() {
                  goToListView();
                } },
              React.createElement('i', { className: 'fa fa-chevron-left' }),
              ' Back to all'
            )
          )
        )
      );
    }

    var budgetKey = budget.key,
        name = budget.name,
        updatedOn = budget.updatedOn,
        nextUpdateOn = budget.nextUpdateOn,
        active = budget.active,
        initialized = budget.initialized;

    var completed = initialized;
    return React.createElement(
      'div',
      null,
      React.createElement(
        bs.Panel,
        { header: React.createElement(
            'h3',
            null,
            name + _t('Budgets.Explore.overview')
          ) },
        React.createElement(
          bs.Row,
          null,
          React.createElement(
            bs.Col,
            { md: 1 },
            completed ? React.createElement(
              bs.Button,
              {
                onClick: function onClick() {
                  scheduleBudget(budgetKey);
                }
              },
              _t('Budgets.List.refresh')
            ) : React.createElement('span', null)
          ),
          React.createElement(
            bs.Col,
            { md: 9, style: { float: 'right' } },
            React.createElement(
              bs.Button,
              {
                bsStyle: 'success',
                style: { float: 'right' },
                onClick: function onClick() {
                  goToListView();
                }
              },
              React.createElement('i', { className: 'fa fa-chevron-left' }),
              ' Back to all'
            ),
            active !== false ? React.createElement(
              bs.Button,
              {
                bsStyle: 'danger',
                style: { float: 'right', marginRight: 25 },
                onClick: function onClick() {
                  return confirmRemoveBudgetScenario(budgetKey);
                }
              },
              _t('Budgets.Explore.delete')
            ) : React.createElement('div', null),
            !active ? React.createElement(
              bs.Button,
              {
                bsStyle: 'primary',
                style: { float: 'right', marginRight: 25 },
                onClick: function onClick() {
                  confirmSetBudget(budgetKey);
                }
              },
              _t('Budgets.Explore.set')
            ) : React.createElement('div', null),
            active ? React.createElement(
              bs.Button,
              {
                bsStyle: 'warning',
                style: { float: 'right', marginRight: 25 },
                onClick: function onClick() {
                  confirmResetBudget(budgetKey);
                }
              },
              _t('Budgets.Explore.reset')
            ) : React.createElement('div', null)
          )
        ),
        React.createElement('hr', null),
        active ? React.createElement(
          bs.Row,
          null,
          React.createElement(
            bs.Col,
            { md: 2, style: { float: 'left', textAlign: 'left' } },
            React.createElement(
              'h4',
              null,
              'Budget is active'
            )
          ),
          React.createElement(
            bs.Col,
            { md: 3, style: { float: 'right', textAlign: 'right', marginBottom: 10 } },
            React.createElement(
              'h5',
              null,
              'Updated: ',
              updatedOn ? React.createElement(FormattedTime, { value: updatedOn, minute: 'numeric', hour: 'numeric', day: 'numeric', month: 'numeric', year: 'numeric' }) : '-'
            ),
            React.createElement(
              'h5',
              null,
              'Next update: ',
              nextUpdateOn ? React.createElement(FormattedTime, { value: nextUpdateOn, minute: 'numeric', hour: 'numeric', day: 'numeric', month: 'numeric', year: 'numeric' }) : '-'
            )
          )
        ) : React.createElement('div', null),
        React.createElement(WidgetRow, {
          itemsPerRow: 3,
          widgets: details
        })
      ),
      completed ? React.createElement(
        'div',
        null,
        React.createElement(
          bs.Panel,
          { header: React.createElement(
              'h3',
              null,
              _t('Budgets.Explore.stats')
            ) },
          React.createElement(WidgetRow, {
            itemsPerRow: 2,
            widgets: stats
          })
        ),
        React.createElement(
          bs.Panel,
          { header: React.createElement(
              'h3',
              null,
              name + _t('Budgets.Explore.details')
            ) },
          React.createElement(BudgetDetails, {
            clusters: clusters,
            groups: groups,
            budget: budget,
            query: exploreQuery,
            actions: actions,
            metersLocations: metersLocations,
            tableFields: exploreFields,
            data: exploreUsers,
            tablePager: explorePager,
            intl: intl
          })
        )
      ) : React.createElement('div', null),
      budgetToSet === budgetKey ? React.createElement(Modal, {
        show: true,
        className: 'confirmation-modal',
        title: 'Confirmation',
        text: React.createElement(
          'span',
          null,
          'Are you sure you want to ',
          React.createElement(
            'i',
            null,
            'set'
          ),
          ' ',
          React.createElement(
            'b',
            null,
            name
          ),
          ' (',
          budgetKey,
          ') ?'
        ),
        onClose: function onClose() {
          return confirmSetBudget(null);
        },
        actions: [{
          name: 'Cancel',
          action: function action() {
            return confirmSetBudget(null);
          }
        }, {
          name: 'Set Budget',
          style: 'primary',
          action: function action() {
            setActiveBudget(budgetKey);confirmSetBudget(null);
          }
        }]
      }) : React.createElement('div', null),
      budgetToReset === budgetKey ? React.createElement(Modal, {
        show: true,
        className: 'confirmation-modal',
        title: 'Confirmation',
        text: React.createElement(
          'span',
          null,
          'Are you sure you want to ',
          React.createElement(
            'i',
            null,
            'deactivate'
          ),
          ' ',
          React.createElement(
            'b',
            null,
            name
          ),
          ' (',
          budgetKey,
          ') ?'
        ),
        onClose: function onClose() {
          return confirmResetBudget(null);
        },
        actions: [{
          name: 'Cancel',
          action: function action() {
            return confirmResetBudget(null);
          }
        }, {
          name: 'Deactivate budget',
          style: 'warning',
          action: function action() {
            resetActiveBudget(budgetKey);confirmResetBudget(null);
          }
        }]
      }) : React.createElement('div', null)
    );
  }
}));

function mapStateToProps(state) {
  return {
    viewportWidth: state.viewport.width,
    viewportHeight: state.viewport.height,
    budgetToSet: state.budget.budgetToSet,
    budgetToReset: state.budget.budgetToReset,
    metersLocations: state.map.metersLocations,
    clusters: state.config.utility.clusters,
    exploreQuery: state.budget.explore.query,
    exploreUsers: state.budget.explore.users,
    exploreBudget: state.budget.explore.budget,
    exploreClusters: state.budget.explore.clusters
  };
}

function mergeProps(stateProps, dispatchProps, ownProps) {

  var exploreFields = exploreBudgetSchema(dispatchProps.actions);

  var explorePager = {
    index: stateProps.exploreQuery.index || 0,
    size: stateProps.exploreQuery.size || 10,
    count: stateProps.exploreUsers.total || 0,
    onPageIndexChange: function onPageIndexChange(index) {
      ownProps.actions.setExploreQuery({ index: index });ownProps.actions.requestExploreData(ownProps.params.id);
    },
    mode: Table.PAGING_SERVER_SIDE
  };

  var viewportWidth = stateProps.viewportWidth,
      viewportHeight = stateProps.viewportHeight,
      clusters = stateProps.exploreClusters;
  var budgets = ownProps.budgets;

  var budget = budgets.find(function (budget) {
    return budget.key === ownProps.params.id;
  });
  var details = [],
      stats = [];

  if (budget) {
    var activatedOn = budget.activatedOn,
        initialized = budget.initialized,
        numberOfConsumers = budget.numberOfConsumers,
        createdOn = budget.createdOn,
        updatedOn = budget.updatedOn,
        params = budget.params,
        paramsShort = budget.paramsShort,
        owner = budget.owner,
        _budget$overlap = budget.overlap,
        overlap = _budget$overlap === undefined ? null : _budget$overlap,
        consumptionBefore = budget.consumptionBefore,
        consumptionAfter = budget.consumptionAfter;

    var expectedPercent = Math.round(budget.expectedPercent * 10000) / 100;
    var savingsPercent = Math.round(budget.savingsPercent * 10000) / 100;
    var completed = initialized;
    var active = activatedOn != null;

    var activeHours = Math.round(moment().diff(activatedOn, 'hours', true) * 10) / 10;
    var activeDays = Math.floor(moment().diff(activatedOn, 'days', true));
    var activeMonths = Math.floor(moment().diff(activatedOn, 'months', true));
    var activeFor = function () {
      if (activeMonths > 0) return activeMonths + ' months';else if (activeDays > 0) return activeDays + ' days';
      return activeHours + ' hours';
    }();

    if (completed) {
      details.push({
        id: 1,
        display: 'stat',
        title: 'Budget goal',
        highlight: expectedPercent + '%',
        info: [
        //{
        //  value: <span><b>{`Max ${expectation.max}% | Min ${expectation.min}%`}</b></span>
        //},
        {
          value: React.createElement(
            'span',
            null,
            React.createElement(
              'b',
              null,
              numberOfConsumers + ' Consumers'
            )
          )
        }],
        footer: React.createElement(
          'span',
          null,
          activatedOn ? React.createElement(
            'span',
            null,
            'Set: ',
            React.createElement(FormattedTime, { value: activatedOn, day: 'numeric', month: 'numeric', year: 'numeric', hour: 'numeric', minute: 'numeric' })
          ) : 'Inactive'
        )

      });

      if (active) {
        details.push({
          id: 20,
          display: 'stat',
          title: 'Savings',
          highlight: savingsPercent ? savingsPercent + '%' : '-',
          info: [{
            value: React.createElement(
              'span',
              null,
              React.createElement(
                'b',
                null,
                consumptionBefore + ' lt'
              ),
              ' before'
            )
          }, {
            value: React.createElement(
              'span',
              null,
              React.createElement(
                'b',
                null,
                consumptionAfter + ' lt'
              ),
              ' after'
            )
          }, {
            value: React.createElement(
              'span',
              null,
              React.createElement(
                'b',
                null,
                'Active for ' + activeFor
              )
            )
          }],
          footer: updatedOn ? React.createElement(
            'span',
            null,
            'Updated: ',
            React.createElement(FormattedTime, { value: updatedOn, day: 'numeric', month: 'numeric', year: 'numeric', hour: 'numeric', minute: 'numeric' })
          ) : React.createElement(
            'span',
            null,
            'Not estimated yet'
          )

        });

        if (overlap) {
          details.push({
            id: 21,
            display: 'stat',
            title: 'Consumers',
            highlight: overlap && overlap.savings && overlap.savings + '%' || '-',
            info: [{
              value: React.createElement(
                'span',
                null,
                React.createElement(
                  'b',
                  null,
                  overlap.original - overlap.current + ' consumers changed to other budgets'
                )
              )
            }, {
              value: React.createElement(
                'b',
                null,
                'Original: ',
                overlap.original
              )
            }, {
              value: React.createElement(
                'b',
                null,
                'Current: ',
                overlap.current
              )
            }],
            footer: updatedOn ? React.createElement(
              'span',
              null,
              'Updated: ',
              React.createElement(FormattedTime, { value: updatedOn, day: 'numeric', month: 'numeric', year: 'numeric', hour: 'numeric', minute: 'numeric' })
            ) : React.createElement(
              'span',
              null,
              'Not estimated yet'
            )

          });
        } else {
          details.push({
            id: 21,
            display: 'stat',
            title: 'Consumers',
            highlight: 'No change',
            info: null,
            footer: null,
            style: {
              color: '#666',
              textAlign: 'center',
              paddingTop: 20
            }
          });

          //overlap
        }
        //active
      }

      clusters.forEach(function (cluster, i) {
        var clusterData = cluster.segments.map(function (x) {
          return Math.round(x.percent < 0 ? 0 : x.percent);
        });
        stats.push({
          id: i,
          title: cluster.clusterName,
          display: 'chart',
          maximizable: true,
          viewportWidth: viewportWidth,
          viewportHeight: viewportHeight,
          style: {
            height: 200
          },
          theme: theme,
          yAxis: {
            formatter: function formatter(y) {
              return y.toString() + '%';
            }
          },
          xAxis: {
            data: cluster.segments.map(function (x) {
              return x.name;
            })
          },
          grid: {
            x: Math.max(Math.max.apply(Math, _toConsumableArray(cluster.segments.map(function (group) {
              return group.name.length;
            }))) * 6.5, 45) + 'px'
          },
          series: [{
            name: cluster.clusterName,
            color: function color(name, data, dataIndex) {
              return theme.color.find(function (x, i, arr) {
                return i === dataIndex % arr.length;
              });
            },
            label: {
              formatter: function formatter(y) {
                return y.toString() + '%';
              }
            },
            fill: 0.8,
            data: cluster.clusterName === 'Consumption Class' ? clusterData.reverse() : clusterData
          }]
        });
      });

      /*
        stats.push({
          id: 100,
          title: 'Map',
          display: 'map',
          maximizable: true,
          style: {
            height: 200,
          },
          map: {},
          data: metersLocations && metersLocations.features ? 
            metersLocations.features.map(feature => [feature.geometry.coordinates[1], feature.geometry.coordinates[0], Math.abs(Math.random()-0.8)]) : []
        });
        
        */
      //completed
    }

    //all
    details.push({
      id: 2,
      display: 'stat',
      title: 'Details',
      style: {
        width: 250,
        height: 100
      },
      highlight: null,
      info: [{
        key: 'Created by',
        value: owner
      }, {
        key: 'Created on',
        value: createdOn ? React.createElement(FormattedTime, { value: createdOn, minute: 'numeric', hour: 'numeric', day: 'numeric', month: 'numeric', year: 'numeric' }) : '-'
      }, {
        key: 'Activated on',
        value: activatedOn ? React.createElement(FormattedTime, { value: activatedOn, minute: 'numeric', hour: 'numeric', day: 'numeric', month: 'numeric', year: 'numeric' }) : '-'
      }, {
        key: 'Updated on',
        value: updatedOn ? React.createElement(FormattedTime, { value: updatedOn, minute: 'numeric', hour: 'numeric', day: 'numeric', month: 'numeric', year: 'numeric' }) : '-'
      }],
      footer: React.createElement(
        'span',
        null,
        '\xA0'
      )
    });

    //all
    details.push({
      id: 3,
      display: 'stat',
      title: 'Parameters',
      maximizable: true,
      dialogClassName: 'maximized-modal-half',
      highlight: null,
      style: {
        width: 250
      },
      info: paramsShort,
      maximizedProps: {
        info: params
      },
      maximizedStyle: {
        width: '80%',
        height: '10vh',
        fontSize: '1.5em'
      },
      footer: React.createElement(
        'span',
        null,
        '\xA0'
      ),
      limit: 5,
      show: 3
    });
  }

  return _extends({}, stateProps, dispatchProps, ownProps, {
    budget: budget,
    details: details,
    stats: stats,
    exploreFields: exploreFields,
    explorePager: explorePager
  });
}
module.exports = connect(mapStateToProps, null, mergeProps)(BudgetExplore);

},{"../../../schemas/budget":644,"../../Modal":498,"../../Table":502,"../../WidgetRow":510,"../../chart/themes/blue-palette":512,"livereactload/babel-transform":28,"moment":"moment","react":"react","react-bootstrap":"react-bootstrap","react-intl":"react-intl","react-leaflet-wrapper":151,"react-redux":"react-redux"}],541:[function(require,module,exports){
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var React = require('react');
var bs = require('react-bootstrap');
var Table = require('../../Table');

var _require = require('../../../schemas/budget'),
    budgetSchema = _require.budgetSchema;

function BudgetsList(props) {
  var actions = props.actions,
      query = props.query,
      intl = props.intl;
  var name = query.name;
  var setQueryAndFetch = actions.setQueryAndFetch,
      goToAddView = actions.goToAddView,
      goToActiveView = actions.goToActiveView;

  var budgetFields = budgetSchema(actions);
  var budgetSorter = {
    defaultSort: 'createdOn',
    defaultOrder: 'desc'
  };
  var budgets = props.budgets.map(function (scenario) {
    return _extends({}, scenario, {
      paramsShort: scenario.paramsShort.map(function (x) {
        return React.createElement(
          'span',
          null,
          React.createElement(
            'span',
            { style: { whiteSpace: 'nowrap' } },
            x.key
          ),
          '(',
          React.createElement(
            'b',
            { style: { whiteSpace: 'nowrap' } },
            x.value
          ),
          ') \xA0'
        );
      })
    });
  });

  var _t = function _t(x) {
    return intl.formatMessage({ id: x });
  };

  return React.createElement(
    bs.Panel,
    { header: React.createElement(
        'h3',
        null,
        _t('Budgets.List.title')
      ) },
    React.createElement(
      bs.Row,
      null,
      React.createElement(
        bs.Col,
        { sm: 4, md: 5 },
        React.createElement(bs.Input, {
          style: { width: '80%', float: 'left' },
          type: 'text',
          placeholder: _t('Budgets.List.search'),
          onChange: function onChange(e) {
            return setQueryAndFetch({ name: e.target.value });
          },
          value: name
        })
      ),
      React.createElement(
        bs.Col,
        { sm: 8, md: 7, style: { textAlign: 'right' } },
        props.hide ? React.createElement(
          bs.Button,
          {
            bsStyle: 'primary',
            style: { marginRight: 20 },
            onClick: function onClick() {
              goToActiveView();
            }
          },
          React.createElement('i', { className: 'fa fa-eye' }),
          ' Monitor active'
        ) : React.createElement('span', null),
        React.createElement(
          bs.Button,
          {
            bsStyle: 'success',
            onClick: function onClick() {
              goToAddView();
            }
          },
          React.createElement('i', { className: 'fa fa-plus' }),
          ' Add New'
        )
      )
    ),
    React.createElement('hr', null),
    React.createElement(Table, {
      sortable: true,
      fields: budgetFields,
      sorter: budgetSorter,
      data: budgets,
      template: { empty: React.createElement(
          'span',
          null,
          _t('Budgets.List.empty')
        ) }
    })
  );
}

module.exports = BudgetsList;

},{"../../../schemas/budget":644,"../../Table":502,"react":"react","react-bootstrap":"react-bootstrap"}],542:[function(require,module,exports){
'use strict';

var _react2 = require('react');

var _react3 = _interopRequireDefault(_react2);

var _babelTransform = require('livereactload/babel-transform');

var _babelTransform2 = _interopRequireDefault(_babelTransform);

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _components = {
  _component: {}
};

var _livereactloadBabelTransform2 = (0, _babelTransform2.default)({
  filename: '/home/daiad/Desktop/Development/home-web/utility/src/main/frontend/components/section/budget/index.js',
  components: _components,
  locals: [],
  imports: [_react3.default]
});

function _wrapComponent(id) {
  return function (Component) {
    return _livereactloadBabelTransform2(Component, id);
  };
}

var React = require('react');

var _require = require('redux'),
    bindActionCreators = _require.bindActionCreators;

var _require2 = require('react-redux'),
    connect = _require2.connect;

var moment = require('moment');

var _require3 = require('react-router-redux'),
    push = _require3.push;

var util = require('../../../helpers/wizard');

var _require4 = require('react-intl'),
    injectIntl = _require4.injectIntl;

var Modal = require('../../Modal');
var Actions = require('../../../actions/BudgetActions');

var _require5 = require('../../../actions/SavingsActions'),
    fetchAllAreas = _require5.fetchAllAreas;

var Budgets = _wrapComponent('_component')(React.createClass({
  displayName: 'Budgets',

  componentWillMount: function componentWillMount() {
    this.props.actions.fetchAllAreas();
    this.props.actions.fetchCompletedSavingsScenarios();
    this.props.actions.fetchBudgets();
  },
  render: function render() {
    var _props = this.props,
        children = _props.children,
        budgetToRemove = _props.budgetToRemove,
        actions = _props.actions;
    var removeBudget = actions.removeBudget,
        confirmRemoveBudgetScenario = actions.confirmRemoveBudgetScenario,
        goToListView = actions.goToListView;


    return React.createElement(
      'div',
      { className: 'container-fluid', style: { paddingTop: 10 } },
      React.createElement(
        'div',
        { className: 'row' },
        React.createElement(
          'div',
          { className: 'col-md-12', style: { marginTop: 10 } },
          React.cloneElement(children, this.props)
        ),
        React.createElement(RemoveConfirmation, {
          goToListView: goToListView,
          scenario: budgetToRemove,
          removeScenario: removeBudget,
          confirmRemoveScenario: confirmRemoveBudgetScenario
        })
      )
    );
  }
}));

//common components for more than one budget sub-sections
function RemoveConfirmation(props) {
  var scenario = props.scenario,
      confirmRemoveScenario = props.confirmRemoveScenario,
      removeScenario = props.removeScenario,
      goToListView = props.goToListView;

  var reset = function reset() {
    return confirmRemoveScenario(null);
  };
  if (scenario == null) {
    return React.createElement('div', null);
  }
  var key = scenario.key,
      name = scenario.name;

  return React.createElement(Modal, {
    title: 'Confirmation',
    className: 'confirmation-modal',
    show: true,
    text: React.createElement(
      'span',
      null,
      'Are you sure you want to delete ',
      React.createElement(
        'b',
        null,
        name
      ),
      ' (',
      key,
      ')'
    ),
    onClose: reset,
    actions: [{
      name: 'Cancel',
      action: reset
    }, {
      name: 'Delete',
      action: function action() {
        removeScenario(key);confirmRemoveScenario(null);goToListView();
      },
      style: 'danger'
    }]
  });
}

//mockup values for spatial clusters/groups
function mapStateToProps(state, ownProps) {
  return {
    //common
    routing: state.routing,
    clusters: state.config.utility.clusters,
    savings: state.budget.savings,
    query: state.budget.query,
    areas: state.savings.areas,
    budgets: state.budget.budgets,
    active: state.budget.active,
    budgetToRemoveIdx: state.budget.budgetToRemove
  };
}

function mapDispatchToProps(dispatch) {
  return _extends({}, bindActionCreators(_extends({}, Actions, { fetchAllAreas: fetchAllAreas }), dispatch), {
    goToAddView: function goToAddView() {
      return dispatch(push('/budgets/add'));
    },
    goToExploreView: function goToExploreView(key) {
      return dispatch(push('/budgets/' + key));
    },
    goToListView: function goToListView() {
      return dispatch(push('/budgets'));
    },
    goToActiveView: function goToActiveView() {
      return dispatch(push('/budgets/active'));
    }
  });
}

function mergeProps(stateProps, dispatchProps, ownProps) {
  var areas = Array.isArray(stateProps.areas) && stateProps.areas.length > 0 && stateProps.areas[0] || [];
  var savings = stateProps.savings;
  var lastMonth = moment().subtract(1, 'month');
  return _extends({}, ownProps, {
    actions: _extends({}, dispatchProps, {
      addBudget: function addBudget(data) {
        return dispatchProps.addBudget(data).then(function () {
          return dispatchProps.fetchBudgets();
        });
      },
      removeBudget: function removeBudget(key) {
        return dispatchProps.removeBudget(key).then(function () {
          return dispatchProps.fetchBudgets();
        });
      },
      setActiveBudget: function setActiveBudget(key) {
        return dispatchProps.setActiveBudget(key).then(function () {
          return dispatchProps.fetchBudgets();
        });
      },
      resetActiveBudget: function resetActiveBudget(key) {
        return dispatchProps.resetActiveBudget(key).then(function () {
          return dispatchProps.fetchBudgets();
        });
      },
      scheduleBudget: function scheduleBudget(budget, year, month) {
        return dispatchProps.scheduleBudget(budget, lastMonth.year(), lastMonth.month() + 1).then(function () {
          return setTimeout(dispatchProps.fetchBudgets, 2000);
        });
      }
    })
  }, stateProps, {
    areas: areas,
    budgets: stateProps.budgets.map(function (scenario) {
      return _extends({}, scenario, {
        parameters: util.getParamsWithLabels(util.flattenBudgetParams(scenario.parameters), _extends({}, stateProps, { areas: areas, savings: savings, intl: ownProps.intl }))
      });
    }).map(function (scenario) {
      return _extends({}, scenario, {
        paramsShort: util.getFriendlyParams(scenario.parameters, ownProps.intl, 'short'),
        params: util.getFriendlyParams(scenario.parameters, ownProps.intl, 'long')
      });
    }),
    budgetToRemove: stateProps.budgets.find(function (scenario) {
      return scenario.key === stateProps.budgetToRemoveIdx;
    })

  });
}

var BudgetsContainer = injectIntl(connect(mapStateToProps, mapDispatchToProps, mergeProps)(Budgets));

BudgetsContainer.icon = 'percent';
BudgetsContainer.title = 'Section.Budget';

module.exports = BudgetsContainer;

},{"../../../actions/BudgetActions":430,"../../../actions/SavingsActions":446,"../../../helpers/wizard":599,"../../Modal":498,"livereactload/babel-transform":28,"moment":"moment","react":"react","react-intl":"react-intl","react-redux":"react-redux","react-router-redux":"react-router-redux","redux":"redux"}],543:[function(require,module,exports){
'use strict';

var _react2 = require('react');

var _react3 = _interopRequireDefault(_react2);

var _babelTransform = require('livereactload/babel-transform');

var _babelTransform2 = _interopRequireDefault(_babelTransform);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _components = {
  _component: {}
};

var _livereactloadBabelTransform2 = (0, _babelTransform2.default)({
  filename: '/home/daiad/Desktop/Development/home-web/utility/src/main/frontend/components/section/mode_management/ModeManagement.js',
  components: _components,
  locals: [],
  imports: [_react3.default]
});

function _wrapComponent(id) {
  return function (Component) {
    return _livereactloadBabelTransform2(Component, id);
  };
}

var React = require('react');
var ModeManagementComponnent = require('./ModeManagementComponent');

var ModeManagementActions = require('../../../actions/ModeManagementActions');
var Schema = require('../../../constants/ModeManagementTableSchema');

var _require = require('react-redux'),
    connect = _require.connect;

var _require2 = require('redux'),
    bindActionCreators = _require2.bindActionCreators;

var ModeManagement = _wrapComponent('_component')(React.createClass({
  displayName: 'ModeManagement',


  contextTypes: {
    intl: React.PropTypes.object
  },

  componentWillMount: function componentWillMount() {
    this.props.fetchFilterOptions();
    this.props.fetchUsers({ nameFilter: '' });
  },

  render: function render() {
    var self = this;

    var filters = Schema.filters;

    if (!this.props.isLoading && this.props.users) {
      filters.forEach(function (f, i) {

        var optionsList = self.props.filterOptions[f.id];
        var options = {};
        optionsList.forEach(function (o, j) {
          var o_key = o;
          if (o === 'NOT_APPLICABLE') {
            o_key = 'NOT APPLICABLE';
          }
          options[o_key] = o;
        });
        f.options = options;
      });

      return React.createElement(ModeManagementComponnent, {
        filters: filters,
        routes: this.props.routes
      });
    } else {
      return React.createElement(
        'div',
        null,
        React.createElement('img', { className: 'preloader', src: '/assets/images/utility/preloader-counterclock.png' }),
        React.createElement('img', { className: 'preloader-inner', src: '/assets/images/utility/preloader-clockwise.png' })
      );
    }
  }
}));

ModeManagement.icon = 'sliders';
ModeManagement.title = 'Section.ModeManagement';

function mapStateToProps(state) {
  return {
    filterOptions: state.mode_management.filterOptions,
    users: state.mode_management.users,
    modes: state.mode_management.modes,
    isLoading: state.mode_management.isLoading
  };
}

function mapDispatchToProps(dispatch) {
  return {
    fetchFilterOptions: bindActionCreators(ModeManagementActions.fetchFilterOptions, dispatch),
    fetchUsers: bindActionCreators(ModeManagementActions.fetchUsers, dispatch)
  };
}

module.exports = connect(mapStateToProps, mapDispatchToProps)(ModeManagement);

},{"../../../actions/ModeManagementActions":443,"../../../constants/ModeManagementTableSchema":585,"./ModeManagementComponent":544,"livereactload/babel-transform":28,"react":"react","react-redux":"react-redux","redux":"redux"}],544:[function(require,module,exports){
'use strict';

var _react2 = require('react');

var _react3 = _interopRequireDefault(_react2);

var _babelTransform = require('livereactload/babel-transform');

var _babelTransform2 = _interopRequireDefault(_babelTransform);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _components = {
  _component: {}
};

var _livereactloadBabelTransform2 = (0, _babelTransform2.default)({
  filename: '/home/daiad/Desktop/Development/home-web/utility/src/main/frontend/components/section/mode_management/ModeManagementComponent.js',
  components: _components,
  locals: [],
  imports: [_react3.default]
});

function _wrapComponent(id) {
  return function (Component) {
    return _livereactloadBabelTransform2(Component, id);
  };
}

var React = require('react');
var Bootstrap = require('react-bootstrap');
var EditTable = require('../../EditTable');
var Modal = require('../../Modal');
var FilterPanel = require('../../FilterPanel');

var Helpers = require('../../../helpers/array-funcs');

var ModeManagementActions = require('../../../actions/ModeManagementActions');

var _require = require('react-redux'),
    connect = _require.connect;

var _require2 = require('redux'),
    bindActionCreators = _require2.bindActionCreators;

var ModeManagementComponent = _wrapComponent('_component')(React.createClass({
  displayName: 'ModeManagementComponent',


  changedModes: [],
  users: [],

  contextTypes: {
    intl: React.PropTypes.object
  },

  closeModal: function closeModal() {
    var modal = Object.assign({}, this.props.modal);
    modal.show = false;
    this.props.setModal(modal);
  },
  openModal: function openModal(title, body, actions) {
    var modal = Object.assign({}, this.props.modal);
    modal.show = true;
    modal.title = title;
    modal.body = body;
    modal.actions = actions;
    this.props.setModal(modal);
  },
  decativateUser: function decativateUser() {
    this.closeModal();
    this.props.deactivateUser({ userkey: this.props.userToDecativate.id });
  },


  showModalSaveChanges: function showModalSaveChanges(changedModes) {
    var _t = this.context.intl.formatMessage;
    var title = _t({ id: 'Modal.SaveUserModeChanges.Title' });
    var body;
    if (changedModes.length === 1) {
      body = changedModes.length + _t({ id: 'Modal.SaveUserModeChanges.Body.singular' });
    } else {
      body = changedModes.length + _t({ id: 'Modal.SaveUserModeChanges.Body.plural' });
    }
    var actions = [{
      action: this.closeModal,
      name: _t({ id: 'Buttons.Cancel' })
    }, {
      action: this.saveModeChanges,
      name: _t({ id: 'Buttons.SaveChanges' }),
      style: 'success'
    }];
    this.changedModes = changedModes;
    this.openModal(title, body, actions);
  },

  saveModeChanges: function saveModeChanges() {
    var changes = {};
    changes.modeChanges = [];
    this.changedModes.forEach(function (value) {
      var entry = {};
      entry.id = value.id;
      entry.changes = [];
      Object.keys(value.modes).forEach(function (k, v) {
        if (value.modes[k].draft) {
          var change = {};
          change.mode = k;
          change.value = value.modes[k].value;
          entry.changes.push(change);
        }
      });
      changes.modeChanges.push(entry);
    });

    this.closeModal();
    this.props.saveModeChanges(changes);
  },

  searchName: function searchName(nameFilter) {
    this.props.applyNameFilter(nameFilter);
  },

  computeModesState: function computeModesState(data) {
    var modesState = {};
    var propertyNames = Helpers.pluck(Helpers.pickQualiffiedOnEquality(data.fields, 'type', 'property'), 'name');

    var rowIds = Helpers.pluck(data.rows, 'id');

    for (var i = 0, len = rowIds.length; i < len; i++) {
      var modeEntry = {};
      modeEntry.active = data.rows[i].active;
      modeEntry.modes = {};
      for (var p = 0, len2 = propertyNames.length; p < len2; p++) {
        var mode = {
          value: data.rows[i][propertyNames[p]],
          draft: false
        };
        modeEntry.modes[propertyNames[p]] = mode;
      }
      modesState[rowIds[i]] = modeEntry;
    }
    return modesState;
  },

  render: function render() {
    var self = this;
    var _t = this.context.intl.formatMessage;

    this.users = Object.assign({}, this.props.users);
    var showModalUserDeactivate = function showModalUserDeactivate() {
      var title = _t({ id: 'Modal.DeactivateUser.Title' });

      var body = _t({ id: 'Modal.DeactivateUser.Body.Part1' }) + this.props.row.name + _t({ id: 'Modal.DeactivateUser.Body.Part2' }) + this.props.row.id + _t({ id: 'Modal.DeactivateUser.Body.Part3' });

      var actions = [{
        action: self.closeModal,
        name: _t({ id: 'Buttons.Cancel' })
      }, {
        action: self.decativateUser,
        name: _t({ id: 'Buttons.Deactivate' }),
        style: 'danger'
      }];

      self.openModal(title, body, actions);
      self.props.markUserForDeactivation(this.props.row);
    };

    for (var i = 0; i < this.users.fields.length; i++) {
      if (this.users.fields[i].name === 'deactivate') {
        this.users.fields[i].handler = showModalUserDeactivate;
      }
    }

    var userTitle = React.createElement(
      'span',
      null,
      React.createElement('i', { className: 'fa fa-group fa-fw' }),
      React.createElement(
        'span',
        { style: { paddingLeft: 4 } },
        _t({ id: 'Table.User.Users' })
      ),
      React.createElement('span', { style: { float: 'right', marginTop: -3, marginLeft: 5 } })
    );
    return React.createElement(
      'div',
      { className: 'container-fluid', style: { paddingTop: 10 } },
      React.createElement(
        'div',
        { className: 'row' },
        React.createElement(
          'div',
          { className: 'col-md-12' },
          React.createElement(Modal, { show: this.props.modal.show,
            onClose: this.closeModal,
            actions: this.props.modal.actions || [],
            title: this.props.modal.title || '',
            text: this.props.modal.body || ''
          })
        )
      ),
      React.createElement(
        'div',
        { className: 'row' },
        React.createElement(
          'div',
          { className: 'col-md-12' },
          React.createElement(Bootstrap.Input, { type: 'text',
            placeholder: this.props.nameFilter.length > 0 ? this.props.nameFilter : _t({ id: 'Table.User.searchUsers' }),
            ref: 'search',
            buttonAfter: React.createElement(
              Bootstrap.Button,
              { onClick: function onClick() {
                  self.searchName(self.refs.search.getValue());
                } },
              React.createElement('i', { className: 'fa fa-search fa-fw' })
            )
          })
        )
      ),
      React.createElement(
        'div',
        { className: 'row' },
        React.createElement(
          'div',
          { className: 'col-md-12' },
          React.createElement(FilterPanel, {
            filters: this.props.filters
          })
        )
      ),
      React.createElement(
        'div',
        { className: 'row' },
        React.createElement(
          'div',
          { className: 'col-md-12' },
          React.createElement(
            Bootstrap.Panel,
            { header: userTitle },
            React.createElement(
              Bootstrap.ListGroup,
              { fill: true },
              React.createElement(
                Bootstrap.ListGroupItem,
                null,
                React.createElement(EditTable, {
                  data: this.users,
                  saveAction: this.showModalSaveChanges,
                  activePage: this.props.activePage,
                  modes: this.props.modes,
                  setModes: this.props.setModes,
                  setActivePage: this.props.setActivePage
                })
              )
            )
          )
        )
      )
    );
  }
}));

function mapStateToProps(state) {
  return {
    users: state.mode_management.users,
    modes: state.mode_management.modes,
    nameFilter: state.mode_management.nameFilter,
    activePage: state.mode_management.activePage,
    userToDecativate: state.mode_management.userToDecativate,
    modal: state.mode_management.modal

  };
}

function mapDispatchToProps(dispatch) {
  return {
    setModes: function setModes(modes) {
      dispatch(ModeManagementActions.setModes(modes));
    },

    setActivePage: function setActivePage(activePage) {
      dispatch(ModeManagementActions.setActivePage(activePage));
    },

    applyNameFilter: bindActionCreators(ModeManagementActions.applyNameFilter, dispatch),

    setModal: function setModal(modal) {
      dispatch(ModeManagementActions.setModal(modal));
    },

    markUserForDeactivation: function markUserForDeactivation(userId) {
      dispatch(ModeManagementActions.markUserForDeactivation(userId));
    },

    saveModeChanges: bindActionCreators(ModeManagementActions.saveModeChanges, dispatch),

    deactivateUser: bindActionCreators(ModeManagementActions.deactivateUser, dispatch)
  };
}

module.exports = connect(mapStateToProps, mapDispatchToProps)(ModeManagementComponent);

},{"../../../actions/ModeManagementActions":443,"../../../helpers/array-funcs":594,"../../EditTable":489,"../../FilterPanel":490,"../../Modal":498,"livereactload/babel-transform":28,"react":"react","react-bootstrap":"react-bootstrap","react-redux":"react-redux","redux":"redux"}],545:[function(require,module,exports){
'use strict';

var _react2 = require('react');

var _react3 = _interopRequireDefault(_react2);

var _babelTransform = require('livereactload/babel-transform');

var _babelTransform2 = _interopRequireDefault(_babelTransform);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _components = {
  _component: {}
};

var _livereactloadBabelTransform2 = (0, _babelTransform2.default)({
  filename: '/home/daiad/Desktop/Development/home-web/utility/src/main/frontend/components/section/savings/AddView.js',
  components: _components,
  locals: [],
  imports: [_react3.default]
});

function _wrapComponent(id) {
  return function (Component) {
    return _livereactloadBabelTransform2(Component, id);
  };
}

var React = require('react');
var bs = require('react-bootstrap');
var Wizard = require('../../wizard/Wizard');

var _require = require('../../wizard/items/'),
    SetName = _require.SetName,
    SelectWho = _require.SelectWho,
    SelectWhere = _require.SelectWhere,
    SelectWhen = _require.SelectWhen;

var _require2 = require('../../../helpers/common'),
    getFeature = _require2.getFeature;

var validateWho = function validateWho(value) {
  if (!Array.isArray(value) && value.selected !== 'all' || Array.isArray(value) && value.length === 0) {
    throw 'noWho';
  }
};

var validateWhere = function validateWhere(value) {
  if (!Array.isArray(value) && value.selected !== 'all' || Array.isArray(value) && value.length == 0) {
    throw 'noWhere';
  }
};

var validateWhen = function validateWhen(value) {
  if (!value || !value.start || !value.end) {
    throw 'noWhen';
  } else if (isNaN(Date.parse(new Date(value.start)))) {
    throw 'fromInvalid';
  } else if (isNaN(Date.parse(new Date(value.end)))) {
    throw 'toInvalid';
  } else if (value.start > value.end) {
    throw 'fromAfterTo';
  } else if (value.end > new Date().valueOf()) {
    throw 'noFuture';
  }
};

var validateName = function validateName(value) {
  var existing = this.props.scenarios.map(function (scenario) {
    return scenario.name;
  });
  if (!value.name) {
    throw 'noName';
  } else if (existing.includes(value.name)) {
    throw 'nameExists';
  }
};

var SavingsPotentialAdd = _wrapComponent('_component')(React.createClass({
  displayName: 'SavingsPotentialAdd',

  render: function render() {
    var _props = this.props,
        utility = _props.utility,
        clusters = _props.clusters,
        actions = _props.actions,
        intl = _props.intl;
    var addSavingsScenario = actions.addSavingsScenario,
        goToListView = actions.goToListView;

    var _t = function _t(x) {
      return intl.formatMessage({ id: x });
    };

    var areas = this.props.areas.map(function (area) {
      return {
        key: area.key,
        value: area.key,
        label: area.title,
        feature: getFeature(area)
      };
    });

    return React.createElement(
      bs.Panel,
      { header: React.createElement(
          'h3',
          null,
          _t('Savings.Add.title')
        ) },
      React.createElement(
        bs.Row,
        null,
        React.createElement(
          bs.Col,
          { md: 12, style: { textAlign: 'right' } },
          React.createElement(
            bs.Button,
            { bsStyle: 'success', onClick: function onClick() {
                goToListView();
              } },
            React.createElement('i', { className: 'fa fa-chevron-left' }),
            ' Back to all'
          )
        )
      ),
      React.createElement('hr', null),
      React.createElement(
        Wizard,
        {
          onComplete: function onComplete(values) {
            addSavingsScenario(values);
            goToListView();
          },
          validateLive: true,
          childrenProps: { intl: intl }
        },
        React.createElement(SelectWho, {
          id: 'population',
          title: 'Who',
          description: 'Select all population or narrow savings potential calculation to selected groupsn',
          utility: utility,
          clusters: clusters,
          initialValue: {},
          validate: validateWho
        }),
        React.createElement(SelectWhere, {
          id: 'spatial',
          title: 'Where',
          description: 'Select all areas or narrow savings potential calculation to selected areas',
          areas: areas,
          initialValue: {},
          validate: validateWhere
        }),
        React.createElement(SelectWhen, {
          id: 'time',
          title: 'Data',
          description: 'Data to be used for savings potential calculation, last year or custom',
          initialValue: {},
          validate: validateWhen
        }),
        React.createElement(SetName, {
          title: 'Name',
          description: 'Select a descriptive name for your scenario',
          id: 'title',
          initialValue: '',
          validate: validateName.bind(this)
        }),
        React.createElement('div', {
          id: 'confirmation',
          initialValue: {}
        })
      )
    );
  }
}));

module.exports = SavingsPotentialAdd;

},{"../../../helpers/common":595,"../../wizard/Wizard":560,"../../wizard/items/":570,"livereactload/babel-transform":28,"react":"react","react-bootstrap":"react-bootstrap"}],546:[function(require,module,exports){
'use strict';

var _react2 = require('react');

var _react3 = _interopRequireDefault(_react2);

var _babelTransform = require('livereactload/babel-transform');

var _babelTransform2 = _interopRequireDefault(_babelTransform);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

var _components = {
  _component: {}
};

var _livereactloadBabelTransform2 = (0, _babelTransform2.default)({
  filename: '/home/daiad/Desktop/Development/home-web/utility/src/main/frontend/components/section/savings/ExploreView.js',
  components: _components,
  locals: [],
  imports: [_react3.default]
});

function _wrapComponent(id) {
  return function (Component) {
    return _livereactloadBabelTransform2(Component, id);
  };
}

var React = require('react');
var bs = require('react-bootstrap');

var _require = require('react-intl'),
    FormattedTime = _require.FormattedTime;

var WidgetRow = require('../../WidgetRow');
var theme = require('../../chart/themes/blue-palette');

var SavingsPotentialExplore = _wrapComponent('_component')(React.createClass({
  displayName: 'SavingsPotentialExplore',

  componentWillMount: function componentWillMount() {
    if (this.props.clusters) {
      this.props.actions.exploreScenariosAllClusters(this.props.params.id);
    }
  },
  componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
    if (nextProps.clusters && !this.props.clusters) {
      this.props.actions.exploreScenariosAllClusters(this.props.params.id);
    }
  },
  render: function render() {
    var _props = this.props,
        scenarios = _props.scenarios,
        actions = _props.actions,
        explore = _props.explore,
        params = _props.params,
        viewportWidth = _props.viewportWidth,
        viewportHeight = _props.viewportHeight,
        intl = _props.intl;
    var clusters = explore.clusters;
    var goToListView = actions.goToListView,
        confirmRemoveScenario = actions.confirmRemoveScenario,
        refreshSavingsScenario = actions.refreshSavingsScenario;

    var _t = function _t(x) {
      return intl.formatMessage({ id: x });
    };

    var id = params.id;

    var scenario = scenarios.find(function (scenario) {
      return scenario.key === id;
    });

    if (scenario == null) {
      return React.createElement(
        bs.Panel,
        { header: React.createElement(
            'h3',
            null,
            '404'
          ) },
        React.createElement(
          bs.Row,
          null,
          React.createElement(
            bs.Col,
            { md: 6 },
            React.createElement(
              'h4',
              null,
              _t('Savings.Explore.notFound')
            )
          ),
          React.createElement(
            bs.Col,
            { md: 6, style: { textAlign: 'right' } },
            React.createElement(
              bs.Button,
              { bsStyle: 'success', onClick: function onClick() {
                  goToListView();
                } },
              React.createElement('i', { className: 'fa fa-chevron-left' }),
              ' Back to all'
            )
          )
        )
      );
    }

    var scenarioId = scenario.key,
        name = scenario.name,
        createdOn = scenario.createdOn,
        processingEndOn = scenario.processingEndOn,
        owner = scenario.owner,
        parameters = scenario.params,
        paramsShort = scenario.paramsShort,
        potential = scenario.potential,
        numberOfConsumers = scenario.numberOfConsumers,
        status = scenario.status;

    var completed = processingEndOn != null;
    var details = [{
      id: 1,
      display: 'stat',
      title: 'Details',
      highlight: null,
      info: [{
        key: 'User',
        value: owner
      }, {
        key: 'Created on',
        value: createdOn ? React.createElement(FormattedTime, { value: createdOn, minute: 'numeric', hour: 'numeric', day: 'numeric', month: 'numeric', year: 'numeric' }) : '-'
      }, {
        key: 'Completed on',
        value: processingEndOn ? React.createElement(FormattedTime, { value: processingEndOn, minute: 'numeric', hour: 'numeric', day: 'numeric', month: 'numeric', year: 'numeric' }) : '-'
      }]
    }, {
      id: 2,
      display: 'stat',
      title: 'Parameters',
      dialogClassName: 'maximized-modal-half',
      highlight: null,
      maximizable: true,
      info: paramsShort,
      maximizedProps: {
        info: parameters
      },
      maximizedStyle: {
        padding: 10,
        height: '10vh',
        fontSize: '1.5em'
      },
      limit: 5

    }];

    var stats = [];

    if (completed && Array.isArray(clusters)) {
      details.push({
        id: 3,
        display: 'stat',
        title: 'Savings Potential',
        highlight: React.createElement(
          'span',
          null,
          React.createElement(
            'span',
            null,
            potential + ' \u33A5'
          ),
          React.createElement(
            'h4',
            null,
            numberOfConsumers ? numberOfConsumers + ' consumers' : null
          )
        ),
        info: [],
        footer: null
      });

      clusters.forEach(function (cluster, i) {
        var clusterData = cluster.segments.map(function (x) {
          return Math.round(x.potential);
        });
        stats.push({
          id: i + 4,
          title: cluster.clusterName,
          display: 'chart',
          maximizable: true,
          viewportWidth: viewportWidth,
          viewportHeight: viewportHeight,
          style: {
            height: 200
          },
          theme: theme,
          yAxis: {
            formatter: function formatter(y) {
              return Math.round(y / 1000);
            }
          },
          xAxis: {
            data: cluster.segments.map(function (x) {
              return x.name;
            })
          },
          grid: {
            x: Math.max(Math.max.apply(Math, _toConsumableArray(cluster.segments.map(function (group) {
              return group.name.length;
            }))) * 6.5, 45) + 'px'
          },
          series: [{
            name: cluster.clusterName,
            color: function color(name, data, dataIndex) {
              return theme.color.find(function (x, i, arr) {
                return i === dataIndex % arr.length;
              });
            },
            label: {
              formatter: function formatter(y) {
                return Math.round(y / 1000) + ' \u33A5';
              }
            },
            fill: 0.8,
            data: cluster.clusterName === 'Consumption Class' ? clusterData.reverse() : clusterData
          }]
        });
      });

      /*
      stats.push({
        id: 25,
        display: 'map',
        title: 'Map',
        maximizable: true,
        style: {
          height: 238,
        },
        map: {},
        data: metersLocations && metersLocations.features ? 
          metersLocations.features.map(feature => [feature.geometry.coordinates[1], feature.geometry.coordinates[0], Math.abs(Math.random()-0.8)]) : []
          });
        */
    }

    return React.createElement(
      'div',
      null,
      React.createElement(
        bs.Panel,
        { header: React.createElement(
            'h3',
            null,
            name + _t('Savings.Explore.overview')
          ) },
        React.createElement(
          bs.Row,
          null,
          React.createElement(
            bs.Col,
            { md: 6, style: { float: 'right' } },
            React.createElement(
              bs.Button,
              {
                style: { float: 'right' },
                bsStyle: 'success',
                onClick: function onClick() {
                  goToListView();
                }
              },
              React.createElement('i', { className: 'fa fa-chevron-left' }),
              ' Back to all'
            ),
            React.createElement(
              bs.Button,
              {
                bsStyle: 'danger',
                style: { float: 'right', marginRight: 25 },
                onClick: function onClick() {
                  return confirmRemoveScenario(scenarioId);
                }
              },
              _t('Savings.Explore.delete')
            ),
            status !== 'PENDING' && status !== 'RUNNING' && status !== 'COMPLETED' ? React.createElement(
              bs.Button,
              {
                bsStyle: 'warning',
                style: { float: 'right', marginRight: 25 },
                onClick: function onClick() {
                  return refreshSavingsScenario(scenarioId);
                }
              },
              _t('Savings.List.refresh')
            ) : React.createElement('span', null)
          ),
          React.createElement(
            bs.Col,
            { md: 3, style: { float: 'left' } },
            React.createElement(
              'h5',
              null,
              'Status: ',
              status
            )
          )
        ),
        React.createElement('hr', null),
        React.createElement(WidgetRow, {
          widgets: details
        })
      ),
      completed ? React.createElement(
        'div',
        null,
        React.createElement(
          bs.Panel,
          { header: React.createElement(
              'h3',
              null,
              _t('Savings.Explore.stats')
            ) },
          React.createElement(WidgetRow, {
            itemsPerRow: 2,
            widgets: stats
          })
        )
      ) : React.createElement('div', null)
    );
  }
}));

module.exports = SavingsPotentialExplore;

},{"../../WidgetRow":510,"../../chart/themes/blue-palette":512,"livereactload/babel-transform":28,"react":"react","react-bootstrap":"react-bootstrap","react-intl":"react-intl"}],547:[function(require,module,exports){
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var React = require('react');
var bs = require('react-bootstrap');
var _ = require('lodash');

var _require = require('../../../schemas/savings'),
    savingsSchema = _require.savingsSchema;

var Table = require('../../Table');

var PAGING_SERVER_SIDE = 'server';

function sortIdToSortBy(id) {
  switch (id) {
    case 'name':
      return 'NAME';
    case 'status':
      return 'STATUS';
    case 'createdOn':
      return 'CREATED_ON';
    default:
      return '';
  }
}

function SavingsPotentialList(props) {
  var actions = props.actions,
      query = props.query,
      intl = props.intl;
  var goToAddView = actions.goToAddView;
  var searchFilter = query.name;

  var _t = function _t(x) {
    return intl.formatMessage({ id: x });
  };

  var scenarios = props.scenarios.map(function (scenario) {
    return _extends({}, scenario, {
      potential: scenario.potential,
      paramsShort: scenario.paramsShort.map(function (x) {
        return React.createElement(
          'span',
          null,
          React.createElement(
            'span',
            { style: { whiteSpace: 'nowrap' } },
            x.key
          ),
          '(',
          React.createElement(
            'b',
            { style: { whiteSpace: 'nowrap' } },
            x.value
          ),
          ') \xA0'
        );
      })
    });
  });

  var tableSorter = {
    defaultSort: 'createdOn',
    defaultOrder: 'desc',
    onSortChange: function onSortChange(sortId, sortOrder) {
      props.actions.setQueryAndFetch({
        sortBy: sortIdToSortBy(sortId),
        sortAscending: sortOrder === 'asc'
      });
    }
  };
  return React.createElement(
    bs.Panel,
    { header: React.createElement(
        'h3',
        null,
        _t('Savings.List.title')
      ) },
    React.createElement(
      bs.Row,
      null,
      React.createElement(
        bs.Col,
        { sm: 4, md: 5 },
        React.createElement(bs.Input, {
          type: 'text',
          placeholder: 'Search...',
          onChange: function onChange(e) {
            props.actions.setQuery({ name: e.target.value });
            _.debounce(function () {
              props.actions.setQueryAndFetch({ pageIndex: 0 });
            }, 300)();
          },
          value: searchFilter
        })
      ),
      React.createElement(
        bs.Col,
        { sm: 5, md: 7, style: { textAlign: 'right' } },
        React.createElement(
          bs.Button,
          {
            bsStyle: 'success',
            onClick: function onClick() {
              goToAddView();
            }
          },
          React.createElement('i', { className: 'fa fa-plus' }),
          ' Add New'
        )
      )
    ),
    React.createElement('hr', null),
    React.createElement(Table, {
      sortable: true,
      data: scenarios,
      fields: savingsSchema(actions),
      pager: {
        count: query.total,
        index: query.pageIndex,
        size: query.pageSize,
        onPageIndexChange: function onPageIndexChange(index) {
          return props.actions.setQueryAndFetch({ pageIndex: index });
        },
        mode: PAGING_SERVER_SIDE
      },
      sorter: tableSorter,
      style: { header: { whiteSpace: 'nowrap' } },
      template: { empty: React.createElement(
          'span',
          null,
          _t('Savings.List.empty')
        ) }
    })
  );
}

module.exports = SavingsPotentialList;

},{"../../../schemas/savings":645,"../../Table":502,"lodash":"lodash","react":"react","react-bootstrap":"react-bootstrap"}],548:[function(require,module,exports){
'use strict';

var _react2 = require('react');

var _react3 = _interopRequireDefault(_react2);

var _babelTransform = require('livereactload/babel-transform');

var _babelTransform2 = _interopRequireDefault(_babelTransform);

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _components = {
  _component: {}
};

var _livereactloadBabelTransform2 = (0, _babelTransform2.default)({
  filename: '/home/daiad/Desktop/Development/home-web/utility/src/main/frontend/components/section/savings/index.js',
  components: _components,
  locals: [],
  imports: [_react3.default]
});

function _wrapComponent(id) {
  return function (Component) {
    return _livereactloadBabelTransform2(Component, id);
  };
}

var React = require('react');

var _require = require('redux'),
    bindActionCreators = _require.bindActionCreators;

var _require2 = require('react-redux'),
    connect = _require2.connect;

var _require3 = require('react-router-redux'),
    push = _require3.push;

var _require4 = require('react-intl'),
    injectIntl = _require4.injectIntl;

var Actions = require('../../../actions/SavingsActions');

var _require5 = require('../../../actions/MapActions'),
    getTimeline = _require5.getTimeline,
    getMetersLocations = _require5.getMetersLocations;

var Modal = require('../../Modal');
var util = require('../../../helpers/wizard');

var SavingsPotential = _wrapComponent('_component')(React.createClass({
  displayName: 'SavingsPotential',

  componentWillMount: function componentWillMount() {
    this.props.actions.querySavingsScenarios();
    this.props.actions.fetchAllAreas();
  },
  render: function render() {
    var _props = this.props,
        children = _props.children,
        actions = _props.actions,
        scenarios = _props.scenarios,
        scenarioToRemoveKey = _props.scenarioToRemove;
    var goToListView = actions.goToListView,
        removeSavingsScenario = actions.removeSavingsScenario,
        confirmRemoveScenario = actions.confirmRemoveScenario;

    var scenarioToRemove = scenarios.find(function (scenario) {
      return scenario.key === scenarioToRemoveKey;
    });

    return React.createElement(
      'div',
      { className: 'container-fluid', style: { paddingTop: 10 } },
      React.createElement(
        'div',
        { className: 'row' },
        React.createElement(
          'div',
          { className: 'col-md-12 col-sm-12', style: { marginTop: 10 } },
          React.cloneElement(children, this.props)
        ),
        React.createElement(RemoveConfirmation, {
          goToListView: goToListView,
          scenario: scenarioToRemove,
          removeSavingsScenario: removeSavingsScenario,
          confirmRemoveScenario: confirmRemoveScenario
        })
      )
    );
  }
}));

//components used in more than one savings sub-sections

function RemoveConfirmation(props) {
  var scenario = props.scenario,
      confirmRemoveScenario = props.confirmRemoveScenario,
      removeSavingsScenario = props.removeSavingsScenario,
      goToListView = props.goToListView;

  var reset = function reset() {
    return confirmRemoveScenario(null);
  };
  if (scenario == null) {
    return React.createElement('div', null);
  }
  var key = scenario.key,
      name = scenario.name;

  return React.createElement(Modal, {
    title: 'Confirmation',
    className: 'confirmation-modal',
    show: true,
    text: React.createElement(
      'span',
      null,
      'Are you sure you want to delete ',
      React.createElement(
        'b',
        null,
        name
      ),
      ' (',
      key,
      ')'
    ),
    onClose: reset,
    actions: [{
      name: 'Cancel',
      action: reset
    }, {
      name: 'Delete',
      action: function action() {
        removeSavingsScenario(key);
        confirmRemoveScenario(null);
        goToListView();
      },
      style: 'danger'
    }]
  });
}

function mapStateToProps(state, ownProps) {
  return _extends({}, state.savings, {
    routing: state.routing,
    viewportWidth: state.viewport.width,
    viewportHeight: state.viewport.height,
    profile: state.session.profile,
    utility: state.config.utility.key,
    clusters: state.config.utility.clusters,
    metersLocations: state.map.metersLocations
  });
}

function mapDispatchToProps(dispatch) {
  return _extends({}, bindActionCreators(_extends({}, Actions, { getTimeline: getTimeline, getMetersLocations: getMetersLocations }), dispatch), {
    goToAddView: function goToAddView() {
      return dispatch(push('/savings/add'));
    },
    goToExploreView: function goToExploreView(id) {
      return dispatch(push('/savings/' + id));
    },
    goToListView: function goToListView() {
      return dispatch(push('/savings'));
    }
  });
}

function mergeProps(stateProps, dispatchProps, ownProps) {
  var areas = Array.isArray(stateProps.areas) && stateProps.areas.length > 0 && stateProps.areas[0] || [];
  return _extends({}, stateProps, {
    actions: _extends({}, dispatchProps, {
      addSavingsScenario: function addSavingsScenario(data) {
        return dispatchProps.addSavingsScenario(data).then(function () {
          return dispatchProps.querySavingsScenarios();
        });
      },
      removeSavingsScenario: function removeSavingsScenario(key) {
        return dispatchProps.removeSavingsScenario(key).then(function () {
          return dispatchProps.querySavingsScenarios();
        });
      },
      refreshSavingsScenario: function refreshSavingsScenario(key) {
        return dispatchProps.refreshSavingsScenario(key).then(function () {
          return dispatchProps.querySavingsScenarios();
        }).then(function () {
          return setTimeout(dispatchProps.querySavingsScenarios, 2000);
        });
      }
    })
  }, ownProps, {
    areas: areas,
    user: stateProps.profile ? { value: stateProps.profile.username, label: stateProps.profile.firstname + ' ' + stateProps.profile.lastname } : null,
    scenarios: stateProps.scenarios.map(function (scenario) {
      return _extends({}, scenario, {
        parameters: util.getParamsWithLabels(scenario.parameters, _extends({}, stateProps, { areas: areas, intl: ownProps.intl }))
      });
    }).map(function (scenario) {
      return _extends({}, scenario, {
        potential: Math.round(scenario.potential / 100) / 10,
        paramsShort: util.getFriendlyParams(scenario.parameters, ownProps.intl, 'short'),
        params: util.getFriendlyParams(scenario.parameters, ownProps.intl, 'long')
      });
    })
  });
}

var SavingsPotentialContainer = injectIntl(connect(mapStateToProps, mapDispatchToProps, mergeProps)(SavingsPotential));

SavingsPotentialContainer.icon = 'percent';
SavingsPotentialContainer.title = 'Section.Savings';

module.exports = SavingsPotentialContainer;

},{"../../../actions/MapActions":441,"../../../actions/SavingsActions":446,"../../../helpers/wizard":599,"../../Modal":498,"livereactload/babel-transform":28,"react":"react","react-intl":"react-intl","react-redux":"react-redux","react-router-redux":"react-router-redux","redux":"redux"}],549:[function(require,module,exports){
'use strict';

var _react2 = require('react');

var _react3 = _interopRequireDefault(_react2);

var _babelTransform = require('livereactload/babel-transform');

var _babelTransform2 = _interopRequireDefault(_babelTransform);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _components = {
  _component: {}
};

var _livereactloadBabelTransform2 = (0, _babelTransform2.default)({
  filename: '/home/daiad/Desktop/Development/home-web/utility/src/main/frontend/components/section/settings/SystemSettings.js',
  components: _components,
  locals: [],
  imports: [_react3.default]
});

function _wrapComponent(id) {
  return function (Component) {
    return _livereactloadBabelTransform2(Component, id);
  };
}

var React = require('react');

var SystemSettings = _wrapComponent('_component')(React.createClass({
  displayName: 'SystemSettings',

  contextTypes: {
    intl: React.PropTypes.object
  },

  render: function render() {
    return React.createElement('div', { className: 'container-fluid', style: { paddingTop: 10 } });
  }
}));

SystemSettings.icon = 'server';
SystemSettings.title = 'Settings.User';

module.exports = SystemSettings;

},{"livereactload/babel-transform":28,"react":"react"}],550:[function(require,module,exports){
'use strict';

var _react2 = require('react');

var _react3 = _interopRequireDefault(_react2);

var _babelTransform = require('livereactload/babel-transform');

var _babelTransform2 = _interopRequireDefault(_babelTransform);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _components = {
  _component: {}
};

var _livereactloadBabelTransform2 = (0, _babelTransform2.default)({
  filename: '/home/daiad/Desktop/Development/home-web/utility/src/main/frontend/components/section/settings/UserSettings.js',
  components: _components,
  locals: [],
  imports: [_react3.default]
});

function _wrapComponent(id) {
  return function (Component) {
    return _livereactloadBabelTransform2(Component, id);
  };
}

var React = require('react');

var _require = require('redux'),
    bindActionCreators = _require.bindActionCreators;

var _require2 = require('react-redux'),
    connect = _require2.connect;

var FormattedMessage = require('react-intl').FormattedMessage;
var bs = require('react-bootstrap');
var LocaleSwitcher = require('../../../components/LocaleSwitcher');

var _require3 = require('../../../actions/LocaleActions'),
    setLocale = _require3.setLocale;

var _require4 = require('../../../actions/SessionActions'),
    saveToProfile = _require4.saveToProfile;

var _require5 = require('../../../constants/Constants'),
    COUNTRIES = _require5.COUNTRIES,
    TIMEZONES = _require5.TIMEZONES;

var UserSettings = _wrapComponent('_component')(React.createClass({
  displayName: 'UserSettings',

  contextTypes: {
    intl: React.PropTypes.object
  },
  getInitialState: function getInitialState() {
    var _props$profile = this.props.profile,
        firstname = _props$profile.firstname,
        lastname = _props$profile.lastname,
        address = _props$profile.address,
        zip = _props$profile.zip,
        country = _props$profile.country,
        timezone = _props$profile.timezone,
        locale = _props$profile.locale;


    return {
      status: 'normal',
      firstname: firstname,
      lastname: lastname,
      address: address,
      zip: zip,
      country: country,
      timezone: timezone,
      locale: locale === 'en' ? 'en-GB' : locale
    };
  },
  render: function render() {
    var _this = this;

    var _props = this.props,
        profile = _props.profile,
        saveToProfile = _props.actions.saveToProfile;

    if (!profile) return React.createElement('div', null);
    var _t = this.context.intl.formatMessage;
    var countryKey = this.state.country ? "Countries." + this.state.country : "UserSettings.CountryPlaceholder";
    var timezoneKey = this.state.timezone ? "Timezones." + this.state.timezone : "UserSettings.TimezonePlaceholder";
    return React.createElement(
      'div',
      { className: 'container-fluid', style: { paddingTop: 10 } },
      React.createElement(
        'div',
        { className: 'row' },
        React.createElement(
          'div',
          { className: 'col-md-12', style: { marginTop: 10 } },
          React.createElement(
            bs.Panel,
            null,
            React.createElement(
              'form',
              { id: 'form-profile', style: { minWidth: 100 } },
              React.createElement(
                'div',
                { className: 'form-group', style: { 'display': 'none' } },
                React.createElement(
                  'label',
                  { className: 'control-label col-md-3', style: { paddingLeft: 0 } },
                  React.createElement(
                    'span',
                    null,
                    React.createElement(FormattedMessage, { id: 'UserSettings.Locale' })
                  )
                ),
                React.createElement(LocaleSwitcher, {
                  locale: this.state.locale,
                  onLocaleSwitch: function onLocaleSwitch(value) {
                    _this.props.actions.setLocale(value);
                    _this.setState({ locale: value });
                  }
                })
              ),
              React.createElement(
                'div',
                { className: 'form-group' },
                React.createElement(bs.Input, { type: 'text', label: _t({ id: "UserSettings.Username" }), value: profile.username, readOnly: true })
              ),
              React.createElement(bs.Input, { type: 'text', label: _t({ id: "UserSettings.Firstname" }), value: this.state.firstname, onChange: function onChange(e) {
                  return _this.setState({ firstname: e.target.value });
                }
              }),
              React.createElement(
                'div',
                { className: 'form-group' },
                React.createElement(bs.Input, { type: 'text', label: _t({ id: "UserSettings.Lastname" }), value: this.state.lastname, onChange: function onChange(e) {
                    return _this.setState({ lastname: e.target.value });
                  } })
              ),
              React.createElement(
                'div',
                { className: 'form-group' },
                React.createElement(bs.Input, { type: 'text', label: _t({ id: "UserSettings.Address" }), value: this.state.address, onChange: function onChange(e) {
                    return _this.setState({ address: e.target.value });
                  } })
              ),
              React.createElement(
                'div',
                { className: 'form-group' },
                React.createElement(bs.Input, { type: 'text', label: _t({ id: "UserSettings.Zip" }), value: this.state.zip, onChange: function onChange(e) {
                    return _this.setState({ zip: e.target.value });
                  } })
              ),
              React.createElement(
                'div',
                { className: 'form-group' },
                React.createElement(
                  'label',
                  { className: 'control-label col-md-3', style: { paddingLeft: 0 } },
                  React.createElement(
                    'span',
                    null,
                    React.createElement(FormattedMessage, { id: 'UserSettings.Country' })
                  )
                ),
                React.createElement(
                  bs.DropdownButton,
                  {
                    title: _t({ id: countryKey }),
                    id: 'country-switcher',
                    onSelect: function onSelect(e, val) {
                      _this.setState({ country: val });
                    } },
                  COUNTRIES.map(function (country) {
                    return React.createElement(
                      bs.MenuItem,
                      { key: country, eventKey: country, value: country },
                      _t({ id: "Countries." + country })
                    );
                  })
                )
              ),
              React.createElement(
                'div',
                { className: 'form-group' },
                React.createElement(
                  'label',
                  { className: 'control-label col-md-3', style: { paddingLeft: 0 } },
                  React.createElement(
                    'span',
                    null,
                    React.createElement(FormattedMessage, { id: 'UserSettings.Timezone' })
                  )
                ),
                React.createElement(
                  bs.DropdownButton,
                  {
                    title: _t({ id: timezoneKey }),
                    id: 'timezone-switcher',
                    onSelect: function onSelect(e, val) {
                      _this.setState({ timezone: val });
                    } },
                  TIMEZONES.map(function (timezone) {
                    return React.createElement(
                      bs.MenuItem,
                      { key: timezone, eventKey: timezone, value: timezone },
                      _t({ id: "Timezones." + timezone })
                    );
                  })
                )
              ),
              React.createElement('hr', null),
              React.createElement(bs.ButtonInput, { style: { float: 'left' }, type: 'submit', value: _t({ id: "UserSettings.Submit" }), onClick: function onClick(e) {
                  e.preventDefault();
                  var _state = _this.state,
                      firstname = _state.firstname,
                      lastname = _state.lastname,
                      address = _state.address,
                      zip = _state.zip,
                      country = _state.country,
                      timezone = _state.timezone,
                      locale = _state.locale;


                  saveToProfile(JSON.parse(JSON.stringify({ firstname: firstname, lastname: lastname, locale: locale, address: address, zip: zip, country: country, timezone: timezone }))).then(function (res) {
                    if (res.success) _this.setState({ status: 'success' });else _this.setState({ status: 'failure' });
                  });
                } }),
              function () {
                if (_this.state.status === 'success') return React.createElement('i', { className: 'fa fa-check', style: { float: 'right', marginTop: 10, fontSize: '1.5em', color: '#7AD3AB' } });else if (_this.state.status === 'failure') return React.createElement('i', { className: 'fa fa-times', style: { float: 'right', marginTop: 10, fontSize: '1.5em', color: '#CD4D3E' } });
              }()
            )
          )
        )
      )
    );
  }
}));

UserSettings.icon = 'user';
UserSettings.title = 'Settings.User';

function mapStateToProps(state) {
  return {
    locale: state.i18n.locale,
    profile: state.session.profile
  };
}

function mapDispatchToProps(dispatch) {
  return {
    actions: bindActionCreators(Object.assign({}, { setLocale: setLocale, saveToProfile: saveToProfile }), dispatch)
  };
}

module.exports = connect(mapStateToProps, mapDispatchToProps)(UserSettings);

},{"../../../actions/LocaleActions":438,"../../../actions/SessionActions":448,"../../../components/LocaleSwitcher":495,"../../../constants/Constants":573,"livereactload/babel-transform":28,"react":"react","react-bootstrap":"react-bootstrap","react-intl":"react-intl","react-redux":"react-redux","redux":"redux"}],551:[function(require,module,exports){
'use strict';

var _react2 = require('react');

var _react3 = _interopRequireDefault(_react2);

var _babelTransform = require('livereactload/babel-transform');

var _babelTransform2 = _interopRequireDefault(_babelTransform);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _components = {
  _component: {}
};

var _livereactloadBabelTransform2 = (0, _babelTransform2.default)({
  filename: '/home/daiad/Desktop/Development/home-web/utility/src/main/frontend/components/section/support/Data.js',
  components: _components,
  locals: [],
  imports: [_react3.default]
});

function _wrapComponent(id) {
  return function (Component) {
    return _livereactloadBabelTransform2(Component, id);
  };
}

var React = require('react');
var Select = require('react-select').default;

var _require = require('react-redux'),
    connect = _require.connect;

var $ = require('jquery');

var Bootstrap = require('react-bootstrap');
var Dropzone = require('react-dropzone');

var Checkbox = require('../../Checkbox');

var UPLOAD_NONE = 0;
var UPLOAD_METER = 1;
var UPLOAD_METER_DATA = 2;
var UPLOAD_FORECAST = 3;

var onChangeSRID = function onChangeSRID(val) {
  this.setState({
    srid: val.value
  });
};

var onChangeTimezone = function onChangeTimezone(val) {
  this.setState({
    timezone: val.value
  });
};

var onChangeMode = function onChangeMode(val) {
  this.setState({
    mode: val.value
  });
};

var clearErrors = function clearErrors() {
  this.setState({
    errors: null
  });
};

var DataManagement = _wrapComponent('_component')(React.createClass({
  displayName: 'DataManagement',

  contextTypes: {
    intl: React.PropTypes.object
  },

  getInitialState: function getInitialState() {
    var profile = this.props.profile;

    var timezone = profile.timezone || 'UTC';

    var srid = null;
    switch (profile.country) {
      case 'Greece':case 'Hellas':
        srid = 2100;
        break;
      case 'Spain':
        srid = 3042;
        break;
      default:
        srid = 4326;
        break;
    }

    return {
      isLoading: false,
      srid: srid,
      timezone: timezone,
      errors: null,
      isFirstRowProfile: false,
      mode: UPLOAD_NONE
    };
  },


  onFirstRowIsHeaderClick: function onFirstRowIsHeaderClick(checked) {
    this.setState({ isFirstRowProfile: checked });
  },

  onDropMeter: function onDropMeter(files) {
    var data = new FormData();
    data.append('srid', this.state.srid);
    data.append('firstRowHeader', this.state.isFirstRowProfile);

    this.onDrop('/action/upload', files, data, 'METER');
  },

  onDropMeterData: function onDropMeterData(files) {
    var data = new FormData();
    data.append('timezone', this.state.timezone);

    this.onDrop('/action/upload', files, data, 'METER_DATA');
  },

  onDropForecastData: function onDropForecastData(files) {
    var data = new FormData();
    data.append('timezone', this.state.timezone);

    this.onDrop('/action/upload', files, data, 'METER_DATA_FORECAST');
  },

  onDrop: function onDrop(url, files, data, type) {
    if (this.state.isLoading) {
      return;
    }
    var self = this;

    data.append('type', type);
    for (var f = 0; f < files.length; f++) {
      data.append('files', files[f]);
    }

    var updateCsrfToken = function updateCsrfToken(crsf) {
      $('meta[name=_csrf]').attr('content', crsf);
      $('input[name=_csrf]').val(crsf);
    };

    this.setState({ isLoading: type, errors: null });

    var request = {
      url: url,
      type: 'POST',
      data: data,
      enctype: 'multipart/form-data',
      processData: false,
      contentType: false,
      cache: false,
      beforeSend: function beforeSend(xhr) {
        xhr.setRequestHeader('X-CSRF-TOKEN', $('meta[name=_csrf]').attr('content'));
      }
    };

    $.ajax(request).done(function (data, textStatus, request) {
      updateCsrfToken(request.getResponseHeader('X-CSRF-TOKEN'));
      self.setState({ isLoading: null, errors: data.errors });
    }).fail(function (jqXHR, textStatus, errorThrown) {
      updateCsrfToken(jqXHR.getResponseHeader('X-CSRF-TOKEN'));
      self.setState({ isLoading: null });
    });
  },

  render: function render() {
    var dropZoneImage = React.createElement('i', { className: 'fa fa-cloud-upload fa-4x' });
    if (this.state.isLoading) {
      dropZoneImage = React.createElement('i', { className: 'fa fa-cog fa-spin fa-4x' });
    }

    var modal = null;
    if (this.state.errors && this.state.errors.length > 0) {
      var errors = [];
      for (var i = 0; i < this.state.errors.length; i++) {
        errors.push(React.createElement(
          'p',
          { key: i },
          this.state.errors[i].description
        ));
      }

      modal = React.createElement(
        Bootstrap.Modal,
        { show: true, onHide: clearErrors.bind(this) },
        React.createElement(
          Bootstrap.Modal.Header,
          { closeButton: true },
          React.createElement(
            Bootstrap.Modal.Title,
            null,
            'Error'
          )
        ),
        React.createElement(
          Bootstrap.Modal.Body,
          null,
          errors
        ),
        React.createElement(
          Bootstrap.Modal.Footer,
          null,
          React.createElement(
            Bootstrap.Button,
            { onClick: clearErrors.bind(this) },
            'Close'
          )
        )
      );
    }

    var panel = null;

    var modeSelection = React.createElement(
      Bootstrap.ListGroupItem,
      null,
      React.createElement(
        'div',
        { className: 'row' },
        React.createElement(
          'div',
          { className: 'col-md-4' },
          React.createElement(Select, { name: 'mode',
            value: this.state.mode,
            options: [{ value: UPLOAD_NONE, label: 'Select ...' }, { value: UPLOAD_METER, label: 'Assign meters to users' }, { value: UPLOAD_METER_DATA, label: 'Upload water meter data' }, { value: UPLOAD_FORECAST, label: 'Upload forecasting data' }],
            onChange: onChangeMode.bind(this),
            clearable: false
          }),
          React.createElement(
            'span',
            { className: 'help-block' },
            'Select task type'
          )
        )
      )
    );

    switch (this.state.mode) {
      case UPLOAD_METER:
        panel = React.createElement(
          Bootstrap.ListGroup,
          { fill: true },
          modeSelection,
          React.createElement(
            Bootstrap.ListGroupItem,
            { style: { background: '#f5f5f5' } },
            React.createElement('i', { className: 'fa fa-cloud-upload fa-fw' }),
            React.createElement(
              'span',
              { style: { paddingLeft: 4 } },
              'Assign meters to users'
            )
          ),
          React.createElement(
            Bootstrap.ListGroupItem,
            null,
            React.createElement(
              'div',
              { className: 'row' },
              React.createElement(
                'div',
                { className: 'form-group col-md-2' },
                React.createElement(
                  'label',
                  { className: 'control-label', htmlFor: 'srid' },
                  'Coordinates SRID'
                )
              ),
              React.createElement(
                'div',
                { className: 'col-md-6' },
                React.createElement(Select, { name: 'srid',
                  value: this.state.srid,
                  options: [{ value: 4326, label: 'WGS 84 - EPSG:4326' }, { value: 3042, label: 'ETRS89 / UTM zone 30N (N-E) - EPSG:3042' }, { value: 25830, label: 'ETRS89 / UTM zone 30N - EPSG:25830' }, { value: 2100, label: 'GGRS87 - EPSG:2100)' }],
                  onChange: onChangeSRID.bind(this),
                  clearable: false
                }),
                React.createElement(
                  'span',
                  { className: 'help-block' },
                  'Select Coordinates Reference System for meter location'
                )
              )
            ),
            React.createElement(
              'div',
              { className: 'row' },
              React.createElement(
                'div',
                { className: 'form-group col-md-2' },
                React.createElement(
                  'label',
                  { className: 'control-label', htmlFor: 'srid' },
                  'First row is header'
                )
              ),
              React.createElement(
                'div',
                { className: 'col-md-6', style: { paddingLeft: 19 } },
                React.createElement(
                  'div',
                  { style: { paddingLeft: 1 } },
                  React.createElement(Checkbox, { checked: this.state.isFirstRowProfile,
                    onChange: this.onFirstRowIsHeaderClick })
                )
              )
            ),
            React.createElement(
              'div',
              { className: 'row' },
              React.createElement(
                'div',
                { className: 'form-group col-md-12' },
                React.createElement(
                  Dropzone,
                  { onDrop: this.onDropMeter.bind(this), disableClick: true, multiple: true,
                    style: { textAlign: 'center', fontSize: '3em', color: '#656565', border: '1px dotted #656565' } },
                  dropZoneImage
                )
              )
            )
          ),
          React.createElement(
            Bootstrap.ListGroupItem,
            null,
            React.createElement(
              'span',
              { color: '#565656' },
              'Drop an excel file with user and meter data. The first sheet must contain four columns with the username, meter serial number, longitude and latitude values respectively. Longitude and latitude values are optional.'
            )
          )
        );
        break;
      case UPLOAD_METER_DATA:
        panel = React.createElement(
          Bootstrap.ListGroup,
          { fill: true },
          modeSelection,
          React.createElement(
            Bootstrap.ListGroupItem,
            { style: { background: '#f5f5f5' } },
            React.createElement('i', { className: 'fa fa-cloud-upload fa-fw' }),
            React.createElement(
              'span',
              { style: { paddingLeft: 4 } },
              'Upload water meter data'
            )
          ),
          React.createElement(
            Bootstrap.ListGroupItem,
            null,
            React.createElement(
              'div',
              { className: 'row' },
              React.createElement(
                'div',
                { className: 'form-group col-md-2' },
                React.createElement(
                  'label',
                  { className: 'control-label', htmlFor: 'timezone' },
                  'Time zone '
                )
              ),
              React.createElement(
                'div',
                { className: 'col-md-6' },
                React.createElement(Select, { name: 'timezone',
                  value: this.state.timezone,
                  options: [{ value: 'UTC', label: 'Coordinated Universal Time (UTC)' }, { value: 'Europe/Madrid', label: 'Madrid' }, { value: 'Europe/Athens', label: 'Athens' }],
                  onChange: onChangeTimezone.bind(this),
                  clearable: false
                }),
                React.createElement(
                  'span',
                  { className: 'help-block' },
                  'Select time zone of the uploaded data'
                )
              )
            ),
            React.createElement(
              'div',
              { className: 'row' },
              React.createElement(
                'div',
                { className: 'form-group col-md-12' },
                React.createElement(
                  Dropzone,
                  { onDrop: this.onDropMeterData.bind(this), disableClick: true, multiple: true,
                    style: { textAlign: 'center', fontSize: '3em', color: '#656565', border: '1px dotted #656565' } },
                  dropZoneImage
                )
              )
            )
          ),
          React.createElement(
            Bootstrap.ListGroupItem,
            null,
            React.createElement(
              'p',
              null,
              'Drop a text file with smart water meter measurement data. Each row should have six values delimited  with semicolon character (',
              React.createElement(
                'b',
                null,
                ';'
              ),
              ').'
            ),
            React.createElement(
              'p',
              null,
              'Fields:'
            ),
            React.createElement(
              'ol',
              null,
              React.createElement(
                'li',
                null,
                'Channel'
              ),
              React.createElement(
                'li',
                null,
                'Utility'
              ),
              React.createElement(
                'li',
                null,
                'Meter Serial Number'
              ),
              React.createElement(
                'li',
                null,
                'Date & time formatted as ',
                React.createElement(
                  'b',
                  null,
                  'DD/MM/YYYY HH:mm:ss'
                )
              ),
              React.createElement(
                'li',
                null,
                'Meter reading'
              ),
              React.createElement(
                'li',
                null,
                'Difference since last reading'
              )
            ),
            React.createElement('p', null),
            React.createElement(
              'p',
              null,
              'Example:'
            ),
            React.createElement(
              'p',
              { style: { color: '#565656' } },
              'ALICANTE VHF',
              React.createElement(
                'b',
                null,
                ';'
              ),
              'AMAEM',
              React.createElement(
                'b',
                null,
                ';'
              ),
              'C12FA154674',
              React.createElement(
                'b',
                null,
                ';'
              ),
              '11/04/2016 11:12:04',
              React.createElement(
                'b',
                null,
                ';'
              ),
              '896377',
              React.createElement(
                'b',
                null,
                ';'
              ),
              '1',
              React.createElement(
                'b',
                null,
                ';'
              )
            )
          )
        );
        break;
      case UPLOAD_FORECAST:
        panel = React.createElement(
          Bootstrap.ListGroup,
          { fill: true },
          modeSelection,
          React.createElement(
            Bootstrap.ListGroupItem,
            { style: { background: '#f5f5f5' } },
            React.createElement('i', { className: 'fa fa-cloud-upload fa-fw' }),
            React.createElement(
              'span',
              { style: { paddingLeft: 4 } },
              'Upload forecasting data'
            )
          ),
          React.createElement(
            Bootstrap.ListGroupItem,
            null,
            React.createElement(
              'div',
              { className: 'row' },
              React.createElement(
                'div',
                { className: 'form-group col-md-2' },
                React.createElement(
                  'label',
                  { className: 'control-label', htmlFor: 'timezone' },
                  'Time zone '
                )
              ),
              React.createElement(
                'div',
                { className: 'col-md-6' },
                React.createElement(Select, { name: 'timezone',
                  value: this.state.timezone,
                  options: [{ value: 'UTC', label: 'Coordinated Universal Time (UTC)' }, { value: 'Europe/Madrid', label: 'Madrid' }, { value: 'Europe/Athens', label: 'Athens' }],
                  onChange: onChangeTimezone.bind(this),
                  clearable: false
                }),
                React.createElement(
                  'span',
                  { className: 'help-block' },
                  'Select time zone of the uploaded data'
                )
              )
            ),
            React.createElement(
              'div',
              { className: 'row' },
              React.createElement(
                'div',
                { className: 'form-group col-md-12' },
                React.createElement(
                  Dropzone,
                  { onDrop: this.onDropForecastData.bind(this), disableClick: true, multiple: true,
                    style: { textAlign: 'center', fontSize: '3em', color: '#656565', border: '1px dotted #656565' } },
                  dropZoneImage
                )
              )
            )
          ),
          React.createElement(
            Bootstrap.ListGroupItem,
            null,
            React.createElement(
              'p',
              null,
              'Drop text file with forecasting analysis results. Each line contains three values. The first and second values are delimited with an underscore (',
              React.createElement(
                'b',
                null,
                '_'
              ),
              '). The second and third values are delimited with a space.'
            ),
            React.createElement(
              'p',
              null,
              'Fields:'
            ),
            React.createElement(
              'ol',
              null,
              React.createElement(
                'li',
                null,
                'Meter Serial Number'
              ),
              React.createElement(
                'li',
                null,
                'Date & time formatted as ',
                React.createElement(
                  'b',
                  null,
                  'YYYY-MM-DD-HH'
                )
              ),
              React.createElement(
                'li',
                null,
                'Difference since last reading'
              )
            ),
            React.createElement('p', null),
            React.createElement(
              'p',
              null,
              'Example:'
            ),
            React.createElement(
              'p',
              { style: { color: '#565656' } },
              'C11FA586148',
              React.createElement(
                'b',
                null,
                '_'
              ),
              '2014-06-30-01 1.9244444'
            )
          )
        );
        break;
      default:
        panel = React.createElement(
          Bootstrap.ListGroup,
          { fill: true },
          modeSelection
        );
        break;
    }

    var header = React.createElement(
      'span',
      null,
      React.createElement('i', { className: 'fa fa-cog fa-fw' }),
      React.createElement(
        'span',
        { style: { paddingLeft: 4 } },
        'Task'
      )
    );

    return React.createElement(
      'div',
      { className: 'container-fluid', style: { paddingTop: 10 } },
      modal,
      React.createElement(
        'div',
        { className: 'row', style: { marginBottom: 10 } },
        React.createElement(
          'div',
          { className: 'col-md-12' },
          React.createElement(
            Bootstrap.Panel,
            { header: header },
            panel
          )
        )
      )
    );
  }
}));

DataManagement.icon = 'database';
DataManagement.title = 'Section.Support.Data';

function mapStateToProps(state) {
  return {
    query: state.query,
    profile: state.session.profile,
    routing: state.routing
  };
}

function mapDispatchToProps(dispatch) {
  return {};
}

module.exports = connect(mapStateToProps, mapDispatchToProps)(DataManagement);

},{"../../Checkbox":481,"jquery":"jquery","livereactload/babel-transform":28,"react":"react","react-bootstrap":"react-bootstrap","react-dropzone":"react-dropzone","react-redux":"react-redux","react-select":"react-select"}],552:[function(require,module,exports){
'use strict';

var _react2 = require('react');

var _react3 = _interopRequireDefault(_react2);

var _babelTransform = require('livereactload/babel-transform');

var _babelTransform2 = _interopRequireDefault(_babelTransform);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _components = {
  _component: {}
};

var _livereactloadBabelTransform2 = (0, _babelTransform2.default)({
  filename: '/home/daiad/Desktop/Development/home-web/utility/src/main/frontend/components/section/support/DataExport.js',
  components: _components,
  locals: [],
  imports: [_react3.default]
});

function _wrapComponent(id) {
  return function (Component) {
    return _livereactloadBabelTransform2(Component, id);
  };
}

var React = require('react');
var Bootstrap = require('react-bootstrap');

var _require = require('redux'),
    bindActionCreators = _require.bindActionCreators;

var _require2 = require('react-redux'),
    connect = _require2.connect;

var Table = require('../../Table');

var _require3 = require('../../../actions/DataExportActions'),
    fileChangeIndex = _require3.fileChangeIndex,
    getFiles = _require3.getFiles,
    getTrialFinalFiles = _require3.getTrialFinalFiles,
    setFilter = _require3.setFilter,
    clearFilter = _require3.clearFilter,
    download = _require3.download;

var descriptionText = React.createElement(
  'div',
  null,
  React.createElement(
    'p',
    { style: { textAlign: 'justify' } },
    'All the exported data file names follow the naming convention shown below:'
  ),
  React.createElement(
    'p',
    { style: { color: '#565656' } },
    React.createElement(
      'b',
      null,
      '[data source]-[utility]-[population]-[date].zip'
    )
  ),
  React.createElement(
    'p',
    { style: { textAlign: 'justify' } },
    'A file name consists of four parts. The ',
    React.createElement(
      'b',
      null,
      'data source'
    ),
    ' value can be either ',
    React.createElement(
      'b',
      null,
      'meter'
    ),
    ' or ',
    React.createElement(
      'b',
      null,
      'amphiro'
    ),
    ' and corresponds to smart water meter or amphiro b1 data respectively. The ',
    React.createElement(
      'b',
      null,
      'utility'
    ),
    ' refers to the area where the trial takes place e.g. Alicante or St. Albans. The population can be either ',
    React.createElement(
      'b',
      null,
      'trial'
    ),
    ' or ',
    React.createElement(
      'b',
      null,
      'all'
    ),
    '. The former refers to the registered users that participate in the trial, while the latter refers to all registered users including development or demo user accounts. The ',
    React.createElement(
      'b',
      null,
      'date'
    ),
    ' is the file creation date and time.'
  ),
  React.createElement(
    'p',
    { style: { textAlign: 'justify' } },
    'Currently the Export Transform Load (ETL) job creates one or three files per utility depending on whether the utility has smart water meters installed (e.g. Alicante). Each archive may contain multiple files.'
  ),
  React.createElement(
    'p',
    { style: { textAlign: 'justify' } },
    'Files contained in each archive are enumerated next.'
  )
);

var file1 = React.createElement(
  'div',
  null,
  React.createElement(
    'ol',
    null,
    React.createElement(
      'li',
      { style: { textAlign: 'justify' } },
      React.createElement(
        'b',
        null,
        'user.csv'
      ),
      ': Lists all the users who participate in the trial together with the serial number of the smart water meter assigned to them.'
    ),
    React.createElement(
      'li',
      { style: { textAlign: 'justify' } },
      React.createElement(
        'b',
        null,
        'data.csv'
      ),
      ': Contains smart water meter data from all meters assigned to users who participate in the DAIAD trial. The file contains four columns, namely, meter id, local date time (e.g. Europe/Madrid time zone for Alicante), volume and difference (from the previous reading).'
    ),
    React.createElement(
      'li',
      { style: { textAlign: 'justify' } },
      React.createElement(
        'b',
        null,
        'phase-timestamp'
      ),
      ': This file contains information about the trial phases for each user alongside with the corresponding time intervals. Each line contains the following three phases (a) Baseline (Mobile Off / amphiro b1 Off) both the mobile application and amphiro b1 display are disabled, (b) Phase 1 where either the mobile application or the amphiro b1 display is enabled and (c) Phase 2 where both the mobile application and amphiro b1 display are enabled.'
    )
  )
);

var file2 = React.createElement(
  'div',
  null,
  React.createElement(
    'ol',
    null,
    React.createElement(
      'li',
      { style: { textAlign: 'justify' } },
      React.createElement(
        'b',
        null,
        'data.csv'
      ),
      ': Contains all the smart water meter data collected and stored by the DAIAD system. Same as above, the file contains four columns, namely, meter id, local date time (e.g. Europe/Madrid time zone for Alicante), volume and difference.'
    )
  )
);

var file3 = React.createElement(
  'div',
  null,
  React.createElement(
    'ol',
    null,
    React.createElement(
      'li',
      { style: { textAlign: 'justify' } },
      React.createElement(
        'b',
        null,
        'error.csv'
      ),
      ': Contains error messages generated by the system during the execution of the ETL job. Each row consists of the unique user key, the user name, the unique device key and an error description.'
    ),
    React.createElement(
      'li',
      { style: { textAlign: 'justify' } },
      React.createElement(
        'b',
        null,
        'user.csv'
      ),
      ': Lists all the users who participate in the trial. The file columns are the unique user key and the user name.'
    ),
    React.createElement(
      'li',
      { style: { textAlign: 'justify' } },
      React.createElement(
        'b',
        null,
        'phase-timestamp.csv'
      ),
      ': This file contains information about the trial phases for each device alongside with the corresponding time intervals.'
    ),
    React.createElement(
      'li',
      { style: { textAlign: 'justify' } },
      React.createElement(
        'b',
        null,
        'phase-shower-id.csv'
      ),
      ': As above, this file contains information about the trial phases for each user alongside with the corresponding shower id intervals.'
    ),
    React.createElement(
      'li',
      { style: { textAlign: 'justify' } },
      React.createElement(
        'b',
        null,
        'shower-data-all.csv'
      ),
      ': Contains all the shower data. No filtering is applied. Except of shower properties such as duration, volume and energy, each row contains two additional Boolean properties, namely, ',
      React.createElement(
        'i',
        null,
        'history'
      ),
      ' and ',
      React.createElement(
        'i',
        null,
        'ignore'
      ),
      '. The first is ',
      React.createElement(
        'i',
        null,
        'True'
      ),
      ' for historical showers and ',
      React.createElement(
        'i',
        null,
        'False'
      ),
      ' for real-time ones. The second is ',
      React.createElement(
        'i',
        null,
        'True'
      ),
      ' only for showers that the user has characterized as not being showers.'
    ),
    React.createElement(
      'li',
      { style: { textAlign: 'justify' } },
      React.createElement(
        'b',
        null,
        'shower-data-valid.csv'
      ),
      ': Contains the shower data that has passed all validation rules.'
    ),
    React.createElement(
      'li',
      { style: { textAlign: 'justify' } },
      React.createElement(
        'b',
        null,
        'shower-data-removed.csv'
      ),
      ': Contains shower data that has failed to pass any of the validation rules.'
    ),
    React.createElement(
      'li',
      { style: { textAlign: 'justify' } },
      React.createElement(
        'b',
        null,
        'shower-data-removed-index.csv'
      ),
      ': Contains the indexes of the showers that have failed to pass any of the validation rules for each amphiro b1 device .'
    ),
    React.createElement(
      'li',
      { style: { textAlign: 'justify' } },
      React.createElement(
        'b',
        null,
        'shower-time-series'
      ),
      ': This file contains the time-series for the amphiro b1 real-time showers.'
    )
  )
);

var DataExport = _wrapComponent('_component')(React.createClass({
  displayName: 'DataExport',

  contextTypes: {
    intl: React.PropTypes.object
  },

  componentWillMount: function componentWillMount() {
    if (this.props.files.items == null) {
      this.props.actions.getFiles();
      this.props.actions.getTrialFinalFiles();
    }
  },

  onFilePageIndexChange: function onFilePageIndexChange(index) {
    this.props.actions.fileChangeIndex(index);
  },

  setfilter: function setfilter(e) {
    this.props.actions.setFilter({});
  },

  clearFilter: function clearFilter(e) {
    this.props.actions.clearFilter();
  },

  render: function render() {
    var files = this.props.files;
    var pinnedFiles = this.props.pinnedFiles;

    var finalExportTableFields = [{
      name: 'key',
      title: 'Section.Support.DataExport.Table1.Key',
      hidden: true
    }, {
      name: 'utility',
      title: 'Section.Support.DataExport.Table1.Utility'
    }, {
      name: 'filename',
      title: 'Section.Support.DataExport.Table1.Name'
    }, {
      name: 'description',
      title: 'Section.Support.DataExport.Table1.Description'
    }, {
      name: 'size',
      title: 'Section.Support.DataExport.Table1.Size'
    }, {
      name: 'completedOn',
      title: 'Section.Support.DataExport.Table1.CreatedOn',
      type: 'datetime'
    }, {
      name: 'download',
      type: 'action',
      icon: 'cloud-download',
      handler: function (field, row) {
        this.props.actions.download(row.key, row.filename);
      }.bind(this)
    }];

    var finalExportTableData = pinnedFiles || [];

    var exportTableFields = [{
      name: 'key',
      title: 'Section.Support.DataExport.Table2.Key',
      hidden: true
    }, {
      name: 'utility',
      title: 'Section.Support.DataExport.Table2.Utility'
    }, {
      name: 'filename',
      title: 'Section.Support.DataExport.Table2.Name'
    }, {
      name: 'description',
      title: 'Section.Support.DataExport.Table2.Description'
    }, {
      name: 'size',
      title: 'Section.Support.DataExport.Table2.Size'
    }, {
      name: 'completedOn',
      title: 'Section.Support.DataExport.Table2.CreatedOn',
      type: 'datetime'
    }, {
      name: 'download',
      type: 'action',
      icon: 'cloud-download',
      handler: function (field, row) {
        this.props.actions.download(row.key, row.filename);
      }.bind(this)
    }];

    var exportTableData = files.items || [];

    var exportPager = {
      index: files.index || 0,
      size: files.size || 10,
      count: files.total || 0,
      mode: Table.PAGING_SERVER_SIDE,
      onPageIndexChange: this.onFilePageIndexChange
    };

    var fileNotFound = React.createElement(
      'span',
      null,
      'No files found.'
    );

    return React.createElement(
      'div',
      { className: 'container-fluid', style: { paddingTop: 10 } },
      React.createElement(
        'div',
        { className: 'row' },
        React.createElement(
          'div',
          { className: 'col-md-12' },
          React.createElement(
            Bootstrap.Panel,
            null,
            React.createElement(
              Bootstrap.ListGroup,
              { fill: true },
              React.createElement(
                Bootstrap.ListGroupItem,
                { style: { background: '#f5f5f5' } },
                React.createElement('i', { className: 'fa fa-exclamation  fa-fw' }),
                React.createElement(
                  'span',
                  { style: { paddingLeft: 4 } },
                  'Trial Final Data Export'
                )
              ),
              React.createElement(
                Bootstrap.ListGroupItem,
                null,
                React.createElement(Table, {
                  fields: finalExportTableFields,
                  data: finalExportTableData,
                  template: { empty: fileNotFound }
                })
              ),
              React.createElement(
                Bootstrap.ListGroupItem,
                { style: { background: '#f5f5f5' } },
                React.createElement('i', { className: 'fa fa-file-archive-o fa-fw' }),
                React.createElement(
                  'span',
                  { style: { paddingLeft: 4 } },
                  'Files'
                )
              ),
              React.createElement(
                Bootstrap.ListGroupItem,
                null,
                React.createElement(Table, {
                  fields: exportTableFields,
                  data: exportTableData,
                  pager: exportPager,
                  template: { empty: fileNotFound }
                })
              ),
              React.createElement(
                Bootstrap.ListGroupItem,
                { style: { background: '#f5f5f5' } },
                React.createElement('i', { className: 'fa fa-life-ring fa-fw' }),
                React.createElement(
                  'span',
                  { style: { paddingLeft: 4 } },
                  'Description'
                )
              ),
              React.createElement(
                Bootstrap.ListGroupItem,
                null,
                descriptionText
              ),
              React.createElement(
                Bootstrap.ListGroupItem,
                { style: { background: '#f5f5f5' } },
                React.createElement('i', { className: 'fa fa-arrow-right  fa-fw' }),
                React.createElement(
                  'span',
                  { style: { paddingLeft: 4 } },
                  'meter-[utility]-trial-[date].zip'
                )
              ),
              React.createElement(
                Bootstrap.ListGroupItem,
                null,
                file1
              ),
              React.createElement(
                Bootstrap.ListGroupItem,
                { style: { background: '#f5f5f5' } },
                React.createElement('i', { className: 'fa fa-arrow-right  fa-fw' }),
                React.createElement(
                  'span',
                  { style: { paddingLeft: 4 } },
                  'meter-[utility]-all-[date]'
                )
              ),
              React.createElement(
                Bootstrap.ListGroupItem,
                null,
                file2
              ),
              React.createElement(
                Bootstrap.ListGroupItem,
                { style: { background: '#f5f5f5' } },
                React.createElement('i', { className: 'fa fa-arrow-right  fa-fw' }),
                React.createElement(
                  'span',
                  { style: { paddingLeft: 4 } },
                  'amphiro-[utility]-trial-[date].zip'
                )
              ),
              React.createElement(
                Bootstrap.ListGroupItem,
                null,
                file3
              )
            )
          )
        )
      )
    );
  }
}));

DataExport.icon = 'fa-file-archive-o';
DataExport.title = 'Section.Support.DataExport.Title';

function mapStateToProps(state) {
  return {
    query: state.dataExport.query,
    files: state.dataExport.files,
    pinnedFiles: state.dataExport.pinnedFiles,
    isLoading: state.dataExport.isLoading,
    routing: state.routing
  };
}

function mapDispatchToProps(dispatch) {
  return {
    actions: bindActionCreators({
      fileChangeIndex: fileChangeIndex,
      getFiles: getFiles,
      getTrialFinalFiles: getTrialFinalFiles,
      setFilter: setFilter,
      clearFilter: clearFilter,
      download: download
    }, dispatch)
  };
}

module.exports = connect(mapStateToProps, mapDispatchToProps)(DataExport);

},{"../../../actions/DataExportActions":432,"../../Table":502,"livereactload/babel-transform":28,"react":"react","react-bootstrap":"react-bootstrap","react-redux":"react-redux","redux":"redux"}],553:[function(require,module,exports){
'use strict';

var _react2 = require('react');

var _react3 = _interopRequireDefault(_react2);

var _babelTransform = require('livereactload/babel-transform');

var _babelTransform2 = _interopRequireDefault(_babelTransform);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _components = {
  _component: {}
};

var _livereactloadBabelTransform2 = (0, _babelTransform2.default)({
  filename: '/home/daiad/Desktop/Development/home-web/utility/src/main/frontend/components/section/support/Development.js',
  components: _components,
  locals: [],
  imports: [_react3.default]
});

function _wrapComponent(id) {
  return function (Component) {
    return _livereactloadBabelTransform2(Component, id);
  };
}

var React = require('react');
var Select = require('react-select').default;

var _require = require('redux'),
    bindActionCreators = _require.bindActionCreators;

var _require2 = require('react-redux'),
    connect = _require2.connect;

var moment = require('moment');
var Timeline = require('../../Timeline');

var _require3 = require('react-intl'),
    FormattedTime = _require3.FormattedTime;

var Bootstrap = require('react-bootstrap');
var Dropzone = require('react-dropzone');

var _require4 = require('../../../actions/QueryActions'),
    submitQuery = _require4.submitQuery;

var _require5 = require('../../../actions/DebugActions'),
    createUser = _require5.createUser,
    createAmphiro = _require5.createAmphiro,
    generateAmphiroData = _require5.generateAmphiroData,
    setTimezone = _require5.setTimezone,
    setErrors = _require5.setErrors,
    getFeatures = _require5.getFeatures;

var _require6 = require('../../../actions/MapActions'),
    getMetersLocations = _require6.getMetersLocations;

var _require7 = require('react-leaflet-wrapper'),
    Map = _require7.Map,
    TileLayer = _require7.TileLayer,
    GeoJSON = _require7.GeoJSON,
    Choropleth = _require7.Choropleth;

var onChangeTimezone = function onChangeTimezone(val) {
  this.props.actions.setTimezone(val.value);
};

var _getTimelineValues = function _getTimelineValues(timeline) {
  if (timeline) {
    return timeline.getTimestamps();
  }
  return [];
};

var _getTimelineLabels = function _getTimelineLabels(timeline) {
  if (timeline) {
    return timeline.getTimestamps().map(function (timestamp) {
      return React.createElement(FormattedTime, { value: new Date(timestamp),
        day: 'numeric',
        month: 'numeric',
        year: 'numeric' });
    });
  }
  return [];
};

var Development = _wrapComponent('_component')(React.createClass({
  displayName: 'Development',

  contextTypes: {
    intl: React.PropTypes.object
  },

  getInitialState: function getInitialState() {
    return {
      isLoading: null
    };
  },


  createUser: function createUser(e) {
    if (this.refs.password.value) {
      this.props.actions.createUser(this.refs.password.value);
    }
  },

  createAmphiro: function createAmphiro(e) {
    this.props.actions.createAmphiro();
  },

  clearErrors: function clearErrors() {
    this.props.actions.setErrors(null);
  },

  executeQuery: function executeQuery(e) {
    var groupSpatialFilter = {
      type: 'GROUP',
      group: 'd29f8cb8-7df6-4d57-8c99-0a155cc394c5'
    };

    var query = {
      time: {
        type: 'SLIDING',
        start: moment().valueOf(),
        duration: -60,
        durationTimeUnit: 'DAY',
        granularity: 'DAY'
      },
      population: [
      /*
       * { type :'USER', label: 'User 1', users:
       * ['63078a88-f75a-4c5e-8d75-b4472ba456bb'] }, { type :'CLUSTER',
       * label: 'Income', // cluster:
       * 'bd1a6ad7-6419-44a1-b951-bf6f1a4200d5', // name: 'Income',
       * clusterType: 'INCOME' },
       */{
        type: 'UTILITY',
        label: 'Alicante',
        utility: '2b48083d-6f05-488f-9f9b-99607a93c6c3' /*
                                                            * , { type :'UTILITY', label: 'Alicante (top 2)', utility:
                                                            * '2b48083d-6f05-488f-9f9b-99607a93c6c3', ranking: { type: 'TOP',
                                                            * metric: 'SUM', field: 'VOLUME', limit: 2 } }
                                                            */
      }],
      // spatial :[constraintSpatialFilter],
      spatial: [groupSpatialFilter],
      // source: 'BOTH',
      source: 'METER',
      metrics: ['SUM']
    };

    this.props.actions.submitQuery({ query: query });
  },

  onDropAmphiroData: function onDropAmphiroData(files) {
    if (this.props.debug.isLoading) {
      return;
    }

    this.props.actions.generateAmphiroData(this.props.debug.timezone, files);
  },

  componentWillMount: function componentWillMount() {
    //fetch meter geojson data
    if (!this.props.metersLocations) {
      this.props.actions.getMetersLocations();
    }
  },

  componentDidMount: function componentDidMount() {
    var timezone = 'UTC';
    if (this.props.profile && this.props.profile.timezone) {
      timezone = this.props.profile.timezone;
    }

    this.props.actions.setTimezone(timezone);
  },

  render: function render() {
    var spinner = React.createElement('i', { className: 'fa fa-cloud-upload fa-4x' });
    if (this.props.debug.isLoading === true) {
      spinner = React.createElement('i', { className: 'fa fa-cog fa-spin fa-4x' });
    }

    var modal = null;
    if (this.props.debug.errors && this.props.debug.errors.length > 0) {
      var errors = [];
      for (var i = 0; i < this.props.debug.errors.length; i++) {
        errors.push(React.createElement(
          'p',
          { key: i },
          this.props.debug.errors[i].description
        ));
      }

      modal = React.createElement(
        Bootstrap.Modal,
        { show: true, onHide: this.clearErrors },
        React.createElement(
          Bootstrap.Modal.Header,
          { closeButton: true },
          React.createElement(
            Bootstrap.Modal.Title,
            null,
            'Error'
          )
        ),
        React.createElement(
          Bootstrap.Modal.Body,
          null,
          errors
        ),
        React.createElement(
          Bootstrap.Modal.Footer,
          null,
          React.createElement(
            Bootstrap.Button,
            { onClick: this.clearErrors },
            'Close'
          )
        )
      );
    }

    // Add map
    var onChangeTimeline = function onChangeTimeline(value, label, index) {
      this.props.actions.getFeatures(this.props.query.timeline, value, 'Alicante');
    };

    var map = React.createElement(
      Bootstrap.ListGroupItem,
      null,
      React.createElement(
        Map,
        {
          height: 400,
          width: '100%',
          center: [38.35, -0.48],
          zoom: 13
        },
        React.createElement(TileLayer, null),
        React.createElement(Choropleth, {
          name: 'Areas',
          data: this.props.debug.features,
          legend: 'bottomright',
          valueProperty: 'value',
          scale: ['white', 'red'],
          steps: 4,
          mode: 'e',
          popupContent: function popupContent(feature) {
            return React.createElement(
              'div',
              null,
              React.createElement(
                'h5',
                null,
                feature.properties.label
              ),
              React.createElement(
                'span',
                null,
                feature.properties.value
              )
            );
          },
          highlightStyle: { weight: 4 },
          style: {
            fillColor: "#ffff00",
            color: "#000",
            weight: 3,
            opacity: 1,
            fillOpacity: 0.5
          }
        }),
        React.createElement(GeoJSON, {
          name: 'Meters',
          data: this.props.metersLocations,
          popupContent: function popupContent(feature) {
            return React.createElement(
              'div',
              null,
              React.createElement(
                'h5',
                null,
                'Serial:'
              ),
              React.createElement(
                'h5',
                null,
                feature.properties.serial
              )
            );
          },
          circleMarkers: true,
          style: {
            radius: 8,
            fillColor: "#ff7800",
            color: "#000",
            weight: 1,
            opacity: 1,
            fillOpacity: 0.8
          }
        })
      )
    );

    var timeline = React.createElement(
      Bootstrap.ListGroupItem,
      null,
      React.createElement(Timeline, { onChange: onChangeTimeline.bind(this),
        labels: _getTimelineLabels(this.props.query.timeline),
        values: _getTimelineValues(this.props.query.timeline),
        defaultIndex: 0,
        speed: 1000,
        animate: false })
    );

    // End of map
    return React.createElement(
      'div',
      { className: 'container-fluid', style: { paddingTop: 10 } },
      modal,
      React.createElement(
        'div',
        { className: 'row', style: { marginBottom: 10 } },
        React.createElement(
          'div',
          { className: 'col-md-6' },
          React.createElement(
            Bootstrap.Panel,
            { header: 'Automatically register users and Amphiro devices' },
            React.createElement(
              Bootstrap.ListGroup,
              { fill: true },
              React.createElement(
                Bootstrap.ListGroupItem,
                null,
                React.createElement(
                  'div',
                  { className: 'row' },
                  React.createElement(
                    'div',
                    { className: 'form-group col-md-3' },
                    React.createElement(
                      'label',
                      { className: 'control-label', htmlFor: 'password' },
                      'Default Password'
                    )
                  ),
                  React.createElement(
                    'div',
                    { className: 'col-md-9' },
                    React.createElement('input', { id: 'password', name: 'password', type: 'password', ref: 'password', autoFocus: true,
                      placeholder: 'Password ...', className: 'form-control', style: { marginBottom: 15 } }),
                    React.createElement(
                      'span',
                      { className: 'help-block' },
                      'Default password for new accounts'
                    )
                  )
                ),
                React.createElement(
                  'div',
                  { className: 'row' },
                  React.createElement(
                    'div',
                    { className: 'col-md-6' },
                    React.createElement(
                      Bootstrap.Button,
                      { bsStyle: 'primary', onClick: this.createUser },
                      'Register users'
                    )
                  )
                )
              ),
              React.createElement(
                Bootstrap.ListGroupItem,
                null,
                React.createElement(
                  'div',
                  { className: 'row' },
                  React.createElement(
                    'div',
                    { className: 'col-md-6' },
                    React.createElement(
                      Bootstrap.Button,
                      { bsStyle: 'primary', onClick: this.createAmphiro },
                      'Create Amphiro'
                    )
                  )
                )
              ),
              React.createElement(
                Bootstrap.ListGroupItem,
                null,
                React.createElement(
                  'div',
                  { className: 'row' },
                  React.createElement(
                    'div',
                    { className: 'col-md-6' },
                    React.createElement(
                      Bootstrap.Button,
                      { bsStyle: 'primary', onClick: this.executeQuery },
                      'Execute Query'
                    )
                  )
                )
              ),
              React.createElement(
                Bootstrap.ListGroupItem,
                null,
                React.createElement(
                  'span',
                  { style: { fontWeight: 'bold' } },
                  'Register users'
                ),
                React.createElement(
                  'span',
                  { color: '#565656' },
                  ': Registers all users found in the white list for the utility of the signed administrator. A default password is required for the registration.'
                ),
                React.createElement('br', null),
                React.createElement('br', null),
                React.createElement(
                  'span',
                  { style: { fontWeight: 'bold' } },
                  'Create Amphiro'
                ),
                React.createElement(
                  'span',
                  { color: '#565656' },
                  ': Registers at least one Amphiro device for every registered user for the utility of the signed administrator.'
                )
              ),
              map,
              timeline
            )
          )
        ),
        React.createElement(
          'div',
          { className: 'col-md-6' },
          React.createElement(
            Bootstrap.Panel,
            { header: 'Upload random Amphiro data' },
            React.createElement(
              Bootstrap.ListGroup,
              { fill: true },
              React.createElement(
                Bootstrap.ListGroupItem,
                null,
                React.createElement(
                  'div',
                  { className: 'row' },
                  React.createElement(
                    'div',
                    { className: 'form-group col-md-3' },
                    React.createElement(
                      'label',
                      { className: 'control-label', htmlFor: 'timezone' },
                      'Time zone'
                    )
                  ),
                  React.createElement(
                    'div',
                    { className: 'col-md-9' },
                    React.createElement(Select, { name: 'timezone',
                      value: this.props.debug.timezone,
                      options: [{ value: 'UTC', label: 'Coordinated Universal Time (UTC)' }, { value: 'Europe/Madrid', label: 'Madrid' }, { value: 'Europe/Athens', label: 'Athens' }],
                      onChange: onChangeTimezone.bind(this),
                      clearable: false
                    }),
                    React.createElement(
                      'span',
                      { className: 'help-block' },
                      'Select time zone of the uploaded data'
                    )
                  )
                ),
                React.createElement(
                  'div',
                  { className: 'row' },
                  React.createElement(
                    'div',
                    { className: 'form-group col-md-12' },
                    React.createElement(
                      Dropzone,
                      { onDrop: this.onDropAmphiroData.bind(this), disableClick: true, multiple: true,
                        style: { textAlign: 'center', fontSize: '3em', color: '#656565', border: '1px dotted #656565' } },
                      spinner
                    )
                  )
                )
              ),
              React.createElement(
                Bootstrap.ListGroupItem,
                null,
                React.createElement(
                  'span',
                  { color: '#565656' },
                  'Drop a text file with Amphiro sessions. Data will be generated for the current month.'
                ),
                React.createElement('br', null),
                React.createElement(
                  'span',
                  { color: '#565656' },
                  'Only devices with no sessions will be updated.'
                )
              )
            )
          )
        )
      )
    );
  }
}));

Development.icon = 'bug';
Development.title = 'Section.Support.Development';

function mapStateToProps(state) {
  return {
    query: state.query,
    debug: state.debug,
    profile: state.session.profile,
    routing: state.routing,
    metersLocations: state.map.metersLocations
  };
}

function mapDispatchToProps(dispatch) {
  return {
    actions: bindActionCreators(Object.assign({}, {
      submitQuery: submitQuery, createUser: createUser, createAmphiro: createAmphiro,
      setTimezone: setTimezone, setErrors: setErrors, generateAmphiroData: generateAmphiroData, getFeatures: getFeatures, getMetersLocations: getMetersLocations
    }), dispatch)
  };
}

module.exports = connect(mapStateToProps, mapDispatchToProps)(Development);

},{"../../../actions/DebugActions":433,"../../../actions/MapActions":441,"../../../actions/QueryActions":445,"../../Timeline":503,"livereactload/babel-transform":28,"moment":"moment","react":"react","react-bootstrap":"react-bootstrap","react-dropzone":"react-dropzone","react-intl":"react-intl","react-leaflet-wrapper":151,"react-redux":"react-redux","react-select":"react-select","redux":"redux"}],554:[function(require,module,exports){
'use strict';

var _react2 = require('react');

var _react3 = _interopRequireDefault(_react2);

var _babelTransform = require('livereactload/babel-transform');

var _babelTransform2 = _interopRequireDefault(_babelTransform);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _components = {
  _component: {}
};

var _livereactloadBabelTransform2 = (0, _babelTransform2.default)({
  filename: '/home/daiad/Desktop/Development/home-web/utility/src/main/frontend/components/section/support/Logging.js',
  components: _components,
  locals: [],
  imports: [_react3.default]
});

function _wrapComponent(id) {
  return function (Component) {
    return _livereactloadBabelTransform2(Component, id);
  };
}

var React = require('react');
var Bootstrap = require('react-bootstrap');

var _require = require('redux'),
    bindActionCreators = _require.bindActionCreators;

var _require2 = require('react-redux'),
    connect = _require2.connect;

var Select = require('react-select').default;
var Table = require('../../Table');

var _require3 = require('../../../actions/LoggingActions'),
    getEvents = _require3.getEvents,
    changeIndex = _require3.changeIndex,
    filterAccount = _require3.filterAccount,
    filterLevel = _require3.filterLevel,
    clearFilter = _require3.clearFilter;

var handleKeyPress = function handleKeyPress(e) {
  if (e.key === 'Enter') {
    this.refresh();
  }
};

var Logging = _wrapComponent('_component')(React.createClass({
  displayName: 'Logging',

  contextTypes: {
    intl: React.PropTypes.object
  },

  componentWillMount: function componentWillMount() {
    if (this.props.logging.events == null) {
      this.props.actions.getEvents();
    }
  },

  onPageIndexChange: function onPageIndexChange(index) {
    this.props.actions.changeIndex(index);
  },

  filterAccount: function filterAccount(e) {
    this.props.actions.filterAccount(this.refs.accountFilter.getValue());
  },

  filterLevel: function filterLevel(e) {
    this.props.actions.filterLevel(e.value === 'UNDEFINED' ? null : e.value);
  },

  clearFilter: function clearFilter(e) {
    this.props.actions.clearFilter();
  },

  refresh: function refresh(e) {
    this.props.actions.getEvents();
  },

  render: function render() {
    var tableFields = [{
      name: 'id',
      title: 'Section.Support.Logging.Table1.Id',
      hidden: true
    }, {
      name: 'level',
      title: 'Section.Support.Logging.Table1.Level',
      align: 'center',
      className: function className(value) {
        switch (value) {
          case "FATAL":case "ERROR":
            return 'log_error';
          case "WARN":
            return 'log_warn';
          case "INFO":
            return 'log_info';
          case "DEBUG":case "TRACE":
            return 'log_debug';
        }
        return '';
      }
    }, {
      name: 'category',
      title: 'Section.Support.Logging.Table1.Category'
    }, {
      name: 'code',
      title: 'Section.Support.Logging.Table1.Code'
    }, {
      name: 'timestamp',
      title: 'Section.Support.Logging.Table1.CreatedOn',
      type: 'datetime'
    }, {
      name: 'message',
      title: 'Section.Support.Logging.Table1.Message'
    }, {
      name: 'remoteAddress',
      title: 'Section.Support.Logging.Table1.Source'
    }, {
      name: 'account',
      title: 'Section.Support.Logging.Table1.Account'
    }];
    var tableData = this.props.logging.data.events || [];
    var tablePager = {
      index: this.props.logging.data.index || 0,
      size: this.props.logging.data.size || 10,
      count: this.props.logging.data.total || 0,
      mode: Table.PAGING_SERVER_SIDE,
      onPageIndexChange: this.onPageIndexChange
    };

    var resetButton = React.createElement('div', null);

    if (this.props.logging.query.level || this.props.logging.query.account) {
      resetButton = React.createElement(
        'div',
        { style: { float: 'right', marginLeft: 20 } },
        React.createElement(
          Bootstrap.Button,
          { bsStyle: 'default', onClick: this.clearFilter },
          'Reset'
        )
      );
    }

    var filterOptions = React.createElement(
      Bootstrap.ListGroupItem,
      null,
      React.createElement(
        'div',
        { className: 'row' },
        React.createElement(
          'div',
          { className: 'col-md-2' },
          React.createElement(Bootstrap.Input, {
            type: 'text',
            id: 'accountFilter', name: 'accountFilter', ref: 'accountFilter',
            placeholder: 'Search by account ...',
            onChange: this.filterAccount,
            onKeyPress: handleKeyPress.bind(this),
            value: this.props.logging.query.account || '' }),
          React.createElement(
            'span',
            { className: 'help-block' },
            'Filter by account'
          )
        ),
        React.createElement(
          'div',
          { className: 'col-md-2' },
          React.createElement(Select, { name: 'level',
            value: this.props.logging.query.level || 'UNDEFINED',
            options: [{ value: 'UNDEFINED', label: '-' }, { value: 'DEBUG', label: 'DEBUG' }, { value: 'INFO', label: 'INFO' }, { value: 'WARN', label: 'WARN' }, { value: 'ERROR', label: 'ERROR' }],
            onChange: this.filterLevel,
            clearable: false,
            searchable: false, className: 'form-group' }),
          React.createElement(
            'span',
            { className: 'help-block' },
            'Filter by level'
          )
        ),
        React.createElement(
          'div',
          { className: 'col-md-4', style: { float: 'right' } },
          resetButton,
          React.createElement(
            'div',
            { style: { float: 'right' } },
            React.createElement(
              Bootstrap.Button,
              { bsStyle: 'primary', onClick: this.refresh },
              'Refresh'
            )
          )
        )
      )
    );

    var dataNotFound = React.createElement(
      'span',
      null,
      'No events found.'
    );

    var eventHeader = React.createElement(
      'span',
      null,
      React.createElement('i', { className: 'fa fa-table fa-fw' }),
      React.createElement(
        'span',
        { style: { paddingLeft: 4 } },
        'Events'
      ),
      React.createElement('span', { style: { float: 'right', marginTop: -3, marginLeft: 5 } })
    );

    return React.createElement(
      'div',
      { className: 'container-fluid', style: { paddingTop: 10 } },
      React.createElement(
        'div',
        { className: 'row' },
        React.createElement(
          'div',
          { className: 'col-md-12' },
          React.createElement(
            Bootstrap.Panel,
            { header: eventHeader },
            React.createElement(
              Bootstrap.ListGroup,
              { fill: true },
              filterOptions,
              React.createElement(
                Bootstrap.ListGroupItem,
                null,
                React.createElement(Table, { fields: tableFields,
                  data: tableData,
                  pager: tablePager,
                  template: { empty: dataNotFound }
                })
              )
            )
          )
        )
      )
    );
  }
}));

Logging.icon = 'history';
Logging.title = 'Section.Support.Logging.Title';

function mapStateToProps(state) {
  return {
    logging: state.logging,
    routing: state.routing
  };
}

function mapDispatchToProps(dispatch) {
  return {
    actions: bindActionCreators(Object.assign({}, { getEvents: getEvents, changeIndex: changeIndex, filterLevel: filterLevel, filterAccount: filterAccount, clearFilter: clearFilter }), dispatch) };
}

module.exports = connect(mapStateToProps, mapDispatchToProps)(Logging);

},{"../../../actions/LoggingActions":439,"../../Table":502,"livereactload/babel-transform":28,"react":"react","react-bootstrap":"react-bootstrap","react-redux":"react-redux","react-select":"react-select","redux":"redux"}],555:[function(require,module,exports){
'use strict';

var _react2 = require('react');

var _react3 = _interopRequireDefault(_react2);

var _babelTransform = require('livereactload/babel-transform');

var _babelTransform2 = _interopRequireDefault(_babelTransform);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _components = {
  _component: {}
};

var _livereactloadBabelTransform2 = (0, _babelTransform2.default)({
  filename: '/home/daiad/Desktop/Development/home-web/utility/src/main/frontend/components/section/support/MessageAnalytics.js',
  components: _components,
  locals: [],
  imports: [_react3.default]
});

function _wrapComponent(id) {
  return function (Component) {
    return _livereactloadBabelTransform2(Component, id);
  };
}

var React = require('react');

var _require = require('redux'),
    bindActionCreators = _require.bindActionCreators;

var _require2 = require('react-redux'),
    connect = _require2.connect;

var Bootstrap = require('react-bootstrap');

var _require3 = require('react-router'),
    Link = _require3.Link;

var DateRangePicker = require('react-bootstrap-daterangepicker');
var FilterTag = require('../../chart/dimension/FilterTag');
var GroupSearchTextBox = require('../../GroupSearchTextBox');
var Table = require('../../UserTable');

var _require4 = require('../../../actions/MessageAnalyticsActions'),
    fetchMessages = _require4.fetchMessages,
    changeIndex = _require4.changeIndex,
    showReceivers = _require4.showReceivers,
    goBack = _require4.goBack,
    setEditor = _require4.setEditor,
    setEditorValue = _require4.setEditorValue,
    setTimezone = _require4.setTimezone,
    setSelectedMessage = _require4.setSelectedMessage;

var _onIntervalEditorChange = function _onIntervalEditorChange(event, picker) {
  this.props.actions.setEditorValue('interval', [picker.startDate, picker.endDate]);
};

var onPopulationEditorChange = function onPopulationEditorChange(e) {
  if (!e) {
    var utility = this.props.profile.utility;
    e = {
      key: utility.key,
      name: utility.name,
      type: 'UTILITY'
    };
  }
  this.props.actions.setEditorValue('population', e);
};

var _setEditor = function _setEditor(key) {
  this.props.actions.setEditor(key);
};

var MessageAnalytics = _wrapComponent('_component')(React.createClass({
  displayName: 'MessageAnalytics',


  contextTypes: {
    intl: React.PropTypes.object
  },
  componentWillMount: function componentWillMount() {
    this.props.actions.fetchMessages();
  },
  componentDidMount: function componentDidMount() {
    var utility = this.props.profile.utility;

    this.props.actions.setTimezone(utility.timezone);
  },

  onPageIndexChange: function onPageIndexChange(index) {
    this.props.actions.changeIndex(index);
  },

  clickedShowReceivers: function clickedShowReceivers(row) {
    this.props.actions.showReceivers(row);
  },

  render: function render() {
    if (this.props.showReceivers && !this.props.isLoading) {
      var receiversFields = {
        fields: [{
          name: 'accountId',
          title: 'Section.Support.Messages.Table1.Id',
          hidden: true
        }, {
          name: 'lastName',
          title: 'Section.Support.Messages.Table1.LastName'
        }, {
          name: 'username',
          title: 'Section.Support.Messages.Table1.UserName'
        }, {
          name: 'acknowledgedOn',
          title: 'Section.Support.Messages.Table1.AcknowledgedOn',
          type: 'datetime'
        }],
        rows: this.props.receivers,
        pager: {
          index: 0,
          size: 10,
          count: this.props.receivers ? this.props.receivers.length : 0
        }
      };

      var receiversTitle = React.createElement(
        'span',
        null,
        React.createElement('i', { className: 'fa fa-calendar fa-fw' }),
        React.createElement(
          'span',
          { style: { paddingLeft: 4 } },
          'Users that received this Message'
        ),
        React.createElement('span', { style: { float: 'right', marginTop: -3, marginLeft: 5 } })
      );

      var messageInfoTitle = React.createElement(
        'span',
        null,
        React.createElement('i', { className: 'fa fa-calendar fa-fw' }),
        React.createElement(
          'span',
          { style: { paddingLeft: 4 } },
          'Message Info'
        ),
        React.createElement('span', { style: { float: 'right', marginTop: -3, marginLeft: 5 } })
      );
      var receiversTable = React.createElement(
        'div',
        null,
        React.createElement(Table, { data: receiversFields })
      );

      var messageInfo = React.createElement(
        'div',
        null,
        React.createElement(
          Bootstrap.Row,
          null,
          React.createElement(
            Bootstrap.Col,
            { xs: 6 },
            React.createElement(
              'label',
              null,
              'Title:'
            )
          ),
          React.createElement(
            Bootstrap.Col,
            { xs: 6 },
            React.createElement(
              'div',
              { style: { fontSize: 16 } },
              React.createElement(
                'label',
                null,
                this.props.selectedMessage.title
              )
            )
          )
        ),
        React.createElement(
          Bootstrap.Row,
          null,
          React.createElement(
            Bootstrap.Col,
            { xs: 6 },
            React.createElement(
              'label',
              null,
              'Description:'
            )
          ),
          React.createElement(
            Bootstrap.Col,
            { xs: 6 },
            React.createElement(
              'div',
              { style: { fontSize: 16 } },
              React.createElement(
                'label',
                null,
                this.props.selectedMessage.description
              )
            )
          )
        ),
        React.createElement(
          Bootstrap.Row,
          null,
          React.createElement(
            Bootstrap.Col,
            { xs: 6 },
            React.createElement(
              'label',
              null,
              'Total receivers:'
            )
          ),
          React.createElement(
            Bootstrap.Col,
            { xs: 6 },
            React.createElement(
              'div',
              { style: { fontSize: 16 } },
              React.createElement(
                'label',
                null,
                this.props.selectedMessage.receiversCount
              )
            )
          )
        )
      );

      return React.createElement(
        'div',
        { className: 'container-fluid', style: { paddingTop: 10 } },
        React.createElement(
          'div',
          { className: 'row' },
          React.createElement(
            Bootstrap.Panel,
            { header: messageInfoTitle },
            React.createElement(
              Bootstrap.ListGroup,
              { fill: true },
              React.createElement(
                Bootstrap.ListGroupItem,
                null,
                messageInfo
              )
            )
          )
        ),
        React.createElement(
          'div',
          { className: 'row' },
          React.createElement(
            Bootstrap.Panel,
            { header: receiversTitle },
            React.createElement(
              Bootstrap.ListGroup,
              { fill: true },
              React.createElement(
                Bootstrap.ListGroupItem,
                null,
                receiversTable
              )
            )
          )
        ),
        React.createElement(
          'div',
          { className: 'row' },
          React.createElement(
            Bootstrap.Button,
            {
              onClick: this.props.actions.goBack },
            'Back'
          )
        )
      );
    }

    // Filter configuration
    var intervalLabel = '';
    if (this.props.interval) {
      var start = this.props.interval[0].format('DD/MM/YYYY');
      var end = this.props.interval[1].format('DD/MM/YYYY');
      intervalLabel = start + ' - ' + end;
      if (start === end) {
        intervalLabel = start;
      }
    }

    var intervalEditor = React.createElement(
      'div',
      { className: 'col-md-3' },
      React.createElement(
        DateRangePicker,
        { startDate: this.props.interval[0],
          endDate: this.props.interval[1],
          ranges: this.props.ranges,
          onEvent: _onIntervalEditorChange.bind(this),
          locale: this.props.dateRangePickerLocale },
        React.createElement(
          'div',
          { className: 'clearfix Select-control', style: { cursor: 'pointer', padding: '5px 10px', width: '100%' } },
          React.createElement(
            'span',
            null,
            intervalLabel
          )
        )
      ),
      React.createElement(
        'span',
        { className: 'help-block' },
        'Select time interval'
      )
    );

    var populationEditor = React.createElement(
      'div',
      { className: 'col-md-3' },
      React.createElement(GroupSearchTextBox, { name: 'groupname', onChange: onPopulationEditorChange.bind(this) }),
      React.createElement(
        'span',
        { className: 'help-block' },
        'Select a consumer group'
      )
    );

    var filter = null;

    switch (this.props.editor) {
      case 'interval':
        filter = React.createElement(
          Bootstrap.ListGroupItem,
          null,
          React.createElement(
            'div',
            { className: 'row' },
            intervalEditor
          )
        );
        break;

      case 'population':
        filter = React.createElement(
          Bootstrap.ListGroupItem,
          null,
          React.createElement(
            'div',
            { className: 'row' },
            populationEditor
          )
        );
        break;
    }

    var filterTitle = React.createElement(
      'span',
      null,
      React.createElement('i', { className: 'fa fa-bar-chart fa-fw' }),
      React.createElement(
        'span',
        { style: { paddingLeft: 4 } },
        'Statistics'
      ),
      React.createElement(
        'span',
        { style: { float: 'right', marginTop: -3, marginLeft: 5, display: this.props.editor ? 'block' : 'none' } },
        React.createElement(
          Bootstrap.Button,
          { bsStyle: 'default', className: 'btn-circle', onClick: _setEditor.bind(this, null) },
          React.createElement('i', { className: 'fa fa-rotate-left fa-fw' })
        )
      ),
      React.createElement(
        'span',
        { style: { float: 'right', marginTop: -3, marginLeft: 5 } },
        React.createElement(
          Bootstrap.Button,
          { bsStyle: 'default', className: 'btn-circle', onClick: _setEditor.bind(this, 'population') },
          React.createElement('i', { className: 'fa fa-group fa-fw' })
        )
      ),
      React.createElement(
        'span',
        { style: { float: 'right', marginTop: -3, marginLeft: 5 } },
        React.createElement(
          Bootstrap.Button,
          { bsStyle: 'default', className: 'btn-circle', onClick: _setEditor.bind(this, 'interval') },
          React.createElement('i', { className: 'fa fa-calendar fa-fw' })
        )
      )
    );

    var statistics,
        filterTags = [];

    filterTags.push(React.createElement(FilterTag, { key: 'time', text: intervalLabel, icon: 'calendar' }));
    filterTags.push(React.createElement(FilterTag, { key: 'population', text: this.props.population ? this.props.population.label : this.props.profile.utility.name, icon: 'group' }));

    var messageFields = {
      fields: [{
        name: 'category',
        title: 'Section.Support.Messages.Table2.Category'
      }, {
        name: 'type',
        title: 'Section.Support.Messages.Table2.Type'
      }, {
        name: 'count',
        title: 'Section.Support.Messages.Table2.TotalReceivers'
      }, {
        name: 'details',
        type: 'action',
        icon: 'group',
        handler: function handler() {
          // TODO: Implement controller actions
          //self.props.actions.setSelectedMessage(this.props.row);
          //self.clickedShowReceivers(this.props.row);
        }
      }],
      rows: this.props.messages ? this.props.messages : [],
      pager: {
        index: 0,
        size: 10,
        count: this.props.messages ? this.props.messages.length : 0,
        mode: Table.PAGING_CLIENT_SIDE
      }
    };

    statistics = React.createElement(
      Bootstrap.ListGroup,
      { fill: true },
      filter,
      React.createElement(
        Bootstrap.ListGroupItem,
        null,
        React.createElement(Table, {
          data: messageFields,
          onPageIndexChange: this.onPageIndexChange })
      ),
      React.createElement(
        Bootstrap.ListGroupItem,
        { className: 'clearfix' },
        React.createElement(
          'div',
          { className: 'pull-left' },
          filterTags
        ),
        React.createElement(
          'span',
          { style: { paddingLeft: 7 } },
          ' '
        ),
        React.createElement(
          Link,
          { className: 'pull-right', to: '/', style: { paddingLeft: 7, paddingTop: 12 } },
          'View dashboard'
        )
      )
    );

    var statisticsPanel = React.createElement(
      Bootstrap.Panel,
      { header: filterTitle },
      statistics
    );

    return React.createElement(
      'div',
      { className: 'container-fluid', style: { paddingTop: 10 } },
      React.createElement(
        'div',
        { className: 'row' },
        React.createElement(
          'div',
          { className: 'col-md-12' },
          statisticsPanel
        )
      )
    );
  }
}));

function mapStateToProps(state) {
  return {
    population: state.messages.population,
    ranges: state.messages.ranges,
    profile: state.session.profile,
    routing: state.routing,
    messages: state.messages.messages,
    showReceivers: state.messages.showReceivers,
    receivers: state.messages.receivers,
    selectedMessage: state.messages.selectedMessage,
    interval: state.messages.interval,
    editor: state.messages.editor,
    timezone: state.messages.timezone,
    dateRangePickerLocale: state.i18n.data[state.i18n.locale].messages['Library.DateRangePicker.$locale']
  };
}

function mapDispatchToProps(dispatch) {
  return {
    actions: bindActionCreators(Object.assign({}, {
      fetchMessages: fetchMessages, changeIndex: changeIndex,
      setEditor: setEditor, setEditorValue: setEditorValue,
      setTimezone: setTimezone, showReceivers: showReceivers,
      setSelectedMessage: setSelectedMessage, goBack: goBack
    }), dispatch)
  };
}

MessageAnalytics.icon = 'commenting';
MessageAnalytics.title = 'Section.Support.Messages.Title';

module.exports = connect(mapStateToProps, mapDispatchToProps)(MessageAnalytics);

},{"../../../actions/MessageAnalyticsActions":442,"../../GroupSearchTextBox":492,"../../UserTable":507,"../../chart/dimension/FilterTag":511,"livereactload/babel-transform":28,"react":"react","react-bootstrap":"react-bootstrap","react-bootstrap-daterangepicker":"react-bootstrap-daterangepicker","react-redux":"react-redux","react-router":"react-router","redux":"redux"}],556:[function(require,module,exports){
'use strict';

module.exports = {
  Overview: require('./overview'),
  PilotReports: require('./pilot-reports')
};

},{"./overview":557,"./pilot-reports":558}],557:[function(require,module,exports){
'use strict';

var _react2 = require('react');

var _react3 = _interopRequireDefault(_react2);

var _babelTransform = require('livereactload/babel-transform');

var _babelTransform2 = _interopRequireDefault(_babelTransform);

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _components = {
  _component: {}
};

var _livereactloadBabelTransform2 = (0, _babelTransform2.default)({
  filename: '/home/daiad/Desktop/Development/home-web/utility/src/main/frontend/components/section/trials/overview.js',
  components: _components,
  locals: [],
  imports: [_react3.default]
});

function _wrapComponent(id) {
  return function (Component) {
    return _livereactloadBabelTransform2(Component, id);
  };
}

var React = require('react');

var _require = require('redux'),
    bindActionCreators = _require.bindActionCreators;

var _require2 = require('react-redux'),
    connect = _require2.connect;

var Bootstrap = require('react-bootstrap');

var Table = require('../../Table');
var Chart = require('../../Chart');
var DropDown = require('../../DropDown');
var MessageAlert = require('../../AlertDismissable');

var errorsCodes = require('../../../constants/Errors');
var successCodes = require('../../../constants/Successes');

var ChangePasswordModal = require('../../ChangePasswordModal');

var _require3 = require('../../../actions/AdminActions'),
    getActivity = _require3.getActivity,
    setFilter = _require3.setFilter,
    getSessions = _require3.getSessions,
    getMeters = _require3.getMeters,
    resetUserData = _require3.resetUserData,
    exportUserData = _require3.exportUserData,
    showAddUserForm = _require3.showAddUserForm,
    hideAddUserForm = _require3.hideAddUserForm,
    addUserSelectUtility = _require3.addUserSelectUtility,
    addUserSelectGenderMale = _require3.addUserSelectGenderMale,
    addUserSelectGenderFemale = _require3.addUserSelectGenderFemale,
    addUserFillForm = _require3.addUserFillForm,
    addUserValidationsErrorsOccurred = _require3.addUserValidationsErrorsOccurred,
    addUserShowMessageAlert = _require3.addUserShowMessageAlert,
    addUserHideErrorAlert = _require3.addUserHideErrorAlert,
    addUser = _require3.addUser,
    addUserGetUtilities = _require3.addUserGetUtilities,
    changePassword = _require3.changePassword,
    showChangePasswordModal = _require3.showChangePasswordModal,
    hideChangePasswordModal = _require3.hideChangePasswordModal,
    updateChangePasswordForm = _require3.updateChangePasswordForm,
    setErrorChangePasswordForm = _require3.setErrorChangePasswordForm;

var Overview = _wrapComponent('_component')(React.createClass({
  displayName: 'Overview',

  contextTypes: {
    intl: React.PropTypes.object
  },

  componentWillMount: function componentWillMount() {
    if (this.props.admin.activity === null) {
      this.props.actions.getActivity();
    }
    this.props.actions.addUserGetUtilities();
  },

  setFilter: function setFilter(e) {
    this.props.actions.setFilter(this.refs.filter.getValue());
  },

  clearFilter: function clearFilter(e) {
    this.props.actions.setFilter('');
  },

  resetUserData: function resetUserData(e) {
    this.props.actions.resetUserData();
  },

  refreshParticipants: function refreshParticipants(e) {
    this.props.actions.getActivity();
  },

  onPageIndexChange: function onPageIndexChange(index) {},

  validateNewUserForm: function validateNewUserForm(firstName, lastName, email, gender, address, postalCode) {
    var errors = [];

    if (!firstName) {
      errors.push({ code: errorsCodes['ValidationError.User.NO_FIRST_NAME'] });
    } else if (firstName.length > 40) {
      errors.push({ code: errorsCodes['ValidationError.User.TOO_LONG_FIRST_NAME'] });
    }

    if (!lastName) {
      errors.push({ code: errorsCodes['ValidationError.User.NO_LAST_NAME'] });
    } else if (lastName.length > 70) {
      errors.push({ code: errorsCodes['ValidationError.User.TOO_LONG_LAST_NAME'] });
    }

    if (!email) {
      errors.push({ code: errorsCodes['ValidationError.User.NO_EMAIL'] });
    } else if (email.length > 100) {
      errors.push({ code: errorsCodes['ValidationError.User.TOO_LONG_EMAIL'] });
    } else {
      var re = /^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;
      if (!re.test(email)) {
        errors.push({ code: errorsCodes['ValidationError.User.INVALID_EMAIL'] });
      }
    }

    if (!gender) {
      errors.push({ code: errorsCodes['ValidationError.User.NO_GENDER'] });
    }

    if (address && address.length > 90) {
      errors.push({ code: errorsCodes['ValidationError.User.TOO_LONG_ADDRESS'] });
    }

    if (this.props.admin.addUser.selectedUtility === null) {
      errors.push({ code: errorsCodes['ValidationError.User.NO_UTILITY'] });
    }

    if (postalCode && postalCode.length > 10) {
      errors.push({ code: errorsCodes['ValidationError.User.TOO_LONG_POSTAL_CODE'] });
    }

    return errors;
  },

  processAddNewUserForm: function processAddNewUserForm() {
    var gender = null;
    if (this.refs.genderMale.getChecked() === true) {
      gender = 'MALE';
    } else if (this.refs.genderFemale.getChecked() === true) {
      gender = 'FEMALE';
    }
    var inputFieldsFormValues = {
      firstName: this.refs.firstName.getValue(),
      lastName: this.refs.lastName.getValue(),
      email: this.refs.email.getValue(),
      gender: gender,
      address: this.refs.address.getValue(),
      postalCode: this.refs.postalCode.getValue()
    };

    var errors = this.validateNewUserForm(this.refs.firstName.getValue(), this.refs.lastName.getValue(), this.refs.email.getValue(), gender, this.refs.address.getValue(), this.refs.postalCode.getValue());

    if (errors.length === 0) {
      this.props.actions.addUserFillForm(inputFieldsFormValues);
      var userInfo = {
        firstName: this.refs.firstName.getValue(),
        lastName: this.refs.lastName.getValue(),
        email: this.refs.email.getValue(),
        gender: gender,
        address: this.refs.address.getValue() === '' ? null : this.refs.address.getValue(),
        utilityId: this.props.admin.addUser.selectedUtility.value,
        postalCode: this.refs.postalCode.getValue() === '' ? null : this.refs.postalCode.getValue()
      };

      this.props.actions.addUser(userInfo);
    } else {
      this.props.actions.addUserValidationsErrorsOccurred(errors);
    }
  },

  render: function render() {
    var self = this;
    var _t = this.context.intl.formatMessage;

    var groupTitle = React.createElement(
      'span',
      null,
      React.createElement('i', { className: 'fa fa-group fa-fw' }),
      React.createElement(
        'span',
        { style: { paddingLeft: 4 } },
        'Participants'
      ),
      React.createElement(
        'span',
        { style: { float: 'right', marginTop: -3, marginLeft: 5 } },
        React.createElement(
          Bootstrap.Button,
          { bsStyle: 'default', className: 'btn-circle', onClick: this.refreshParticipants },
          React.createElement('i', { className: 'fa fa-refresh fa-fw' })
        )
      )
    );

    var closeSessionChartButton = null;
    if (this.props.admin.user.name) {
      closeSessionChartButton = React.createElement(
        'span',
        { style: { float: 'right', marginTop: -3, marginLeft: 5 } },
        React.createElement(
          Bootstrap.Button,
          { bsStyle: 'default', className: 'btn-circle', onClick: this.resetUserData },
          React.createElement('i', { className: 'fa fa-rotate-left fa-fw' })
        )
      );
    }

    var titleText = 'Activity';
    if (this.props.admin.user.meters) {
      titleText = this.props.admin.user.name + ' - Last 30 days';
    } else if (this.props.admin.user.devices) {
      titleText = this.props.admin.user.name + ' - Last 20 showers (most recent first)';
    }
    var chartTitle = React.createElement(
      'span',
      null,
      React.createElement('i', { className: 'fa fa-bar-chart fa-fw' }),
      React.createElement(
        'span',
        { style: { paddingLeft: 4 } },
        titleText
      ),
      closeSessionChartButton
    );

    var rows = [];
    var total = 0,
        registered = 0,
        login = 0,
        paired = 0,
        uploaded = 0,
        assigned = 0;

    if (this.props.admin.activity !== null) {
      var records = this.props.admin.activity;
      for (var i = 0, count = records.length; i < count; i++) {
        total++;
        if (records[i].accountRegisteredOn) {
          registered++;
        }
        if (records[i].lastLoginSuccess) {
          login++;
        }
        if (records[i].leastAmphiroRegistration) {
          paired++;
        }
        if (records[i].leastMeterRegistration) {
          assigned++;
        }
        if (records[i].lastDataUploadSuccess) {
          uploaded++;
        }
        if (!this.props.admin.filter || records[i].username.indexOf(this.props.admin.filter) !== -1) {
          rows.push({
            id: records[i].id,
            key: records[i].key,
            username: records[i].username || '',
            accountRegisteredOn: records[i].accountRegisteredOn ? new Date(records[i].accountRegisteredOn) : null,
            numberOfAmphiroDevices: records[i].numberOfAmphiroDevices,
            numberOfMeters: records[i].numberOfMeters,
            leastAmphiroRegistration: records[i].leastAmphiroRegistration ? new Date(records[i].leastAmphiroRegistration) : null,
            leastMeterRegistration: records[i].leastMeterRegistration ? new Date(records[i].leastMeterRegistration) : null,
            lastLoginSuccess: records[i].lastLoginSuccess ? new Date(records[i].lastLoginSuccess) : null
          });
        }
      }
    }
    var model = {
      table: null,
      chart: {
        options: null,
        data: null,
        type: 'bar'
      }
    };

    var series = [],
        data = [];
    if (!this.props.admin.isLoading) {
      if (this.props.admin.user.devices) {
        model.chart.type = 'bar';
        model.chart.options = {
          tooltip: {
            show: true
          },
          dataZoom: {
            show: true
          }
        };

        var devices = this.props.admin.user.devices;

        var maxSerieSize = 0,
            d;
        for (d = 0; d < devices.length; d++) {
          if (devices[d].sessions.length > maxSerieSize) {
            maxSerieSize = devices[d].sessions.length;
          }
        }

        for (d = 0; d < devices.length; d++) {
          var device = devices[d];
          data = [];

          var index = 1;
          for (var s = 0; s < maxSerieSize; s++) {
            data.push({
              volume: s < device.sessions.length ? device.sessions[s].volume : 0.0,
              id: index
            });
            index++;
          }

          series.push({
            legend: device.name || device.deviceKey,
            xAxis: 'id',
            yAxis: 'volume',
            data: data,
            yAxisName: 'Volume (lt)'
          });
        }

        model.chart.data = {
          series: series
        };
      } else if (this.props.admin.user.meters) {
        model.chart.type = 'bar';
        model.chart.options = {
          tooltip: {
            show: true
          },
          dataZoom: {
            show: true,
            format: 'day'
          }
        };

        var meters = this.props.admin.user.meters;

        for (var m = 0; m < meters.length; m++) {
          var meter = meters[m];
          data = [];

          for (var v = 0; v < meter.values.length; v++) {
            data.push({
              volume: meter.values[v].difference,
              date: new Date(meter.values[v].timestamp)
            });
          }

          series.push({
            legend: meter.serial || meter.deviceKey,
            xAxis: 'date',
            yAxis: 'volume',
            data: data,
            yAxisName: 'Volume (lt)'
          });
        }

        model.chart.data = {
          series: series
        };
      } else {
        model.chart.type = 'bar';

        var dataPoints = [];

        model.chart.options = {
          tooltip: {
            show: true
          },
          dataZoom: {
            show: false
          },
          itemStyle: {
            normal: {
              label: {
                show: true,
                position: 'top',
                formatter: function formatter(params) {
                  return params.value;
                },
                textStyle: {
                  color: '#565656',
                  fontWeight: 'bold'
                }
              }
            }
          }
        };

        dataPoints.push({
          value: total,
          label: 'Total Participants'
        });
        dataPoints.push({
          value: registered,
          label: 'Registered'
        });
        dataPoints.push({
          value: login,
          label: 'Login'
        });
        dataPoints.push({
          value: paired,
          label: 'Paired'
        });
        dataPoints.push({
          value: assigned,
          label: 'Meters'
        });
        dataPoints.push({
          value: uploaded,
          label: 'Uploaded'
        });

        model.chart.data = {
          series: [{
            legend: 'Trial Activity',
            xAxis: 'label',
            yAxis: 'value',
            data: dataPoints,
            yAxisName: 'Count'
          }]
        };
      }
    }

    model.table = {
      fields: [{
        name: 'id',
        title: 'Section.Trials.Overview.Table1.Id',
        hidden: true
      }, {
        name: 'key',
        title: 'Section.Trials.Overview.Table1.Key',
        hidden: true
      }, {
        name: 'username',
        title: 'Section.Trials.Overview.Table1.UserName',
        link: function link(row) {
          if (row.key) {
            return '/user/{key}';
          }
          return null;
        }
      }, {
        name: 'accountRegisteredOn',
        title: 'Section.Trials.Overview.Table1.RegisteredOn',
        type: 'datetime'
      }, {
        name: 'numberOfAmphiroDevices',
        title: 'Section.Trials.Overview.Table1.NumberOfAmphiro'
      }, {
        name: 'leastAmphiroRegistration',
        title: 'Section.Trials.Overview.Table1.AmphiroRegisteredOn',
        type: 'datetime'
      }, {
        name: 'lastLoginSuccess',
        title: 'Section.Trials.Overview.Table1.LastLogin',
        type: 'datetime'
      }, {
        name: 'meter',
        type: 'action',
        image: '/assets/images/utility/meter.svg',
        style: {
          width: '30px'
        },
        handler: function handler(field, row) {
          if (row.key && row.numberOfMeters > 0) {
            self.props.actions.getMeters(row.key, row.username);
          }
        },
        visible: function visible(field, row) {
          return row.key && row.numberOfMeters > 0;
        }
      }, {
        name: 'session',
        type: 'action',
        image: '/assets/images/utility/amphiro.svg',
        style: {
          width: '30px'
        },
        handler: function handler(field, row) {
          if (row.key && row.numberOfAmphiroDevices > 0) {
            self.props.actions.getSessions(row.key, row.username);
          }
        },
        visible: function visible(field, row) {
          return row.key && row.numberOfAmphiroDevices > 0;
        }
      }, {
        name: 'export',
        type: 'action',
        icon: 'cloud-download fa-2x',
        style: {
          color: '#2D3580',
          width: '30px'
        },
        handler: function handler(field, row) {
          if (row.key && (row.numberOfAmphiroDevices > 0 || row.numberOfMeters > 0)) {
            self.props.actions.exportUserData(row.key, row.username);
          }
        },
        visible: function visible(field, row) {
          return row.key && (row.numberOfAmphiroDevices > 0 || row.numberOfMeters > 0);
        }
      }, {
        name: 'change-password',
        type: 'action',
        icon: 'pencil fa-2x',
        style: {
          color: '#1B5E20',
          width: '30px'
        },
        handler: function handler(field, row) {
          if (row.key && row.accountRegisteredOn) {
            self.props.actions.showChangePasswordModal(row.key, row.username);
          }
        },
        visible: function visible(field, row) {
          return row.key && row.accountRegisteredOn;
        }
      }],
      rows: rows.filter(function (row) {
        return row.key && row.username;
      }),
      pager: {
        index: 0,
        size: 10,
        onPageIndexChange: this.onPageIndexChange,
        count: rows.length,
        mode: Table.PAGING_CLIENT_SIDE
      }
    };

    var header = null,
        filter = null,
        addUserButton = null,
        table = null,
        chart = null;
    if (this.props.data !== null) {
      addUserButton = React.createElement(
        'div',
        { className: 'col-md-4' },
        React.createElement(
          Bootstrap.ListGroup,
          null,
          React.createElement(
            'div',
            { className: 'clearfix' },
            React.createElement(
              'div',
              { style: { float: 'right' } },
              React.createElement(
                Bootstrap.Button,
                { bsStyle: 'success', onClick: this.props.actions.showAddUserForm },
                React.createElement('i', { className: 'fa fa-plus', style: { paddingRight: 5 } }),
                _t({ id: 'Buttons.AddNewUser' })
              )
            )
          )
        )
      );

      filter = React.createElement(
        'div',
        { className: 'col-md-4' },
        React.createElement(Bootstrap.Input, { type: 'text',
          id: 'filter', name: 'filter', ref: 'filter',
          placeholder: 'Search participants by email ...',
          onChange: this.setFilter,
          value: this.props.admin.filter,
          buttonAfter: React.createElement(
            Bootstrap.Button,
            { onClick: this.clearFilter, style: { paddingTop: 7, paddingBottom: 7 } },
            React.createElement('i', { className: 'fa fa-trash fa-fw' })
          )
        })
      );

      table = React.createElement(
        'div',
        { className: 'row' },
        React.createElement(
          'div',
          { className: 'col-md-12' },
          React.createElement(
            Bootstrap.Panel,
            { header: groupTitle },
            React.createElement(
              Bootstrap.ListGroup,
              { fill: true },
              React.createElement(
                Bootstrap.ListGroupItem,
                null,
                React.createElement(Table, {
                  fields: model.table.fields,
                  data: model.table.rows,
                  pager: model.table.pager
                })
              )
            )
          )
        )
      );

      chart = React.createElement(
        'div',
        { className: 'row' },
        React.createElement(
          'div',
          { className: 'col-md-12' },
          React.createElement(
            Bootstrap.Panel,
            { header: chartTitle },
            React.createElement(
              Bootstrap.ListGroup,
              { fill: true },
              React.createElement(
                Bootstrap.ListGroupItem,
                null,
                React.createElement(Chart, { style: { width: '100%', height: 400 },
                  elementClassName: 'mixin',
                  prefix: 'chart',
                  type: model.chart.type,
                  options: model.chart.options,
                  data: model.chart.data })
              )
            )
          )
        )
      );
    }
    self = this;

    var newUserPanelTitle = React.createElement(
      'span',
      null,
      React.createElement('i', { className: 'fa fa-user-plus fa-fw' }),
      React.createElement(
        'span',
        { style: { paddingLeft: 4 } },
        _t({ id: 'AddUserForm.PanelTitle' })
      ),
      React.createElement('span', { style: { float: 'right', marginTop: -3, marginLeft: 5 } })
    );

    var utilityOptions = [];
    if (this.props.admin.addUser.utilities) {
      this.props.admin.addUser.utilities.forEach(function (utility, i) {
        utilityOptions.push({ label: utility.name, value: utility.id, key: utility.id });
      });
    }

    var hideAddNewUserForm = function hideAddNewUserForm() {
      self.errors = [];
      self.props.actions.hideAddUserForm();
    };

    var addNewUserForm = React.createElement(
      'div',
      null,
      React.createElement(
        Bootstrap.Panel,
        { header: newUserPanelTitle },
        React.createElement(
          'div',
          { className: 'row' },
          React.createElement(
            'div',
            { className: 'col-md-6' },
            React.createElement(
              Bootstrap.ListGroup,
              null,
              React.createElement(
                'div',
                { className: 'clearfix' },
                React.createElement(
                  Bootstrap.Row,
                  null,
                  React.createElement(
                    Bootstrap.Col,
                    { xs: 6 },
                    React.createElement(Bootstrap.Input, {
                      type: 'text',
                      value: this.props.admin.addUser.selectedFirstName,
                      label: _t({ id: 'AddUserForm.FirstName.label' }) + ' (*)',
                      ref: 'firstName',
                      placeholder: _t({ id: 'AddUserForm.FirstName.placeholder' }) })
                  ),
                  React.createElement(
                    Bootstrap.Col,
                    { xs: 6 },
                    React.createElement(Bootstrap.Input, {
                      type: 'text',
                      value: this.props.admin.addUser.selectedLastName,
                      label: _t({ id: 'AddUserForm.LastName.label' }) + ' (*)',
                      ref: 'lastName',
                      placeholder: _t({ id: 'AddUserForm.LastName.placeholder' }) })
                  )
                ),
                React.createElement(
                  Bootstrap.Row,
                  null,
                  React.createElement(
                    Bootstrap.Col,
                    { xs: 6 },
                    React.createElement(Bootstrap.Input, {
                      type: 'text',
                      value: this.props.admin.addUser.selectedEmail,
                      label: _t({ id: 'AddUserForm.E-mail.label' }) + ' (*)',
                      ref: 'email',
                      placeholder: _t({ id: 'AddUserForm.E-mail.placeholder' }) })
                  ),
                  React.createElement(
                    Bootstrap.Col,
                    { xs: 6 },
                    React.createElement(
                      Bootstrap.Input,
                      { label: _t({ id: 'AddUserForm.Gender.label' }) + ' (*)', wrapperClassName: 'white-wrapper' },
                      React.createElement(
                        Bootstrap.Row,
                        null,
                        React.createElement(
                          Bootstrap.Col,
                          { xs: 6 },
                          React.createElement(Bootstrap.Input, {
                            type: 'radio',
                            checked: this.props.admin.addUser.selectedGender === 'MALE' ? true : false,
                            onClick: this.props.actions.addUserSelectGenderMale,
                            ref: 'genderMale',
                            label: _t({ id: 'AddUserForm.Gender.values.Male' }),
                            name: 'gender' })
                        ),
                        React.createElement(
                          Bootstrap.Col,
                          { xs: 6 },
                          React.createElement(Bootstrap.Input, {
                            type: 'radio',
                            onClick: this.props.actions.addUserSelectGenderFemale,
                            checked: this.props.admin.addUser.selectedGender === 'FEMALE' ? true : false,
                            ref: 'genderFemale',
                            label: _t({ id: 'AddUserForm.Gender.values.Female' }),
                            name: 'gender' })
                        )
                      )
                    )
                  )
                ),
                React.createElement(
                  Bootstrap.Row,
                  null,
                  React.createElement(
                    Bootstrap.Col,
                    { xs: 6 },
                    React.createElement(Bootstrap.Input, {
                      type: 'text',
                      value: this.props.admin.addUser.selectedAddress,
                      label: _t({ id: 'AddUserForm.Address.label' }),
                      ref: 'address',
                      placeholder: _t({ id: 'AddUserForm.Address.placeholder' }) })
                  ),
                  React.createElement(
                    Bootstrap.Col,
                    { xs: 6 },
                    React.createElement(
                      Bootstrap.Input,
                      { label: _t({ id: 'AddUserForm.Utility.label' }) + ' (*)', wrapperClassName: 'white-wrapper' },
                      React.createElement(DropDown, {
                        title: this.props.admin.addUser.selectedUtility ? this.props.admin.addUser.selectedUtility.label : _t({ id: 'AddUserForm.Utility.label' }),
                        options: utilityOptions,
                        onSelect: this.props.actions.addUserSelectUtility,
                        disabled: false
                      })
                    )
                  )
                ),
                React.createElement(
                  Bootstrap.Row,
                  null,
                  React.createElement(
                    Bootstrap.Col,
                    { xs: 6 },
                    React.createElement(Bootstrap.Input, {
                      type: 'text',
                      value: this.props.admin.addUser.selectedPostalCode,
                      label: _t({ id: 'AddUserForm.PostalCode.label' }),
                      ref: 'postalCode',
                      placeholder: _t({ id: 'AddUserForm.PostalCode.placeholder' }) })
                  )
                )
              ),
              React.createElement(MessageAlert, {
                show: this.props.admin.addUser.showMessageAlert,
                title: !this.props.admin.addUser.response.success ? _t({ id: 'Form.ErrorsDetected' }) : _t({ id: 'Form.Success' }),
                i18nNamespace: this.props.admin.addUser.response.success ? 'Success.' : 'Error.',
                bsStyle: this.props.admin.addUser.response.success ? 'success' : 'danger',
                format: 'list',
                messages: !this.props.admin.addUser.response.success ? this.props.admin.addUser.response.errors : [{ code: successCodes['UserSuccess.USER_ADDED_WHITELIST'] }],
                dismissFunc: this.props.actions.addUserHideErrorAlert
              })
            ),
            React.createElement(
              Bootstrap.Row,
              null,
              React.createElement(
                'div',
                { style: { float: 'right' } },
                React.createElement(
                  Bootstrap.Col,
                  { xs: 6 },
                  React.createElement(
                    Bootstrap.Button,
                    { onClick: hideAddNewUserForm },
                    _t({ id: 'Buttons.Cancel' })
                  )
                ),
                React.createElement(
                  Bootstrap.Col,
                  { xs: 6 },
                  React.createElement(
                    Bootstrap.Button,
                    { bsStyle: 'success', onClick: this.processAddNewUserForm },
                    _t({ id: 'Buttons.AddUser' })
                  )
                )
              )
            ),
            React.createElement('div', null)
          )
        ),
        React.createElement(
          'em',
          null,
          '(*) ',
          _t({ id: 'AddUserForm.MandatoryFields' })
        )
      )
    );

    header = React.createElement(
      'div',
      { className: 'row' },
      filter,
      React.createElement('div', { className: 'col-md-4' }),
      addUserButton
    );
    var reportBody = React.createElement(
      'div',
      null,
      header,
      table,
      chart
    );

    var visiblePart = this.props.admin.addUser.show ? addNewUserForm : reportBody;

    return React.createElement(
      'div',
      { className: 'container-fluid' },
      visiblePart,
      React.createElement(ChangePasswordModal, _extends({}, this.props.admin.changePassword, {
        _t: _t,
        changePassword: this.props.actions.changePassword,
        hideChangePasswordModal: this.props.actions.hideChangePasswordModal,
        updateChangePasswordForm: this.props.actions.updateChangePasswordForm,
        setErrorChangePasswordForm: this.props.actions.setErrorChangePasswordForm
      }))
    );
  }
}));

Overview.icon = 'table';
Overview.title = 'Section.Trials.Overview.Title';

function mapStateToProps(state) {
  return {
    admin: state.admin,
    routing: state.routing
  };
}

function mapDispatchToProps(dispatch) {
  return {
    actions: bindActionCreators(Object.assign({}, { getActivity: getActivity, setFilter: setFilter, getSessions: getSessions, getMeters: getMeters, resetUserData: resetUserData,
      exportUserData: exportUserData, showAddUserForm: showAddUserForm, hideAddUserForm: hideAddUserForm, addUserSelectUtility: addUserSelectUtility, addUserSelectGenderMale: addUserSelectGenderMale, addUserSelectGenderFemale: addUserSelectGenderFemale,
      addUserFillForm: addUserFillForm, addUserValidationsErrorsOccurred: addUserValidationsErrorsOccurred, addUserShowMessageAlert: addUserShowMessageAlert, addUserHideErrorAlert: addUserHideErrorAlert, addUser: addUser, addUserGetUtilities: addUserGetUtilities,
      changePassword: changePassword, showChangePasswordModal: showChangePasswordModal, hideChangePasswordModal: hideChangePasswordModal, updateChangePasswordForm: updateChangePasswordForm, setErrorChangePasswordForm: setErrorChangePasswordForm
    }), dispatch)
  };
}

module.exports = connect(mapStateToProps, mapDispatchToProps)(Overview);

},{"../../../actions/AdminActions":428,"../../../constants/Errors":576,"../../../constants/Successes":588,"../../AlertDismissable":477,"../../ChangePasswordModal":479,"../../Chart":480,"../../DropDown":487,"../../Table":502,"livereactload/babel-transform":28,"react":"react","react-bootstrap":"react-bootstrap","react-redux":"react-redux","redux":"redux"}],558:[function(require,module,exports){
'use strict';

var _react2 = require('react');

var _react3 = _interopRequireDefault(_react2);

var _babelTransform = require('livereactload/babel-transform');

var _babelTransform2 = _interopRequireDefault(_babelTransform);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _components = {
  'Trials.PilotReports': {
    displayName: 'Trials.PilotReports'
  }
};

var _livereactloadBabelTransform2 = (0, _babelTransform2.default)({
  filename: '/home/daiad/Desktop/Development/home-web/utility/src/main/frontend/components/section/trials/pilot-reports.js',
  components: _components,
  locals: [],
  imports: [_react3.default]
});

function _wrapComponent(id) {
  return function (Component) {
    return _livereactloadBabelTransform2(Component, id);
  };
}

var React = require('react');

var _require = require('react-redux'),
    connect = _require.connect;

var PropTypes = React.PropTypes;

var _require2 = require('../../../prop-types'),
    configPropType = _require2.configPropType;

var _require3 = require('../../reports'),
    PilotReports = _require3.PilotReports;

var Page = _wrapComponent('Trials.PilotReports')(React.createClass({
  displayName: 'Trials.PilotReports',

  propTypes: {
    routes: PropTypes.array, // supplied by react-router
    config: configPropType
  },

  contextTypes: {
    intl: React.PropTypes.object
  },

  render: function render() {
    return React.createElement(
      'div',
      { className: 'container-fluid' },
      React.createElement(
        'div',
        { className: 'row' },
        React.createElement(
          'div',
          { className: 'col-md-12' },
          React.createElement(PilotReports, { config: this.props.config })
        )
      )
    );
  }

}));

Page.icon = 'pie-chart';
Page.title = 'Section.Trials.PilotReports';

function mapStateToProps(state, ownProps) {
  return {
    config: state.config
  };
}

function mapDispatchToProps(dispatch, ownProps) {
  return {};
}

module.exports = connect(mapStateToProps, mapDispatchToProps)(Page);

},{"../../../prop-types":604,"../../reports":525,"livereactload/babel-transform":28,"react":"react","react-redux":"react-redux"}],559:[function(require,module,exports){
'use strict';

var _react2 = require('react');

var _react3 = _interopRequireDefault(_react2);

var _babelTransform = require('livereactload/babel-transform');

var _babelTransform2 = _interopRequireDefault(_babelTransform);

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _components = {
  _component: {},
  _component2: {}
};

var _livereactloadBabelTransform2 = (0, _babelTransform2.default)({
  filename: '/home/daiad/Desktop/Development/home-web/utility/src/main/frontend/components/toolbars.js',
  components: _components,
  locals: [],
  imports: [_react3.default]
});

function _wrapComponent(id) {
  return function (Component) {
    return _livereactloadBabelTransform2(Component, id);
  };
}

var React = require('react');
var Bootstrap = require('react-bootstrap');

var Button = Bootstrap.Button,
    ButtonGroup = Bootstrap.ButtonGroup,
    ButtonToolbar = Bootstrap.ButtonToolbar,
    Tooltip = Bootstrap.Tooltip,
    OverlayTrigger = Bootstrap.OverlayTrigger;

var PropTypes = React.PropTypes;

var buttonPropType = PropTypes.shape({
  key: PropTypes.string,
  text: PropTypes.string,
  tooltip: tooltipPropType,
  iconName: PropTypes.string,
  buttonProps: PropTypes.object // props forwarded to Bootstrap.Button
});

var tooltipPropType = PropTypes.shape({
  id: PropTypes.string,
  message: PropTypes.oneOfType([PropTypes.string, PropTypes.element]),
  placement: PropTypes.oneOf(['top', 'bottom', 'left', 'right'])
});

var randomString = function randomString() {
  var dd = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 9;
  return parseInt(Math.random() * Math.pow(10, dd)).toString(36);
};

var _ButtonGroup = _wrapComponent('_component')(React.createClass({
  displayName: '_ButtonGroup',


  propTypes: {
    id: PropTypes.string,
    className: PropTypes.string,
    component: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),
    buttons: PropTypes.arrayOf(buttonPropType),
    onSelect: PropTypes.func.isRequired
  },

  getDefaultProps: function getDefaultProps() {
    return {
      component: ButtonGroup
    };
  },

  getInitialState: function getInitialState() {
    return {
      id: this.props.id || 'button-group-' + randomString()
    };
  },

  render: function render() {
    var _this = this;

    var Wrapper = this.props.component;
    var wrapperProps = { id: this.state.id };
    if (this.props.className) wrapperProps.className = this.props.className;

    var buttons = this.props.buttons.map(function (spec) {
      var icon = !spec.iconName ? null : React.createElement('i', { className: "fa fa-fw" + ' ' + ('fa-' + spec.iconName) });

      var button = React.createElement(
        Button,
        _extends({ key: spec.key }, spec.buttonProps, { onClick: function onClick() {
            return _this.props.onSelect(spec.key);
          } }),
        icon,
        !spec.text ? null : (icon ? ' ' : '') + spec.text
      );

      if (spec.tooltip) {
        var tooltip = React.createElement(
          Tooltip,
          { id: ['tooltip', _this.state.id, spec.key].join('--') },
          spec.tooltip.message
        );
        var triggerProps = {
          key: spec.key,
          placement: spec.tooltip.placement || 'bottom',
          overlay: tooltip
        };
        return React.createElement(
          OverlayTrigger,
          triggerProps,
          button
        );
      } else {
        return button;
      }
    });

    return React.createElement(Wrapper, wrapperProps, buttons);
  }
}));

_ButtonGroup.displayName = 'toolbars.ButtonGroup';

var _ButtonToolbar = _wrapComponent('_component2')(React.createClass({
  displayName: '_ButtonToolbar',


  statics: {
    defaults: {
      groupComponent: ButtonGroup
    }
  },

  propTypes: {
    id: PropTypes.string,
    className: PropTypes.string,
    component: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),
    groups: PropTypes.arrayOf(PropTypes.shape({
      component: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),
      key: PropTypes.string,
      buttons: PropTypes.arrayOf(buttonPropType)
    })),
    onSelect: PropTypes.func.isRequired
  },

  getDefaultProps: function getDefaultProps() {
    return {
      component: ButtonToolbar
    };
  },

  getInitialState: function getInitialState() {
    return {
      id: this.props.id || 'button-toolbar-' + randomString()
    };
  },

  render: function render() {
    var _this2 = this;

    var defaults = this.constructor.defaults;


    var Wrapper = this.props.component;
    var wrapperProps = { id: this.state.id };
    if (this.props.className) wrapperProps.className = this.props.className;

    var buttonGroups = this.props.groups.filter(function (spec) {
      return spec.buttons.length > 0;
    }).map(function (spec) {
      return React.createElement(_ButtonGroup, { key: spec.key,
        id: _this2.state.id + '-group',
        component: spec.component || defaults.groupComponent,
        buttons: spec.buttons,
        onSelect: function onSelect(key) {
          return _this2.props.onSelect(spec.key, key);
        }
      });
    });

    return React.createElement(Wrapper, wrapperProps, buttonGroups);
  }

}));

_ButtonToolbar.displayName = 'toolbars.ButtonToolbar';

module.exports = {
  ButtonGroup: _ButtonGroup,
  ButtonToolbar: _ButtonToolbar
};

},{"livereactload/babel-transform":28,"react":"react","react-bootstrap":"react-bootstrap"}],560:[function(require,module,exports){
'use strict';

var React = require('react');
var bs = require('react-bootstrap');

var _require = require('react-intl'),
    FormattedMessage = _require.FormattedMessage;

var createWizard = require('react-wiz');
var util = require('../../helpers/wizard');
var DisplayParams = require('../DisplayParams');

function WizardTemplate(props) {
  var id = props.id,
      children = props.children,
      hasPrevious = props.hasPrevious,
      hasNext = props.hasNext,
      onNextClicked = props.onNextClicked,
      onPreviousClicked = props.onPreviousClicked,
      reset = props.reset,
      errors = props.errors,
      values = props.values,
      onComplete = props.onComplete,
      intl = props.intl;

  var params = util.getFriendlyParams(values, intl);
  return React.createElement(
    'div',
    { className: 'wizard-item', style: { margin: '0 25px' } },
    React.createElement(
      bs.Row,
      null,
      React.createElement(
        'h2',
        { style: { marginTop: 0, color: '#666' } },
        React.createElement(FormattedMessage, { id: 'Wizard.items.' + id + '.title' })
      ),
      React.createElement(
        'h5',
        { style: { color: '#666' } },
        React.createElement(FormattedMessage, { id: 'Wizard.items.' + id + '.description' })
      ),
      React.createElement('br', null)
    ),
    React.createElement(
      bs.Row,
      { style: { margin: 0 } },
      React.createElement(
        'div',
        { className: 'wizard-item-select' },
        children
      )
    ),
    React.createElement(
      bs.Row,
      { style: { marginTop: 10, fontSize: '1.3em', marginLeft: 20 } },
      errors ? React.createElement(
        'span',
        { style: { color: '#CD4D3E' } },
        React.createElement('i', { className: 'fa fa-warning', style: { marginRight: 5 } }),
        React.createElement(FormattedMessage, { id: 'Wizard.validation.' + errors })
      ) : React.createElement(
        'span',
        null,
        '\xA0'
      )
    ),
    React.createElement(
      bs.Row,
      null,
      React.createElement(
        'div',
        { className: 'wizard-controls' },
        React.createElement(
          bs.ButtonGroup,
          { style: { width: '100%', marginTop: 30 } },
          React.createElement(
            bs.Button,
            {
              style: { float: 'left' },
              disabled: !hasPrevious,
              onClick: onPreviousClicked
            },
            'Previous'
          ),
          React.createElement(
            bs.Button,
            {
              bsStyle: 'warning',
              style: { float: 'left', marginLeft: 10 },
              onClick: reset
            },
            React.createElement('i', { className: 'fa fa-undo' }),
            '  Reset'
          ),
          hasNext ? React.createElement(
            bs.Button,
            {
              style: { float: 'right' },
              onClick: onNextClicked
            },
            'Next'
          ) : React.createElement(
            bs.Button,
            {
              bsStyle: 'primary',
              style: { float: 'right' },
              onClick: onComplete
            },
            React.createElement('i', { className: 'fa fa-calculator' }),
            ' Calculate'
          )
        )
      )
    ),
    React.createElement('hr', null),
    React.createElement(
      bs.Row,
      { style: { margin: '20px 0', fontSize: '1.1em' } },
      React.createElement(DisplayParams, {
        params: params,
        limit: 4
      })
    )
  );
}

module.exports = createWizard(WizardTemplate);

},{"../../helpers/wizard":599,"../DisplayParams":486,"react":"react","react-bootstrap":"react-bootstrap","react-intl":"react-intl","react-wiz":304}],561:[function(require,module,exports){
'use strict';

var React = require('react');
var bs = require('react-bootstrap');

var _require = require('react-intl'),
    FormattedMessage = _require.FormattedMessage;

function SelectBudgetType(props) {
  var value = props.value,
      setValue = props.setValue,
      intl = props.intl;

  var budgetTypes = [{ selected: 'scenario', type: 'SCENARIO', label: intl.formatMessage({ id: 'Wizard.items.budgetType.options.scenario.value' }) }, { selected: 'estimate', type: 'GOAL', label: intl.formatMessage({ id: 'Wizard.items.budgetType.options.estimate.value' }) }];
  return React.createElement(
    bs.Col,
    { md: 6 },
    budgetTypes.map(function (budget) {
      return React.createElement(
        bs.Button,
        {
          key: budget.selected,
          bsStyle: budget.selected === value.selected ? 'primary' : 'default',
          bsSize: 'large',
          style: { marginBottom: 10 },
          onClick: function onClick() {
            return setValue(budget);
          },
          block: true
        },
        React.createElement(FormattedMessage, { id: 'Wizard.items.budgetType.options.' + budget.selected + '.label' })
      );
    })
  );
}

module.exports = SelectBudgetType;

},{"react":"react","react-bootstrap":"react-bootstrap","react-intl":"react-intl"}],562:[function(require,module,exports){
'use strict';

var React = require('react');
var bs = require('react-bootstrap');

var _require = require('react-intl'),
    FormattedMessage = _require.FormattedMessage;

function DistributionItem(props) {
  var value = props.value,
      setValue = props.setValue,
      intl = props.intl;

  var distributionItems = [{ selected: 'equal', type: 'EQUAL', label: intl.formatMessage({ id: 'Wizard.items.distribution.options.equal.value' }) }, { selected: 'fair', type: 'FAIR', label: intl.formatMessage({ id: 'Wizard.items.distribution.options.fair.value' }) }];
  return React.createElement(
    bs.Col,
    { md: 5 },
    React.createElement(
      bs.ButtonGroup,
      { vertical: true, block: true },
      distributionItems.map(function (item) {
        return React.createElement(
          bs.Button,
          {
            key: item.selected,
            bsSize: 'large',
            bsStyle: item.selected === value.selected ? 'primary' : 'default',
            style: { marginBottom: 10 },
            onClick: function onClick() {
              return setValue(item);
            }
          },
          React.createElement(FormattedMessage, { id: 'Wizard.items.distribution.options.' + item.selected + '.label' })
        );
      })
    )
  );
}

module.exports = DistributionItem;

},{"react":"react","react-bootstrap":"react-bootstrap","react-intl":"react-intl"}],563:[function(require,module,exports){
'use strict';

var React = require('react');
var bs = require('react-bootstrap');

function SetGoalItem(props) {
  var value = props.value,
      setValue = props.setValue;

  return React.createElement(
    bs.Col,
    { md: 5 },
    React.createElement(
      'span',
      { style: { float: 'left', fontSize: '3em', height: '100%', marginRight: 10 } },
      '-'
    ),
    React.createElement(bs.Input, {
      type: 'number',
      min: '0',
      max: '100',
      step: '0.01',
      value: value.goal,
      bsSize: 'large',
      style: { float: 'left', width: '60%', height: '100%', fontSize: '2.8em' },
      onChange: function onChange(e) {
        return setValue({ goal: parseFloat(e.target.value), label: '-' + e.target.value + '%' });
      }
    }),
    React.createElement(
      'span',
      { style: { float: 'left', marginLeft: 10, fontSize: '2.2em' } },
      '%'
    )
  );
}

module.exports = SetGoalItem;

},{"react":"react","react-bootstrap":"react-bootstrap"}],564:[function(require,module,exports){
'use strict';

var React = require('react');
var bs = require('react-bootstrap');

function SetNameItem(props) {
  var value = props.value,
      setValue = props.setValue,
      intl = props.intl;

  return React.createElement(
    bs.Col,
    { md: 5 },
    React.createElement(bs.Input, { type: 'text', placeholder: intl.formatMessage({ id: 'Wizard.items.title.help' }), value: value.name, onChange: function onChange(e) {
        return setValue({ name: e.target.value, label: e.target.value });
      } })
  );
}

module.exports = SetNameItem;

},{"react":"react","react-bootstrap":"react-bootstrap"}],565:[function(require,module,exports){
'use strict';

var React = require('react');
var bs = require('react-bootstrap');

var _require = require('react-intl'),
    FormattedMessage = _require.FormattedMessage;

function SetSavingsPercentageItem(props) {
  var value = props.value,
      setValue = props.setValue;

  return React.createElement(
    'div',
    null,
    React.createElement(
      bs.Col,
      { md: 5 },
      React.createElement(bs.Input, {
        type: 'number',
        min: '0',
        max: '100',
        step: '0.01',
        value: value.savings,
        bsSize: 'large',
        style: { float: 'left', width: '60%', height: '100%', fontSize: '2.8em' },
        onChange: function onChange(e) {
          return setValue({ savings: parseFloat(e.target.value), label: '-' + e.target.value + '%' });
        }
      }),
      React.createElement(
        'span',
        { style: { float: 'left', marginLeft: 10, fontSize: '1.8em' } },
        '%'
      )
    ),
    React.createElement(
      bs.Col,
      { md: 6, style: { textAlign: 'left' } },
      React.createElement(
        'h3',
        null,
        React.createElement(FormattedMessage, { id: 'Wizard.items.savings.help' })
      )
    )
  );
}

module.exports = SetSavingsPercentageItem;

},{"react":"react","react-bootstrap":"react-bootstrap","react-intl":"react-intl"}],566:[function(require,module,exports){
'use strict';

var React = require('react');
var bs = require('react-bootstrap');
var Select = require('react-select').default;

function SelectSavingsScenario(props) {
  var value = props.value,
      setValue = props.setValue,
      items = props.items;

  return React.createElement(
    bs.Col,
    { md: 5 },
    React.createElement(Select, {
      bsSize: 'large',
      name: 'scenario-select',
      multi: false,
      options: items,
      value: { label: value.label, value: value.key },
      onChange: function onChange(val) {
        return val != null ? setValue({ key: val.value, label: val.label }) : setValue({});
      }
    })
  );
}

module.exports = SelectSavingsScenario;

},{"react":"react","react-bootstrap":"react-bootstrap","react-select":"react-select"}],567:[function(require,module,exports){
'use strict';

var _react2 = require('react');

var _react3 = _interopRequireDefault(_react2);

var _babelTransform = require('livereactload/babel-transform');

var _babelTransform2 = _interopRequireDefault(_babelTransform);

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _components = {
  _component: {}
};

var _livereactloadBabelTransform2 = (0, _babelTransform2.default)({
  filename: '/home/daiad/Desktop/Development/home-web/utility/src/main/frontend/components/wizard/items/When.js',
  components: _components,
  locals: [],
  imports: [_react3.default]
});

function _wrapComponent(id) {
  return function (Component) {
    return _livereactloadBabelTransform2(Component, id);
  };
}

var React = require('react');
var bs = require('react-bootstrap');
var moment = require('moment');
var DatetimeInput = require('react-datetime');

var _require = require('react-intl'),
    FormattedDate = _require.FormattedDate;

var WhenItem = _wrapComponent('_component')(React.createClass({
  displayName: 'WhenItem',

  getInitialState: function getInitialState() {
    return {
      showModal: false,
      timespan: this.props.initialValue.timespan ? this.props.initialValue.timespan : this.getLastYear()
    };
  },
  getLastYear: function getLastYear() {
    return [moment().subtract(1, 'year').startOf('year'), moment().subtract(1, 'year').endOf('year')];
  },
  getValue: function getValue(selected, timespan, label) {
    if (!Array.isArray(timespan) || timespan.length < 2 || timespan.length > 3) {
      throw 'timespan must be array of two timestamps';
    }
    return { selected: selected, type: 'ABSOLUTE', start: timespan[0].valueOf(), end: timespan[1].valueOf(), label: label };
  },
  render: function render() {
    var _this = this;

    var _props = this.props,
        value = _props.value,
        setValue = _props.setValue,
        intl = _props.intl;
    var timespan = this.state.timespan;


    var _t = function _t(x) {
      return intl.formatMessage({ id: x });
    };

    var lastLabel = _t('Wizard.items.time.options.last.value');
    var chooseLabel = _t('Wizard.common.choose');

    return React.createElement(
      'div',
      null,
      React.createElement(
        bs.Col,
        { md: 4 },
        React.createElement(
          bs.ButtonGroup,
          { vertical: true, block: true },
          React.createElement(
            bs.Button,
            { bsSize: 'large', bsStyle: value.selected === 'lastYear' ? 'primary' : 'default', style: { marginBottom: 10 }, onClick: function onClick() {
                return setValue(_this.getValue('lastYear', _this.getLastYear(), lastLabel));
              } },
            lastLabel
          ),
          React.createElement(
            bs.Button,
            { bsSize: 'large', bsStyle: value.selected === 'custom' ? 'primary' : 'default', style: { marginBottom: 10 }, onClick: function onClick() {
                return _this.setState({ showModal: true });
              } },
            chooseLabel
          )
        )
      ),
      React.createElement(
        bs.Col,
        { md: 7, style: { textAlign: 'left' } },
        value.selected === 'custom' ? React.createElement(
          'div',
          null,
          React.createElement(
            'span',
            { style: { fontSize: 16, fontWeight: 500, color: '#666' } },
            _t('Wizard.items.time.modal'),
            ': '
          ),
          React.createElement(
            'b',
            null,
            React.createElement(FormattedDate, { value: timespan[0], month: 'numeric', year: 'numeric' }),
            ' ',
            React.createElement(
              'span',
              null,
              '\xA0-\xA0'
            ),
            ' ',
            React.createElement(FormattedDate, { value: timespan[1], month: 'numeric', year: 'numeric' })
          )
        ) : React.createElement('span', null)
      ),
      React.createElement(
        bs.Modal,
        {
          show: this.state.showModal,
          animation: false,
          className: 'confirmation-modal',
          backdrop: 'static',
          onHide: function onHide() {
            return _this.setState({ showModal: false });
          }
        },
        React.createElement(
          bs.Modal.Header,
          { closeButton: true },
          React.createElement(
            'h4',
            null,
            _t('Wizard.items.time.modal')
          )
        ),
        React.createElement(
          bs.Modal.Body,
          null,
          function () {
            var timespan = _this.state.timespan;

            var _timespan = _slicedToArray(timespan, 2),
                t0 = _timespan[0],
                t1 = _timespan[1];

            return React.createElement(
              'div',
              { className: 'form-group' },
              React.createElement(
                'div',
                null,
                React.createElement(
                  'label',
                  { style: { width: '100%' } },
                  React.createElement(
                    'span',
                    null,
                    _t('Wizard.items.time.from'),
                    ':'
                  ),
                  React.createElement(DatetimeInput, {
                    value: t0,
                    className: 'date-input',
                    dateFormat: 'MM/YYYY',
                    closeOnSelect: true,
                    isValidDate: function isValidDate(curr) {
                      return curr.valueOf() <= t1;
                    },
                    onChange: function onChange(val) {
                      return _this.setState({ timespan: [val, t1] });
                    }
                  })
                ),
                React.createElement('br', null),
                React.createElement(
                  'label',
                  { style: { width: '100%' } },
                  React.createElement(
                    'span',
                    { style: { marginRight: 20 } },
                    _t('Wizard.items.time.to'),
                    ':'
                  ),
                  React.createElement(DatetimeInput, {
                    value: t1,
                    className: 'date-input',
                    dateFormat: 'MM/YYYY',
                    closeOnSelect: true,
                    isValidDate: function isValidDate(curr) {
                      return curr.valueOf() >= t0 && curr.valueOf() < moment().subtract(1, 'month').valueOf();
                    },
                    onChange: function onChange(val) {
                      return _this.setState({ timespan: [t0, val] });
                    }
                  })
                ),
                React.createElement(
                  'p',
                  { className: 'help text-muted' },
                  _t('Wizard.items.time.help')
                )
              )
            );
          }()
        ),
        React.createElement(
          bs.Modal.Footer,
          null,
          React.createElement(
            bs.Button,
            { onClick: function onClick() {
                setValue(_this.getValue('custom', [moment(_this.state.timespan[0]).startOf('month').valueOf(), moment(_this.state.timespan[1]).endOf('month').valueOf()], '' + moment(_this.state.timespan[0]).format('MM/YYYY') + '-' + ('' + moment(_this.state.timespan[1]).format('MM/YYYY'))));
                _this.setState({ showModal: false });
              }
            },
            'OK'
          ),
          React.createElement(
            bs.Button,
            { onClick: function onClick() {
                return _this.setState({ showModal: false });
              } },
            _t('Buttons.Cancel')
          )
        )
      )
    );
  }
}));

module.exports = WhenItem;

},{"livereactload/babel-transform":28,"moment":"moment","react":"react","react-bootstrap":"react-bootstrap","react-datetime":"react-datetime","react-intl":"react-intl"}],568:[function(require,module,exports){
'use strict';

var _react2 = require('react');

var _react3 = _interopRequireDefault(_react2);

var _babelTransform = require('livereactload/babel-transform');

var _babelTransform2 = _interopRequireDefault(_babelTransform);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

var _components = {
  _component: {}
};

var _livereactloadBabelTransform2 = (0, _babelTransform2.default)({
  filename: '/home/daiad/Desktop/Development/home-web/utility/src/main/frontend/components/wizard/items/Where.js',
  components: _components,
  locals: [],
  imports: [_react3.default]
});

function _wrapComponent(id) {
  return function (Component) {
    return _livereactloadBabelTransform2(Component, id);
  };
}

var React = require('react');
var bs = require('react-bootstrap');

var _require = require('react-leaflet-wrapper'),
    Map = _require.Map,
    TileLayer = _require.TileLayer,
    GeoJSON = _require.GeoJSON,
    InfoControl = _require.InfoControl;

var DisplayParams = require('../../DisplayParams');

var _require2 = require('../../../helpers/wizard'),
    getAllSpatialGroups = _require2.getAllSpatialGroups,
    getSpatialValue = _require2.getSpatialValue;

var WhereItem = _wrapComponent('_component')(React.createClass({
  displayName: 'WhereItem',

  getInitialState: function getInitialState() {
    return {
      showModal: false,
      selectedGroups: this.valueToGroups(this.props.value)
    };
  },
  componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
    //reset selected on wizard reset
    if (nextProps.value && !Array.isArray(nextProps.value) && !nextProps.value.type) {
      this.setState({ selectedGroups: [] });
    }
  },
  valueToGroups: function valueToGroups(value) {
    return Array.isArray(value) ? getAllSpatialGroups(this.props.areas).filter(function (group) {
      return value.find(function (g) {
        return g.area === group.key;
      });
    }) : [];
  },
  render: function render() {
    var _this = this;

    var _props = this.props,
        setValue = _props.setValue,
        areas = _props.areas,
        value = _props.value,
        noAll = _props.noAll,
        intl = _props.intl,
        id = _props.id;


    var _t = function _t(x) {
      return intl.formatMessage({ id: x });
    };
    var allLabel = _t('Buttons.All');
    var noneLabel = _t('Buttons.None');

    var selectedGroups = this.state.selectedGroups;


    if (!areas) return null;
    var allGroups = getAllSpatialGroups(areas);

    var selectedParams = selectedGroups.map(function (group) {
      return {
        key: null,
        value: group.label
      };
    });

    return React.createElement(
      'div',
      null,
      React.createElement(
        bs.Col,
        { md: 4 },
        React.createElement(
          bs.ButtonGroup,
          { vertical: true, block: true },
          !noAll ? React.createElement(
            bs.Button,
            { bsSize: 'large', bsStyle: value.selected === 'all' ? 'primary' : 'default', style: { marginBottom: 10 }, onClick: function onClick() {
                return setValue(getSpatialValue('all', allLabel));
              } },
            allLabel
          ) : React.createElement('div', null),
          React.createElement(
            bs.Button,
            { bsSize: 'large', bsStyle: Array.isArray(value) ? 'primary' : 'default', style: { marginBottom: 10 }, onClick: function onClick() {
                return _this.setState({ showModal: true });
              } },
            _t('Wizard.common.choose')
          )
        )
      ),
      React.createElement(
        bs.Col,
        { md: 7 },
        value.selected !== 'all' ? React.createElement(DisplayParams, {
          params: selectedParams,
          limit: 4
        }) : React.createElement('div', null)
      ),
      React.createElement(
        bs.Modal,
        {
          show: this.state.showModal,
          dialogClassName: 'map-modal',
          backdrop: 'static',
          animation: false,
          onHide: function onHide() {
            return _this.setState({ showModal: false });
          }
        },
        React.createElement(
          bs.Modal.Header,
          { closeButton: true },
          React.createElement(
            'h4',
            null,
            _t('Wizard.items.' + id + '.modal')
          )
        ),
        React.createElement(
          bs.Modal.Body,
          null,
          React.createElement(
            bs.Row,
            null,
            React.createElement(
              bs.Col,
              { md: 8 },
              React.createElement(
                Map,
                {
                  width: '100%',
                  height: '70vh',
                  center: [38.35, -0.48],
                  zoom: 12.55
                },
                React.createElement(TileLayer, null),
                React.createElement(
                  InfoControl,
                  { position: 'topright' },
                  React.createElement(GeoJSON, {
                    data: { type: 'FeatureCollection', features: areas.map(function (g) {
                        return g.feature;
                      }) },
                    infoContent: function infoContent(feature) {
                      return feature ? React.createElement(
                        'div',
                        null,
                        React.createElement(
                          'h5',
                          null,
                          feature.properties.label
                        ),
                        React.createElement(
                          'span',
                          null,
                          feature.properties.value
                        )
                      ) : React.createElement(
                        'div',
                        null,
                        React.createElement(
                          'h5',
                          null,
                          'Hover over an area...'
                        )
                      );
                    },
                    onClick: function onClick(feature) {
                      if (_this.state.selectedGroups.map(function (g) {
                        return g.key;
                      }).includes(feature.properties.value)) {
                        _this.setState({ selectedGroups: _this.state.selectedGroups.filter(function (group) {
                            return group.key !== feature.properties.value;
                          }) });
                      } else {
                        _this.setState({ selectedGroups: [].concat(_toConsumableArray(_this.state.selectedGroups), [allGroups.find(function (group) {
                            return group.key === feature.properties.value;
                          })]) });
                      }
                    },
                    style: function style(feature) {
                      return _this.state.selectedGroups.map(function (g) {
                        return g.key;
                      }).includes(feature.properties.value) ? {
                        fillColor: "#ff0000",
                        color: "#000",
                        weight: 3,
                        opacity: 1,
                        fillOpacity: 0.5
                      } : {
                        fillColor: "#fff",
                        color: "#000",
                        weight: 3,
                        opacity: 1,
                        fillOpacity: 0.5
                      };
                    },
                    highlightStyle: { weight: 4 }
                  })
                )
              )
            ),
            React.createElement(
              bs.Col,
              { md: 4 },
              React.createElement(
                'div',
                { style: { margin: 15, textAlign: 'right' } },
                React.createElement(
                  bs.Button,
                  { bsStyle: 'primary', style: { marginRight: 5 }, onClick: function onClick() {
                      _this.setState({ selectedGroups: allGroups });
                    } },
                  allLabel
                ),
                React.createElement(
                  bs.Button,
                  { bsStyle: 'default', onClick: function onClick() {
                      _this.setState({ selectedGroups: [] });
                    } },
                  noneLabel
                )
              ),
              React.createElement(
                'div',
                { style: { margin: 20 } },
                React.createElement(DisplayParams, {
                  params: selectedParams,
                  limit: 50,
                  show: 50,
                  style: { maxHeight: '60vh', overflow: 'auto' }
                })
              )
            )
          )
        ),
        React.createElement(
          bs.Modal.Footer,
          null,
          React.createElement(
            bs.Button,
            { onClick: function onClick() {
                setValue(selectedGroups.map(function (group) {
                  return group.value;
                }));_this.setState({ showModal: false });
              } },
            'OK'
          ),
          React.createElement(
            bs.Button,
            { onClick: function onClick() {
                return _this.setState({ showModal: false });
              } },
            'Cancel'
          )
        )
      )
    );
  }
}));

module.exports = WhereItem;

},{"../../../helpers/wizard":599,"../../DisplayParams":486,"livereactload/babel-transform":28,"react":"react","react-bootstrap":"react-bootstrap","react-leaflet-wrapper":151}],569:[function(require,module,exports){
'use strict';

var _react2 = require('react');

var _react3 = _interopRequireDefault(_react2);

var _babelTransform = require('livereactload/babel-transform');

var _babelTransform2 = _interopRequireDefault(_babelTransform);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

var _components = {
  _component: {}
};

var _livereactloadBabelTransform2 = (0, _babelTransform2.default)({
  filename: '/home/daiad/Desktop/Development/home-web/utility/src/main/frontend/components/wizard/items/Who.js',
  components: _components,
  locals: [],
  imports: [_react3.default]
});

function _wrapComponent(id) {
  return function (Component) {
    return _livereactloadBabelTransform2(Component, id);
  };
}

var React = require('react');
var bs = require('react-bootstrap');
var CheckboxGroup = require('react-checkbox-group');
var DisplayParams = require('../../DisplayParams');

var _require = require('../../../helpers/wizard'),
    getPopulationValue = _require.getPopulationValue,
    getAllPopulationGroups = _require.getAllPopulationGroups;

var WhoItem = _wrapComponent('_component')(React.createClass({
  displayName: 'WhoItem',

  getInitialState: function getInitialState() {
    return {
      showModal: false,
      selectedCluster: Array.isArray(this.props.clusters) && this.props.clusters[0] ? this.props.clusters[0] : null,
      selectedGroups: this.valueToGroups(this.props.value)
    };
  },
  componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
    if (Array.isArray(nextProps.clusters) && nextProps.clusters[0]) {
      this.setState({ selectedCluster: nextProps.clusters[0] });
    }
    //reset selected on wizard reset
    if (nextProps.value && !Array.isArray(nextProps.value) && !nextProps.value.type) {
      this.setState({ selectedGroups: [] });
    }
  },
  valueToGroups: function valueToGroups(value) {
    return Array.isArray(value) ? getAllPopulationGroups(this.props.clusters, this.props.utility).filter(function (group) {
      return value.find(function (g) {
        return g.group === group.key;
      }) ? true : false;
    }) : [];
  },
  render: function render() {
    var _this = this;

    var _props = this.props,
        clusters = _props.clusters,
        setValue = _props.setValue,
        value = _props.value,
        noAll = _props.noAll,
        intl = _props.intl,
        id = _props.id;
    var _state = this.state,
        selectedCluster = _state.selectedCluster,
        selectedGroups = _state.selectedGroups;

    var _t = function _t(x) {
      return intl.formatMessage({ id: x });
    };

    var allLabel = _t('Buttons.All');
    var noneLabel = _t('Buttons.None');

    if (!clusters) return null;

    var allGroups = getAllPopulationGroups(this.props.clusters, this.props.utility);

    var displayParams = clusters.map(function (cluster) {
      var selectedClusterGroups = selectedGroups.filter(function (group) {
        return group.clusterKey === cluster.key;
      });
      return {
        key: selectedClusterGroups.length > 0 ? cluster.name : null,
        value: selectedClusterGroups.map(function (g) {
          return g.name;
        })
      };
    });

    return React.createElement(
      'div',
      null,
      React.createElement(
        bs.Col,
        { md: 4 },
        React.createElement(
          bs.ButtonGroup,
          { vertical: true, block: true },
          !noAll ? React.createElement(
            bs.Button,
            { bsSize: 'large', bsStyle: value.selected === 'all' ? 'primary' : 'default', style: { marginBottom: 10 }, onClick: function onClick() {
                setValue(getPopulationValue('all', allLabel, _this.props.utility));
              } },
            allLabel
          ) : React.createElement('div', null),
          React.createElement(
            bs.Button,
            { bsSize: 'large', bsStyle: Array.isArray(value) ? 'primary' : 'default', style: { marginBottom: 10 }, onClick: function onClick() {
                return _this.setState({ showModal: true });
              } },
            _t('Wizard.common.choose')
          )
        )
      ),
      React.createElement(
        bs.Col,
        { md: 7 },
        value.selected !== 'all' ? React.createElement(DisplayParams, {
          params: displayParams,
          limit: 40,
          style: { width: '80%' }
        }) : React.createElement('div', null)
      ),
      React.createElement(
        bs.Modal,
        {
          show: this.state.showModal,
          animation: false,
          bsSize: 'large',
          backdrop: 'static',
          onHide: function onHide() {
            return _this.setState({ showModal: false });
          }
        },
        React.createElement(
          bs.Modal.Header,
          { closeButton: true },
          React.createElement(
            'h4',
            null,
            _t('Wizard.items.' + id + '.modal')
          )
        ),
        React.createElement(
          bs.Modal.Body,
          null,
          React.createElement(
            bs.Row,
            null,
            React.createElement(
              bs.Tabs,
              { position: 'top', tabWidth: 20, activeKey: selectedCluster.key, onSelect: function onSelect(val) {
                  return _this.setState({ selectedCluster: clusters.find(function (cluster) {
                      return cluster.key === val;
                    }) });
                } },
              clusters.map(function (cluster, idx) {
                return React.createElement(bs.Tab, { key: idx, eventKey: cluster.key, title: cluster.name });
              })
            )
          ),
          React.createElement(
            bs.Row,
            { style: { marginTop: 15 } },
            React.createElement(
              bs.Col,
              { md: 4 },
              React.createElement(
                CheckboxGroup,
                { name: 'select-groups', value: selectedGroups.map(function (group) {
                    return group.key;
                  }), onChange: function onChange(newValues) {
                    return _this.setState({ selectedGroups: newValues.map(function (key) {
                        return allGroups.find(function (group) {
                          return group.key === key;
                        });
                      }) });
                  } },
                function (Checkbox) {
                  return React.createElement(
                    'ul',
                    { style: { listStyle: 'none' } },
                    selectedCluster.groups.map(function (group, idx) {
                      return React.createElement(
                        'li',
                        { key: idx },
                        React.createElement(
                          'label',
                          null,
                          React.createElement(Checkbox, { value: group.key }),
                          ' ',
                          group.name,
                          ' '
                        )
                      );
                    })
                  );
                }
              )
            ),
            React.createElement(
              bs.Col,
              { md: 6 },
              React.createElement(DisplayParams, {
                params: displayParams,
                limit: 40,
                style: { width: '80%' }
              })
            ),
            React.createElement(
              bs.Col,
              { xs: 3, md: 2 },
              React.createElement(
                bs.Button,
                { bsStyle: 'primary', style: { marginRight: 5 }, onClick: function onClick() {
                    _this.setState({ selectedGroups: [].concat(_toConsumableArray(selectedGroups.filter(function (group) {
                        return group.clusterKey !== selectedCluster.key;
                      })), _toConsumableArray(allGroups.filter(function (group) {
                        return group.clusterKey === selectedCluster.key;
                      }))) });
                  } },
                allLabel
              ),
              React.createElement(
                bs.Button,
                { bsStyle: 'default', onClick: function onClick() {
                    _this.setState({ selectedGroups: selectedGroups.filter(function (group) {
                        return group.clusterKey !== selectedCluster.key;
                      }) });
                  } },
                noneLabel
              )
            )
          )
        ),
        React.createElement(
          bs.Modal.Footer,
          null,
          React.createElement(
            bs.Button,
            { onClick: function onClick() {
                setValue(selectedGroups.map(function (group) {
                  return group.value;
                }));_this.setState({ showModal: false });
              } },
            'OK'
          ),
          React.createElement(
            bs.Button,
            { onClick: function onClick() {
                return _this.setState({ showModal: false });
              } },
            _t('Buttons.Cancel')
          )
        )
      )
    );
  }
}));

module.exports = WhoItem;

},{"../../../helpers/wizard":599,"../../DisplayParams":486,"livereactload/babel-transform":28,"react":"react","react-bootstrap":"react-bootstrap","react-checkbox-group":103}],570:[function(require,module,exports){
'use strict';

var SelectWho = require('./Who');
var SelectWhere = require('./Where');
var SelectWhen = require('./When');
var SetName = require('./Name');
var SelectBudgetType = require('./BudgetType');
var SelectDistribution = require('./Distribution');
var SetGoal = require('./Goal');
var SetSavingsPercentage = require('./SavingsPercentage');
var SelectSavingsScenario = require('./SavingsScenario');

module.exports = {
  SelectWho: SelectWho,
  SelectWhere: SelectWhere,
  SelectWhen: SelectWhen,
  SetName: SetName,
  SelectBudgetType: SelectBudgetType,
  SelectDistribution: SelectDistribution,
  SetGoal: SetGoal,
  SetSavingsPercentage: SetSavingsPercentage,
  SelectSavingsScenario: SelectSavingsScenario
};

},{"./BudgetType":561,"./Distribution":562,"./Goal":563,"./Name":564,"./SavingsPercentage":565,"./SavingsScenario":566,"./When":567,"./Where":568,"./Who":569}],571:[function(require,module,exports){
'use strict';

var mirrorToPath = require('../helpers/path-mirror.js');

var types = mirrorToPath({

  LOCALE_CHANGE: null,
  LOCALE_REQUEST_MESSAGES: null,
  LOCALE_RECEIVED_MESSAGES: null,

  USER_REQUESTED_LOGIN: null,
  USER_RECEIVED_LOGIN: null,
  USER_REQUESTED_LOGOUT: null,
  USER_RECEIVED_LOGOUT: null,
  USER_PROFILE_REFRESH: null,
  USER_PROFILE_UPDATE: null,

  PASSWORD_CAPTCHA_SET_VALID: null,
  PASSWORD_RESET_SET_ERRORS: null,
  PASSWORD_RESET_CLEAR_ERRORS: null,
  PASSWORD_RESET_REQUEST: null,
  PASSWORD_RESET_RESPONSE: null,

  MODEMNG_FILTER_ADD: null,
  MODEMNG_FILTER_REMOVE: null,
  MODEMNG_SET_NAME_FILTER: null,
  MODEMNG_SET_MODAL: null,
  MODEMNG_SET_MODES: null,
  MODEMNG_SET_ACTIVE_PAGE: null,
  MODEMNG_REQUEST_FILTER_OPTIONS: null,
  MODEMNG_RECEIVED_FILTER_OPTIONS: null,
  MODEMNG_REQUEST_USERS: null,
  MODEMNG_RECEIVED_USERS: null,
  MODEMNG_SET_CHANGED_MODES: null,
  MODEMNG_SAVE_MODE_CHANGES: null,
  MODEMNG_MARK_USER_DEACTIVATION: null,
  MODEMNG_DEACTIVATE_USER: null,

  ADMIN_REQUESTED_ACTIVITY: null,
  ADMIN_RECEIVED_ACTIVITY: null,

  ADMIN_RESET_USER_DATA: null,

  ADMIN_REQUESTED_SESSIONS: null,
  ADMIN_RECEIVED_SESSIONS: null,

  ADMIN_REQUESTED_METERS: null,
  ADMIN_RECEIVED_METERS: null,

  ADMIN_FILTER_USER: null,

  ADMIN_EXPORT_REQUEST: null,
  ADMIN_EXPORT_COMPLETE: null,

  ADMIN_ADD_USER_SHOW: null,
  ADMIN_ADD_USER_HIDE: null,
  ADMIN_ADD_USER_SELECT_GENDER_MALE: null,
  ADMIN_ADD_USER_SELECT_GENDER_FEMALE: null,
  ADMIN_ADD_USER_SELECT_UTILITY: null,
  ADMIN_ADD_USER_FILL_FORM: null,
  ADMIN_ADD_USER_VALIDATION_ERRORS_OCCURRED: null,
  ADMIN_ADD_USER_SHOW_MESSAGE_ALERT: null,
  ADMIN_ADD_USER_HIDE_MESSAGE_ALERT: null,
  ADMIN_ADD_USER_MAKE_REQUEST: null,
  ADMIN_ADD_USER_RECEIVE_RESPONSE: null,
  ADMIN_ADD_USER_GET_UTILITIES_MAKE_REQUEST: null,
  ADMIN_ADD_USER_GET_UTILITIES_RECEIVE_RESPONSE: null,

  ADMIN_CHANGE_PASSWORD_SHOW: null,
  ADMIN_CHANGE_PASSWORD_SET_VALUE: null,
  ADMIN_CHANGE_PASSWORD_SET_ERROR: null,
  ADMIN_CHANGE_PASSWORD_HIDE: null,

  GROUP_REQUEST_GROUP: null,
  GROUP_RECEIVE_GROUP_INFO: null,
  GROUP_RECEIVE_GROUP_MEMBERS: null,
  GROUP_SHOW_FAVOURITE_GROUP_FORM: null,
  GROUP_HIDE_FAVOURITE_GROUP_FORM: null,
  GROUP_RESET_COMPONENT: null,
  GROUP_SHOW_FAVOURITE_ACCOUNT_FORM: null,
  GROUP_HIDE_FAVOURITE_ACCOUNT_FORM: null,

  // Client Configuration

  config: {
    utility: {
      REQUEST_CONFIGURATION: null,
      SET_CONFIGURATION: null
    },
    reports: {
      SET_CONFIGURATION: null
    }
  },

  // Reports

  reports: {

    // Reports on measurements 

    measurements: {
      INITIALIZE: null,
      INIT_MULTIPLE: null,
      CHANGE_MULTIPLE_QUERY: null,
      SET_SOURCE: null,
      SET_QUERY_SOURCE: null,
      SET_TIMESPAN: null,
      SET_POPULATION: null,
      SET_OVERLAP: null,
      REQUEST_DATA: null,
      REQUEST_MULTIPLE_DATA: null,
      SET_DATA: null,
      SET_MULTIPLE_DATA: null,
      ADD_SERIES: null,
      REMOVE_SERIES: null,
      ADD_FAVOURITE_REQUEST: null,
      ADD_FAVOURITE_RESPONSE: null,
      CHARTS_SAVE_LAYOUT_RESPONSE: null
    },

    // Reports on system utilization

    system: {
      INITIALIZE: null,
      REQUEST_DATA: null,
      SET_DATA: null
    }
  },

  // Chart panels

  charting: {
    SET_FIELD: null,
    SET_REPORT: null
  },

  // Overview reports (atop of measurement reports)

  overview: {
    SETUP: null
  },

  // Trials

  trials: {
    SET_REFERENCE_TIME: null
  },

  // Alerts


  USER_REQUEST_USER: null,
  USER_RECEIVE_USER_INFO: null,
  USER_RECEIVE_GROUP_MEMBERSHIP_INFO: null,
  USER_SHOW_FAVOURITE_ACCOUNT_FORM: null,
  USER_HIDE_FAVOURITE_ACCOUNT_FORM: null,

  //manage alerts
  ADMIN_REQUESTED_UTILITIES: null,
  ADMIN_RECEIVED_UTILITIES: null,
  ADMIN_SELECTED_UTILITY_FILTER: null,
  ADMIN_REQUESTED_STATIC_TIPS: null,
  ADMIN_RECEIVED_STATIC_TIPS: null,
  SAVE_BUTTON_DISABLED: null,
  SAVE_BUTTON_CLICKED: null,
  ADMIN_CLICKED_SAVE_BUTTON: null,
  ADMIN_SAVE_BUTTON_RESPONSE: null,
  ADMIN_SAVED_ACTIVE_TIPS: null,
  CHECKBOX_CLICKED: null,
  ADMIN_REQUESTED_ADD_TIP: null,
  ADMIN_ADD_TIP_RESPONSE: null,
  ADMIN_ADD_TIP_SHOW: null,
  ADMIN_CANCEL_ADD_TIP_SHOW: null,
  ADMIN_EDIT_TIP: null,
  STATIC_TIPS_ACTIVE_PAGE: null,
  ADMIN_TIPS_ACTIVE_STATUS_CHANGE: null,
  ADMIN_EDITED_TIP: null,
  ADMIN_TIPS_SAVE_BUTTON_DISABLED: null,
  ADMIN_CHECKBOX_CLICKED: null,
  ADMIN_DELETE_TIP: null,
  ADMIN_DELETE_TIP_REQUEST: null,
  ADMIN_DELETE_TIP_RESPONSE: null,
  MESSAGES_DELETE_MODAL_SHOW: null,
  MESSAGES_DELETE_MODAL_HIDE: null,
  MESSAGES_REQUESTED_STATISTICS: null,
  MESSAGES_RECEIVED_STATISTICS: null,
  MESSAGES_INDEX_CHANGE: null,
  MESSAGES_SHOW_RECEIVERS: null,
  MESSAGES_REQUESTED_RECEIVERS: null,
  MESSAGES_RECEIVED_RECEIVERS: null,
  MESSAGES_SELECTED_MESSAGE: null,
  MESSAGES_RETURN_BACK: null,
  MESSAGES_SET_EDITOR_VALUE: null,
  MESSAGES_SELECT_EDITOR: null,
  MESSAGES_SET_TIMEZONE: null,

  //Announcements
  ANNC_REQUESTED_USERS: null,
  ANNC_RECEIVED_USERS: null,
  ANNC_SET_INITIAL_USERS: null,
  ANNC_INITIAL_USERS_SET_SELECTED: null,
  ANNC_ADDED_USERS_SET_SELECTED: null,
  ANNC_ADD_USERS_BUTTON_CLICKED: null,
  ANNC_REMOVE_USERS_BUTTON_CLICKED: null,
  ANNC_SHOW_FORM: null,
  ANNC_CANCEL_SHOW_FORM: null,
  ANNC_BROADCAST_ANNOUNCEMENT_REQUEST: null,
  ANNC_BROADCAST_ANNOUNCEMENT_RESPONSE: null,
  ANNC_REQUESTED_ANNOUNCEMENT_HISTORY: null,
  ANNC_RECEIVED_ANNOUNCEMENT_HISTORY: null,
  ANNC_FILTER_USERS: null,
  ANNC_REQUESTED_GROUPS: null,
  ANNC_RECEIVED_GROUPS: null,
  ANNC_SELECT_GROUP: null,
  ANNC_SET_SELECTED_ALL: null,
  ANNC_SHOW_DELETE_MODAL: null,
  ANNC_HIDE_DELETE_MODAL: null,
  ANNC_DELETE_ANNOUNCEMENT_REQUEST: null,
  ANNC_DELETE_ANNOUNCEMENT_RESPONSE: null,
  ANNC_SHOW_ANNOUNCEMENT_REQUEST: null,
  ANNC_SHOW_ANNOUNCEMENT_RESPONSE: null,
  ANNC_GO_BACK: null,
  //

  QUERY_SUBMIT: null,
  QUERY_RESPONSE: null,

  DEBUG_CREATE_USER: null,
  DEBUG_USER_CREATED: null,
  DEBUG_CREATE_AMPHIRO: null,
  DEBUG_AMPHIRO_CREATED: null,
  DEBUG_SET_TIMEZONE: null,
  DEBUG_SET_ERRORS: null,
  DEBUG_AMPHIRO_DATA_GENERATE_REQUEST: null,
  DEBUG_AMPHIRO_DATA_GENERATED: null,
  DEBUG_GET_FEATURES: null,

  //Viewport
  VIEWPORT_SET_SIZE: null
});

module.exports = types;

},{"../helpers/path-mirror.js":597}],572:[function(require,module,exports){
'use strict';

var mirrorToPath = require('../helpers/path-mirror.js');

var types = mirrorToPath({

  BUDGET_SET_QUERY: null,
  BUDGET_SET_BUDGETS: null,
  BUDGET_SET_ACTIVE_BUDGETS: null,
  BUDGET_SET_SAVINGS_SCENARIOS: null,
  BUDGET_CONFIRM_REMOVE_SCENARIO: null,
  BUDGET_CONFIRM_SET: null,
  BUDGET_CONFIRM_RESET: null,
  BUDGET_EXPLORE_SET_QUERY: null,
  BUDGET_EXPLORE_REQUEST_DATA: null,
  BUDGET_EXPLORE_SET_USER_DATA: null,
  BUDGET_EXPLORE_SET_CLUSTER_DATA: null

});

module.exports = types;

},{"../helpers/path-mirror.js":597}],573:[function(require,module,exports){
'use strict';

var constants = {
  LOCALES: ['en-GB', 'el', 'de', 'es'],
  COUNTRIES: ['United Kingdom', 'Spain', 'Greece'],
  TIMEZONES: ['Europe/London', 'Europe/Madrid', 'Europe/Athens'],
  ROLE: {
    ROLE_SYSTEM_ADMIN: 'ROLE_SYSTEM_ADMIN',
    ROLE_UTILITY_ADMIN: 'ROLE_UTILITY_ADMIN',
    ROLE_USER: 'ROLE_USER'
  }
};

module.exports = constants;

},{}],574:[function(require,module,exports){
'use strict';

var mirrorToPath = require('../helpers/path-mirror.js');

var types = mirrorToPath({

  TIMELINE_REQUEST: null,
  TIMELINE_RESPONSE: null,

  GET_FEATURES: null,

  CHART_REQUEST: null,
  CHART_RESPONSE: null,

  COUNTER_REQUEST: null,
  COUNTER_RESPONSE: null,

  USER_RECEIVED_LOGOUT: null,

  SAVE_LAYOUT_REQUEST: null,
  SAVE_LAYOUT_RESPONSE: null,
  GET_LAYOUT_REQUEST: null,
  GET_LAYOUT_RESPONSE: null,
  FAVOURITES_REQUEST: null,
  FAVOURITES_RESPONSE: null,
  UNPIN_REQUEST: null,
  UNPIN_RESPONSE: null

});

module.exports = types;

},{"../helpers/path-mirror.js":597}],575:[function(require,module,exports){
'use strict';

var keyMirror = require('keymirror');

module.exports = keyMirror({
  FILE_CHANGE_INDEX: null,
  FILE_REQUEST: null,
  FILE_RESPONSE: null,

  TRIAL_FILE_REQUEST: null,
  TRIAL_FILE_RESPONSE: null,

  FILE_FILTER_SET: null,
  FILE_FILTER_CLEAR: null,

  FILE_DOWNLOAD_REQUEST: null
});

},{"keymirror":"keymirror"}],576:[function(require,module,exports){
'use strict';

var mirrorToPath = require('../helpers/path-mirror.js');

var constants = mirrorToPath({
		'SharedErrorCode.AUTHENTICATION': null,

		'ValidationError.User.NO_FIRST_NAME': null,
		'ValidationError.User.NO_LAST_NAME': null,
		'ValidationError.User.NO_EMAIL': null,
		'ValidationError.User.NO_GENDER': null,
		'ValidationError.User.NO_UTILITY': null,
		'ValidationError.User.INVALID_EMAIL': null,
		'ValidationError.User.TOO_LONG_FIRST_NAME': null,
		'ValidationError.User.TOO_LONG_LAST_NAME': null,
		'ValidationError.User.TOO_LONG_EMAIL': null,
		'ValidationError.User.TOO_LONG_ADDRESS': null,
		'ValidationError.User.TOO_LONG_POSTAL_CODE': null,
		'ValidationError.Group.NO_GROUP_NAME': null,
		'ValidationError.Group.NO_GROUP_MEMBERS': null,
		'ValidationError.Favourite.NO_LABEL': null,

		// Reports

		reports: {
				measurements: {
						TIMESPAN_INVALID: null,
						TIMESPAN_TOO_NARROW: null,
						TIMESPAN_TOO_WIDE: null
				}
		}

});

module.exports = constants;

},{"../helpers/path-mirror.js":597}],577:[function(require,module,exports){
'use strict';

var mirrorToPath = require('../helpers/path-mirror.js');

var types = mirrorToPath({
  FAVOURITES_SET_TIMEZONE: null,
  FAVOURITES_FAVOURITES_REQUEST: null,
  FAVOURITES_FAVOURITES_RESPONSE: null,
  FAVOURITES_REQUEST_FAVOURITE: null,
  FAVOURITES_TIMELINE_REQUEST: null,
  FAVOURITES_TIMELINE_RESPONSE: null,
  FAVOURITES_SET_EDITOR_VALUE: null,
  FAVOURITES_OPEN_SELECTED: null,
  FAVOURITES_CLOSE_SELECTED: null,
  FAVOURITES_SET_ACTIVE_FAVOURITE: null,
  FAVOURITES_REQUEST_QUERIES: null,
  FAVOURITES_RECEIVE_QUERIES: null,
  FAVOURITES_ADD_QUERY_REQUEST: null,
  FAVOURITES_ADD_QUERY_RESPONSE: null,
  FAVOURITES_DELETE_QUERY_REQUEST: null,
  FAVOURITES_CONFIRM_DELETE_QUERY: null,
  FAVOURITES_CANCEL_DELETE_QUERY: null,
  FAVOURITES_DELETE_QUERY_RESPONSE: null,
  FAVOURITES_ADD_FAVOURITE_REQUEST: null,
  FAVOURITES_ADD_FAVOURITE_RESPONSE: null,
  FAVOURITES_RESET_MAP_STATE: null,
  FAVOURITES_GET_FEATURES: null,
  FAVOURITES_CHART_REQUEST: null,
  FAVOURITES_CHART_RESPONSE: null,
  FAVOURITES_PIN_REQUEST: null,
  FAVOURITES_PIN_RESPONSE: null,
  FAVOURITES_GET_LAYOUT_REQUEST: null,
  FAVOURITES_GET_LAYOUT_RESPONSE: null,
  FAVOURITES_SAVE_LAYOUT_REQUEST: null,
  FAVOURITES_SAVE_LAYOUT_RESPONSE: null,
  FAVOURITES_UNPIN_REQUEST: null,
  FAVOURITES_UNPIN_RESPONSE: null
});

module.exports = types;

},{"../helpers/path-mirror.js":597}],578:[function(require,module,exports){
'use strict';

var mirrorToPath = require('../helpers/path-mirror.js');

var types = mirrorToPath({

  FORECASTING_SET_USER: null,
  FORECASTING_SET_GROUP: null,
  FORECASTING_SET_INTERVAL: null,

  FORECASTING_GROUP_CATALOG_REQUEST: null,
  FORECASTING_GROUP_CATALOG_RESPONSE: null,
  FORECASTING_GROUP_CATALOG_FILTER_TYPE: null,

  FORECASTING_GROUP_CHART_DATA_REQUEST: null,
  FORECASTING_GROUP_CHART_DATA_RESPONSE: null,

  FORECASTING_USER_DATA_REQUEST: null,
  FORECASTING_USER_DATA_RESPONSE: null,

  FORECASTING_ADD_FAVOURITE_REQUEST: null,
  FORECASTING_ADD_FAVOURITE_RESPONSE: null,

  USER_RECEIVED_LOGOUT: null

});

module.exports = types;

},{"../helpers/path-mirror.js":597}],579:[function(require,module,exports){
'use strict';

var mirrorToPath = require('../helpers/path-mirror.js');

var types = mirrorToPath({

  GROUP_RESET_COMPONENT: null,

  GROUP_REQUEST_GROUP: null,
  GROUP_RECEIVE_GROUP_INFO: null,
  GROUP_RECEIVE_GROUP_MEMBERS: null,

  ADD_FAVORITE_REQUEST: null,
  ADD_FAVORITE_RESPONSE: null,

  REMOVE_FAVORITE_REQUEST: null,
  REMOVE_FAVORITE_RESPONSE: null

});

module.exports = types;

},{"../helpers/path-mirror.js":597}],580:[function(require,module,exports){
'use strict';

var keyMirror = require('keymirror');

module.exports = keyMirror({
  GROUP_CATALOG_INDEX_CHANGE: null,

  GROUP_CATALOG_REQUEST: null,
  GROUP_CATALOG_RESPONSE: null,

  GROUP_CATALOG_FILTER_NAME: null,
  GROUP_CATALOG_FILTER_TYPE: null,
  GROUP_CATALOG_FILTER_CLEAR: null,

  GROUP_CATALOG_DELETE_REQUEST: null,
  GROUP_CATALOG_DELETE_RESPONSE: null,

  GROUP_CATALOG_CHART_REQUEST: null,
  GROUP_CATALOG_CHART_RESPONSE: null,

  GROUP_CATALOG_SET_METRIC: null,

  GROUP_CATALOG_CLEAR_CHART: null,

  GROUP_CATALOG_ADD_FAVORITE_REQUEST: null,
  GROUP_CATALOG_ADD_FAVORITE_RESPONSE: null,

  GROUP_CATALOG_REMOVE_FAVORITE_REQUEST: null,
  GROUP_CATALOG_REMOVE_FAVORITE_RESPONSE: null
});

},{"keymirror":"keymirror"}],581:[function(require,module,exports){
'use strict';

var GroupTablesSchema = {

  Members: {
    fields: [{
      name: 'key',
      hidden: true
    }, {
      name: 'fullName',
      title: 'Group.Table1.Name',
      link: '/user/{key}'
    }, {
      name: 'username',
      title: 'Group.Table1.Email'
    }, {
      name: 'createdOn',
      title: 'Group.Table1.RegisteredOn',
      type: 'datetime'
    }, {
      name: 'favourite',
      type: 'action'
    }],
    rows: [],
    pager: {
      index: 0,
      size: 10
    }
  }
};

module.exports = GroupTablesSchema;

},{}],582:[function(require,module,exports){
'use strict';

var keyMirror = require('keymirror');

module.exports = keyMirror({
  LOG_EVENT_CHANGE_INDEX: null,
  LOG_EVENT_REQUEST_INIT: null,
  LOG_EVENT_REQUEST_COMPLETE: null,

  LOG_EVENT_FILTER_LEVEL: null,
  LOG_EVENT_FILTER_ACCOUNT: null,

  LOG_EVENT_FILTER_CLEAR: null
});

},{"keymirror":"keymirror"}],583:[function(require,module,exports){
'use strict';

var ModeManagementTableSchema = {

  filters: [{
    id: 'utilityName',
    name: 'Utility',
    field: 'utilityName',
    icon: 'utility',
    type: 'text'
  }],

  fields: [{
    name: 'index',
    title: 'ID'
  }, {
    name: 'title',
    title: 'Title'
  }, {
    name: 'description',
    title: 'Description'
  }, {
    name: 'createdOn',
    title: 'Created',
    type: 'datetime'
  }, {
    name: 'modifiedOn',
    title: 'Modified',
    type: 'datetime'
  }, {
    name: 'edit',
    type: 'action',
    icon: 'pencil',
    handler: function handler() {}
  }, {
    name: 'remove',
    type: 'action',
    icon: 'remove',
    handler: function handler() {}
  }],

  pager: {
    index: 1,
    size: 10
  }

};

module.exports = ModeManagementTableSchema;

},{}],584:[function(require,module,exports){
'use strict';

var mirrorToPath = require('../helpers/path-mirror.js');

var types = mirrorToPath({
  MAP_SET_TIMEZONE: null,

  MAP_TIMELINE_REQUEST: null,
  MAP_TIMELINE_RESPONSE: null,

  MAP_GET_FEATURES: null,

  MAP_CHART_REQUEST: null,
  MAP_CHART_RESPONSE: null,

  USER_RECEIVED_LOGOUT: null,

  MAP_SELECT_EDITOR: null,
  MAP_SET_EDITOR_VALUE: null,
  MAP_ADD_FAVOURITE_REQUEST: null,
  MAP_ADD_FAVOURITE_RESPONSE: null,

  MAP_METERS_LOCATIONS_REQUEST: null,
  MAP_METERS_LOCATIONS_RESPONSE: null,
  MAP_GROUPS_REQUEST: null,
  MAP_GROUPS_RESPONSE: null,
  MAP_FILTER_GROUP_BY_TYPE: null,
  MAP_SET_GROUP: null,
  MAP_SAVE_LAYOUT_RESPONSE: null
});

module.exports = types;

},{"../helpers/path-mirror.js":597}],585:[function(require,module,exports){
'use strict';

var ModeManagementTableSchema = {

  filters: [{
    id: 'groupName',
    name: 'Group',
    field: 'groupName',
    icon: 'group',
    type: 'text'
  }, {
    id: 'amphiro',
    name: 'b1',
    field: 'amphiro',
    icon: 'tachometer',
    type: 'boolean'
  }, {
    id: 'mobile',
    name: 'Mobile',
    field: 'mobile',
    icon: 'mobile',
    type: 'boolean'
  }, {
    id: 'social',
    name: 'Social',
    field: 'social',
    icon: 'share',
    type: 'boolean'
  }],

  fields: [{
    name: 'id',
    title: 'Table.User.id',
    hidden: true
  }, {
    name: 'active',
    title: 'Table.User.active',
    hidden: true
  }, {
    name: 'groupId',
    title: 'Table.User.group',
    hidden: true
  }, {
    name: 'name',
    title: 'Table.User.name',
    link: '/user/{id}'
  }, {
    name: 'email',
    title: 'Table.User.email'
  }, {
    name: 'groupName',
    title: 'Table.User.group',
    link: '/group/{groupId}'
  }, {
    name: 'amphiro',
    title: 'Table.User.viewInfoOnAmphiro',
    type: 'property'
  }, {
    name: 'mobile',
    title: 'Table.User.viewInfoOnMobile',
    type: 'property'
  }, {
    name: 'web',
    title: 'Table.User.viewInfoOnWeb',
    type: 'property'
  }, {
    name: 'social',
    title: 'Table.User.allowSocial',
    type: 'property'
  }, {
    name: 'deactivate',
    title: 'Table.User.deactivateUser',
    type: 'action',
    icon: 'user-times',
    handler: null
  }],

  pager: {
    index: 1,
    size: 10
  }

};

module.exports = ModeManagementTableSchema;

},{}],586:[function(require,module,exports){
'use strict';

var mirrorToPath = require('../helpers/path-mirror.js');

var types = mirrorToPath({

  SAVINGS_ADD_SCENARIO: null,
  SAVINGS_REMOVE_SCENARIO: null,
  SAVINGS_UPDATE_SCENARIO: null,
  SAVINGS_CONFIRM_REMOVE_SCENARIO: null,
  SAVINGS_SET_QUERY: null,
  SAVINGS_SET_SCENARIOS: null,
  SAVINGS_SET_AREAS: null,
  SAVINGS_SET_EXPLORE_DATA: null

});

module.exports = types;

},{"../helpers/path-mirror.js":597}],587:[function(require,module,exports){
'use strict';

var keyMirror = require('keymirror');

module.exports = keyMirror({
  JOB_CHANGE_INDEX: null,
  JOB_REQUEST: null,
  JOB_RESPONSE: null,

  EXECUTION_CHANGE_INDEX: null,

  EXECUTION_REQUEST: null,
  EXECUTION_RESPONSE: null,

  EXECUTION_FILTER_JOB_NAME: null,
  EXECUTION_FILTER_EXIT_CODE: null,
  EXECUTION_FILTER_CLEAR: null,

  JOB_DISABLE_REQUEST: null,
  JOB_DISABLE_RESPONSE: null,

  JOB_ENABLE_REQUEST: null,
  JOB_ENABLE_RESPONSE: null,

  JOB_LAUNCH_REQUEST: null,
  JOB_LAUNCH_RESPONSE: null,

  EXECUTION_MESSAGE_REQUEST: null,
  EXECUTION_MESSAGE_RESPONSE: null
});

},{"keymirror":"keymirror"}],588:[function(require,module,exports){
'use strict';

var keyMirror = require('keymirror');

var constants = keyMirror({

	'UserSuccess.USER_ADDED_WHITELIST': null,

	'GroupSuccess.GROUP_CREATED': null,
	'GroupSuccess.GROUP_DELETED': null,

	'FavouriteSuccess.FAVOURITE_ADDED': null,
	'FavouriteSuccess.FAVOURITE_UPDATED': null

});

module.exports = constants;

},{"keymirror":"keymirror"}],589:[function(require,module,exports){
'use strict';

var mirrorToPath = require('../helpers/path-mirror.js');

var types = mirrorToPath({

  USER_REQUEST_USER: null,
  USER_RECEIVE_USER_INFO: null,

  USER_SHOW_FAVOURITE_ACCOUNT_FORM: null,
  USER_HIDE_FAVOURITE_ACCOUNT_FORM: null,

  SELECT_AMPHIRO: null,

  AMPHIRO_REQUEST: null,
  AMPHIRO_RESPONSE: null,

  USER_CHART_REQUEST: null,
  USER_CHART_RESPONSE: null,

  USER_GROUP_CHART_REQUEST: null,
  USER_GROUP_CHART_RESPONSE: null,

  METER_REQUEST: null,
  METER_RESPONSE: null,

  GROUP_DATA_REQUEST: null,
  GROUP_DATA_RESPONSE: null,
  GROUP_DATA_CLEAR: null,

  EXPORT_REQUEST: null,
  EXPORT_RESPONSE: null,

  ADD_FAVORITE_REQUEST: null,
  ADD_FAVORITE_RESPONSE: null,

  REMOVE_FAVORITE_REQUEST: null,
  REMOVE_FAVORITE_RESPONSE: null,

  AMPHIRO_CONFIG_SHOW: null,
  AMPHIRO_CONFIG_HIDE: null

});

module.exports = types;

},{"../helpers/path-mirror.js":597}],590:[function(require,module,exports){
'use strict';

var keyMirror = require('keymirror');

module.exports = keyMirror({
  USER_CATALOG_CHANGE_INDEX: null,

  USER_CATALOG_REQUEST_INIT: null,
  USER_CATALOG_REQUEST_COMPLETE: null,

  USER_CATALOG_FILTER_TEXT: null,
  USER_CATALOG_FILTER_SERIAL: null,
  USER_CATALOG_FILTER_FAVORITE: null,

  USER_CATALOG_FILTER_CLEAR: null,

  USER_CATALOG_CHART_REQUEST: null,
  USER_CATALOG_CHART_RESPONSE: null,
  USER_CATALOG_CLEAR_CHART: null,

  USER_CATALOG_SET_SEARCH_MODE: null,
  USER_CATALOG_SET_SEARCH_GEOMETRY: null,

  USER_CATALOG_ADD_FAVORITE_REQUEST: null,
  USER_CATALOG_ADD_FAVORITE_RESPONSE: null,

  USER_CATALOG_REMOVE_FAVORITE_REQUEST: null,
  USER_CATALOG_REMOVE_FAVORITE_RESPONSE: null,

  USER_CATALOG_TOGGLE_CONSUMER: null,

  USER_CATALOG_CREATE_BAG_OF_CONSUMER: null,
  USER_CATALOG_SAVE_BAG_OF_CONSUMER_REQUEST: null,
  USER_CATALOG_SAVE_BAG_OF_CONSUMER_RESPONSE: null,
  USER_CATALOG_DISCARD_BAG_OF_CONSUMER: null
});

},{"keymirror":"keymirror"}],591:[function(require,module,exports){
'use strict';

var _react2 = require('react');

var _react3 = _interopRequireDefault(_react2);

var _babelTransform = require('livereactload/babel-transform');

var _babelTransform2 = _interopRequireDefault(_babelTransform);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _components = {
  _component: {}
};

var _livereactloadBabelTransform2 = (0, _babelTransform2.default)({
  filename: '/home/daiad/Desktop/Development/home-web/utility/src/main/frontend/containers/App.js',
  components: _components,
  locals: [],
  imports: [_react3.default]
});

function _wrapComponent(id) {
  return function (Component) {
    return _livereactloadBabelTransform2(Component, id);
  };
}

var React = require('react');

var _require = require('react-redux'),
    connect = _require.connect;

var ReactIntl = require('react-intl');

var Locale = {};
Locale.en = require('react-intl/locale-data/en');
Locale.el = require('react-intl/locale-data/el');
Locale.es = require('react-intl/locale-data/es');
Locale.de = require('react-intl/locale-data/de');

ReactIntl.addLocaleData(Locale.en);
ReactIntl.addLocaleData(Locale.el);
ReactIntl.addLocaleData(Locale.es);
ReactIntl.addLocaleData(Locale.de);

var ContentRoot = require('./ContentRoot');

var App = _wrapComponent('_component')(React.createClass({
  displayName: 'App',

  render: function render() {
    if (!this.props.isAuthenticated && this.props.routes) {
      for (var index in this.props.routes) {
        if (this.props.routes[index].path == '/password/reset/:token') {
          // Reset password
          return React.createElement(
            ReactIntl.IntlProvider,
            { locale: this.props.locale, messages: this.props.messages },
            this.props.children
          );
        }
      }
    }

    return React.createElement(
      ReactIntl.IntlProvider,
      { locale: this.props.locale, messages: this.props.messages },
      React.createElement(
        ContentRoot,
        { locale: this.props.locale },
        this.props.children
      )
    );
  }
}));

function mapStateToProps(state) {
  return {
    isAuthenticated: state.session.isAuthenticated,
    locale: state.i18n.locale,
    messages: state.i18n.data[state.i18n.locale].messages
  };
}

module.exports = connect(mapStateToProps)(App);

},{"./ContentRoot":592,"livereactload/babel-transform":28,"react":"react","react-intl":"react-intl","react-intl/locale-data/de":"react-intl/locale-data/de","react-intl/locale-data/el":"react-intl/locale-data/el","react-intl/locale-data/en":"react-intl/locale-data/en","react-intl/locale-data/es":"react-intl/locale-data/es","react-redux":"react-redux"}],592:[function(require,module,exports){
'use strict';

var _react2 = require('react');

var _react3 = _interopRequireDefault(_react2);

var _babelTransform = require('livereactload/babel-transform');

var _babelTransform2 = _interopRequireDefault(_babelTransform);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _components = {
  _component: {}
};

var _livereactloadBabelTransform2 = (0, _babelTransform2.default)({
  filename: '/home/daiad/Desktop/Development/home-web/utility/src/main/frontend/containers/ContentRoot.js',
  components: _components,
  locals: [],
  imports: [_react3.default]
});

function _wrapComponent(id) {
  return function (Component) {
    return _livereactloadBabelTransform2(Component, id);
  };
}

var React = require('react');

var _require = require('redux'),
    bindActionCreators = _require.bindActionCreators;

var _require2 = require('react-redux'),
    connect = _require2.connect;

var ScrollToTop = require('react-scroll-up');
var _ = require('lodash');

var LoginForm = require('../components/LoginForm');
var LocaleSwitcher = require('../components/LocaleSwitcher');

var _require3 = require('../actions/SessionActions'),
    login = _require3.login,
    logout = _require3.logout;

var _require4 = require('../actions/ViewportActions'),
    resize = _require4.resize;

var _require5 = require('../actions/LocaleActions'),
    setLocale = _require5.setLocale;

var _require6 = require('../actions/config'),
    configure = _require6.configure;

var NavigationTree = require('../components/NavigationTree');

var ContentRoot = _wrapComponent('_component')(React.createClass({
  displayName: 'ContentRoot',

  contextTypes: {
    intl: React.PropTypes.object
  },

  render: function render() {
    return !this.props.isAuthenticated ? React.createElement(
      'div',
      { className: 'login-wrapper' },
      React.createElement(
        'nav',
        { className: 'navbar navbar-default navbar-fixed-top' },
        React.createElement(
          'div',
          { className: 'navbar-header', style: { paddingLeft: 15 } },
          React.createElement(
            'a',
            { className: 'navbar-brand', href: '#', style: { padding: 0, margin: 0 } },
            React.createElement('img', { alt: 'DAIAD', src: '/assets/images/shared/daiad-logo.svg', style: { marginTop: 15 } })
          )
        ),
        React.createElement(
          'div',
          { style: { float: 'right', marginTop: 8, marginLeft: 10, paddingRight: 15 } },
          React.createElement(LocaleSwitcher, { locale: this.props.locale, onLocaleSwitch: this.props.actions.setLocale })
        )
      ),
      React.createElement(
        'div',
        null,
        React.createElement(LoginForm, {
          action: 'login',
          isAuthenticated: this.props.isAuthenticated,
          errors: this.props.errors,
          onLogin: this.props.actions.login,
          isLoading: this.props.isLoading
        })
      )
    ) : React.createElement(
      'div',
      { className: 'wrapper' },
      React.createElement(
        'nav',
        { className: 'navbar navbar-default navbar-fixed-top' },
        React.createElement(
          'div',
          { className: 'navbar-header', style: { paddingLeft: 15 } },
          React.createElement(
            'a',
            { className: 'navbar-brand', href: '#', style: { padding: 0, margin: 0 } },
            React.createElement('img', { alt: 'DAIAD', src: '/assets/images/shared/daiad-logo.svg', style: { marginTop: 15 } })
          )
        ),
        React.createElement(
          'div',
          { style: { float: 'right', marginTop: 12, marginLeft: 10, paddingRight: 45 } },
          React.createElement(
            'span',
            { style: { marginRight: 10 } },
            this.props.username
          ),
          React.createElement('i', { className: 'fa fa-sign-out fa-fw', style: { color: '#d9534f', cursor: 'pointer' }, onClick: this.props.actions.logout })
        ),
        React.createElement(NavigationTree, { roles: this.props.roles, height: this.props.viewport.height })
      ),
      React.createElement(
        'div',
        { className: 'page-wrapper' },
        this.props.children
      ),
      React.createElement(
        ScrollToTop,
        { showUnder: 160 },
        React.createElement(
          'div',
          { style: { marginRight: -30 } },
          React.createElement('i', { className: 'fa fa-arrow-up fa-2x fa-fw', style: { color: '#337ab7' } })
        )
      )
    );
  },

  componentDidMount: function componentDidMount() {
    if (this.props.isAuthenticated) {
      this.props.actions.configure();
    }

    this.viewportListener = _.debounce(this.setViewport, 100, { maxWait: 1000 });
    window.addEventListener('resize', this.viewportListener);
  },

  componentWillUnmount: function componentWillUnmount() {
    window.removeEventListener('resize', this.viewportListener);
  },

  setViewport: function setViewport() {
    this.props.actions.resize(document.documentElement.clientWidth, document.documentElement.clientHeight);
  },

  componentDidUpdate: function componentDidUpdate(prevProps, prevState) {

    // Detect a successful login, and try to configure the client side.
    // This usually includes requesting configuration parts from the server side.
    if (!prevProps.isAuthenticated && this.props.isAuthenticated) {
      this.props.actions.configure();
    }

    // Todo On a successful logout, we should probably deconfigure the client
    // (if the configuration holds any security-sensitive parts).
  }

}));

function mapStateToProps(state) {
  return {
    isAuthenticated: state.session.isAuthenticated,
    errors: state.session.errors,
    isLoading: state.session.isLoading,
    username: state.session.profile ? state.session.profile.username : null,
    roles: state.session.roles,
    viewport: state.viewport,
    routing: state.routing
  };
}

function mapDispatchToProps(dispatch) {
  return {
    actions: bindActionCreators(Object.assign({}, { login: login, logout: logout, setLocale: setLocale, configure: configure, resize: resize }), dispatch)
  };
}

module.exports = connect(mapStateToProps, mapDispatchToProps)(ContentRoot);

},{"../actions/LocaleActions":438,"../actions/SessionActions":448,"../actions/ViewportActions":451,"../actions/config":455,"../components/LocaleSwitcher":495,"../components/LoginForm":496,"../components/NavigationTree":499,"livereactload/babel-transform":28,"lodash":"lodash","react":"react","react-redux":"react-redux","react-scroll-up":"react-scroll-up","redux":"redux"}],593:[function(require,module,exports){
'use strict';

var _react2 = require('react');

var _react3 = _interopRequireDefault(_react2);

var _babelTransform = require('livereactload/babel-transform');

var _babelTransform2 = _interopRequireDefault(_babelTransform);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _components = {
  _component: {}
};

var _livereactloadBabelTransform2 = (0, _babelTransform2.default)({
  filename: '/home/daiad/Desktop/Development/home-web/utility/src/main/frontend/containers/Root.js',
  components: _components,
  locals: [],
  imports: [_react3.default]
});

function _wrapComponent(id) {
  return function (Component) {
    return _livereactloadBabelTransform2(Component, id);
  };
}

var React = require('react');

var _require = require('react-redux'),
    Provider = _require.Provider;

var _require2 = require('react-router'),
    Router = _require2.Router;

var routes = require('../routing/routes');

var Root = _wrapComponent('_component')(React.createClass({
  displayName: 'Root',

  propTypes: {
    store: React.PropTypes.object.isRequired,
    history: React.PropTypes.object.isRequired
  },

  render: function render() {
    var _props = this.props,
        store = _props.store,
        history = _props.history;


    return React.createElement(
      Provider,
      { store: store },
      React.createElement(Router, { history: history, routes: routes })
    );
  }
}));

module.exports = Root;

},{"../routing/routes":643,"livereactload/babel-transform":28,"react":"react","react-redux":"react-redux","react-router":"react-router"}],594:[function(require,module,exports){
"use strict";

var funcs = {

  pluck: function pluck(arr, key) {
    return arr.map(function (e) {
      return e[key];
    });
  },

  // From an array of objects, pick those having a specific value for a given key
  pickQualiffiedOnEquality: function pickQualiffiedOnEquality(arr, key, value) {
    var qualified = arr.map(function (e) {
      if (e.hasOwnProperty(key)) {
        if (e[key] === value) {
          return e;
        }
      }
    });
    return qualified.filter(function (e) {
      if (e !== undefined) return e;
    });
  },

  // From an array of objects, pick those whose value for a given key contains a given substring
  pickQualiffiedOnSusbstring: function pickQualiffiedOnSusbstring(arr, key, substr, caseSensitive) {
    var qualified;
    if (caseSensitive) {
      qualified = arr.map(function (e) {
        if (e.hasOwnProperty(key)) {
          if (e[key].indexOf(substr) !== -1) {
            return e;
          }
        }
      });
    } else {
      qualified = arr.map(function (e) {
        if (e.hasOwnProperty(key)) {
          if (e[key].toLowerCase().indexOf(substr.toLowerCase()) !== -1) {
            return e;
          }
        }
      });
    }
    return qualified.filter(function (e) {
      if (e !== undefined) return e;
    });
  },

  // ?
  getDistinctValuesArrayObjects: function getDistinctValuesArrayObjects(array, property) {
    var distincts = [];
    var shownBefore = {};

    array.forEach(function (v, i) {
      if (!shownBefore[v[property]]) {
        shownBefore[v[property]] = true;
        distincts.push(v[property]);
      }
    });
    return distincts;
  },

  // Pad *in-place* the given array a from right to length n
  padRight: function padRight(a, n, padding) {
    a.push.apply(a, Array(n - a.length).fill(padding));
    return a;
  },

  // Pad *in-place* the given array a to length n
  padLeft: function padLeft(a, n, padding) {
    a.unshift.apply(a, Array(n - a.length).fill(padding));
    return a;
  },

  // A mapper that computes diffs of successive items
  diffNumber: function diffNumber(_1, i, a) {
    return i > 0 ? Number(a[i]) - Number(a[i - 1]) : null;
  },

  // A mapper that returns pairs of successive items
  pairWithPrevious: function pairWithPrevious(value, i, a) {
    var prevValue = i > 0 ? a[i - 1] : null;
    return [prevValue, value];
  },

  // A mapper that returns pairs of successive items
  pairWithNext: function pairWithNext(value, i, a) {
    var nextValue = i + 1 < a.length ? a[i + 1] : null;
    return [value, nextValue];
  },

  // The cartesian product of 2 arrays
  product2: function product2(a1, a2) {
    return _.flatten(a1.map(function (e1) {
      return a2.map(function (e2) {
        return [e1, e2];
      });
    }));
  },

  // The cartesian product of 3 arrays
  product3: function product3(a1, a2, a3) {
    return _.flatten(a1.map(function (e1) {
      return funcs.product2(a2, a3).map(function (t) {
        return [e1, t[0], t[1]];
      });
    }));
  },

  product: function product(a1, a2, a3) {
    return a3 == null ? funcs.product2(a1, a2) : funcs.product3(a1, a2, a3);
  }

};

module.exports = funcs;

},{}],595:[function(require,module,exports){
'use strict';

var nameToId = function nameToId(str) {
  return str.replace(/\s+/g, '-').toLowerCase();
};

var getFeature = function getFeature(area) {
  return {
    'type': 'Feature',
    'geometry': area.geometry,
    'properties': {
      'label': area.title,
      'clusterKey': area.groupKey,
      'value': area.key
    }
  };
};

var extractFeatures = function extractFeatures(accounts) {
  var geojson = {
    type: 'FeatureCollection',
    features: [],
    crs: {
      type: 'name',
      properties: {
        name: 'urn:ogc:def:crs:OGC:1.3:CRS84'
      }
    }
  };

  accounts = accounts || [];

  for (var index in accounts) {
    if (accounts[index].location) {
      var meter = accounts[index].hasOwnProperty('meter') ? accounts[index].meter : null;
      geojson.features.push({
        'type': 'Feature',
        'geometry': accounts[index].location,
        'properties': {
          'userKey': accounts[index].id,
          'savings': accounts[index].savings,
          'budget': accounts[index].budget,
          'deviceKey': meter.key,
          'name': accounts[index].fullname,
          'address': accounts[index].address,
          'meter': {
            'key': meter.key,
            'serial': meter.serial
          }
        }
      });
    }
  }
  return geojson;
};

var throwServerError = function throwServerError(response) {
  if (response.status === 401 || response.status === 403) {
    throw new Error('unauthorized');
  } else if (response && response.errors && response.errors.length > 0) {
    throw new Error(response.errors[0].code);
  }
  throw new Error('unknownError');
};

var sortSegments = function sortSegments(a, b) {
  if (b.name.startsWith('<') || a.name.startsWith('>')) {
    return 1;
  } else if (b.name.startsWith('>') || a.name.startsWith('<')) {
    return -1;
  } else if (a.name > b.name) {
    return 1;
  } else if (a.name < b.name) {
    return -1;
  }
  return 0;
};

module.exports = {
  nameToId: nameToId,
  extractFeatures: extractFeatures,
  getFeature: getFeature,
  throwServerError: throwServerError,
  sortSegments: sortSegments
};

},{}],596:[function(require,module,exports){
"use strict";

var funcs = {

  equalsPair: function equalsPair(a, b) {
    return a[0] == b[0] && a[1] == b[1];
  }
};

module.exports = funcs;

},{}],597:[function(require,module,exports){
'use strict';

var _ = require('lodash');

var mirrorToPath = function mirrorToPath(o) {
  var delimiter = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '.';


  var mapper = function mapper(prefix) {
    return function (val, key) {
      var prefixedKey = prefix ? prefix + delimiter + key : key;
      if (_.isObject(val)) {
        return _.mapValues(val, mapper(prefixedKey));
      } else {
        return prefixedKey;
      }
    };
  };

  return _.mapValues(o, mapper(''));
};

module.exports = mirrorToPath;

},{"lodash":"lodash"}],598:[function(require,module,exports){
'use strict';

require('regenerator-runtime/runtime');

var moment = require('moment');

var funcs = {

  // Generate a sequence of timestamps from [start,end) with given step
  generateTimestamps: /*#__PURE__*/regeneratorRuntime.mark(function generateTimestamps(start, end, step) {
    var t;
    return regeneratorRuntime.wrap(function generateTimestamps$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            t = moment(start);

            end = moment(end);

          case 2:
            if (!(t < end)) {
              _context.next = 8;
              break;
            }

            _context.next = 5;
            return t.valueOf();

          case 5:
            t.add(1, step);
            _context.next = 2;
            break;

          case 8:
          case 'end':
            return _context.stop();
        }
      }
    }, generateTimestamps, this);
  }),

  // Convert local (wall-clock) time to the GMT (UTC+0) equivalent,
  // i.e find the timestamp of the same wall-clock time in the GMT timezone. 
  toUtcTime: function toUtcTime(t) {
    var asMillis = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;


    // Note 
    // See also https://github.com/moment/moment/issues/1922
    // It seems that moment.js supports this with a 2nd param to utcOffset (as m.utcOffset(0, true))
    // But, this is not documented in the official docs, so we reside on this solution. 

    t = moment(t);
    // Convert and flag as UTC
    t.add(t.utcOffset(), 'minute').utc();
    return asMillis ? t.valueOf() : t;
  },

  // Convert a global wall-clock time to our local equivalent
  fromUtcTime: function fromUtcTime(t) {
    var asMillis = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

    var localOffset = moment().utcOffset();
    // Convert and flag as local
    t = moment(t).subtract(localOffset, 'minute').local();
    return asMillis ? t.valueOf() : t;
  }
};

module.exports = funcs;

},{"moment":"moment","regenerator-runtime/runtime":426}],599:[function(require,module,exports){
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

/**
 * Transforms an object to array of objects with key, value strings for representation
 * @param {Object} dict - Contains any number of key, value pairs 
 * @param {String} dict.keyX - The key of an object
 * @param {Object} dict[keyX] - The value of the keyX key containing the friendly name and values 
 * @param {String} dict[keyX].label - The friendly name of the keyX item 
 * @param {Object|Array} dict[keyX].value - The value of the keyX item containing the friendly name and values 
 *                                      Can be either an Object with value, label Strings,
 *                                      or an Array of multiple Objects with value, label Strings
 * @return {Array} The transformed array containing a series of objects with key, value Strings
 */
function getFriendlyParams(dict, intl) {
  var details = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'long';

  var _t = function _t(x) {
    return intl.formatMessage({ id: x });
  };
  return Object.keys(dict).map(function (key) {
    return {
      key: _t('Wizard.items.' + key + '.title'),
      value: Array.isArray(dict[key]) && dict[key].length > 0 ? details === 'short' ? function () {
        if (dict[key].length === 1) {
          if (dict[key][0].type === 'UTILITY') {
            return _t('Buttons.All');
          }
          return dict[key][0].label;
        }
        return _t('Wizard.common.multiple');
      }() : dict[key].map(function (x) {
        return x.label;
      }) : _typeof(dict[key]) === 'object' ? dict[key].label || '-' : dict[key] || '-'
    };
  });
}

function getPopulationValue(selected, label, utility) {
  if (selected === 'all') {
    return { selected: 'all', type: 'UTILITY', key: utility, label: label };
  }
  return { type: 'GROUP', key: selected, label: label };
}

function getAllPopulationGroups(clusters, utility) {
  if (!clusters) return [];
  return clusters.map(function (cluster) {
    return cluster.groups.map(function (group) {
      return _extends({}, group, { value: getPopulationValue(group.key, cluster.name + ': ' + group.name, utility) });
    });
  }).reduce(function (p, c) {
    return [].concat(_toConsumableArray(p), _toConsumableArray(c));
  }, []);
}

function getSpatialValue(selected, label) {
  if (selected === 'all') {
    return { selected: 'all', label: label };
  }
  return { area: selected, label: label };
}

function getAllSpatialGroups(areas) {
  return areas.map(function (group) {
    return _extends({}, group, { value: getSpatialValue(group.key, group.label) });
  });
}

function getLabelByParam(paramKey, param, props) {
  switch (paramKey) {
    case 'population':
    case 'excludePopulation':
      if (!param) {
        return '-';
      } else if (param.type === 'UTILITY') {
        return props.intl.formatMessage({ id: 'Buttons.All' });
      } else {
        var group = getAllPopulationGroups(props.clusters, props.utility).find(function (g) {
          return g.key === param.key;
        });
        var cluster = props.clusters && props.clusters.find(function (c) {
          return c.key === (group && group.clusterKey);
        });
        return '' + (cluster && cluster.name ? cluster.name + ': ' : '') + (group && group.name);
      }
    case 'spatial':
    case 'excludeSpatial':
      if (paramKey === 'spatial' && (!param || param.type === 'UTILITY')) {
        return props.intl.formatMessage({ id: 'Buttons.All' });
      } else if (paramKey === 'excludeSpatial' && !param) {
        return '-';
      } else {
        var key = Array.isArray(param.areas) && param.areas.length > 0 && param.areas[0];
        var area = getAllSpatialGroups(props.areas).find(function (g) {
          return g.key === key;
        });
        return area && area.title;
      }
    case 'time':
      return props.intl.formatDate(param.start, {
        month: 'numeric', year: 'numeric'
      }) + '-' + props.intl.formatDate(param.end, {
        month: 'numeric', year: 'numeric'
      });
    case 'distribution':
      return props.intl.formatMessage({ id: 'Wizard.items.distribution.options.' + param.toLowerCase() + '.label' });
    case 'goal':
      return param + '%';
    case 'savings':
      return param + '%';
    case 'scenario':
      {
        var scenario = props.savings.find(function (s) {
          return s.key === param;
        });
        return scenario && scenario.name;
      }
    default:
      return '-';
  }
}

function getParamsWithLabels(paramsObj, props) {
  return Object.keys(paramsObj).reduce(function (p, paramKey) {
    var param = paramsObj[paramKey];
    var obj = _extends({}, p);
    if (Array.isArray(param)) {
      obj[paramKey] = param.map(function (p) {
        return _extends({}, p, { label: getLabelByParam(paramKey, p, props) });
      });
    } else if ((typeof param === 'undefined' ? 'undefined' : _typeof(param)) === 'object') {
      obj[paramKey] = _extends({}, param, { label: getLabelByParam(paramKey, param, props) });
    } else {
      obj[paramKey] = { param: param, label: getLabelByParam(paramKey, param, props) };
    }
    return obj;
  }, {});
}

function flattenBudgetParams(paramsObj) {
  if (paramsObj.scenario == null) {
    return {
      population: paramsObj && paramsObj.include && paramsObj.include.population,
      spatial: paramsObj && paramsObj.include && paramsObj.include.spatial,
      excludePopulation: paramsObj && paramsObj.exclude && paramsObj.exclude.population,
      excludeSpatial: paramsObj && paramsObj.exclude && paramsObj.exclude.spatial,
      goal: paramsObj && paramsObj.goal,
      distribution: paramsObj && paramsObj.distribution
    };
  }
  return {
    population: paramsObj && paramsObj.include && paramsObj.include.population,
    spatial: paramsObj && paramsObj.include && paramsObj.include.spatial,
    scenario: paramsObj && paramsObj.scenario && paramsObj.scenario.key,
    savings: paramsObj && paramsObj.scenario && paramsObj.scenario.percent
  };
}

module.exports = {
  getFriendlyParams: getFriendlyParams,
  getParamsWithLabels: getParamsWithLabels,
  getPopulationValue: getPopulationValue,
  getAllPopulationGroups: getAllPopulationGroups,
  getSpatialValue: getSpatialValue,
  getAllSpatialGroups: getAllSpatialGroups,
  flattenBudgetParams: flattenBudgetParams
};

},{}],600:[function(require,module,exports){
(function (global){
'use strict';

var develop = "production" !== 'production';

var React = require('react');
var ReactDOM = require('react-dom');

var _require = require('react-router-redux'),
    syncHistoryWithStore = _require.syncHistoryWithStore;

var history = require('./routing/history');
var configureStore = require('./store/configureStore');

var Root = require('./containers/Root');

var _require2 = require('./actions/LocaleActions'),
    setLocale = _require2.setLocale;

var _require3 = require('./actions/SessionActions'),
    refreshProfile = _require3.refreshProfile;

var store = configureStore();
history = syncHistoryWithStore(history, store);

var renderRoot = function renderRoot() {
  ReactDOM.render(React.createElement(Root, { store: store, history: history }), document.getElementById('root'));
};

// http://stackoverflow.com/questions/10730362/get-cookie-by-name
var getCookie = function getCookie(name) {
  var value = "; " + document.cookie;
  var parts = value.split("; " + name + "=");
  if (parts.length == 2) {
    return parts.pop().split(";").shift();
  }
};

var locale = getCookie('daiad-utility-locale') || 'en-GB';
var mustRefresh = getCookie('daiad-utility-session') === 'true';

// Chain preliminary actions needed before any rendering takes place
store.dispatch(setLocale(locale, true)).then(function () {
  return mustRefresh ? store.dispatch(refreshProfile()) : Promise.resolve();
}).then(renderRoot);

// If under development, shortcut some modules into global namespace (window)
if (develop) {
  global.$a = {
    api: require('./api/base')
  };
}

//custom leaflet image path
var L = require('leaflet');
L.Icon.Default.imagePath = '/assets/lib/leaflet/images/';

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"./actions/LocaleActions":438,"./actions/SessionActions":448,"./api/base":461,"./containers/Root":593,"./routing/history":642,"./store/configureStore":647,"leaflet":"leaflet","react":"react","react-dom":"react-dom","react-router-redux":"react-router-redux"}],601:[function(require,module,exports){
'use strict';

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

var moment = require('moment');

// Represent granularity of measurements (data points).
// Note This class is mostly used to provide named instances for reports.

var Granularity = function Granularity(quantity, unit) {
  this.unit = unit; // same as in Moment.js
  this.quantity = quantity;
};

Granularity.prototype.toDuration = function () {
  return moment.duration(this.quantity, this.unit);
};

Granularity.prototype.valueOf = function () {
  return this.toDuration().asMilliseconds();
};

// A (sorted descending) map of commonly used instances 
Granularity.common = new Map([['millisecond', { args: [1, 'ms'] }], ['second', { args: [1, 's'] }], ['minute', { args: [1, 'm'] }], ['hour', { args: [1, 'h'] }], ['day', { args: [1, 'd'] }], ['week', { args: [1, 'w'] }], ['month', { args: [1, 'M'] }], ['quarter', { args: [1, 'Q'] }], ['year', { args: [1, 'y'] }]]);

Granularity.fromName = function (name) {
  var u = Granularity.common.get(name);
  return !u ? null : new (Function.prototype.bind.apply(Granularity, [null].concat(_toConsumableArray(u.args))))();
};

Granularity.names = function () {
  return Array.from(Granularity.common.keys());
};

module.exports = Granularity;

},{"moment":"moment"}],602:[function(require,module,exports){
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

// Provide simple representations for population-related entities:
// groups, clusters, ranking. 

// Represent a ranking clause on a data query

var Ranking = function () {
  function Ranking() {
    _classCallCheck(this, Ranking);

    if (arguments.length == 1) {
      var _arguments$ = arguments[0],
          type = _arguments$.type,
          field = _arguments$.field,
          metric = _arguments$.metric,
          limit = _arguments$.limit;

      this._initialize(type, field, metric, limit);
    } else {
      this._initialize.apply(this, arguments);
    }
  }

  _createClass(Ranking, [{
    key: '_initialize',
    value: function _initialize(type, field, metric) {
      var limit = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 3;

      this.type = ['TOP', 'BOTTOM'].indexOf(type) < 0 ? 'TOP' : type;
      this.field = field;
      this.metric = ['AVERAGE', 'MIN', 'MAX', 'SUM', 'COUNT'].indexOf(metric) < 0 ? 'AVERAGE' : metric;
      this.limit = parseInt(limit);
    }
  }, {
    key: 'toJSON',
    value: function toJSON() {
      return {
        type: this.type,
        field: this.field,
        metric: this.metric,
        limit: this.limit
      };
    }
  }, {
    key: 'toString',
    value: function toString() {
      return ['RANK', this.field, this.metric, this.type, this.limit.toString()].join('/');
    }
  }, {
    key: 'comparator',
    get: function get() {
      return this.type == 'BOTTOM' ? function (a, b) {
        return a - b;
      } : function (a, b) {
        return b - a;
      };
    }
  }]);

  return Ranking;
}();

Ranking.fromString = function (label) {
  var re = new RegExp('^(?:RANK)[/](\\w+)[/](AVERAGE|MIN|MAX|SUM|COUNT)[/](TOP|BOTTOM)[/]([\\d]+)$');
  var m = re.exec(label);
  return m ? new Ranking(m[3], m[1], m[2], m[4]) : null;
};

// Represent a population group

var Group = function () {
  function Group(key) {
    var name = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;

    _classCallCheck(this, Group);

    this.type = 'GROUP';
    this.name = name;
    this.key = key;
  }

  _createClass(Group, [{
    key: 'toJSON',
    value: function toJSON() {
      return {
        type: this.type,
        label: this.toString(),
        group: this.key
      };
    }
  }, {
    key: 'toString',
    value: function toString() {
      return this.type + ':' + this.key;
    }
  }]);

  return Group;
}();

// Represent the universe of a population group

var Utility = function (_Group) {
  _inherits(Utility, _Group);

  function Utility(key) {
    var name = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;

    _classCallCheck(this, Utility);

    var _this = _possibleConstructorReturn(this, (Utility.__proto__ || Object.getPrototypeOf(Utility)).call(this, key, name));

    _this.type = 'UTILITY';
    return _this;
  }

  _createClass(Utility, [{
    key: 'toJSON',
    value: function toJSON() {
      return {
        type: this.type,
        label: this.toString(),
        utility: this.key
      };
    }
  }]);

  return Utility;
}(Group);

// Represent a group of population groups (aka cluster)

var Cluster = function () {
  function Cluster(key) {
    var name = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;

    _classCallCheck(this, Cluster);

    this.key = key;
    this.name = name;
  }

  _createClass(Cluster, [{
    key: 'toString',
    value: function toString() {
      return 'CLUSTER' + ':' + this.key;
    }
  }, {
    key: 'toJSON',
    value: function toJSON() {
      return {
        type: 'CLUSTER',
        label: this.toString(),
        cluster: this.key
      };
    }
  }]);

  return Cluster;
}();

// Represent a population group that belongs to a certain cluster

var ClusterGroup = function (_Group2) {
  _inherits(ClusterGroup, _Group2);

  function ClusterGroup(clusterKey, key) {
    var name = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;

    _classCallCheck(this, ClusterGroup);

    var _this2 = _possibleConstructorReturn(this, (ClusterGroup.__proto__ || Object.getPrototypeOf(ClusterGroup)).call(this, key, name));

    _this2.clusterKey = clusterKey;
    return _this2;
  }

  _createClass(ClusterGroup, [{
    key: 'toString',
    value: function toString() {
      return 'CLUSTER' + ':' + this.clusterKey + ':' + this.key;
    }
  }]);

  return ClusterGroup;
}(Group);

// Represents a user

var User = function (_Group3) {
  _inherits(User, _Group3);

  function User(key, name) {
    _classCallCheck(this, User);

    var _this3 = _possibleConstructorReturn(this, (User.__proto__ || Object.getPrototypeOf(User)).call(this, key, name));

    _this3.key = key;
    _this3.name = name;
    return _this3;
  }

  _createClass(User, [{
    key: 'toString',
    value: function toString() {
      return 'USER' + ':' + this.key + ':' + this.name;
    }
  }, {
    key: 'toJSON',
    value: function toJSON() {
      return {
        type: 'USER',
        label: this.name,
        key: this.key
      };
    }
  }]);

  return User;
}(Group);

// A factory for Group instances

Group.fromString = function (label) {

  var r,
      m = new RegExp('^([\\w]+)(?:[:]([-\\w]+))?[:]([^/]+)$').exec(label);
  if (!m) return null;

  switch (m[1]) {
    case 'GROUP':
      r = m[2] == null ? new Group(m[3]) : null;
      break;
    case 'UTILITY':
      r = m[2] == null ? new Utility(m[3]) : null;
      break;
    case 'CLUSTER':
      r = m[2] != null ? new ClusterGroup(m[2], m[3]) : null;
      break;
    default:
      r = null;
      break;
  }
  return r;
};

// A factory for Cluster instances

Cluster.fromString = function (label) {
  var m = new RegExp('^CLUSTER[:]([-\\w]+)$').exec(label);
  return !m ? null : new Cluster(m[1]);
};

// Parse label and create a [Group, Ranking] pair
// This pair represents a population target for data (aka measurement) queries

var fromString = function fromString(label) {
  var g, r;
  var i = label.indexOf('/');
  if (i < 0) {
    g = Group.fromString(label) || Cluster.fromString(label);
    r = null;
  } else {
    var label1 = label.substr(0, i),
        label2 = label.substr(i + 1);
    g = Group.fromString(label1) || Cluster.fromString(label1);
    r = Ranking.fromString(label2);
  }
  return g ? [g, r] : null;
};

var extractGroupParams = function extractGroupParams(target) {
  var clusterKey, groupKey;

  if (target instanceof Cluster) {
    clusterKey = target.key;
    groupKey = null;
  } else if (target instanceof ClusterGroup) {
    clusterKey = target.clusterKey;
    groupKey = target.key;
  } else if (target instanceof Utility) {
    clusterKey = groupKey = null;
  } else if (target instanceof Group) {
    clusterKey = null;
    groupKey = target.key;
  }

  return [clusterKey, groupKey];
};

module.exports = {
  Group: Group,
  Cluster: Cluster,
  User: User,
  Utility: Utility,
  ClusterGroup: ClusterGroup,
  Ranking: Ranking,
  fromString: fromString,
  extractGroupParams: extractGroupParams
};

},{}],603:[function(require,module,exports){
'use strict';

var _ = require('lodash');
var moment = require('moment');

// Represent a time span (an interval)

// Note
// This class is mostly used to provide named instances (e.g 'today') for reports.

var TimeSpan = function TimeSpan(t, duration, unit) {
  if (_.isString(t)) {
    if (!t || t == 'now') this.t = moment();else this.t = moment(t, 'YYYY-MM-DD HH:mm:ss.SSS');
  } else if (moment.isDate(t)) {
    this.starts = moment(t.getTime());
  } else if (moment.isMoment(t)) {
    this.t = t;
  }

  this.unit = unit; // same as in Moment.js
  this.duration = duration;
};

TimeSpan.prototype.toDuration = function () {
  return moment.duration(this.duration, this.unit);
};

TimeSpan.prototype.toRange = function () {
  var asMillis = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;

  var t0, t1, r;
  t0 = this.t;
  t1 = t0.clone().add(this.duration, this.unit);
  r = this.duration < 0 ? [t1, t0] : [t0, t1];
  return !asMillis ? r : [r[0].valueOf(), r[1].valueOf()];
};

TimeSpan.common = new Map([['hour', {
  title: 'This hour',
  startsAt: 'hour',
  duration: +1,
  unit: 'hour'
}], ['1-hour', {
  title: 'Last 1 hour',
  startsAt: null,
  duration: -1,
  unit: 'hour'
}], ['today', {
  title: 'Today',
  startsAt: 'day',
  duration: +1,
  unit: 'day'
}], ['yesterday', {
  title: 'Yesterday',
  startsAt: 'day',
  duration: -1,
  unit: 'day'
}], ['24-hours', {
  title: 'Last 24 hours',
  startsAt: null,
  duration: -24,
  unit: 'hour'
}], ['48-hours', {
  title: 'Last 48 hours',
  startsAt: null,
  duration: -48,
  unit: 'hour'
}], ['7-day', {
  title: 'Last 7 days',
  startsAt: 'day',
  duration: -7,
  unit: 'day'
}], ['week', {
  title: 'This week',
  startsAt: 'isoweek',
  duration: +1,
  unit: 'week'
}], ['last-week', {
  title: 'Last week',
  startsAt: 'isoweek',
  duration: -1,
  unit: 'week'
}], ['month', {
  title: 'This month',
  startsAt: 'month',
  duration: +1,
  unit: 'month'
}], ['last-month', {
  title: 'Last month',
  startsAt: 'month',
  duration: -1,
  unit: 'month'
}], ['quarter', {
  title: 'This quarter',
  startsAt: 'quarter',
  duration: +1,
  unit: 'quarter'
}], ['last-quarter', {
  title: 'Last quarter',
  startsAt: 'quarter',
  duration: -1,
  unit: 'quarter'
}], ['year', {
  title: 'This year',
  startsAt: 'year',
  duration: +1,
  unit: 'year'
}], ['last-year', {
  title: 'Last year',
  startsAt: 'year',
  duration: -1,
  unit: 'year'
}]]);

TimeSpan.fromName = function (name, offset, now) {
  var u = TimeSpan.common.get(name);
  if (!u) return null;

  var t = moment(now);

  // A UTC offset (if given) affects all startOf() calculations!
  if (_.isNumber(offset)) t.utcOffset(offset);

  // Align to a start of a bucket
  if (u.startsAt) t.startOf(u.startsAt);

  return new TimeSpan(t, u.duration, u.unit);
};

TimeSpan.commonNames = function () {
  return Array.from(TimeSpan.common.keys());
};

module.exports = TimeSpan;

},{"lodash":"lodash","moment":"moment"}],604:[function(require,module,exports){
'use strict';

var React = require('react');

var population = require('./model/population');
var TimeSpan = require('./model/timespan');

var PropTypes = React.PropTypes;

// A collection of commonly used (component) prop types

var populationPropType = PropTypes.oneOfType([PropTypes.instanceOf(population.Group), PropTypes.instanceOf(population.Cluster), PropTypes.instanceOf(population.User)]);

var seriesPropType = PropTypes.shape({
  population: populationPropType,
  metric: PropTypes.string,
  source: PropTypes.string,
  ranking: PropTypes.object,
  data: PropTypes.arrayOf(PropTypes.arrayOf(PropTypes.number))
});

var timespanPropType = PropTypes.oneOfType([PropTypes.oneOf(TimeSpan.commonNames()), function (props, propName, componentName) {
  return PropTypes.arrayOf(PropTypes.number)(props, propName, componentName) || (props[propName].length == 2 ? null : new Error(propName + ' should be an array of length 2'));
}]);

var reportPropType = PropTypes.shape({
  title: PropTypes.string.isRequired,
  level: PropTypes.string.isRequired,
  reportName: PropTypes.string.isRequired,
  startsAt: PropTypes.string.isRequired,
  duration: PropTypes.array.isRequired
});

// The shape of the global configuration object (passed via props or context)
var configPropType = PropTypes.shape({
  utility: PropTypes.shape({
    clusters: PropTypes.arrayOf(PropTypes.shape({
      groups: PropTypes.array,
      key: PropTypes.string,
      name: PropTypes.string
    })),
    key: PropTypes.string,
    name: PropTypes.string
  }),
  reports: PropTypes.shape({
    levels: PropTypes.object,
    byType: PropTypes.object
  }),
  overview: PropTypes.shape({
    reports: PropTypes.object,
    sections: PropTypes.object
  })
});

module.exports = {
  timespanPropType: timespanPropType,
  populationPropType: populationPropType,
  seriesPropType: seriesPropType,
  reportPropType: reportPropType,
  configPropType: configPropType
};

},{"./model/population":602,"./model/timespan":603,"react":"react"}],605:[function(require,module,exports){
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var types = require('../constants/ActionTypes');

var initialState = {
  isLoading: false,
  activity: null,
  user: {
    name: null,
    devices: null
  },
  filter: null,
  export: {
    token: null
  },
  addUser: {
    show: false,
    showMessageAlert: false,
    selectedFirstName: null,
    selectedLastName: null,
    selectedEmail: null,
    selectedGender: null,
    selectedAddress: null,
    selectedUtility: null,
    selectedPostalCode: null,
    utilities: null,
    response: {
      success: null,
      errors: null
    }
  },
  changePassword: {
    show: false,
    key: null,
    username: null,
    password: '',
    confirmPassword: '',
    captcha: null,
    error: null
  }
};

var admin = function admin(state, action) {
  var newAddUser;
  switch (action.type) {
    case types.ADMIN_REQUESTED_ACTIVITY:
      return Object.assign({}, state, {
        isLoading: true
      });

    case types.ADMIN_RECEIVED_ACTIVITY:
      return Object.assign({}, state, {
        isLoading: false,
        activity: action.activity
      });

    case types.ADMIN_REQUESTED_SESSIONS:
      return Object.assign({}, state, {
        isLoading: true,
        user: {
          name: action.username,
          devices: null,
          meters: null
        }
      });

    case types.ADMIN_RECEIVED_SESSIONS:
      return Object.assign({}, state, {
        isLoading: false,
        user: {
          name: state.user.name,
          devices: action.devices,
          meters: null
        }
      });

    case types.ADMIN_REQUESTED_METERS:
      return Object.assign({}, state, {
        isLoading: true,
        user: {
          name: action.username,
          devices: null,
          meters: null
        }
      });

    case types.ADMIN_RECEIVED_METERS:
      return Object.assign({}, state, {
        isLoading: false,
        user: {
          name: state.user.name,
          devices: null,
          meters: action.meters
        }
      });

    case types.ADMIN_RESET_USER_DATA:
      return Object.assign({}, state, {
        isLoading: false,
        user: {
          name: null,
          devices: null,
          meters: null
        }
      });

    case types.ADMIN_FILTER_USER:
      return Object.assign({}, state, {
        filter: action.filter || null
      });

    case types.ADMIN_EXPORT_REQUEST:
      return Object.assign({}, state, {
        export: {
          token: null
        }
      });

    case types.ADMIN_EXPORT_COMPLETE:
      return Object.assign({}, state, {
        export: {
          token: action.token
        }
      });

    case types.ADMIN_CHANGE_PASSWORD_SHOW:
      return _extends({}, state, {
        changePassword: {
          key: action.key,
          username: action.username,
          show: true,
          password: '',
          confirmPassword: '',
          captcha: null,
          error: null
        }
      });

    case types.ADMIN_CHANGE_PASSWORD_SET_VALUE:
      return _extends({}, state, {
        changePassword: _extends({}, state.changePassword, action.data, {
          error: null
        })
      });

    case types.ADMIN_CHANGE_PASSWORD_SET_ERROR:
      return _extends({}, state, {
        changePassword: _extends({}, state.changePassword, {
          error: action.error
        })
      });
    case types.ADMIN_CHANGE_PASSWORD_HIDE:
      return _extends({}, state, {
        changePassword: {
          key: null,
          username: null,
          show: false,
          password: '',
          confirmPassword: '',
          captcha: null,
          error: null
        }
      });

    case types.ADMIN_ADD_USER_SHOW:
      newAddUser = Object.assign({}, state.addUser, { show: true });
      return Object.assign({}, state, {
        addUser: newAddUser
      });

    case types.ADMIN_ADD_USER_HIDE:
      newAddUser = Object.assign({}, state.addUser, {
        show: false,
        selectedUtility: null,
        showMessageAlert: false,
        response: {
          errors: [],
          success: false
        }
      });
      return Object.assign({}, state, {
        addUser: newAddUser
      });

    case types.ADMIN_ADD_USER_SELECT_GENDER_MALE:
      newAddUser = Object.assign({}, state.addUser, { selectedGender: 'MALE' });
      return Object.assign({}, state, {
        addUser: newAddUser
      });

    case types.ADMIN_ADD_USER_SELECT_GENDER_FEMALE:
      newAddUser = Object.assign({}, state.addUser, { selectedGender: 'FEMALE' });
      return Object.assign({}, state, {
        addUser: newAddUser
      });

    case types.ADMIN_ADD_USER_SELECT_UTILITY:
      newAddUser = Object.assign({}, state.addUser, { selectedUtility: action.utility });
      return Object.assign({}, state, {
        addUser: newAddUser
      });

    case types.ADMIN_ADD_USER_FILL_FORM:
      newAddUser = Object.assign({}, state.addUser, {
        selectedFirstName: action.firstName,
        selectedLastName: action.lastName,
        selectedEmail: action.email,
        selectedGender: action.gender,
        selectedAddress: action.address,
        selectedPostalCode: action.postalCode
      });
      return Object.assign({}, state, {
        addUser: newAddUser
      });

    case types.ADMIN_ADD_USER_MAKE_REQUEST:
      return Object.assign({}, state, {
        isLoading: true
      });

    case types.ADMIN_ADD_USER_RECEIVE_RESPONSE:
      newAddUser = Object.assign({}, state.addUser, {
        response: {
          success: action.success,
          errors: action.errors
        },
        showMessageAlert: true
      });

      if (action.success) {
        newAddUser.selectedFirstName = null;
        newAddUser.selectedLastName = null;
        newAddUser.selectedEmail = null;
        newAddUser.selectedGender = null;
        newAddUser.selectedAddress = null;
        newAddUser.selectedUtility = null;
        newAddUser.selectedPostalCode = null;
      }

      return Object.assign({}, state, {
        isLoading: false,
        addUser: newAddUser
      });

    case types.ADMIN_ADD_USER_VALIDATION_ERRORS_OCCURRED:
      newAddUser = Object.assign({}, state.addUser, { showMessageAlert: true, response: { success: false, errors: action.errors } });
      return Object.assign({}, state, {
        isLoading: false,
        addUser: newAddUser
      });

    case types.ADMIN_ADD_USER_GET_UTILITIES_MAKE_REQUEST:
      return Object.assign({}, state, {
        isLoading: true
      });

    case types.ADMIN_ADD_USER_GET_UTILITIES_RECEIVE_RESPONSE:
      newAddUser = Object.assign({}, state.addUser, { utilities: action.utilities });
      return Object.assign({}, state, {
        isLoading: false,
        addUser: newAddUser
      });

    case types.ADMIN_ADD_USER_SHOW_MESSAGE_ALERT:
      newAddUser = Object.assign({}, state.addUser, { showMessageAlert: true, response: { success: false, errors: action.errors } });
      return Object.assign({}, state, {
        addUser: newAddUser
      });

    case types.ADMIN_ADD_USER_HIDE_MESSAGE_ALERT:
      newAddUser = Object.assign({}, state.addUser, { showMessageAlert: false });
      return Object.assign({}, state, {
        addUser: newAddUser
      });

    case types.USER_RECEIVED_LOGOUT:
      return Object.assign({}, state, {
        isLoading: false,
        activity: null,
        user: {
          name: null,
          devices: null
        },
        filter: null,
        export: {
          token: null
        }
      });

    default:
      return state || initialState;
  }
};

module.exports = admin;

},{"../constants/ActionTypes":571}],606:[function(require,module,exports){
'use strict';

var types = require('../constants/ActionTypes');

var initialState = {
  isLoading: false,
  utility: null,
  utilities: null,
  tips: null,
  activePage: 0,
  currentTip: null,
  show: false,
  saveTipDisabled: false,
  saveDisabled: true,
  data: null,
  changedRows: [],
  showModal: false,
  actions: null
};

var alerts = function alerts(state, action) {
  switch (action.type) {
    case types.ADMIN_REQUESTED_UTILITIES:
      return Object.assign({}, state, {
        isLoading: true,
        utilities: null
      });
    case types.ADMIN_RECEIVED_UTILITIES:
      return Object.assign({}, state, {
        isLoading: false,
        utilities: action.utilities
      });
    case types.ADMIN_SELECTED_UTILITY_FILTER:
      return Object.assign({}, state, {
        isLoading: true,
        utility: action.utility,
        saveOff: true
      });
    case types.ADMIN_REQUESTED_STATIC_TIPS:
      return Object.assign({}, state, {
        isLoading: true,
        tips: null
      });
    case types.ADMIN_RECEIVED_STATIC_TIPS:
      return Object.assign({}, state, {
        isLoading: false,
        tips: action.tips
      });
    case types.ADMIN_CLICKED_SAVE_BUTTON:
      return Object.assign({}, state, {
        isLoading: true,
        changedRows: action.changedRows
      });
    case types.ADMIN_SAVE_BUTTON_RESPONSE:
      return Object.assign({}, state, {
        isLoading: false,
        changedRows: []
      });
    case types.ADMIN_REQUESTED_ADD_TIP:
      return Object.assign({}, state, {
        isLoading: true
      });
    case types.ADMIN_ADD_TIP_RESPONSE:
      return Object.assign({}, state, {
        isLoading: false,
        show: false
      });
    case types.ADMIN_ADD_TIP_SHOW:
      return Object.assign({}, state, {
        show: true,
        currentTip: null
      });
    case types.ADMIN_CANCEL_ADD_TIP_SHOW:
      return Object.assign({}, state, {
        show: false,
        currentTip: null
      });
    case types.ADMIN_EDIT_TIP:
      return Object.assign({}, state, {
        show: true,
        currentTip: action.currentTip,
        saveOff: true
      });
    case types.STATIC_TIPS_ACTIVE_PAGE:
      return Object.assign({}, state, {
        activePage: action.activePage
      });
    case types.ADMIN_EDITED_TIP:
      return Object.assign({}, state, {
        saveTipDisabled: false
      });
    case types.MESSAGES_DELETE_MODAL_SHOW:
      return Object.assign({}, state, {
        showModal: true,
        currentTip: action.currentTip
      });
    case types.MESSAGES_DELETE_MODAL_HIDE:
      return Object.assign({}, state, {
        showModal: false,
        currentTip: null
      });
    case types.ADMIN_DELETE_TIP_REQUEST:
      return Object.assign({}, state, {
        isLoading: true,
        showModal: true,
        currentTip: action.currentTip
      });
    case types.ADMIN_DELETE_TIP_RESPONSE:
      return Object.assign({}, state, {
        isLoading: false,
        showModal: false,
        currentTip: null
      });
    case types.ADMIN_CANCEL_DELETE_TIP:
      return Object.assign({}, state, {
        isLoading: false,
        showModal: false,
        currentTip: null
      });
    case types.ADMIN_TIPS_ACTIVE_STATUS_CHANGE:
      return Object.assign({}, state, {
        data: action.data
      });
    case types.ADMIN_SET_SAVE_DISABLED:
      return Object.assign({}, state, {
        saveDisabled: action.disabled
      });
    default:
      return state || initialState;
  }
};

module.exports = alerts;

},{"../constants/ActionTypes":571}],607:[function(require,module,exports){
'use strict';

var types = require('../constants/ActionTypes');

var initialState = {
  isLoading: false,
  accounts: null,
  candidateUsersToAdd: [],
  candidateUsersToRemove: [],
  initialUsers: null,
  addedUsers: [],
  showForm: false,
  accountId: null,
  selected: false,
  rowIdToggled: null,
  announcements: [],
  filter: null,
  groups: null,
  group: null,
  checked: false,
  showModal: false,
  showAnnouncementDetailsTable: false,
  announcement: null,
  receivers: null
};

var announcements = function announcements(state, action) {
  switch (action.type) {
    case types.ANNC_REQUESTED_USERS:
      return Object.assign({}, state, {
        accounts: action.accounts,
        isLoading: true
      });
    case types.ANNC_RECEIVED_USERS:
      return Object.assign({}, state, {
        accounts: action.accounts,
        isLoading: false,
        checked: false
      });
    case types.ANNC_RECEIVED_ANNOUNCEMENT_HISTORY:
      return Object.assign({}, state, {
        announcements: action.announcements,
        isLoading: false,
        showModal: action.showModal
      });
    case types.ANNC_INITIAL_USERS_SET_SELECTED:
      return Object.assign({}, state, {
        accounts: action.accounts
      });
    case types.ANNC_ADDED_USERS_SET_SELECTED:
      return Object.assign({}, state, {
        addedUsers: action.addedUsers
      });
    case types.ANNC_SET_INITIAL_USERS:
      return Object.assign({}, state, {
        initialUsers: action.initialUsers
      });
    case types.ANNC_ADD_USERS_BUTTON_CLICKED:
      return Object.assign({}, state, {
        addedUsers: action.addedUsers
      });
    case types.ANNC_REMOVE_USERS_BUTTON_CLICKED:
      return Object.assign({}, state, {
        addedUsers: action.addedUsers
      });
    case types.ANNC_SHOW_FORM:
      return Object.assign({}, state, {
        showForm: true
      });
    case types.ANNC_CANCEL_SHOW_FORM:
      return Object.assign({}, state, {
        showForm: false
      });
    case types.ANNC_BROADCAST_ANNOUNCEMENT_RESPONSE:
      return Object.assign({}, state, {
        isLoading: false,
        showForm: false,
        addedUsers: []
      });
    case types.ANNC_FILTER_USERS:
      return Object.assign({}, state, {
        filter: action.filter || null
      });
    case types.ANNC_REQUESTED_GROUPS:
      return Object.assign({}, state, {
        isLoading: true
      });
    case types.ANNC_RECEIVED_GROUPS:
      return Object.assign({}, state, {
        isLoading: false,
        groups: action.groups
      });
    case types.ANNC_SELECT_GROUP:
      return Object.assign({}, state, {
        group: action.group,
        checked: false
      });
    case types.ANNC_SET_SELECTED_ALL:
      return Object.assign({}, state, {
        accounts: action.accounts,
        checked: action.checked
      });
    case types.ANNC_SHOW_DELETE_MODAL:
      return Object.assign({}, state, {
        showModal: action.showModal,
        announcement: action.announcement
      });
    case types.ANNC_SHOW_ANNOUNCEMENT_RESPONSE:
      return Object.assign({}, state, {
        isLoading: false,
        showAnnouncementDetailsTable: action.showAnnouncementDetailsTable,
        announcement: action.announcement,
        receivers: action.receivers
      });
    case types.ANNC_GO_BACK:
      return Object.assign({}, state, {
        showAnnouncementDetailsTable: action.showAnnouncementDetailsTable,
        announcement: null,
        receivers: null
      });
    default:
      return state || initialState;
  }
};

module.exports = announcements;

},{"../constants/ActionTypes":571}],608:[function(require,module,exports){
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var types = require('../constants/BudgetActionTypes');

var initialState = {
  budgetToRemove: null,
  budgetToSet: null,
  budgetToReset: null,
  savings: [],
  active: [],
  budgets: [],
  query: {
    pageIndex: 0,
    sortBy: 'CREATED_ON',
    sortAscending: false,
    name: null
  },
  explore: {
    query: {
      cluster: 'none',
      group: 'all',
      geometry: null,
      index: 0,
      size: 10,
      serial: null,
      text: null,
      loading: false
    },
    clusters: [],
    users: {
      total: null,
      accounts: null,
      features: null
    },
    errors: null
  }
};

var budget = function budget() {
  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;
  var action = arguments[1];


  switch (action.type) {
    case types.BUDGET_CONFIRM_REMOVE_SCENARIO:
      return Object.assign({}, state, {
        budgetToRemove: action.id
      });

    case types.BUDGET_CONFIRM_SET:
      return Object.assign({}, state, {
        budgetToSet: action.id
      });

    case types.BUDGET_CONFIRM_RESET:
      return Object.assign({}, state, {
        budgetToReset: action.id
      });

    case types.BUDGET_SET_BUDGETS:
      return Object.assign({}, state, {
        budgets: action.budgets
      });

    case types.BUDGET_SET_ACTIVE_BUDGETS:
      return Object.assign({}, state, {
        active: action.budgets
      });

    case types.BUDGET_SET_SAVINGS_SCENARIOS:
      return Object.assign({}, state, {
        savings: action.scenarios
      });

    case types.BUDGET_SET_QUERY:
      return _extends({}, state, {
        query: _extends({}, state.query, action.query)
      });

    case types.BUDGET_EXPLORE_SET_QUERY:
      return _extends({}, state, {
        explore: _extends({}, state.explore, {
          query: _extends({}, state.explore.query, action.query)
        })
      });

    case types.BUDGET_EXPLORE_REQUEST_DATA:
      return _extends({}, state, {
        explore: _extends({}, state.explore, {
          query: _extends({}, state.explore.query, {
            loading: true
          })
        })
      });

    case types.BUDGET_EXPLORE_SET_CLUSTER_DATA:
      return _extends({}, state, {
        explore: _extends({}, state.explore, {
          clusters: action.data
        })
      });

    case types.BUDGET_EXPLORE_SET_USER_DATA:
      return _extends({}, state, {
        explore: _extends({}, state.explore, {
          query: _extends({}, state.explore.query, {
            loading: false
          }),
          users: {
            accounts: action.data && action.data.accounts,
            features: action.data && action.data.features,
            total: action.data && action.data.total
          },
          errors: action.errors
        })
      });

    default:
      return state;
  }
};

module.exports = budget;

},{"../constants/BudgetActionTypes":572}],609:[function(require,module,exports){
'use strict';

var _ = require('lodash');

var ActionTypes = require('../constants/ActionTypes');

var initialState = {
  field: 'volume',
  level: 'week',
  reportName: 'avg-daily-avg'
};

var reduce = function reduce(state, action) {
  var state1 = state || initialState;

  switch (action.type) {
    case ActionTypes.charting.SET_REPORT:
      state1 = _.extend({}, state, {
        level: action.level,
        reportName: action.reportName
      });
      break;
    case ActionTypes.charting.SET_FIELD:
      state1 = _.extend({}, state, { field: action.field });
      break;
    default:
      break;
  }

  return state1;
};

module.exports = reduce;

},{"../constants/ActionTypes":571,"lodash":"lodash"}],610:[function(require,module,exports){
'use strict';

// This kind of "overview" reports is just a standard (i.e. "canned") subset
// of ordinary measurement reports on water consumption.

var initialState = {

  // Configure available per-unit reports
  // Note report names refer to config.reports.measurements
  reports: {
    day: {
      title: 'Total daily consumption',
      level: 'hour',
      reportName: 'sum',
      startsAt: 'day',
      duration: [-2, 'day']
    },
    week: {
      title: 'Total weekly consumption',
      level: 'day',
      reportName: 'sum',
      startsAt: 'isoweek',
      duration: [-2, 'week']
    },
    month: {
      title: 'Total monthly consumption',
      level: 'day',
      reportName: 'sum',
      startsAt: 'month',
      duration: [-2, 'month']
    },
    year: {
      title: 'Total yearly consumption',
      level: 'month',
      reportName: 'sum',
      startsAt: 'year',
      duration: [-2, 'year']
    }
  },

  sections: {
    'utility': {
      title: 'Utility',
      population: null
    },
    'per-efficiency': {
      title: 'Per Customer Efficiency',
      population: null
    },
    'per-household-size': {
      title: 'Per Household Size',
      population: null
    },
    'per-household-members': {
      title: 'Per Household Members',
      population: null
    },
    'per-income': {
      title: 'Per Income',
      population: null
    },
    'per-age': {
      title: 'Per Age',
      population: null
    }
  }
};

var reduce = function reduce(state, action) {

  // Note This part of configuration does not ever change
  return initialState;
};

module.exports = reduce;

},{}],611:[function(require,module,exports){
'use strict';

var initialState = {

  // The  level of detail
  levels: {
    'hour': { bucket: 'hour', duration: [1, 'h'] },
    'day': { bucket: 'day', duration: [1, 'd'] },
    'week': { bucket: 'isoweek', duration: [1, 'w'] },
    'month': { bucket: 'month', duration: [1, 'M'] },
    'quarter': { bucket: 'quarter', duration: [1, 'Q'] },
    'year': { bucket: 'year', duration: [1, 'Y'] }
  },

  //Timespan overlay for multiple series
  overlap: {
    levels: {
      'day': { bucket: 'day', duration: [1, 'd'] },
      'week': { bucket: 'isoweek', duration: [1, 'w'] },
      'month': { bucket: 'month', duration: [1, 'M'] },
      'quarter': { bucket: 'quarter', duration: [1, 'Q'] },
      'year': { bucket: 'year', duration: [1, 'Y'] }
    },
    values: {
      'day': {
        name: 'day',
        title: 'Day',
        description: 'Overlap over day'
      },
      'week': {
        name: 'week',
        title: 'Week',
        description: 'Overlap over week' // time unit of 1 week
      },
      'month': {
        name: 'month',
        title: 'Month',
        description: 'Report over month' // time unit of 1 month
      },
      'year': {
        name: 'year',
        title: 'Year',
        description: 'Report over year' // time unit of 1 year
      }
    }
  },

  // Describe types of reports
  byType: {

    // Measurements //

    measurements: {
      title: 'Measurements',

      // The data sources for our measurements
      sources: {
        'meter': { name: 'Meter', title: 'Meter (SWM)' },
        'device': { name: 'Device', title: 'Device (B1)' }
      },

      // Metrics provided
      metrics: ['SUM', 'COUNT', 'AVERAGE', 'MIN', 'MAX'],

      // What physical quantities are being measured
      fields: {
        'volume': {
          name: 'Volume',
          title: 'Water Consumption',
          unit: 'lt',
          sources: ['meter', 'device']
        },
        'energy': {
          name: 'Energy',
          title: 'Energy Consumption',
          unit: 'kWh',
          sources: ['device']
        }
      },

      // Report on different levels of detail
      levels: {
        'hour': {
          name: 'hour',
          title: 'Hour',
          description: 'Report over hour', // time unit of 1 hour
          reports: {
            'avg': {
              title: 'Average of hourly consumption',
              description: 'The average hourly consumption',
              granularity: 'HOUR',
              timespan: 'today',
              metrics: ['AVERAGE'],
              consolidate: 'AVERAGE'
            },
            'sum': {
              title: 'Total hourly consumption',
              description: 'The total hourly consumption',
              granularity: 'HOUR',
              timespan: 'today',
              metrics: ['SUM'],
              consolidate: 'AVERAGE'
            }
          }
        },
        'day': {
          name: 'day',
          title: 'Day',
          description: 'Report over day', // time unit of 1 day
          reports: {
            'avg': {
              title: 'Average of daily consumption',
              description: 'The average daily consumption',
              granularity: 'DAY',
              timespan: 'month',
              metrics: ['AVERAGE'],
              consolidate: 'AVERAGE'
            },
            'sum': {
              title: 'Total daily consumption',
              description: 'The total daily consumption',
              granularity: 'DAY',
              timespan: 'month',
              metrics: ['SUM'],
              consolidate: 'AVERAGE'
            }
          }
        },
        'week': {
          name: 'week',
          title: 'Week',
          description: 'Report over week', // time unit of 1 week
          reports: {
            'avg': {
              title: 'Average of weekly consumption',
              description: 'The average weekly consumption',
              granularity: 'WEEK',
              timespan: 'last-quarter',
              metrics: ['AVERAGE'],
              consolidate: 'AVERAGE'
            },
            'sum': {
              title: 'Total weekly consumption',
              description: 'The total weekly consumption',
              granularity: 'WEEK',
              timespan: 'last-quarter',
              metrics: ['SUM'],
              consolidate: 'AVERAGE'
            },
            'avg-daily-avg': {
              // Note This will always be ("avg"/7), over the same population
              title: 'Average of daily consumption',
              description: 'The weekly average of the average daily consumption',
              granularity: 'DAY',
              timespan: 'last-quarter',
              metrics: ['AVERAGE'],
              consolidate: 'AVERAGE'
            },
            'avg-daily-peak': {
              title: 'Peak of daily consumption',
              description: 'The weekly average of the daily min/max consumption',
              granularity: 'DAY',
              timespan: 'last-quarter',
              metrics: ['MIN', 'MAX'],
              consolidate: 'AVERAGE'
            },
            'top-k': {
              title: 'Top consumers',
              description: 'The weekly top/bottom consumers',
              granularity: 'WEEK',
              ranking: [{ type: 'TOP', metric: 'SUM', limit: 3 }, { type: 'BOTTOM', metric: 'SUM', limit: 3 }],
              timespan: 'last-quarter',
              metrics: null, // n/a
              consolidate: 'AVERAGE' // n/a
            }
          }
        },
        'month': {
          name: 'month',
          title: 'Month',
          description: 'Report over month', // time unit of 1 month
          reports: {
            'avg': {
              title: 'Average of monthly consumption',
              description: 'The average monthly consumption',
              granularity: 'MONTH',
              timespan: 'last-quarter',
              metrics: ['AVERAGE'],
              consolidate: 'AVERAGE'
            },
            'sum': {
              title: 'Total monthly consumption',
              description: 'The total monthly consumption',
              granularity: 'MONTH',
              timespan: 'last-quarter',
              metrics: ['SUM'],
              consolidate: 'AVERAGE'
            }
          }
        },
        'year': {
          name: 'year',
          title: 'Year',
          description: 'Report over year', // time unit of 1 year
          reports: {
            'avg': {
              title: 'Average of yearly consumption',
              description: 'The average yearly consumption',
              granularity: 'YEAR',
              timespan: null,
              metrics: ['AVERAGE'],
              consolidate: 'AVERAGE'
            },
            'sum': {
              title: 'Total yearly consumption',
              description: 'The total yearly consumption',
              granularity: 'YEAR',
              timespan: null,
              metrics: ['SUM'],
              consolidate: 'AVERAGE'
            }
          }
        }
      }
    },

    // System Utilization //

    system: {
      title: 'System Utilization',
      levels: {
        'week': {
          name: 'week',
          title: 'Week',
          description: 'Report over week', // time unit of 1 week
          reports: {
            'data-transmission': {
              title: 'Data Transmission',
              description: 'Time (days) between 2 consecutive data transmissions of participants'
              // Todo
              // Avg time (days) between 2 consecutive data transmissions of participants
              // Max time (days) between 2 consecutive data transmissions (Top-k articipants)
            }
          }
        }
      }
    }

  }
};

var reduce = function reduce(state, action) {

  // Note This part (configuration for reports) does not ever change
  return initialState;
};

module.exports = reduce;

},{}],612:[function(require,module,exports){
'use strict';

var initialState = {

  // Note
  //  * These are all monthly reports at a detail level of week.
  //  * The report names refer to config.reports.measurements
  reports: [{
    title: 'Average of weekly consumption',
    level: 'week',
    reportName: 'avg',
    startsAt: 'month',
    duration: [+1, 'month']
  }, {
    title: 'Average weekly max/min water consumption',
    level: 'week',
    reportName: 'avg-daily-peak',
    startsAt: 'month',
    duration: [+1, 'month']
  }, {
    title: 'Top/Bottom 3 consumers',
    level: 'week',
    reportName: 'top-k',
    startsAt: 'month',
    duration: [+1, 'month']
  }],

  population: ['UTILITY', 'CLUSTER:Income', 'CLUSTER:Household Members'],

  period: {
    start: '2016-03-01T00:00:00Z',
    duration: 12 // months
  }
};

var reduce = function reduce(state, action) {

  // Note This part of configuration does not ever change
  return initialState;
};

module.exports = reduce;

},{}],613:[function(require,module,exports){
'use strict';

var ActionTypes = require('../constants/ActionTypes');

var reduce = function reduce() {
  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var action = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

  var state1 = state;

  switch (action.type) {
    case ActionTypes.config.utility.REQUEST_CONFIGURATION:
      // noop
      break;
    case ActionTypes.config.utility.SET_CONFIGURATION:
      state1 = action.config;
      break;
    default:
      // noop
      break;
  }

  return state1;
};

module.exports = reduce;

},{"../constants/ActionTypes":571}],614:[function(require,module,exports){
'use strict';

var Redux = require('redux');

module.exports = Redux.combineReducers({
  utility: require('./config-utility'),
  reports: require('./config-reports'),
  overview: require('./config-overview'),
  trials: require('./config-trials')
});

},{"./config-overview":610,"./config-reports":611,"./config-trials":612,"./config-utility":613,"redux":"redux"}],615:[function(require,module,exports){
'use strict';

var moment = require('moment');
var types = require('../constants/DashboardActionTypes');
var _ = require('lodash');

var _createStatisticsInitialState = function _createStatisticsInitialState() {
  return {
    counters: null
  };
};

var _createChartInitialState = function _createChartInitialState() {
  return {
    interval: [moment().subtract(14, 'day'), moment()],
    query: null,
    series: null
  };
};

var _createInitialState = function _createInitialState() {
  return {
    isLoading: false,
    unPinningInProgress: false,
    interval: [moment().subtract(14, 'day'), moment()],
    statistics: _createStatisticsInitialState(),
    map: [],
    chart: []
  };
};

var _extractTimeline = function _extractTimeline(meters, areas) {

  var timeline = {},
      timestamp,
      label,
      area,
      min = NaN,
      max = NaN;

  for (var m = 0; m < meters.length; m++) {
    var meter = meters[m];

    for (var p = 0; p < meter.points.length; p++) {
      var point = meter.points[p];

      timeline[point.timestamp] = timeline[point.timestamp] || {};
      timestamp = timeline[point.timestamp];

      timestamp[meter.label] = timestamp[meter.label] || {};
      label = timestamp[meter.label];

      label[meter.areaId] = label[meter.areaId] || 0;
      label[meter.areaId] += point.volume.SUM;
    }
  }

  for (timestamp in timeline) {
    for (label in timeline[timestamp]) {
      for (area in timeline[timestamp][label]) {
        var value = timeline[timestamp][label][area];
        if (isNaN(min) || min > value) {
          min = value;
        }
        if (isNaN(max) || max < value) {
          max = value;
        }
      }
    }
  }

  timeline.min = min;
  timeline.max = max;

  timeline.getAreas = function () {
    return areas;
  };

  timeline.getTimestamps = function () {
    var values = [];
    for (var timestamp in this) {
      var value = Number(timestamp);
      if (!isNaN(value)) {
        values.push(value);
      }
    }

    return values.sort(function (t1, t2) {
      if (t1 < t2) {
        return -1;
      }
      if (t1 > t2) {
        return 1;
      }
      return 0;
    });
  };

  timeline.getFeatures = function (timestamp, label) {

    var geojson = {
      type: 'FeatureCollection',
      features: [],
      crs: {
        type: 'name',
        properties: {
          name: 'urn:ogc:def:crs:OGC:1.3:CRS84'
        }
      }
    };

    if (!timestamp) {
      var timestamps = this.getTimestamps();
      if (timestamps.length > 0) {
        timestamp = timestamps[0];
      } else {
        return geojson;
      }
    }
    if (!label) {
      if (Object.keys(this[timestamp])) {
        label = Object.keys(this[timestamp])[0];
      } else {
        return geojson;
      }
    }

    if (!this[timestamp]) {
      return geojson;
    }
    var instance = this[timestamp][label];

    if (!instance) {
      return geojson;
    }

    var areas = this.getAreas();

    for (var index in instance) {

      geojson.features.push({
        'type': 'Feature',
        'geometry': areas[index].geometry,
        'properties': {
          'label': areas[index].label,
          'value': instance[index]
        }
      });
    }

    return geojson;
  };

  return timeline;
};

var statisticsReducer = function statisticsReducer(state, action) {
  switch (action.type) {
    case types.COUNTER_REQUEST:
      return Object.assign({}, state, {
        counters: null
      });

    case types.COUNTER_RESPONSE:
      if (action.success) {
        return Object.assign({}, state, {
          counters: action.counters
        });
      }

      return Object.assign({}, state, {
        counters: null
      });

    default:
      return state || _createStatisticsInitialState();
  }
};

var mapReducer = function mapReducer(state, action) {
  switch (action.type) {
    case types.TIMELINE_REQUEST:
      return [{
        id: action.id,
        title: action.title,
        query: action.query,
        areas: null,
        meters: null,
        devices: null,
        timeline: null,
        features: null,
        index: 0
      }];

    case types.TIMELINE_RESPONSE:
      if (action.success) {
        var sourceData = action.source == "METER" ? action.data.meters : action.data.devices;

        return [{
          id: action.id,
          title: action.title,
          areas: action.data.areas,
          meters: action.data.meters,
          devices: action.data.devices,
          timeline: _extractTimeline(sourceData, action.data.areas),
          features: null
        }];
      }

      return [{
        id: null,
        title: null,
        areas: null,
        meters: null,
        devices: null,
        regions: null,
        features: null
      }];

    case types.GET_FEATURES:

      var pMap = state.length > 0 ? state.filter(function (map) {
        return map.id === action.id;
      }) : null;

      var pMap0 = pMap[0];
      var features = pMap0.timeline ? pMap0.timeline.getFeatures(action.timestamp, action.label) : null;

      pMap0.features = features;
      pMap0.index = action.index;
      pMap0.id = action.id;

      var stateFeatures = state.filter(function (obj) {
        return obj.id !== action.id;
      });
      stateFeatures.push(pMap0);
      return stateFeatures;

    default:
      return state || [];
  }
};

var chartReducer = function chartReducer(state, action) {
  switch (action.type) {
    case types.CHART_REQUEST:
      //      return Object.assign({}, state, {
      //        draw: true,
      //        finished: false,
      //        data: null
      //      });
      return [{
        id: action.id,
        title: action.title,
        draw: true,
        finished: false,
        data: null
      }];
    case types.CHART_RESPONSE:
      if (action.success) {
        return [{
          draw: true,
          finished: action.timestamp,
          data: action.data,
          title: action.title,
          id: action.id }];
      } else {
        return [{
          draw: false,
          finished: false,
          data: null,
          title: action.title,
          id: action.id }];
      }

    default:
      return state || _createChartInitialState();
  }
};

var dashboard = function dashboard(state, action) {
  switch (action.type) {
    case types.COUNTER_REQUEST:
      return Object.assign({}, state, {
        isLoading: true,
        statistics: statisticsReducer(state.statistics, action)
        //map : mapReducer(state.map, action)
        //chart : chartReducer(state.chart, action)
      });
    case types.COUNTER_RESPONSE:
      return Object.assign({}, state, {
        isLoading: false,
        statistics: statisticsReducer(state.statistics, action)
        //map : mapReducer(state.map, action)
        //chart : chartReducer(state.chart, action)
      });
    case types.TIMELINE_REQUEST:
      var _previousMaps = state.map;
      var tempMaps = mapReducer(state.map, action);
      var mapsRequests = tempMaps.concat(_previousMaps);

      return Object.assign({}, state, {
        isLoading: true,
        map: mapsRequests
      });
    case types.TIMELINE_RESPONSE:

      var _stateMap = state.map;
      var temp = mapReducer(state.map, action);
      var mapComplete = _.unionBy(temp, _stateMap, "id");

      return Object.assign({}, state, {
        isLoading: false,
        //statistics : statisticsReducer(state.statistics, action),
        map: mapComplete
        //chart : chartReducer(state.chart, action)
      });
    case types.GET_FEATURES:
      return Object.assign({}, state, {
        isLoading: false,
        //statistics : statisticsReducer(state.statistics, action),
        map: mapReducer(state.map, action)
      });
    case types.CHART_REQUEST:
      var _previousCharts = state.chart;
      var tempCharts = chartReducer(state.map, action);
      var chartsRequests = tempCharts.concat(_previousCharts);
      return Object.assign({}, state, {
        isLoading: true,
        chart: chartsRequests
      });
    case types.CHART_RESPONSE:
      var _stateChart = state.chart;
      var tempChart = chartReducer(state.chart, action);
      var chartComplete = _.unionBy(tempChart, _stateChart, "id");

      return Object.assign({}, state, {
        isLoading: false,
        chart: chartComplete
      });
    case types.GET_LAYOUT_REQUEST:
      return Object.assign({}, state, {
        isLoading: true,
        savedLayout: null
      });
    case types.GET_LAYOUT_RESPONSE:
      return Object.assign({}, state, {
        isLoading: false,
        savedLayout: action.savedLayout
      });
    case types.FAVOURITES_REQUEST:
      return Object.assign({}, state, {
        isLoading: true
      });
    case types.FAVOURITES_RESPONSE:
      return Object.assign({}, state, {
        isLoading: false,
        favourites: action.favourites
      });
    case types.UNPIN_REQUEST:
      return Object.assign({}, state, {
        isLoading: true
      });
    case types.UNPIN_RESPONSE:
      return Object.assign({}, state, {
        isLoading: false
      });
    case types.USER_RECEIVED_LOGOUT:
      return _createInitialState();

    default:
      return state || _createInitialState();
  }
};

module.exports = dashboard;

},{"../constants/DashboardActionTypes":574,"lodash":"lodash","moment":"moment"}],616:[function(require,module,exports){
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var types = require('../constants/DataExportActionTypes');

var initialize = function initialize() {
  return {
    isLoading: false,
    query: {
      index: 0,
      size: 10
    },
    files: {
      total: 0,
      index: 0,
      size: 10,
      items: null
    },
    pinnedFiles: []
  };
};

var processFiles = function processFiles(files) {
  files = files || [];

  return files.map(function (f) {
    var size = f.size.toString + 'b';

    if (f.size > 1048576) {
      size = (f.size / 1048576).toFixed(2) + ' mb';
    } else if (f.size > 1024) {
      size = (f.size / 1024).toFixed(2) + ' kb';
    }

    return _extends({}, f, {
      size: size
    });
  });
};

var reducer = function reducer(state, action) {
  switch (action.type) {

    case types.FILE_CHANGE_INDEX:
      return _extends({}, state, {
        query: _extends({}, state.query, {
          index: action.index < 0 ? 0 : action.index
        })
      });

    case types.FILE_REQUEST:
      return _extends({}, state, {
        isLoading: true
      });

    case types.TRIAL_FILE_REQUEST:
      return _extends({}, state, {
        isLoading: true
      });

    case types.FILE_RESPONSE:
      return _extends({}, state, {
        isLoading: false,
        files: _extends({}, action.files, {
          items: processFiles(action.files.items)
        })
      });

    case types.TRIAL_FILE_RESPONSE:
      return _extends({}, state, {
        isLoading: false,
        pinnedFiles: processFiles(action.files)
      });

    case types.FILE_FILTER_SET:
      // No filters available
      return _extends({}, state);

    case types.FILE_FILTER_CLEAR:
      return _extends({}, state, {
        query: {
          index: 0,
          size: 10
        }
      });

    case types.FILE_DOWNLOAD_REQUEST:
      // No action is required
      return _extends({}, state);

    case types.USER_RECEIVED_LOGOUT:
      return initialize();

    default:
      return state || initialize();
  }
};

module.exports = reducer;

},{"../constants/DataExportActionTypes":575}],617:[function(require,module,exports){
'use strict';

var types = require('../constants/ActionTypes');

var initialState = {
  isLoading: false,
  timezone: null,
  errors: null,
  features: null
};

var admin = function admin(state, action) {
  switch (action.type) {
    case types.DEBUG_CREATE_USER:
      return Object.assign({}, state, {
        isLoading: true,
        errors: null
      });

    case types.DEBUG_USER_CREATED:
      return Object.assign({}, state, {
        isLoading: false,
        errors: action.errors
      });

    case types.DEBUG_CREATE_AMPHIRO:
      return Object.assign({}, state, {
        isLoading: true,
        errors: null
      });

    case types.DEBUG_AMPHIRO_CREATED:
      return Object.assign({}, state, {
        isLoading: false,
        errors: action.errors
      });

    case types.DEBUG_AMPHIRO_DATA_GENERATE_REQUEST:
      return Object.assign({}, state, {
        isLoading: true,
        errors: null
      });

    case types.DEBUG_AMPHIRO_DATA_GENERATED:
      return Object.assign({}, state, {
        isLoading: false,
        errors: action.errors
      });

    case types.USER_RECEIVED_LOGOUT:
      return Object.assign({}, state, {
        isLoading: false,
        errors: null
      });

    case types.DEBUG_SET_TIMEZONE:
      return Object.assign({}, state, {
        timezone: action.timezone
      });

    case types.DEBUG_SET_ERRORS:
      return Object.assign({}, state, {
        errors: action.errors
      });

    case types.DEBUG_GET_FEATURES:
      var features = action.timeline ? action.timeline.getFeatures(action.timestamp, action.label) : null;

      return Object.assign({}, state, {
        features: features
      });

    default:
      return state || initialState;
  }
};

module.exports = admin;

},{"../constants/ActionTypes":571}],618:[function(require,module,exports){
'use strict';

var types = require('../constants/FavouritesActionTypes');

var _createMapInitialState = function _createMapInitialState(interval) {
  return {
    interval: null,
    query: null,
    areas: null,
    meters: null,
    devices: null,
    timeline: null,
    features: null,
    favourite: null
  };
};

var initialState = {
  isLoading: false,
  isActiveFavourite: false,
  favourites: null,
  showSelected: false,
  selectedFavourite: null,
  showDeleteMessage: false,
  favouriteToBeDeleted: null,
  map: _createMapInitialState(),
  features: null,
  draw: false,
  finished: null,
  data: null
};

var _extractTimeline = function _extractTimeline(meters, areas) {
  var timeline = {},
      timestamp,
      label,
      area,
      min = NaN,
      max = NaN;

  for (var m = 0; m < meters.length; m++) {
    var meter = meters[m];

    for (var p = 0; p < meter.points.length; p++) {
      var point = meter.points[p];

      timeline[point.timestamp] = timeline[point.timestamp] || {};
      timestamp = timeline[point.timestamp];

      timestamp[meter.label] = timestamp[meter.label] || {};
      label = timestamp[meter.label];

      label[meter.areaId] = label[meter.areaId] || 0;
      label[meter.areaId] += point.volume.SUM;
    }
  }

  for (timestamp in timeline) {
    for (label in timeline[timestamp]) {
      for (area in timeline[timestamp][label]) {
        var value = timeline[timestamp][label][area];
        if (isNaN(min) || min > value) {
          min = value;
        }
        if (isNaN(max) || max < value) {
          max = value;
        }
      }
    }
  }

  timeline.min = min;
  timeline.max = max;

  timeline.getAreas = function () {
    return areas;
  };

  timeline.getTimestamps = function () {
    var values = [];
    for (var timestamp in this) {
      var value = Number(timestamp);
      if (!isNaN(value)) {
        values.push(value);
      }
    }

    return values.sort(function (t1, t2) {
      if (t1 < t2) {
        return -1;
      }
      if (t1 > t2) {
        return 1;
      }
      return 0;
    });
  };

  timeline.getFeatures = function (timestamp, label) {

    var geojson = {
      type: 'FeatureCollection',
      features: [],
      crs: {
        type: 'name',
        properties: {
          name: 'urn:ogc:def:crs:OGC:1.3:CRS84'
        }
      }
    };

    if (!timestamp) {
      var timestamps = this.getTimestamps();
      if (timestamps.length > 0) {
        timestamp = timestamps[0];
      } else {
        return geojson;
      }
    }
    if (!label) {
      if (Object.keys(this[timestamp])) {
        label = Object.keys(this[timestamp])[0];
      } else {
        return geojson;
      }
    }

    if (!this[timestamp]) {
      return geojson;
    }
    var instance = this[timestamp][label];

    if (!instance) {
      return geojson;
    }

    var areas = this.getAreas();

    for (var index in instance) {
      geojson.features.push({
        'type': 'Feature',
        'geometry': areas[index].geometry,
        'properties': {
          'label': areas[index].label,
          'value': instance[index]
        }
      });
    }

    return geojson;
  };

  return timeline;
};

var mapReducer = function mapReducer(state, action) {
  switch (action.type) {
    case types.FAVOURITES_TIMELINE_REQUEST:
      return Object.assign({}, state, {
        query: action.query,
        areas: null,
        meters: null,
        devices: null,
        timeline: null,
        features: null,
        index: 0
      });
    case types.FAVOURITES_TIMELINE_RESPONSE:
      if (action.success) {
        var sourceData = state.query.query.source == 'METER' ? action.data.meters : action.data.devices;

        return Object.assign({}, state, {
          areas: action.data.areas,
          meters: action.data.meters,
          devices: action.data.devices,
          timeline: _extractTimeline(sourceData, action.data.areas),
          features: null
        });
      }

      return Object.assign({}, state, {
        areas: null,
        meters: null,
        devices: null,
        regions: null,
        features: null
      });
    case types.FAVOURITES_GET_FEATURES:
      var features = state.timeline ? state.timeline.getFeatures(action.timestamp, action.label) : null;

      return Object.assign({}, state, {
        features: features,
        index: action.index
      });

    default:
      return state || _createMapInitialState();
  }
};

var favourites = function favourites(state, action) {
  switch (action.type) {
    case types.FAVOURITES_SET_TIMEZONE:
      return Object.assign({}, state, {
        timezone: action.timezone
      });
    case types.FAVOURITES_REQUEST_QUERIES:
      return Object.assign({}, state, {
        isLoading: true
      });
    case types.FAVOURITES_RECEIVE_QUERIES:
      return Object.assign({}, state, {
        isLoading: false,
        favourites: action.favourites
      });
    case types.FAVOURITES_TIMELINE_REQUEST:
      return Object.assign({}, state, {
        map: mapReducer(state.map, action),
        population: action.population
      });
    case types.FAVOURITES_TIMELINE_RESPONSE:
      return Object.assign({}, state, {
        isLoading: false,
        map: mapReducer(state.map, action)
      });
    case types.FAVOURITES_CHART_REQUEST:
      return Object.assign({}, state, {
        data: null,
        draw: true,
        finished: false
      });
    case types.FAVOURITES_CHART_RESPONSE:
      return Object.assign({}, state, {
        draw: true,
        finished: action.timestamp,
        data: action.data
      });
    case types.FAVOURITES_GET_FEATURES:
      return Object.assign({}, state, {
        isLoading: false,
        map: mapReducer(state.map, action)
      });
    case types.FAVOURITES_OPEN_SELECTED:
      return Object.assign({}, state, {
        showSelected: true,
        selectedFavourite: action.selectedFavourite
      });
    case types.FAVOURITES_CLOSE_SELECTED:
      return Object.assign({}, state, {
        isActiveFavourite: false,
        showSelected: false,
        selectedFavourite: null,
        finished: null,
        data: null
      });
    case types.FAVOURITES_SET_ACTIVE_FAVOURITE:
      return Object.assign({}, state, {
        isActiveFavourite: true,
        selectedFavourite: action.selectedFavourite
      });
    case types.FAVOURITES_ADD_FAVOURITE_REQUEST:
      return Object.assign({}, state, {
        isLoading: true
      });
    case types.FAVOURITES_ADD_FAVOURITE_RESPONSE:
      return Object.assign({}, state, {
        isLoading: false
      });
    case types.FAVOURITES_DELETE_QUERY_REQUEST:
      return Object.assign({}, state, {
        isLoading: true,
        showDeleteMessage: true,
        favouriteToBeDeleted: action.favouriteToBeDeleted
      });
    case types.FAVOURITES_DELETE_QUERY_RESPONSE:
      return Object.assign({}, state, {
        isLoading: false,
        showDeleteMessage: false,
        isActiveFavourite: false,
        showSelected: false,
        selectedFavourite: null
      });
    case types.FAVOURITES_PIN_REQUEST:
      return Object.assign({}, state, {
        isLoading: true
      });
    case types.FAVOURITES_PIN_RESPONSE:
      return Object.assign({}, state, {
        isLoading: false
      });
    case types.FAVOURITES_UNPIN_REQUEST:
      return Object.assign({}, state, {
        isLoading: true
      });
    case types.FAVOURITES_UNPIN_RESPONSE:
      return Object.assign({}, state, {
        isLoading: false
      });
    case types.FAVOURITES_CONFIRM_DELETE_QUERY:
      return Object.assign({}, state, {
        isLoading: true
      });
    case types.FAVOURITES_CANCEL_DELETE_QUERY:
      return Object.assign({}, state, {
        isLoading: false,
        showDeleteMessage: false
      });
    case types.FAVOURITES_GET_LAYOUT_REQUEST:
      return Object.assign({}, state, {
        isLoading: true
      });
    case types.FAVOURITES_GET_LAYOUT_RESPONSE:
      return Object.assign({}, state, {
        isLoading: false,
        savedLayout: action.savedLayout
      });
    default:
      return state || initialState;
  }
};

module.exports = favourites;

},{"../constants/FavouritesActionTypes":577}],619:[function(require,module,exports){
'use strict';

var moment = require('moment');
var types = require('../constants/ForecastingActionTypes');

var _createInitialState = function _createInitialState() {
  return {
    isLoading: false,
    interval: [moment().subtract(60, 'day'), moment().endOf('month')],
    ranges: {
      'Last 7 Days': [moment().subtract(6, 'days'), moment()],
      'Last 30 Days': [moment().subtract(29, 'days'), moment()],
      'This Month': [moment().startOf('month'), moment().endOf('month')],
      'Last Month': [moment().subtract(1, 'month').startOf('month'), moment().subtract(1, 'month').endOf('month')]
    },
    query: null,
    groupSeries: null,
    userSeries: null,
    group: null,
    user: null
  };
};

var _extractFeatures = function _extractFeatures(groups) {
  var geojson = {
    type: 'FeatureCollection',
    features: [],
    crs: {
      type: 'name',
      properties: {
        name: 'urn:ogc:def:crs:OGC:1.3:CRS84'
      }
    }
  };

  groups = groups || [];

  for (var index in groups) {
    if (groups[index].location) {
      var meter = groups[index].hasOwnProperty('meter') ? groups[index].meter : null;

      geojson.features.push({
        'type': 'Feature',
        'geometry': groups[index].location,
        'properties': {
          'groupKey': groups[index].id,
          'deviceKey': meter.key,
          'name': groups[index].fullname,
          'address': groups[index].address,
          'meter': {
            'key': meter.key,
            'serial': meter.serial
          }
        }
      });
    }
  }

  return geojson;
};

var _createInitialGroupState = function _createInitialGroupState() {
  return {
    groups: [],
    filtered: [],
    features: null
  };
};

var _filterRows = function _filterRows(rows, type, name) {
  var filteredRows = rows.filter(function (r) {
    if (name) {
      if (r.text.indexOf(name) === -1) {
        return false;
      }
    }
    if (type && type !== 'SET') {
      return r.cluster == type;
    }
    if (type && type === 'SET') {
      return r.type == type;
    }
    return true;
  });
  return filteredRows;
};

var dataReducer = function dataReducer(state, action) {

  switch (action.type) {
    case types.FORECASTING_GROUP_CATALOG_FILTER_TYPE:
      var filteredRows = _filterRows(state || [], action.groupType, action.name);

      return {
        groups: state || [],
        filtered: filteredRows,
        features: _extractFeatures(state || [])
      };

    case types.FORECASTING_GROUP_CATALOG_REQUEST:
      return Object.assign({}, state, {
        isLoading: true
      });
    case types.FORECASTING_GROUP_CATALOG_RESPONSE:

      if (action.success === true) {
        action.groups.forEach(function (g) {
          if (g.type == 'SEGMENT') {
            g.text = g.cluster + ': ' + g.name;
          } else {
            g.text = g.name;
          }
        });
        action.groups.sort(function (a, b) {
          if (a.text < b.text) {
            return -1;
          }
          if (a.text > b.text) {
            return 1;
          }
          return 0;
        });
        return {
          total: action.total || 0,
          index: action.index || 0,
          size: action.size || 10,
          groups: action.groups || [],
          filtered: _filterRows(action.groups || [], action.groupType, action.name),
          features: _extractFeatures(action.groups || [])
        };
      } else {

        return {
          total: 0,
          index: 0,
          size: 10,
          groups: [],
          filtered: [],
          features: _extractFeatures([])
        };
      }

    default:
      return state || _createInitialGroupState();
  }
};

var admin = function admin(state, action) {
  switch (action.type) {
    case types.FORECASTING_GROUP_CHART_DATA_REQUEST:
      return Object.assign({}, state, {
        isLoading: true,
        groupSeries: null,
        groupDraw: true,
        groupFinished: false,
        query: action.query
      });

    case types.FORECASTING_GROUP_CHART_DATA_RESPONSE:
      if (action.success) {
        return Object.assign({}, state, {
          isLoading: false,
          groupDraw: true,
          groupFinished: action.timestamp,
          groupSeries: action.data
        });
      }

      return Object.assign({}, state, {
        isLoading: false,
        groupDraw: true,
        groupFinished: action.timestamp,
        groupSeries: null
      });
    case types.FORECASTING_USER_DATA_REQUEST:

      return Object.assign({}, state, {
        isLoading: true,
        userSeries: null,
        userDraw: true,
        userFinished: false
      });

    case types.FORECASTING_USER_DATA_RESPONSE:
      if (action.success) {
        return Object.assign({}, state, {
          isLoading: false,
          userDraw: true,
          userFinished: action.timestamp,
          userSeries: action.data
        });
      }
      return Object.assign({}, state, {
        isLoading: false,
        userDraw: true,
        userFinished: action.timestamp,
        userSeries: null
      });
    case types.FORECASTING_GROUP_CATALOG_REQUEST:
      return Object.assign({}, state, {
        isLoading: false
      });
    case types.FORECASTING_GROUP_CATALOG_RESPONSE:
      return Object.assign({}, state, {
        isLoading: false,
        groups: dataReducer(state.data, action)
      });
    case types.FORECASTING_GROUP_CATALOG_FILTER_TYPE:
      action.name = state.query.name;

      var groups = dataReducer(state.groups.groups, action);
      return Object.assign({}, state, {
        populationType: action.groupType === 'UNDEFINED' ? null : action.groupType,
        groups: groups,
        group: null
      });
    case types.FORECASTING_SET_USER:
      return Object.assign({}, state, {
        user: action.user ? action.user : null,
        userSeries: action.user ? state.userSeries : null
      });
    case types.FORECASTING_SET_GROUP:
      return Object.assign({}, state, {
        group: action.group
      });
    case types.FORECASTING_SET_INTERVAL:
      return Object.assign({}, state, {
        interval: action.interval
      });
    case types.FORECASTING_USER_RECEIVED_LOGOUT:
      return _createInitialState();

    default:
      return state || _createInitialState();
  }
};

module.exports = admin;

},{"../constants/ForecastingActionTypes":578,"moment":"moment"}],620:[function(require,module,exports){
'use strict';

var moment = require('moment');
var types = require('../constants/GroupCatalogActionTypes');

var _require = require('../helpers/common'),
    extractFeatures = _require.extractFeatures;

var _createInitialGroupState = function _createInitialGroupState() {
  return {
    groups: [],
    filtered: [],
    features: null
  };
};

var _filterRows = function _filterRows(rows, type, name) {
  return rows.filter(function (r) {
    if (name) {
      if (r.text.indexOf(name) === -1) {
        return false;
      }
    }
    if (type) {
      return r.type == type;
    }

    return true;
  });
};

var _createInitialeState = function _createInitialeState() {
  return {
    isLoading: false,
    query: {
      type: null,
      name: null,
      geometry: null
    },
    data: _createInitialGroupState(),
    interval: [moment().subtract(30, 'days'), moment()],
    metric: 'AVERAGE',
    charts: {}
  };
};

var dataReducer = function dataReducer(state, action) {
  switch (action.type) {
    case types.GROUP_CATALOG_ADD_FAVORITE_RESPONSE:
    case types.GROUP_CATALOG_REMOVE_FAVORITE_RESPONSE:
      var oldState = state.groups || [],
          newState = [];

      oldState.forEach(function (g) {
        if (g.key === action.groupKey) {
          g.favorite = action.favorite;
        }
        newState.push(g);
      });

      return Object.assign({}, state, {
        groups: newState
      });

    case types.GROUP_CATALOG_FILTER_NAME:
    case types.GROUP_CATALOG_FILTER_TYPE:
    case types.GROUP_CATALOG_FILTER_CLEAR:
      return {
        groups: state.groups || [],
        filtered: _filterRows(state.groups || [], action.groupType, action.name),
        features: extractFeatures(state.groups || [])
      };

    case types.GROUP_CATALOG_RESPONSE:
      if (action.success === true) {
        action.groups.forEach(function (g) {
          if (g.type == 'SEGMENT') {
            g.text = g.cluster + ': ' + g.name;
            g.typeLabel = 'GROUP';
          } else {
            g.text = g.name;
            g.typeLabel = g.type;
          }
        });

        action.groups.sort(function (a, b) {
          if (a.text < b.text) {
            return -1;
          }

          if (a.text > b.text) {
            return 1;
          }

          return 0;
        });

        return {
          total: action.total || 0,
          index: action.index || 0,
          size: action.size || 10,
          groups: action.groups || [],
          filtered: _filterRows(action.groups || [], action.groupType, action.name),
          features: extractFeatures(action.groups || [])
        };
      } else {
        return {
          total: 0,
          index: 0,
          size: 10,
          groups: [],
          filtered: [],
          features: extractFeatures([])
        };
      }

    default:
      return state || _createInitialGroupState();
  }
};

var reducer = function reducer(state, action) {
  switch (action.type) {
    case types.GROUP_CATALOG_INDEX_CHANGE:

      return Object.assign({}, state);

    case types.GROUP_CATALOG_REQUEST:
    case types.GROUP_CATALOG_DELETE_REQUEST:
    case types.GROUP_CATALOG_ADD_FAVORITE_REQUEST:
    case types.GROUP_CATALOG_REMOVE_FAVORITE_REQUEST:

      return Object.assign({}, state, {
        isLoading: true
      });

    case types.GROUP_CATALOG_RESPONSE:
      action.groupType = state.query.type;
      action.name = state.query.name;

      return Object.assign({}, state, {
        isLoading: false,
        data: dataReducer(state.data, action)
      });

    case types.GROUP_CATALOG_ADD_FAVORITE_RESPONSE:
    case types.GROUP_CATALOG_REMOVE_FAVORITE_RESPONSE:

      if (action.success === true) {
        return Object.assign({}, state, {
          isLoading: false,
          data: dataReducer(state.data, action)
        });
      }
      return Object.assign({}, state, {
        isLoading: false
      });

    case types.GROUP_CATALOG_DELETE_RESPONSE:

      return Object.assign({}, state, {
        isLoading: false
      });

    case types.GROUP_CATALOG_CHART_REQUEST:
      var charts = state.charts;
      charts[action.groupKey] = { groupSeries: null, query: action.query };

      return Object.assign({}, state, {
        isLoading: true,
        charts: charts,
        groupFinished: false
      });

    case types.GROUP_CATALOG_CHART_RESPONSE:
      var groupCharts = state.charts;
      if (action.success) {
        groupCharts[action.groupKey] = Object.assign(groupCharts[action.groupKey], { groupSeries: action.dataChart });

        return Object.assign({}, state, {
          isLoading: false,
          charts: groupCharts,
          groupFinished: action.timestamp
        });
      } else {
        groupCharts[action.groupKey] = { groupSeries: null };
        return Object.assign({}, state, {
          isLoading: false,
          charts: groupCharts,
          groupFinished: action.timestamp
        });
      }

    case types.GROUP_CATALOG_CLEAR_CHART:
      return Object.assign({}, state, {
        isLoading: false,
        charts: {},
        groupFinished: null
      });

    case types.GROUP_CATALOG_FILTER_NAME:
      action.groupType = state.query.type;

      return Object.assign({}, state, {
        query: Object.assign({}, state.query, {
          name: action.name || null
        }),
        data: dataReducer(state.data, action)
      });

    case types.GROUP_CATALOG_FILTER_TYPE:
      action.name = state.query.name;

      return Object.assign({}, state, {
        query: Object.assign({}, state.query, {
          type: action.groupType === 'UNDEFINED' ? null : action.groupType
        }),
        data: dataReducer(state.data, action)
      });

    case types.GROUP_CATALOG_FILTER_CLEAR:
      return Object.assign({}, state, {
        query: Object.assign({}, state.query, {
          name: null,
          type: null
        }),
        data: dataReducer(state.data, action)
      });

    case types.GROUP_CATALOG_SET_METRIC:
      return Object.assign({}, state, {
        metric: action.metric || 'AVERAGE'
      });

    default:
      return state || _createInitialeState();
  }
};

module.exports = reducer;

},{"../constants/GroupCatalogActionTypes":580,"../helpers/common":595,"moment":"moment"}],621:[function(require,module,exports){
'use strict';

var types = require('../constants/GroupActionTypes');

var initialState = {
  isLoading: false,
  groupInfo: null,
  currentMembers: null
};

var createMembersRows = function createMembersRows(membersInfo) {
  var members = {};
  membersInfo.forEach(function (m) {
    var member = {
      key: m.key,
      username: m.username,
      fullName: m.fullName,
      createdOn: new Date(m.createdOn),
      email: m.username,
      favourite: m.favourite
    };
    members[m.key] = member;
  });

  return members;
};

var group = function group(state, action) {

  switch (action.type) {

    case types.GROUP_REQUEST_GROUP:
      return Object.assign({}, state, {
        isLoading: true
      });

    case types.GROUP_RECEIVE_GROUP_INFO:
      return Object.assign({}, state, {
        success: action.success,
        errors: action.errors,
        groupInfo: {
          name: action.groupInfo.name,
          description: action.groupInfo.name,
          createdOn: new Date(action.groupInfo.creationDateMils),
          country: action.groupInfo.country,
          size: action.groupInfo.numberOfMembers
        }
      });

    case types.GROUP_RECEIVE_GROUP_MEMBERS:
      return Object.assign({}, state, {
        isLoading: false,
        success: action.success,
        errors: action.errors,
        currentMembers: createMembersRows(action.members)
      });

    case types.GROUP_RESET_COMPONENT:
      return Object.assign({}, state, {
        isLoading: false,
        groupInfo: null,
        currentMembers: null
      });

    case types.ADD_FAVORITE_REQUEST:
    case types.REMOVE_FAVORITE_REQUEST:
      return Object.assign({}, state, {
        isLoading: true
      });

    case types.ADD_FAVORITE_RESPONSE:
    case types.REMOVE_FAVORITE_RESPONSE:
      if (action.success === true) {
        for (var key in state.currentMembers) {
          if (key === action.key) {
            state.currentMembers[key].favourite = action.favourite;
          }
        }
        return Object.assign({}, state, {
          isLoading: false,
          currentMembers: state.currentMembers || []
        });
      } else {
        return Object.assign({}, state, {
          isLoading: false
        });
      }

    default:
      return state || initialState;
  }
};

module.exports = group;

},{"../constants/GroupActionTypes":579}],622:[function(require,module,exports){
'use strict';

var types = require('../constants/ActionTypes');

var initialState = {
  locale: null,
  isLoading: false,
  data: {}
};

var i18n = function i18n(state, action) {
  switch (action.type) {
    case types.LOCALE_REQUEST_MESSAGES:
      return Object.assign({}, state, {
        isLoading: true
      });

    case types.LOCALE_RECEIVED_MESSAGES:
      if (document) {
        document.cookie = 'daiad-utility-locale=' + action.locale + '; max-age=' + 60 * 60 * 24 * 365 * 10 + '; path=/utility/';
      }

      var newState = Object.assign({}, {
        isLoading: false,
        data: Object.keys(state.data).reduce(function (next, locale) {
          next[locale] = state.data[locale];

          return next;
        }, {}) || {},
        locale: action.locale
      });

      newState.data[action.locale] = {
        messages: action.messages,
        lastUpdated: new Date()
      };

      return newState;

    default:
      return state || initialState;
  }
};

module.exports = i18n;

},{"../constants/ActionTypes":571}],623:[function(require,module,exports){
'use strict';

var _require = require('redux'),
    combineReducers = _require.combineReducers;

var _require2 = require('react-router-redux'),
    routerReducer = _require2.routerReducer;

var i18n = require('./i18n');
var session = require('./session');
var dashboard = require('./dashboard');
var map = require('./map');
var forecasting = require('./forecasting');
var group = require('./group');
var groupCatalog = require('./group-catalog');
var user = require('./user');
var password = require('./password');
var userCatalog = require('./user-catalog');
var favourites = require('./favourites');
var mode_management = require('./mode_management');
var admin = require('./admin');
var logging = require('./logging');
var alerts = require('./alerts');
var messages = require('./messages');
var announcements = require('./announcements');
var query = require('./query');
var scheduler = require('./scheduler');
var debug = require('./debug');
var reports = require('./reports');
var config = require('./config');
var charting = require('./charting');
var overview = require('./overview');
var trials = require('./trials');
var dataExport = require('./data-export');
var savings = require('./savings');

var budget = require('./budget');
var viewport = require('./viewport');

var rootReducer = combineReducers({
  i18n: i18n,
  viewport: viewport,
  config: config,
  session: session,
  dashboard: dashboard,
  forecasting: forecasting,
  map: map,
  group: group,
  groupCatalog: groupCatalog,
  user: user,
  password: password,
  userCatalog: userCatalog,
  favourites: favourites,
  mode_management: mode_management,
  admin: admin,
  alerts: alerts,
  messages: messages,
  announcements: announcements,
  query: query,
  scheduler: scheduler,
  debug: debug,
  logging: logging,
  routing: routerReducer,
  reports: reports,
  charting: charting,
  overview: overview,
  trials: trials,
  dataExport: dataExport,
  savings: savings,
  budget: budget
});

module.exports = rootReducer;

},{"./admin":605,"./alerts":606,"./announcements":607,"./budget":608,"./charting":609,"./config":614,"./dashboard":615,"./data-export":616,"./debug":617,"./favourites":618,"./forecasting":619,"./group":621,"./group-catalog":620,"./i18n":622,"./logging":624,"./map":625,"./messages":626,"./mode_management":627,"./overview":628,"./password":629,"./query":630,"./reports":633,"./savings":634,"./scheduler":635,"./session":636,"./trials":637,"./user":639,"./user-catalog":638,"./viewport":640,"react-router-redux":"react-router-redux","redux":"redux"}],624:[function(require,module,exports){
'use strict';

var types = require('../constants/LoggingActionTypes');

var createInitialeState = function createInitialeState() {
  return {
    isLoading: false,
    query: {
      index: 0,
      size: 10,
      startDate: null,
      endDate: null,
      level: null,
      account: null
    },
    data: {
      total: 0,
      index: 0,
      size: 10,
      events: null
    }
  };
};

var logging = function logging(state, action) {
  switch (action.type) {
    case types.LOG_EVENT_CHANGE_INDEX:

      return Object.assign({}, state, {
        isLoading: true,
        query: Object.assign({}, state.query, {
          index: action.index < 0 ? 0 : action.index
        })
      });

    case types.LOG_EVENT_FILTER_ACCOUNT:

      return Object.assign({}, state, {
        query: Object.assign({}, state.query, {
          account: action.account || '',
          index: 0
        })
      });

    case types.LOG_EVENT_FILTER_LEVEL:

      return Object.assign({}, state, {
        query: Object.assign({}, state.query, {
          level: action.level || null,
          index: 0
        })
      });

    case types.LOG_EVENT_FILTER_CLEAR:

      return Object.assign({}, state, {
        query: Object.assign({}, state.query, {
          account: null,
          level: null
        })
      });

    case types.LOG_EVENT_REQUEST_INIT:
      return Object.assign({}, state, {
        isLoading: true
      });

    case types.LOG_EVENT_REQUEST_COMPLETE:
      if (action.success === true) {
        action.events.forEach(function (e) {
          if (!e.account) {
            e.account = '-';
          }
        });
        return Object.assign({}, state, {
          isLoading: false,
          data: {
            total: action.total || 0,
            index: action.index || 0,
            size: action.size || 10,
            events: action.events || []
          }
        });
      } else {
        return Object.assign({}, state, {
          isLoading: false,
          data: {
            total: 0,
            index: 0,
            size: 10,
            events: []
          }
        });
      }

    case types.USER_RECEIVED_LOGOUT:
      return createInitialeState();

    default:
      return state || createInitialeState();
  }
};

module.exports = logging;

},{"../constants/LoggingActionTypes":582}],625:[function(require,module,exports){
'use strict';

var moment = require('moment');

var types = require('../constants/MapActionTypes');

var _createMapInitialState = function _createMapInitialState(interval) {
  return {
    interval: interval,
    query: null,
    areas: null,
    meters: null,
    devices: null,
    timeline: null,
    features: null,
    favourite: null
  };
};

var _createInitialGroupState = function _createInitialGroupState() {
  return {
    groups: [],
    filtered: [],
    features: null
  };
};

var _createChartInitialState = function _createChartInitialState(interval) {
  return {
    interval: interval,
    query: null,
    series: null
  };
};

var _createInitialState = function _createInitialState() {
  var interval = [moment().subtract(14, 'day'), moment()];

  return {
    isLoading: false,
    interval: interval,
    population: null,
    source: 'METER',
    geometry: null,
    timezone: null,
    ranges: {
      'Last 7 Days': [moment().subtract(6, 'days'), moment()],
      'Last 30 Days': [moment().subtract(29, 'days'), moment()],
      'This Month': [moment().startOf('month'), moment().endOf('month')],
      'Last Month': [moment().subtract(1, 'month').startOf('month'), moment().subtract(1, 'month').endOf('month')]
    },
    map: _createMapInitialState(interval),
    chart: _createChartInitialState(interval),
    editor: 'interval',
    isBeingEdited: false,
    defaultFavouriteValues: {
      interval: false,
      source: false,
      population: false,
      spatial: false
    },
    metersLocations: null
  };
};

var _extractTimeline = function _extractTimeline(meters, areas) {
  var timeline = {},
      timestamp,
      label,
      area,
      min = NaN,
      max = NaN;

  for (var m = 0; m < meters.length; m++) {
    var meter = meters[m];

    for (var p = 0; p < meter.points.length; p++) {
      var point = meter.points[p];

      timeline[point.timestamp] = timeline[point.timestamp] || {};
      timestamp = timeline[point.timestamp];

      timestamp[meter.label] = timestamp[meter.label] || {};
      label = timestamp[meter.label];

      label[meter.areaId] = label[meter.areaId] || 0;
      label[meter.areaId] += point.volume.SUM;
    }
  }

  for (timestamp in timeline) {
    for (label in timeline[timestamp]) {
      for (area in timeline[timestamp][label]) {
        var value = timeline[timestamp][label][area];
        if (isNaN(min) || min > value) {
          min = value;
        }
        if (isNaN(max) || max < value) {
          max = value;
        }
      }
    }
  }

  timeline.min = Math.round(min);
  timeline.max = Math.round(max);

  timeline.getAreas = function () {
    return areas;
  };

  timeline.getTimestamps = function () {
    var values = [];
    for (var timestamp in this) {
      var value = Number(timestamp);
      if (!isNaN(value)) {
        values.push(value);
      }
    }

    return values.sort(function (t1, t2) {
      if (t1 < t2) {
        return -1;
      }
      if (t1 > t2) {
        return 1;
      }
      return 0;
    });
  };

  timeline.getFeatures = function (timestamp, label) {
    var geojson = {
      type: 'FeatureCollection',
      features: [],
      crs: {
        type: 'name',
        properties: {
          name: 'urn:ogc:def:crs:OGC:1.3:CRS84'
        }
      }
    };

    if (!timestamp) {
      var timestamps = this.getTimestamps();
      if (timestamps.length > 0) {
        timestamp = timestamps[0];
      } else {
        return geojson;
      }
    }
    if (!label) {
      if (Object.keys(this[timestamp])) {
        label = Object.keys(this[timestamp])[0];
      } else {
        return geojson;
      }
    }

    if (!this[timestamp]) {
      return geojson;
    }
    var instance = this[timestamp][label];

    if (!instance) {
      return geojson;
    }

    var areas = this.getAreas();

    for (var index in instance) {
      geojson.features.push({
        'type': 'Feature',
        'geometry': areas[index].geometry,
        'properties': {
          'label': areas[index].label,
          'value': instance[index]
        }
      });
    }

    return geojson;
  };

  return timeline;
};

var _extractSeries = function _extractSeries(interval, data, label) {
  var d;
  var series = [];

  var ref = interval[1].clone();
  var days = interval[1].diff(interval[0], 'days') + 1;

  if (data.length === 0 || !data[0].points || data[0].points.length === 0) {
    for (d = days; d > 0; d--) {
      series.push({
        volume: 0,
        date: ref.clone().toDate()
      });

      ref.subtract(1, 'days');
    }
  } else {
    var index = 0;
    var points = data[0].points;

    points.sort(function (p1, p2) {
      return p2.timestamp - p1.timestamp;
    });

    for (d = days; d > 0; d--) {
      if (index === points.length) {
        series.push({
          volume: 0,
          date: ref.clone().toDate()
        });

        ref.subtract(1, 'days');
      } else if (ref.isBefore(points[index].timestamp, 'day')) {
        index++;
      } else if (ref.isAfter(points[index].timestamp, 'day')) {
        series.push({
          volume: 0,
          date: ref.clone().toDate()
        });

        ref.subtract(1, 'days');
      } else if (ref.isSame(points[index].timestamp, 'day')) {
        series.push({
          volume: points[index].volume.SUM,
          date: ref.clone().toDate()
        });

        index++;
        ref.subtract(1, 'days');
      }
    }
  }

  return {
    label: label,
    data: series.reverse()
  };
};

var _extractChartSeries = function _extractChartSeries(interval, data) {
  return {
    meters: _extractSeries(interval, data.meters, 'Meter'),
    devices: _extractSeries(interval, data.devices, 'Amphiro B1')
  };
};

var _metersToFeatureCollection = function _metersToFeatureCollection(meters) {
  return {
    type: 'FeatureCollection',
    features: meters ? meters.map(function (m) {
      return {
        'type': 'Feature',
        'geometry': m.location,
        'properties': {
          'key': m.label,
          'serial': m.serial,
          'registeredOn': m.registeredOn
        }
      };
    }) : [],
    crs: {
      type: 'name',
      properties: {
        name: 'urn:ogc:def:crs:OGC:1.3:CRS84'
      }
    }
  };
};

var mapReducer = function mapReducer(state, action) {
  switch (action.type) {
    case types.MAP_TIMELINE_REQUEST:
      return Object.assign({}, state, {
        query: action.query,
        areas: null,
        meters: null,
        devices: null,
        timeline: null,
        features: null,
        index: 0
      });

    case types.MAP_TIMELINE_RESPONSE:
      if (action.success) {
        var source = state.query.query.source == 'METER' ? action.data.meters : action.data.devices;

        return Object.assign({}, state, {
          areas: action.data.areas,
          meters: action.data.meters,
          devices: action.data.devices,
          timeline: _extractTimeline(source, action.data.areas),
          features: null
        });
      }

      return Object.assign({}, state, {
        areas: null,
        meters: null,
        devices: null,
        regions: null,
        features: null
      });

    case types.MAP_GET_FEATURES:
      var features = state.timeline ? state.timeline.getFeatures(action.timestamp, action.label) : null;

      return Object.assign({}, state, {
        features: features,
        index: action.index
      });

    default:
      return state || _createMapInitialState();
  }
};

var chartReducer = function chartReducer(state, action) {
  switch (action.type) {
    case types.MAP_CHART_REQUEST:
      return Object.assign({}, state, {
        query: action.query,
        series: null
      });

    case types.MAP_CHART_RESPONSE:
      if (action.success) {
        return Object.assign({}, state, {
          series: _extractChartSeries(state.interval, action.data)
        });
      }

      return Object.assign({}, state, {
        series: null
      });

    default:
      return state || _createChartInitialState();
  }
};

var _extractFeatures = function _extractFeatures(groups) {
  var geojson = {
    type: 'FeatureCollection',
    features: [],
    crs: {
      type: 'name',
      properties: {
        name: 'urn:ogc:def:crs:OGC:1.3:CRS84'
      }
    }
  };

  groups = groups || [];

  for (var index in groups) {
    if (groups[index].location) {
      var meter = groups[index].hasOwnProperty('meter') ? groups[index].meter : null;

      geojson.features.push({
        'type': 'Feature',
        'geometry': groups[index].location,
        'properties': {
          'groupKey': groups[index].id,
          'deviceKey': meter.key,
          'name': groups[index].fullname,
          'address': groups[index].address,
          'meter': {
            'key': meter.key,
            'serial': meter.serial
          }
        }
      });
    }
  }

  return geojson;
};

var _filterRows = function _filterRows(rows, type, name) {
  var filteredRows = rows.filter(function (r) {
    if (name) {
      if (r.text.indexOf(name) === -1) {
        return false;
      }
    }
    if (type && type !== 'SET') {
      return r.cluster == type;
    }
    if (type && type === 'SET') {
      return r.type == type;
    }
    return true;
  });
  return filteredRows;
};

var groupReducer = function groupReducer(state, action) {

  switch (action.type) {
    case types.MAP_FILTER_GROUP_BY_TYPE:
      var filteredRows = _filterRows(state || [], action.groupType, action.name);
      return {
        groups: state || [],
        filtered: filteredRows,
        features: _extractFeatures(state || [])
      };
    case types.MAP_SET_GROUP:
      return Object.assign({}, state, {
        group: action.group
      });
    case types.MAP_GROUPS_REQUEST:
      return Object.assign({}, state, {
        isLoading: true
      });
    case types.MAP_GROUPS_RESPONSE:

      if (action.success === true) {
        action.groups.forEach(function (g) {
          if (g.type == 'SEGMENT') {
            g.text = g.cluster + ': ' + g.name;
          } else {
            g.text = g.name;
          }
        });
        action.groups.sort(function (a, b) {
          if (a.text < b.text) {
            return -1;
          }
          if (a.text > b.text) {
            return 1;
          }
          return 0;
        });
        return {
          total: action.total || 0,
          index: action.index || 0,
          size: action.size || 10,
          groups: action.groups || [],
          filtered: _filterRows(action.groups || [], action.groupType, action.name),
          features: _extractFeatures(action.groups || [])
        };
      } else {
        return {
          total: 0,
          index: 0,
          size: 10,
          groups: [],
          filtered: [],
          features: _extractFeatures([])
        };
      }

    default:
      return state || _createInitialGroupState();
  }
};

var map = function map(state, action) {
  switch (action.type) {
    case types.MAP_GROUPS_REQUEST:
      return Object.assign({}, state, {
        isLoading: false
      });
    case types.MAP_GROUPS_RESPONSE:
      return Object.assign({}, state, {
        isLoading: false,
        groups: groupReducer(state.data, action)
      });
    case types.MAP_FILTER_GROUP_BY_TYPE:
      var groups = groupReducer(state.groups.groups, action);
      return Object.assign({}, state, {
        populationType: action.groupType === 'UNDEFINED' ? null : action.groupType,
        groups: groups,
        group: null
      });
    case types.MAP_SET_GROUP:
      return Object.assign({}, state, {
        group: action.group
      });
    case types.MAP_TIMELINE_REQUEST:
    case types.MAP_CHART_REQUEST:
      return Object.assign({}, state, {
        isLoading: true,
        map: mapReducer(state.map, action),
        chart: chartReducer(state.chart, action),
        population: action.population
      });

    case types.MAP_TIMELINE_RESPONSE:
    case types.MAP_CHART_RESPONSE:
      return Object.assign({}, state, {
        isLoading: false,
        map: mapReducer(state.map, action),
        chart: chartReducer(state.chart, action)
      });

    case types.MAP_GET_FEATURES:
      return Object.assign({}, state, {
        isLoading: false,
        map: mapReducer(state.map, action),
        chart: chartReducer(state.chart, action)
      });

    case types.MAP_SELECT_EDITOR:
      return Object.assign({}, state, {
        editor: action.editor
      });

    case types.MAP_SET_EDITOR_VALUE:
      switch (action.editor) {
        case 'interval':
          return Object.assign({}, state, {
            interval: action.value,
            isBeingEdited: true
          });

        case 'source':
          return Object.assign({}, state, {
            source: action.value,
            isBeingEdited: true
          });

        case 'population':
          var group = action.value;

          switch (group.type) {
            case 'UTILITY':
              return Object.assign({}, state, {
                population: {
                  utility: group.key,
                  label: group.name,
                  type: 'UTILITY'
                },
                isBeingEdited: true
              });
            case 'SEGMENT':
            case 'SET':
              var label = group.name;
              if (group.type === 'SEGMENT') {
                label = group.cluster + ': ' + label;
              }
              return Object.assign({}, state, {
                population: {
                  group: group.key,
                  label: label,
                  type: 'GROUP'
                },
                isBeingEdited: true
              });
          }

          return state;
        case 'spatial':
          return Object.assign({}, state, {
            geometry: action.value,
            isBeingEdited: true
          });
      }

      return state;

    case types.MAP_SET_TIMEZONE:
      return Object.assign({}, state, {
        timezone: action.timezone,
        isBeingEdited: true
      });
    case types.MAP_ADD_FAVOURITE_REQUEST:
      return Object.assign({}, state, {
        isLoading: true
      });
    case types.MAP_ADD_FAVOURITE_RESPONSE:
      return Object.assign({}, state, {
        isLoading: false,
        isBeingEdited: false
      });
    case types.USER_RECEIVED_LOGOUT:
      return _createInitialState();

    case types.MAP_METERS_LOCATIONS_REQUEST:
      return state;

    case types.MAP_METERS_LOCATIONS_RESPONSE:
      if (action.errors) return state;
      return Object.assign({}, state, {
        metersLocations: _metersToFeatureCollection(action.data.meters)
      });

    default:
      return state || _createInitialState();
  }
};

module.exports = map;

},{"../constants/MapActionTypes":584,"moment":"moment"}],626:[function(require,module,exports){
'use strict';

var types = require('../constants/ActionTypes');
var moment = require('moment');

var initialState = {
  isLoading: false,
  messages: null,
  showReceivers: false,
  receivers: null,
  selectedMessage: null,
  editor: 'interval',
  interval: [moment().subtract(14, 'day'), moment()],
  timezone: null,
  population: null,
  ranges: {
    'Last 7 Days': [moment().subtract(6, 'days'), moment()],
    'Last 30 Days': [moment().subtract(29, 'days'), moment()],
    'This Month': [moment().startOf('month'), moment().endOf('month')],
    'Last Month': [moment().subtract(1, 'month').startOf('month'), moment().subtract(1, 'month').endOf('month')]
  }
};

var messages = function messages(state, action) {
  switch (action.type) {
    case types.MESSAGES_REQUESTED_STATISTICS:
      return Object.assign({}, state, {
        isLoading: true
      });
    case types.MESSAGES_RECEIVED_STATISTICS:
      return Object.assign({}, state, {
        isLoading: false,
        showReceivers: false,
        messages: action.messages
      });
    case types.MESSAGES_SHOW_RECEIVERS:
      return Object.assign({}, state, {
        showReceivers: true
      });
    case types.MESSAGES_REQUESTED_RECEIVERS:
      return Object.assign({}, state, {
        isLoading: true
      });
    case types.MESSAGES_RECEIVED_RECEIVERS:
      return Object.assign({}, state, {
        isLoading: false,
        receivers: action.receivers,
        showReceivers: true
      });
    case types.MESSAGES_SELECTED_MESSAGE:
      return Object.assign({}, state, {
        selectedMessage: action.selectedMessage
      });
    case types.MESSAGES_SET_EDITOR_VALUE:
      switch (action.editor) {
        case 'interval':
          return Object.assign({}, state, {
            interval: action.value
          });
        case 'population':
          var group = action.value;

          switch (group.type) {
            case 'UTILITY':
              return Object.assign({}, state, {
                population: {
                  utility: group.key,
                  label: group.name,
                  type: 'UTILITY'
                }
              });
            case 'SEGMENT':
            case 'SET':
              var label = group.name;
              if (group.type === 'SEGMENT') {
                label = group.cluster + ': ' + label;
              }
              return Object.assign({}, state, {
                population: {
                  group: group.key,
                  label: label,
                  type: 'GROUP'
                }
              });
          }

          return state;
        case 'spatial':
          return Object.assign({}, state, {
            geometry: action.value
          });
      }

      return state;
    case types.MESSAGES_RETURN_BACK:
      return Object.assign({}, state, {
        showReceivers: false,
        isLoading: false,
        selectedMessage: null,
        receivers: null
      });
    case types.MESSAGES_SELECT_EDITOR:
      return Object.assign({}, state, {
        editor: action.editor
      });
    case types.MESSAGES_SET_TIMEZONE:
      return Object.assign({}, state, {
        timezone: action.timezone
      });
    default:
      return state || initialState;
  }
};

module.exports = messages;

},{"../constants/ActionTypes":571,"moment":"moment"}],627:[function(require,module,exports){
'use strict';

var types = require('../constants/ActionTypes');
var Helpers = require('../helpers/array-funcs');
var Schema = require('../constants/ModeManagementTableSchema');

var initialState = {
  isLoading: false,
  filterStatus: {},
  nameFilter: '',
  userToDecativate: {},
  modal: {
    show: false
  },
  changedModes: [],
  filterOptions: null,
  users: null,
  modes: null,
  activePage: 0
};

var computeModesState = function computeModesState(data) {
  var modesState = {};
  var propertyNames = Helpers.pluck(Helpers.pickQualiffiedOnEquality(data.fields, 'type', 'property'), 'name');

  var rowIds = Helpers.pluck(data.rows, 'id');

  for (var i = 0, len = rowIds.length; i < len; i++) {
    var modeEntry = {};
    modeEntry.active = data.rows[i].active;
    modeEntry.modes = {};
    for (var p = 0, len2 = propertyNames.length; p < len2; p++) {
      var mode = {
        value: data.rows[i][propertyNames[p]],
        draft: false
      };
      modeEntry.modes[propertyNames[p]] = mode;
    }
    modesState[rowIds[i]] = modeEntry;
  }
  return modesState;
};

var mode_management = function mode_management(state, action) {
  var filterStatus = void 0;

  switch (action.type) {

    case types.MODEMNG_FILTER_ADD:
      filterStatus = Object.assign({}, state.filterStatus);
      filterStatus[action.filter.filter] = {
        name: action.filter.filter,
        value: action.filter.value,
        label: action.filter.label,
        icon: action.filter.icon
      };
      return Object.assign({}, state, {
        isLoading: true,
        filterStatus: filterStatus
      });

    case types.MODEMNG_FILTER_REMOVE:
      filterStatus = Object.assign({}, state.filterStatus);
      delete filterStatus[action.filterId];
      return Object.assign({}, state, {
        isLoading: true,
        filterStatus: filterStatus
      });

    case types.MODEMNG_SET_MODAL:
      return Object.assign({}, state, {
        modal: action.modal
      });

    case types.MODEMNG_SET_CHANGED_MODES:
      return Object.assign({}, state, {
        changedModes: action.changedModes
      });

    case types.MODEMNG_SET_MODES:
      return Object.assign({}, state, {
        modes: action.modes
      });

    case types.MODEMNG_SET_ACTIVE_PAGE:
      return Object.assign({}, state, {
        activePage: action.activePage
      });

    case types.MODEMNG_RECEIVED_FILTER_OPTIONS:
      return Object.assign({}, state, {
        filterOptions: action.filterOptions.filterOptions
      });

    case types.MODEMNG_REQUEST_USERS:
      return Object.assign({}, state, {
        isLoading: true
      });

    case types.MODEMNG_RECEIVED_USERS:
      var users = {
        fields: Schema.fields,
        rows: [],
        pager: Schema.pager
      };
      users.rows = action.users.profileSet;
      var modes = computeModesState(users);
      return Object.assign({}, state, {
        isLoading: false,
        users: users,
        modes: modes
      });

    case types.MODEMNG_SAVE_MODE_CHANGES:
      return Object.assign({}, state, {
        isLoading: true
      });

    case types.MODEMNG_DEACTIVATE_USER:
      return Object.assign({}, state, {
        isLoading: true
      });

    case types.MODEMNG_SET_NAME_FILTER:
      return Object.assign({}, state, {
        nameFilter: action.nameFilter,
        isLoading: true
      });

    case types.MODEMNG_MARK_USER_DEACTIVATION:
      return Object.assign({}, state, {
        userToDecativate: action.userId
      });

    default:
      return state || initialState;
  }
};

module.exports = mode_management;

},{"../constants/ActionTypes":571,"../constants/ModeManagementTableSchema":585,"../helpers/array-funcs":594}],628:[function(require,module,exports){
'use strict';

var _ = require('lodash');
var moment = require('moment');

var ActionTypes = require('../constants/ActionTypes');

var initialState = {
  source: 'meter',
  field: 'volume',
  referenceTime: new moment().subtract(1, 'months').date(1), //moment('2016-03-09T00:00:00Z').valueOf(), //moment().valueOf(), // roughly when page was loaded
  requested: null
};

var reduce = function reduce(state, action) {
  var state1 = state || initialState;

  switch (action.type) {
    case ActionTypes.overview.SETUP:
      state1 = {
        source: action.source,
        field: action.field,
        referenceTime: action.now,
        requested: action.requested
      };
      break;
    case ActionTypes.overview.SET_REFERENCE_TIME:
      state1 = _.extend({}, state, { referenceTime: action.now });
      break;
    case ActionTypes.overview.SET_SOURCE:
      state1 = _.extend({}, state, { source: action.source });
      break;
    case ActionTypes.overview.SET_FIELD:
      state1 = _.extend({}, state, { field: action.field });
      break;
    default:
      break;
  }

  return state1;
};

module.exports = reduce;

},{"../constants/ActionTypes":571,"lodash":"lodash","moment":"moment"}],629:[function(require,module,exports){
'use strict';

var types = require('../constants/ActionTypes');

var initialState = {
  isLoading: false,
  errors: null,
  reset: {
    isCaptchaValid: false
  },
  success: false
};

var password = function password(state, action) {
  switch (action.type) {
    case types.PASSWORD_RESET_REQUEST:
      return Object.assign({}, state, {
        isLoading: true,
        errors: null
      });

    case types.PASSWORD_RESET_RESPONSE:
      if (action.success) {
        return Object.assign({}, state, {
          isLoading: false,
          errors: null,
          success: true
        });
      }

      return Object.assign({}, state, {
        isLoading: false,
        errors: action.errors,
        success: false
      });

    case types.PASSWORD_CAPTCHA_SET_VALID:
      return Object.assign({}, state, {
        reset: {
          isCaptchaValid: action.value
        }
      });

    case types.PASSWORD_RESET_CLEAR_ERRORS:
      return Object.assign({}, state, {
        errors: null
      });

    case types.PASSWORD_RESET_SET_ERRORS:
      return Object.assign({}, state, {
        errors: action.errors
      });

    default:
      return state || initialState;
  }
};

module.exports = password;

},{"../constants/ActionTypes":571}],630:[function(require,module,exports){
'use strict';

var types = require('../constants/ActionTypes');

var initialState = {
  isLoading: false,
  query: null,
  areas: null,
  meters: null,
  devices: null,
  timeline: null
};

var _extractTimeline = function _extractTimeline(meters, areas) {
  var timeline = {},
      timestamp,
      label;

  for (var m = 0; m < meters.length; m++) {
    var meter = meters[m];

    for (var p = 0; p < meter.points.length; p++) {
      var point = meter.points[p];

      timeline[point.timestamp] = timeline[point.timestamp] || {};
      timestamp = timeline[point.timestamp];

      timestamp[meter.label] = timestamp[meter.label] || {};
      label = timestamp[meter.label];

      label[meter.areaId] = label[meter.areaId] || 0;
      label[meter.areaId] += point.volume.SUM;
    }
  }

  timeline.getAreas = function () {
    return areas;
  };

  timeline.getTimestamps = function () {
    var values = [];
    for (var timestamp in this) {
      var value = Number(timestamp);
      if (!isNaN(value)) {
        values.push(value);
      }
    }

    return values.sort(function (t1, t2) {
      if (t1 < t2) {
        return -1;
      }
      if (t1 > t2) {
        return 1;
      }
      return 0;
    });
  };

  timeline.getFeatures = function (timestamp, label) {
    var geojson = {
      type: 'FeatureCollection',
      features: [],
      crs: {
        type: 'name',
        properties: {
          name: 'urn:ogc:def:crs:OGC:1.3:CRS84'
        }
      }
    };

    if (!this[timestamp]) {
      return geojson;
    }
    var instance = timeline[timestamp][label];

    if (!instance) {
      return geojson;
    }

    var areas = this.getAreas();

    for (var index in instance) {
      geojson.features.push({
        'type': 'Feature',
        'geometry': areas[index].geometry,
        'properties': {
          'label': areas[index].label,
          'value': instance[index]
        }
      });
    }

    return geojson;
  };

  return timeline;
};

var query = function query(state, action) {
  switch (action.type) {
    case types.QUERY_SUBMIT:
      return Object.assign({}, state, {
        isLoading: true,
        query: action.query,
        points: null
      });

    case types.QUERY_RESPONSE:
      if (action.success) {
        return Object.assign({}, state, {
          isLoading: false,
          areas: action.data.areas,
          meters: action.data.meters,
          devices: action.data.devices,
          timeline: _extractTimeline(action.data.meters, action.data.areas)
        });
      }

      return Object.assign({}, state, {
        isLoading: false,
        areas: null,
        meters: null,
        devices: null,
        regions: null
      });

    case types.USER_RECEIVED_LOGOUT:
      return Object.assign({}, state, {
        isLoading: false,
        query: null,
        areas: null,
        meters: null,
        devices: null
      });

    default:
      return state || initialState;
  }
};

module.exports = query;

},{"../constants/ActionTypes":571}],631:[function(require,module,exports){
'use strict';

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var _ = require('lodash');

var ActionTypes = require('../constants/ActionTypes');
var reports = require('../reports');

var assertInitialized = function assertInitialized(state, key) {
  return console.assert(_.isObject(state[key]), 'Expected an initialized entry for report: ' + key);
};

var reduce = function reduce() {
  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var action = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};


  var type = _.findKey(ActionTypes.reports.measurements, function (v) {
    return v == action.type;
  });
  if (!type) return state; // not interested

  var field = action.field,
      level = action.level,
      reportName = action.reportName,
      key = action.key;


  key = reports.measurements.computeKey(field, level, reportName, key);

  var r = null; // updated entry for key
  switch (type) {
    case 'INITIALIZE':
      // Initialize parameters for report (field, level, reportName)
      // See more on the meaning of each field at store.js.
      if (!(key in state)) {
        // Not initialized; make a new entry
        r = {
          source: action.source || 'meter',
          timespan: action.timespan || 'week',
          population: action.population,
          series: null,
          invalid: true,
          requested: null,
          requests: 0,
          finished: null,
          errors: null,
          defaultFavouriteValues: {
            timespan: false,
            source: false,
            population: false,
            metricLevel: false
          }
        };
      }
      break;
    case 'INIT_MULTIPLE':
      return Object.assign({}, state, {
        source: action.source || 'meter',
        series: null,
        invalid: true,
        requested: null,
        requests: 0,
        finished: null,
        errors: null,
        multipleQueries: action.multipleQueries
      });
    case 'REQUEST_DATA':
      assertInitialized(state, key);
      // Keep current series data, until fresh arrive
      r = _.extend({}, state[key], {
        finished: false,
        requested: action.timestamp
      });
      r.requests = r.requests + 1;
      break;
    case 'REQUEST_MULTIPLE_DATA':
      return Object.assign({}, state, {
        finished: false,
        requested: action.timestamp,
        requests: state.requests + 1
      });
    case 'SET_DATA':
      assertInitialized(state, key);
      r = _.extend({}, state[key], {
        finished: action.timestamp,
        invalid: false,
        series: action.errors ? null : action.data,
        errors: action.errors ? action.errors : null
      });
      break;
    case 'SET_MULTIPLE_DATA':
      var multipleQueriesWithSeries = state.multipleQueries;
      for (var i = 0; i < state.multipleQueries.length; i++) {
        multipleQueriesWithSeries[i].series = action.data[i];
      }

      return Object.assign({}, state, {
        finished: action.timestamp,
        invalid: false,
        multipleQueries: multipleQueriesWithSeries,
        errors: action.errors ? action.errors : null
      });
    case 'CHANGE_MULTIPLE_QUERY':
      return Object.assign({}, state, {
        invalid: true,
        multipleQueries: action.multipleQueries
      });
    case 'SET_SOURCE':
      assertInitialized(state, key);
      if (state[key].source != action.source) {
        r = _.extend({}, state[key], {
          source: action.source,
          invalid: true
        });
      }
      break;
    case 'SET_QUERY_SOURCE':
      if (state.source != action.source) {
        return Object.assign({}, state, {
          source: action.source,
          invalid: true
        });
      }
      break;
    case 'SET_TIMESPAN':
      assertInitialized(state, key);
      if (state[key].timespan != action.timespan) {
        r = _.extend({}, state[key], {
          timespan: action.timespan,
          invalid: true
        });
      }
      break;
    case 'SET_POPULATION':
      assertInitialized(state, key);
      if (state[key].population != action.population) {
        r = _.extend({}, state[key], {
          population: action.population,
          invalid: true
        });
      }
      break;
    case 'SET_OVERLAP':
      return Object.assign({}, state, {
        overlap: action.overlap,
        invalid: true
      });
    case 'ADD_FAVOURITE_REQUEST':
      break;
    case 'ADD_FAVOURITE_RESPONSE':
      return Object.assign({}, state, {
        invalid: false
      });
    case 'ADD_SERIES':
      return Object.assign({}, state, {
        invalid: true,
        multipleQueries: action.multipleQueries
      });
    case 'REMOVE_SERIES':
      return Object.assign({}, state, {
        invalid: true,
        multipleQueries: action.multipleQueries
      });
    default:
      // Unknown action; dont touch state
      break;
  }

  // Compute new state, if entry r is touched
  return r ? _.extend({}, state, _defineProperty({}, key, r)) : state;
};

module.exports = reduce;

},{"../constants/ActionTypes":571,"../reports":641,"lodash":"lodash"}],632:[function(require,module,exports){
'use strict';

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var _ = require('lodash');

var ActionTypes = require('../constants/ActionTypes');
var reports = require('../reports');

var assertInitialized = function assertInitialized(r, key) {
  return console.assert(_.isObject(r), 'Expected an initialized entry for report: ' + key);
};

var reduce = function reduce() {
  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var action = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};


  var type = _.find(ActionTypes.reports.system, function (v) {
    return v == action.type;
  });

  if (!type) return state; // not interested

  var level = action.level,
      reportName = action.reportName;

  if (level == null || reportName == null) return state; // malformed action; dont touch state

  var key = reports.system.computeKey(level, reportName);
  var r = null;
  if (key in state) {
    // Clone existing state for (level, reportName)
    r = _.extend({}, state[key]);
  }

  switch (type) {
    case 'INITIALIZE':
      // Initialize parameters for report (level, reportName)
      // See more on the meaning of each field at store.js.
      if (r == null) {
        r = { // new entry
          timespan: action.timespan || 'week',
          points: null, // data points, aka series
          invalid: true, // data that needs to be refreshed?
          requested: null, // time of last successful attempt to fetch series
          finished: null // time of last successful update of series
        };
      } else {
        r = null; // already initialized; dont touch state
      }
      break;
    case 'REQUEST_DATA':
      assertInitialized(r, key);
      // Keep current series data, until fresh arrive
      _.extend(r, {
        finished: false,
        requested: action.timestamp
      });
      break;
    case 'SET_DATA':
      assertInitialized(r, key);
      _.extend(r, {
        finished: action.timestamp,
        invalid: false,
        points: action.data // Todo: re-shape result?
      });
      break;
    case 'SET_TIMESPAN':
      assertInitialized(r, key);
      if (r.timespan != action.timespan) {
        _.extend(r, {
          timespan: action.timespan,
          invalid: true
        });
      } else {
        r = null; // unchanged; dont touch state
      }
      break;
    default:
      r = null; // unknown action; dont touch state
      break;
  }

  // Compute new state, if r is touched
  return r ? _.extend({}, state, _defineProperty({}, key, r)) : state;
};

module.exports = reduce;

},{"../constants/ActionTypes":571,"../reports":641,"lodash":"lodash"}],633:[function(require,module,exports){
'use strict';

var Redux = require('redux');

module.exports = Redux.combineReducers({
  measurements: require('./reports-measurements'),
  system: require('./reports-system')
});

},{"./reports-measurements":631,"./reports-system":632,"redux":"redux"}],634:[function(require,module,exports){
'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var types = require('../constants/SavingsActionTypes');

var initialState = {
  scenarioToRemove: null,
  areas: [],
  query: {
    pageIndex: 0,
    sortBy: 'CREATED_ON',
    sortAscending: false,
    status: null,
    name: null
  },
  scenarios: [],
  explore: {}
};

var savings = function savings() {
  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;
  var action = arguments[1];


  switch (action.type) {

    case types.SAVINGS_CONFIRM_REMOVE_SCENARIO:
      return Object.assign({}, state, {
        scenarioToRemove: action.id
      });

    case types.SAVINGS_SET_SCENARIOS:
      return _extends({}, state, {
        scenarios: action.scenarios
      });

    case types.SAVINGS_SET_EXPLORE_DATA:
      if (_typeof(action.data) !== 'object') return state;
      return _extends({}, state, {
        explore: _extends({}, state.explore, action.data)
      });

    case types.SAVINGS_SET_AREAS:
      return _extends({}, state, {
        areas: action.areas
      });

    case types.SAVINGS_SET_QUERY:
      return _extends({}, state, {
        query: _extends({}, state.query, action.query)
      });

    default:
      return state;
  }
};

module.exports = savings;

},{"../constants/SavingsActionTypes":586}],635:[function(require,module,exports){
'use strict';

var types = require('../constants/SchedulerActionTypes');

var createInitialeState = function createInitialeState() {
  return {
    isLoading: false,
    query: {
      execution: {
        index: 0,
        size: 10,
        startDate: null,
        endDate: null,
        exitCode: null,
        jobName: null
      }
    },
    data: {
      jobs: {
        total: 0,
        index: 0,
        size: 10,
        items: null
      },
      executions: {
        total: 0,
        index: 0,
        size: 10,
        items: null
      }
    }
  };
};

var queryReducer = function queryReducer(state, action) {
  switch (action.type) {

    case types.EXECUTION_CHANGE_INDEX:

      return Object.assign({}, state, {
        execution: Object.assign({}, state.execution, {
          index: action.index < 0 ? 0 : action.index
        })
      });

    case types.EXECUTION_FILTER_JOB_NAME:

      return Object.assign({}, state, {
        execution: Object.assign({}, state.execution, {
          jobName: action.jobName || null,
          index: 0
        })
      });

    case types.EXECUTION_FILTER_EXIT_CODE:

      return Object.assign({}, state, {
        execution: Object.assign({}, state.execution, {
          exitCode: action.exitCode || null,
          index: 0
        })
      });

    case types.EXECUTION_FILTER_CLEAR:

      return Object.assign({}, state, {
        execution: Object.assign({}, state.execution, {
          jobName: null,
          exitCode: null,
          index: 0
        })
      });

    default:
      return state || createInitialeState();
  }
};

var dataReducer = function dataReducer(state, action) {
  switch (action.type) {
    case types.JOB_RESPONSE:
      if (action.success === true) {
        return Object.assign({}, state, {
          jobs: {
            total: action.items ? action.items.length : 0,
            index: 0,
            size: action.items ? action.items.length : 10,
            items: action.items || []
          }
        });
      } else {
        return Object.assign({}, state, {
          jobs: {
            total: 0,
            index: 0,
            size: 10,
            items: null
          }
        });
      }

    case types.EXECUTION_RESPONSE:
      if (action.success === true) {
        return Object.assign({}, state, {
          executions: {
            total: action.total,
            index: action.index,
            size: action.size,
            items: action.items
          }
        });
      } else {
        return Object.assign({}, state, {
          executions: {
            total: 0,
            index: 0,
            size: 10,
            items: []
          }
        });
      }

    default:
      return state || createInitialeState();
  }
};

var reducer = function reducer(state, action) {
  switch (action.type) {

    case types.JOB_CHANGE_INDEX:
      // Client side data paging
      return Object.assign({}, state);

    case types.JOB_REQUEST:
      return Object.assign({}, state, {
        isLoading: true
      });

    case types.JOB_RESPONSE:

      return Object.assign({}, state, {
        isLoading: false,
        data: dataReducer(state.data, action)
      });

    case types.EXECUTION_CHANGE_INDEX:

      return Object.assign({}, state, {
        isLoading: true,
        query: queryReducer(state.query, action)
      });

    case types.EXECUTION_FILTER_JOB_NAME:

      return Object.assign({}, state, {
        query: queryReducer(state.query, action)
      });

    case types.EXECUTION_FILTER_EXIT_CODE:

      return Object.assign({}, state, {
        query: queryReducer(state.query, action)
      });

    case types.EXECUTION_FILTER_CLEAR:

      return Object.assign({}, state, {
        query: queryReducer(state.query, action)
      });

    case types.EXECUTION_REQUEST:
      return Object.assign({}, state, {
        isLoading: true
      });

    case types.EXECUTION_RESPONSE:
      return Object.assign({}, state, {
        isLoading: false,
        data: dataReducer(state.data, action)
      });

    case types.USER_RECEIVED_LOGOUT:
      return createInitialeState();

    case types.JOB_ENABLE_REQUEST:
      return Object.assign({}, state, {
        isLoading: true
      });

    case types.JOB_ENABLE_RESPONSE:
      return Object.assign({}, state, {
        isLoading: false
      });

    case types.JOB_DISABLE_REQUEST:
      return Object.assign({}, state, {
        isLoading: true
      });

    case types.JOB_DISABLE_RESPONSE:
      return Object.assign({}, state, {
        isLoading: false
      });

    default:
      return state || createInitialeState();
  }
};

module.exports = reducer;

},{"../constants/SchedulerActionTypes":587}],636:[function(require,module,exports){
'use strict';

var types = require('../constants/ActionTypes');

var initialState = {
  isLoading: false,
  isAuthenticated: false,
  roles: [],
  profile: null,
  errors: null
};

var session = function session(state, action) {
  switch (action.type) {
    case types.USER_REQUESTED_LOGIN:
      return Object.assign({}, state, {
        isLoading: true
      });

    case types.USER_RECEIVED_LOGIN:
      switch (action.status) {
        case true:
          if (document) {
            document.cookie = 'daiad-utility-session=true; path=/';
          }

          return Object.assign({}, state, {
            isLoading: false,
            isAuthenticated: true,
            roles: action.roles || [],
            profile: action.profile,
            errors: null
          });

        case false:
          return Object.assign({}, state, {
            isLoading: false,
            isAuthenticated: false,
            roles: [],
            profile: null,
            errors: action.errors
          });
      }
      break;

    case types.USER_REQUESTED_LOGOUT:
      return Object.assign({}, state, {
        isLoading: true
      });

    case types.USER_RECEIVED_LOGOUT:
      if (document) {
        document.cookie = 'daiad-utility-session=false; path=/;expires=Thu, 01 Jan 1970 00:00:01 GMT;';
      }

      switch (action.status) {
        case true:
          return Object.assign({}, state, {
            isLoading: false,
            isAuthenticated: false,
            roles: [],
            profile: null,
            errors: null
          });

        case false:
          return Object.assign({}, state, {
            isLoading: false,
            isAuthenticated: false,
            roles: [],
            profile: null,
            errors: action.errors
          });
      }
      break;

    default:
      return state || initialState;
  }
};

module.exports = session;

},{"../constants/ActionTypes":571}],637:[function(require,module,exports){
'use strict';

var ActionTypes = require('../constants/ActionTypes');

var initialState = {
  referenceTime: null
};

var reduce = function reduce(state, action) {
  var state1 = state || initialState;

  switch (action.type) {
    case ActionTypes.trials.SET_REFERENCE_TIME:
      state1 = _.extend({}, state, { referenceTime: action.referenceTime });
      break;
    default:
      break;
  }

  return state1;
};

module.exports = reduce;

},{"../constants/ActionTypes":571}],638:[function(require,module,exports){
'use strict';

var moment = require('moment');
var types = require('../constants/UserCatalogActionTypes');

var _require = require('../helpers/common'),
    extractFeatures = _require.extractFeatures;

var _createInitialSelectionState = function _createInitialSelectionState() {
  return {
    enabled: false,
    selected: {}
  };
};

var _createInitialeDataState = function _createInitialeDataState() {
  return {
    total: 0,
    index: 0,
    size: 10,
    accounts: null,
    features: null
  };
};

var _createInitialeState = function _createInitialeState() {
  return {
    isLoading: false,
    query: {
      index: 0,
      size: 10,
      text: null,
      serial: null,
      geometry: null,
      favorite: false
    },
    data: _createInitialeDataState(),
    interval: [moment().subtract(30, 'days'), moment()],
    charts: {},
    search: 'text',
    selection: _createInitialSelectionState()
  };
};

var selectionReducer = function selectionReducer(state, action) {
  switch (action.type) {
    case types.USER_CATALOG_TOGGLE_CONSUMER:
      var selected = state.selected;

      if (selected.hasOwnProperty(action.id)) {
        delete selected[action.id];
      } else {
        selected[action.id] = true;
      }

      action.accounts.forEach(function (a) {
        if (a.id === action.id) {
          a.selected = !a.selected;
        }
      });

      return Object.assign({}, state, {
        enabled: state.enabled,
        selected: selected
      });

    case types.USER_CATALOG_CREATE_BAG_OF_CONSUMER:
      return Object.assign({}, state, {
        enabled: action.enabled,
        selected: {}
      });

    case types.USER_CATALOG_SAVE_BAG_OF_CONSUMER:
      return Object.assign({}, state, {
        enabled: state.enabled,
        selected: {}
      });

    case types.USER_CATALOG_DISCARD_BAG_OF_CONSUMER:
      return Object.assign({}, state, {
        enabled: false,
        selected: {}
      });

    default:
      return _createInitialSelectionState();
  }
};

var dataReducer = function dataReducer(state, action) {
  switch (action.type) {
    case types.USER_CATALOG_DISCARD_BAG_OF_CONSUMER:
      state.accounts.forEach(function (a) {
        a.selected = false;
      });

      return state;

    case types.USER_CATALOG_REQUEST_COMPLETE:

      if (action.success === true) {
        action.accounts.forEach(function (a) {
          if (action.selection.selected.hasOwnProperty(a.id)) {
            a.selected = true;
          } else {
            a.selected = false;
          }

          if (a.meter) {
            a.serial = a.meter.serial;
          }
        });

        return Object.assign({}, state, {
          total: action.total || 0,
          index: action.index || 0,
          size: action.size || 10,
          accounts: action.accounts || [],
          features: extractFeatures(action.accounts || [])
        });
      } else {
        return Object.assign({}, state, {
          total: 0,
          index: 0,
          size: 10,
          accounts: [],
          features: extractFeatures([])
        });
      }

    case types.USER_CATALOG_SAVE_BAG_OF_CONSUMER_RESPONSE:
      if (action.success) {
        state.accounts.forEach(function (a) {
          a.selected = false;
        });
      }

      return state;
    case types.USER_CATALOG_ADD_FAVORITE_RESPONSE:
    case types.USER_CATALOG_REMOVE_FAVORITE_RESPONSE:
      if (action.success === true) {
        state.accounts.forEach(function (account) {
          if (account.id === action.userKey) {
            account.favorite = action.favorite;
          }
        });
        return Object.assign({}, state, {
          accounts: state.accounts || []
        });
      } else {
        return state.data;
      }

    default:
      return state || _createInitialeDataState();
  }
};

var userCatalog = function userCatalog(state, action) {
  switch (action.type) {
    case types.USER_CATALOG_ADD_FAVORITE_REQUEST:
    case types.USER_CATALOG_REMOVE_FAVORITE_REQUEST:
    case types.USER_CATALOG_SAVE_BAG_OF_CONSUMER_REQUEST:
      return Object.assign({}, state, {
        isLoading: true
      });

    case types.USER_CATALOG_CHANGE_INDEX:

      return Object.assign({}, state, {
        isLoading: true,
        query: Object.assign({}, state.query, {
          index: action.index < 0 ? 0 : action.index
        })
      });

    case types.USER_CATALOG_FILTER_TEXT:
      return Object.assign({}, state, {
        query: Object.assign({}, state.query, {
          text: action.text || '',
          index: 0
        })
      });

    case types.USER_CATALOG_FILTER_SERIAL:
      return Object.assign({}, state, {
        query: Object.assign({}, state.query, {
          serial: action.serial || '',
          index: 0
        })
      });

    case types.USER_CATALOG_FILTER_FAVORITE:
      return Object.assign({}, state, {
        query: Object.assign({}, state.query, {
          favorite: !state.query.favorite,
          index: 0
        })
      });

    case types.USER_CATALOG_SET_SEARCH_GEOMETRY:
      return Object.assign({}, state, {
        query: Object.assign({}, state.query, {
          geometry: action.geometry || null,
          index: 0
        })
      });

    case types.USER_CATALOG_FILTER_CLEAR:
      return Object.assign({}, state, {
        query: Object.assign({}, state.query, {
          text: null,
          serial: null,
          favorite: false
        })
      });

    case types.USER_CATALOG_REQUEST_INIT:
      return Object.assign({}, state, {
        isLoading: true
      });

    case types.USER_CATALOG_REQUEST_COMPLETE:
      action.selection = state.selection;

      return Object.assign({}, state, {
        isLoading: false,
        data: dataReducer(state.data, action)
      });

    case types.USER_CATALOG_SAVE_BAG_OF_CONSUMER_RESPONSE:
      if (action.success) {
        return Object.assign({}, state, {
          isLoading: false,
          data: dataReducer(state.data, action),
          selection: _createInitialSelectionState()
        });
      } else {
        return state;
      }

    case types.USER_CATALOG_CHART_REQUEST:
      var requestCharts = state.charts;
      requestCharts[action.userKey] = { series: null, query: action.query };

      return Object.assign({}, state, {
        isLoading: true,
        charts: requestCharts,
        finished: false
      });

    case types.USER_CATALOG_CHART_RESPONSE:
      var responseCharts = state.charts;
      if (action.success) {
        responseCharts[action.userKey] = { series: action.dataChart };

        return Object.assign({}, state, {
          isLoading: false,
          charts: responseCharts,
          finished: action.timestamp
        });
      } else {
        responseCharts[action.userKey] = { series: null };
        return Object.assign({}, state, {
          isLoading: false,
          charts: responseCharts,
          finished: action.timestamp
        });
      }

    case types.USER_CATALOG_CLEAR_CHART:
      return Object.assign({}, state, {
        isLoading: false,
        charts: {}
      });

    case types.USER_CATALOG_SET_SEARCH_MODE:
      return Object.assign({}, state, {
        search: action.search
      });

    case types.USER_RECEIVED_LOGOUT:
      return _createInitialeState();

    case types.USER_CATALOG_ADD_FAVORITE_RESPONSE:
    case types.USER_CATALOG_REMOVE_FAVORITE_RESPONSE:
      return Object.assign({}, state, {
        isLoading: false,
        data: dataReducer(state.data, action)
      });

    case types.USER_CATALOG_CREATE_BAG_OF_CONSUMER:
    case types.USER_CATALOG_TOGGLE_CONSUMER:
    case types.USER_CATALOG_SAVE_BAG_OF_CONSUMER:
    case types.USER_CATALOG_DISCARD_BAG_OF_CONSUMER:
      action.accounts = state.data.accounts;

      return Object.assign({}, state, {
        data: dataReducer(state.data, action),
        selection: selectionReducer(state.selection, action)
      });

    default:
      return state || _createInitialeState();
  }
};

module.exports = userCatalog;

},{"../constants/UserCatalogActionTypes":590,"../helpers/common":595,"moment":"moment"}],639:[function(require,module,exports){
'use strict';

var moment = require('moment');
var _ = require('lodash');
var types = require('../constants/UserActionTypes');

var initialState = {
  isLoading: false,
  favorite: null,
  application: 'default',
  user: null,
  meters: null,
  devices: null,
  groups: null,
  data: {
    meters: null,
    devices: null,
    groups: {},
    deviceKey: null
  },
  activeDevice: null,
  interval: [moment().subtract(30, 'days'), moment()],
  export: {
    token: null
  },
  charts: {}
};

var _fillMeterSeries = function _fillMeterSeries(interval, data) {
  var d;
  var allPoints = [];

  var ref = interval[1].clone();
  var days = interval[1].diff(interval[0], 'days') + 1;

  if (data.length === 0 || !data[0].values || data[0].values.length === 0) {
    for (d = days; d > 0; d--) {
      allPoints.push({
        volume: 0,
        difference: 0,
        timestamp: ref.clone().toDate().getTime()
      });

      ref.subtract(1, 'days');
    }
  } else {
    var index = 0;
    var values = data[0].values;

    values.sort(function (p1, p2) {
      return p2.timestamp - p1.timestamp;
    });

    for (d = days; d > 0; d--) {
      if (index === values.length) {
        allPoints.push({
          volume: 0,
          difference: 0,
          timestamp: ref.clone().toDate().getTime()
        });

        ref.subtract(1, 'days');
      } else if (ref.isBefore(values[index].timestamp, 'day')) {
        index++;
      } else if (ref.isAfter(values[index].timestamp, 'day')) {
        allPoints.push({
          volume: 0,
          difference: 0,
          timestamp: ref.clone().toDate().getTime()
        });

        ref.subtract(1, 'days');
      } else if (ref.isSame(values[index].timestamp, 'day')) {
        allPoints.push({
          difference: values[index].difference,
          volume: values[index].volume,
          timestamp: ref.clone().toDate().getTime()
        });

        index++;
        ref.subtract(1, 'days');
      }
    }
  }

  allPoints.sort(function (p1, p2) {
    return p1.timestamp - p2.timestamp;
  });

  data[0].values = allPoints;

  return data;
};

var _fillGroupSeries = function _fillGroupSeries(interval, data) {
  var d;
  var allPoints = [];

  var ref = interval[1].clone();
  var days = interval[1].diff(interval[0], 'days') + 1;

  if (!data || data.points.length === 0) {
    for (d = days; d > 0; d--) {
      allPoints.push({
        volume: {
          AVERAGE: 0,
          COUNT: 0,
          SUM: 0
        },
        timestamp: ref.clone().toDate().getTime()
      });

      ref.subtract(1, 'days');
    }
  } else {
    var index = 0;
    var points = data.points;

    points.sort(function (p1, p2) {
      return p2.timestamp - p1.timestamp;
    });

    for (d = days; d > 0; d--) {
      if (index === points.length) {
        allPoints.push({
          volume: {
            AVERAGE: 0,
            COUNT: 0,
            SUM: 0
          },
          timestamp: ref.clone().toDate().getTime()
        });

        ref.subtract(1, 'days');
      } else if (ref.isBefore(points[index].timestamp, 'day')) {
        index++;
      } else if (ref.isAfter(points[index].timestamp, 'day')) {
        allPoints.push({
          volume: {
            AVERAGE: 0,
            COUNT: 0,
            SUM: 0
          },
          timestamp: ref.clone().toDate().getTime()
        });

        ref.subtract(1, 'days');
      } else if (ref.isSame(points[index].timestamp, 'day')) {
        allPoints.push({
          volume: {
            COUNT: points[index].volume.COUNT,
            SUM: points[index].volume.SUM,
            AVERAGE: points[index].volume.AVERAGE
          },
          timestamp: ref.clone().toDate().getTime()
        });

        index++;
        ref.subtract(1, 'days');
      }
    }
  }

  allPoints.sort(function (p1, p2) {
    return p1.timestamp - p2.timestamp;
  });

  data.points = allPoints;

  return data;
};

var _fillDevices = function _fillDevices(devices, configurations) {
  for (var d in devices) {
    for (var c in configurations) {
      if (devices[d].deviceKey == configurations[c].deviceKey) {
        devices[d].configuration = configurations[c];
        break;
      }
    }
  }
  return devices;
};

var user = function user(state, action) {

  switch (action.type) {

    case types.USER_REQUEST_USER:
      return Object.assign({}, state, {
        isLoading: true,
        data: {
          meters: null,
          devices: null,
          groups: {},
          deviceKey: null
        },
        charts: {}
      });

    case types.USER_RECEIVE_USER_INFO:
      return Object.assign({}, state, {
        isLoading: false,
        success: action.success,
        errors: action.errors,
        favorite: action.favorite,
        user: {
          id: action.user.id,
          firstName: action.user.firstName,
          lastName: action.user.lastName,
          photo: action.user.photo,
          email: action.user.email,
          gender: action.user.gender,
          registeredOn: new Date(action.user.registrationDateMils),
          country: action.user.country,
          city: action.user.city,
          address: action.user.address,
          postalCode: action.user.postalCode,
          smartPhoneOs: action.user.smartPhoneOs,
          tabletOs: action.user.tabletOs,
          mode: action.user.mode
        },
        meters: action.meters,
        devices: _fillDevices(action.devices, action.configurations),
        groups: action.groups
      });

    case types.USER_SHOW_FAVOURITE_ACCOUNT_FORM:
      return Object.assign({}, state, {
        application: 'favouriteAccountForm'
      });

    case types.USER_HIDE_FAVOURITE_ACCOUNT_FORM:
      return Object.assign({}, state, {
        application: 'default'
      });

    case types.SELECT_AMPHIRO:
      return Object.assign({}, state, {
        isLoading: false,
        data: {
          meters: null,
          devices: state.data.devices,
          groups: {},
          deviceKey: action.deviceKey
        }
      });

    case types.AMPHIRO_REQUEST:
      return Object.assign({}, state, {
        isLoading: true,
        finished: false,
        data: {
          meters: null,
          devices: null,
          groups: {},
          deviceKey: action.deviceKey
        }
      });

    case types.AMPHIRO_RESPONSE:
      return Object.assign({}, state, {
        isLoading: false,
        finished: action.timestamp,
        data: {
          meters: null,
          devices: action.devices,
          groups: {},
          deviceKey: state.data.deviceKey
        }
      });

    case types.METER_REQUEST:
      return Object.assign({}, state, {
        isLoading: true,
        data: {
          meters: null,
          devices: null,
          groups: {},
          deviceKey: null
        }
      });

    case types.METER_RESPONSE:
      return Object.assign({}, state, {
        isLoading: false,
        data: {
          meters: _fillMeterSeries(state.interval, action.meters),
          devices: null,
          groups: state.data.groups,
          deviceKey: null
        }
      });
    case types.USER_CHART_REQUEST:
      var requestUserCharts = state.charts;
      requestUserCharts[action.userKey] = { series: null, query: action.query };

      return Object.assign({}, state, {
        isLoading: true,
        charts: requestUserCharts,
        finished: false
      });

    case types.USER_CHART_RESPONSE:
      var responseCharts = state.charts;
      if (action.success) {
        responseCharts[action.userKey] = { series: action.dataChart };

        return Object.assign({}, state, {
          isLoading: false,
          charts: responseCharts,
          finished: action.timestamp
        });
      } else {
        responseCharts[action.userKey] = { series: null };
        return Object.assign({}, state, {
          isLoading: false,
          charts: responseCharts,
          finished: action.timestamp
        });
      }

    case types.USER_GROUP_CHART_REQUEST:
      var requestGroupCharts = state.charts;
      requestGroupCharts[action.groupKey] = { series: null, query: action.query };

      return Object.assign({}, state, {
        isLoading: true,
        charts: requestGroupCharts,
        finished: false
      });

    case types.USER_GROUP_CHART_RESPONSE:
      var responseUserCharts = state.charts;
      if (action.success) {
        responseUserCharts[action.groupKey] = { series: action.dataChart };

        return Object.assign({}, state, {
          isLoading: false,
          charts: responseUserCharts,
          finished: action.timestamp
        });
      } else {
        responseCharts[action.userKey] = { series: null };
        return Object.assign({}, state, {
          isLoading: false,
          charts: responseCharts,
          finished: action.timestamp
        });
      }

    case types.GROUP_DATA_REQUEST:
      return Object.assign({}, state, {
        isLoading: true
      });

    case types.GROUP_DATA_RESPONSE:
      var data = {
        meters: state.data.meters,
        devices: state.data.devices,
        groups: state.data.groups,
        deviceKey: state.data.deviceKey
      };

      if (action.data) {
        data.groups[action.groupKey] = _fillGroupSeries(state.interval, action.data);
      }

      return Object.assign({}, state, {
        isLoading: false,
        data: data
      });

    case types.GROUP_DATA_CLEAR:
      var userKey = state.user.id;
      var userChart = _.pick(state.charts, [userKey]);
      return Object.assign({}, state, {
        isLoading: false,
        charts: userChart
      });

    case types.EXPORT_REQUEST:
      return Object.assign({}, state, {
        isLoading: true,
        export: {
          token: null
        }
      });

    case types.EXPORT_COMPLETE:
      return Object.assign({}, state, {
        isLoading: false,
        export: {
          token: action.token
        }
      });

    case types.ADD_FAVORITE_REQUEST:
    case types.REMOVE_FAVORITE_REQUEST:
      return Object.assign({}, state, {
        isLoading: true
      });

    case types.ADD_FAVORITE_RESPONSE:
      return Object.assign({}, state, {
        isLoading: false,
        favorite: action.success ? true : state.favorite
      });

    case types.REMOVE_FAVORITE_RESPONSE:
      return Object.assign({}, state, {
        isLoading: false,
        favorite: action.success ? false : state.favorite
      });

    case types.AMPHIRO_CONFIG_SHOW:
      return Object.assign({}, state, {
        activeDevice: action.activeDevice || null
      });

    case types.AMPHIRO_CONFIG_HIDE:
      return Object.assign({}, state, {
        activeDevice: null
      });

    default:
      return state || initialState;
  }
};

module.exports = user;

},{"../constants/UserActionTypes":589,"lodash":"lodash","moment":"moment"}],640:[function(require,module,exports){
'use strict';

var types = require('../constants/ActionTypes');

var initialState = {
  width: document && document.documentElement ? document.documentElement.clientWidth : null,
  height: document && document.documentElement ? document.documentElement.clientHeight : null
};

var viewport = function viewport() {
  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;
  var action = arguments[1];

  switch (action.type) {
    case types.VIEWPORT_SET_SIZE:
      return {
        width: action.width || state.width,
        height: action.height || state.height
      };

    default:
      return state;
  }
};

module.exports = viewport;

},{"../constants/ActionTypes":571}],641:[function(require,module,exports){
'use strict';

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

var _ = require('lodash');

var reports = {

  measurements: {

    // A key to identify a report instance
    computeKey: function computeKey(field, level, reportName, key) {
      var kp = [field, level, reportName];
      if (_.isArray(key)) kp.push.apply(kp, _toConsumableArray(key));else kp.push(key);
      return kp.join('/');
    },

    // Functions to consolidate data points (aggregate at next level).
    consolidateFuncs: {

      'AVERAGE': function AVERAGE(a) {
        return a.length ? a.length > 1 ? _.sum(a) / a.length : a[0] : null;
      },

      'MIN': function MIN(a) {
        return _.min(a);
      },

      'MAX': function MAX(a) {
        return _.max(a);
      }
    }

  },

  system: {

    // A key to identify a report instance
    computeKey: function computeKey(level, reportName) {
      return [level, reportName].join('/');
    }
  }
};

module.exports = reports;

},{"lodash":"lodash"}],642:[function(require,module,exports){
'use strict';

var _require = require('react-router'),
    useRouterHistory = _require.useRouterHistory;

var _require2 = require('history'),
    createHistory = _require2.createHistory;

var history = useRouterHistory(createHistory)({
  basename: '/utility/'
});

module.exports = history;

},{"history":"history","react-router":"react-router"}],643:[function(require,module,exports){
'use strict';

var React = require('react');
var Route = require('react-router').Route;
var IndexRoute = require('react-router').IndexRoute;

var App = require('../containers/App');

var analytics = require('../components/section/analytics/index');
var trials = require('../components/section/trials/index');

var Dashboard = require('../components/section/Dashboard');
var AnalyticsMap = require('../components/section/Map');
var ModeManagement = require('../components/section/mode_management/ModeManagement');
var User = require('../components/User');
var UserCatalog = require('../components/section/UserCatalog');
var Group = require('../components/Group');
var GroupCatalog = require('../components/section/GroupCatalog');
var Device = require('../components/Device');
var Forecasting = require('../components/section/Forecasting');
var Scheduler = require('../components/section/Scheduler');
var Logging = require('../components/section/support/Logging');
var Announcements = require('../components/section/Announcements');
var ManageAlerts = require('../components/section/ManageAlerts');
var MessageAnalytics = require('../components/section/support/MessageAnalytics');
var UserSettings = require('../components/section/settings/UserSettings');
var SystemSettings = require('../components/section/settings/SystemSettings');
var DataManagement = require('../components/section/support/Data');
var DataExport = require('../components/section/support/DataExport');
var Development = require('../components/section/support/Development');
var PasswordReset = require('../components/PasswordReset');

var SavingsPotential = require('../components/section/savings');
var SavingsPotentialList = require('../components/section/savings/ListView');
var SavingsPotentialAdd = require('../components/section/savings/AddView');
var SavingsPotentialExplore = require('../components/section/savings/ExploreView');

var Budget = require('../components/section/budget');
var BudgetList = require('../components/section/budget/ListView');
var BudgetAdd = require('../components/section/budget/AddView');
var BudgetExplore = require('../components/section/budget/ExploreView');
var BudgetActiveList = require('../components/section/budget/ActiveList');

module.exports = React.createElement(
  Route,
  { path: '/', component: App },
  React.createElement(IndexRoute, { component: Dashboard }),
  React.createElement(Route, { path: '/utility', component: Dashboard }),
  React.createElement(Route, { path: '/dashboard', component: Dashboard }),
  React.createElement(Route, { path: '/analytics', component: analytics.Fav }),
  React.createElement(Route, { path: '/analytics/fav', component: analytics.Fav }),
  React.createElement(Route, { path: '/analytics/basic-reports', component: analytics.BasicReports }),
  React.createElement(Route, { path: '/analytics/panel', component: analytics.ReportPanel }),
  React.createElement(Route, { path: '/analytics/map', component: AnalyticsMap }),
  React.createElement(Route, { path: '/trials/overview', component: trials.Overview }),
  React.createElement(Route, { path: '/trials/pilot-reports', component: trials.PilotReports }),
  React.createElement(Route, { path: '/forecasting', component: Forecasting }),
  React.createElement(Route, { path: '/mode/management', component: ModeManagement }),
  React.createElement(Route, { path: '/users', component: UserCatalog }),
  React.createElement(Route, { path: '/user/:id', component: User }),
  React.createElement(Route, { path: '/groups', component: GroupCatalog }),
  React.createElement(Route, { path: '/group/:id', component: Group }),
  React.createElement(Route, { path: '/device/:id', component: Device }),
  React.createElement(Route, { path: '/scheduler', component: Scheduler }),
  React.createElement(Route, { path: '/announcements', component: Announcements }),
  React.createElement(Route, { path: '/manage-alerts', component: ManageAlerts }),
  React.createElement(Route, { path: '/settings/user', component: UserSettings }),
  React.createElement(Route, { path: '/settings/system', component: SystemSettings }),
  React.createElement(Route, { path: '/support/logging', component: Logging }),
  React.createElement(Route, { path: '/support/data', component: DataManagement }),
  React.createElement(Route, { path: '/support/export', component: DataExport }),
  React.createElement(Route, { path: '/support/messages', component: MessageAnalytics }),
  React.createElement(Route, { path: '/support/development', component: Development }),
  React.createElement(Route, { path: '/password/reset/:token', component: PasswordReset }),
  React.createElement(
    Route,
    { path: '/savings', component: SavingsPotential },
    React.createElement(IndexRoute, { component: SavingsPotentialList }),
    React.createElement(Route, { path: '/savings/list', component: SavingsPotentialList }),
    React.createElement(Route, { path: '/savings/add', component: SavingsPotentialAdd }),
    React.createElement(Route, { path: '/savings/:id', component: SavingsPotentialExplore })
  ),
  React.createElement(
    Route,
    { path: '/budgets', component: Budget },
    React.createElement(IndexRoute, { component: BudgetList }),
    React.createElement(Route, { path: '/budgets/list', component: BudgetList }),
    React.createElement(Route, { path: '/budgets/active', component: BudgetActiveList }),
    React.createElement(Route, { path: '/budgets/add', component: BudgetAdd }),
    React.createElement(Route, { path: '/budgets/:id', component: BudgetExplore })
  )
);

},{"../components/Device":484,"../components/Group":491,"../components/PasswordReset":500,"../components/User":505,"../components/section/Announcements":526,"../components/section/Dashboard":527,"../components/section/Forecasting":528,"../components/section/GroupCatalog":529,"../components/section/ManageAlerts":530,"../components/section/Map":531,"../components/section/Scheduler":532,"../components/section/UserCatalog":533,"../components/section/analytics/index":536,"../components/section/budget":542,"../components/section/budget/ActiveList":538,"../components/section/budget/AddView":539,"../components/section/budget/ExploreView":540,"../components/section/budget/ListView":541,"../components/section/mode_management/ModeManagement":543,"../components/section/savings":548,"../components/section/savings/AddView":545,"../components/section/savings/ExploreView":546,"../components/section/savings/ListView":547,"../components/section/settings/SystemSettings":549,"../components/section/settings/UserSettings":550,"../components/section/support/Data":551,"../components/section/support/DataExport":552,"../components/section/support/Development":553,"../components/section/support/Logging":554,"../components/section/support/MessageAnalytics":555,"../components/section/trials/index":556,"../containers/App":591,"react":"react","react-router":"react-router"}],644:[function(require,module,exports){
'use strict';

var budgetSchema = function budgetSchema(actions) {
  return [{
    name: 'key',
    title: 'Key',
    hidden: true
  }, {
    name: 'name',
    title: 'Budgets.List.name',
    link: function link(row) {
      if (row.key) {
        return '/budgets/{key}/';
      }
      return null;
    },
    style: {
      whiteSpace: 'nowrap'
    }
  }, {
    name: 'active',
    title: 'Budgets.List.active',
    type: 'action',
    style: {
      textAlign: 'center',
      fontSize: '1.2em',
      width: 70
    },
    icon: function icon(field, row) {
      return row.active ? 'check' : '';
    },
    handler: null
  }, {
    name: 'paramsShort',
    title: 'Budgets.List.paramsShort'
  }, {
    name: 'numberOfConsumers',
    title: 'Budgets.List.consumers'
  },
  /*
  {
    name: 'owner',
    title: 'Budgets.List.owner'
    },
    */
  {
    name: 'createdOn',
    title: 'Budgets.List.createdOn',
    type: 'datetime'
  }, {
    name: 'updatedOn',
    title: 'Budgets.List.updatedOn',
    type: 'datetime'
  }, {
    name: 'activatedOn',
    title: 'Budgets.List.activatedOn',
    type: 'datetime'
  }, {
    name: 'explore',
    title: 'Budgets.List.explore',
    type: 'action',
    icon: 'info-circle',
    style: {
      textAlign: 'center',
      fontSize: '1.3em'
    },
    handler: function handler(field, row) {
      actions.goToExploreView(row.key);
    },
    visible: function visible(field, row) {
      return true;
    }
  }, {
    name: 'delete',
    title: 'Budgets.List.delete',
    type: 'action',
    icon: 'remove',
    handler: function handler(field, row) {
      actions.confirmRemoveBudgetScenario(row.key);
    },
    visible: true
  }];
};

var exploreBudgetSchema = function exploreBudgetSchema(actions) {
  return [{
    name: 'key',
    title: 'Key',
    hidden: true
  }, {
    name: 'email',
    title: 'User',
    link: function link(row) {
      if (row.key) {
        return '/user/{key}/';
      }
      return null;
    }
  }, {
    name: 'fullname',
    title: 'Name'
  }, {
    name: 'serial',
    title: 'SWM'
  }, {
    name: 'registrationDateMils',
    title: 'Registered On',
    type: 'datetime'
  }, {
    name: 'budget',
    title: 'Difference (\u33A5)'
  }, {
    name: 'savings',
    title: 'Savings (%)'
  }];
};

module.exports = {
  budgetSchema: budgetSchema,
  exploreBudgetSchema: exploreBudgetSchema
};

},{}],645:[function(require,module,exports){
'use strict';

var savingsSchema = function savingsSchema(actions) {
  return [{
    name: 'key',
    title: 'Key',
    hidden: true
  }, {
    name: 'name',
    title: 'Savings.List.name',
    link: function link(row) {
      if (row.key) {
        return '/savings/{key}/';
      }
      return null;
    },
    style: {
      whiteSpace: 'nowrap'
    }
  }, {
    name: 'potential',
    title: 'Savings.List.potential',
    style: {
      fontWeight: 'bold',
      fontSize: '1.1em',
      textAlign: 'center'
    },
    sortable: false
  }, {
    name: 'paramsShort',
    title: 'Savings.List.paramsShort',
    sortable: false
  },
  /*
  {
    name: 'owner',
    title: 'Savings.List.owner',
    sortable: false,
    },
    */
  {
    name: 'createdOn',
    title: 'Savings.List.createdOn',
    type: 'datetime'
  }, {
    name: 'processingEndOn',
    title: 'Savings.List.completedOn',
    type: 'datetime',
    sortable: false
  }, {
    name: 'status',
    title: 'Savings.List.status'
  }, {
    name: 'explore',
    title: 'Savings.List.explore',
    type: 'action',
    icon: 'info-circle',
    style: {
      textAlign: 'center',
      fontSize: '1.3em'
    },
    handler: function handler(field, row) {
      actions.goToExploreView(row.key);
    }
  }, {
    name: 'refresh',
    title: 'Savings.List.refresh',
    type: 'action',
    icon: function icon(field, row) {
      if (row.status === 'PENDING' || row.status === 'RUNNING') return 'cogs';else if (row.status === 'COMPLETED') return 'check';
      return 'refresh';
    },
    style: {
      textAlign: 'center',
      fontSize: '1.3em'
    },
    handler: function handler(field, row) {
      if (row.status !== 'PENDING' && row.status !== 'RUNNING' && row.status !== 'COMPLETED') {
        actions.refreshSavingsScenario(row.key);
      }
      return null;
    }
  }, {
    name: 'delete',
    title: 'Savings.List.delete',
    type: 'action',
    icon: 'remove',
    style: {
      textAlign: 'center',
      fontSize: '1.0em'
    },
    handler: function handler(field, row) {
      actions.confirmRemoveScenario(row.key);
    },
    visible: true
  }];
};

module.exports = {
  savingsSchema: savingsSchema
};

},{}],646:[function(require,module,exports){
'use strict';

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _ = require('lodash');
var sprintf = require('sprintf');

var _population = require('../model/population');
var Granularity = require('../model/granularity');
var api = require('../api/query');

var _require = require('../constants/Constants'),
    TIMEZONE = _require.TIMEZONE;

var queryStats = function queryStats(source, q, config) {

  // Todo Build query to target action api

  source = source.toUpperCase();

  var q1 = {};

  return api.queryStats(q1).then(function (res) {
    return (
      // Todo shape result
      null
    );
  });
};

var queryMeasurements = function queryMeasurements(source, field, q) {
  var config = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};

  var defaults = queryMeasurements.defaults;

  // Validate parameters
  q = queryMeasurements.validate(q, config);

  source = source.toUpperCase();

  var timezone = config.timezone || TIMEZONE || 'Etc/GMT';

  var q1 = _extends({}, defaults.api.queryParams, {
    source: source,
    time: {
      start: q.timespan[0],
      end: q.timespan[1],
      granularity: q.granularity
    },
    timezone: timezone,
    population: q.population.map(function (p) {
      return p.toJSON();
    })
  });

  if (q.ranking) {
    q1.population = _.flatten(q1.population.map(function (p) {
      var g = _population.Group.fromString(p.label);
      return q.ranking.map(function (r) {
        var r1 = _extends({ limit: 3, type: 'TOP' }, r, { field: field });
        return _extends({}, p, {
          label: [g, new _population.Ranking(r1)].join('/'),
          ranking: r1
        });
      });
    }));
  }

  // Send query, shape result

  return api.queryMeasurements({ query: q1 }).then(function (res) {
    if (res.errors.length) throw 'The request is rejected: ' + res.errors[0].description;

    // Include common params for all series
    var params = { source: source, timespan: q.timespan, granularity: q.granularity };

    // Shape result
    var resultSets = source == 'DEVICE' ? res.devices : res.meters;
    var res1 = (resultSets || []).map(function (rs) {
      var _population$fromStrin = _population.fromString(rs.label),
          _population$fromStrin2 = _slicedToArray(_population$fromStrin, 2),
          g = _population$fromStrin2[0],
          rr = _population$fromStrin2[1];

      console.assert(q.ranking && rr || !q.ranking && !rr, 'Check ranking descriptor');
      if (rr) {
        // Shape a result with ranking on users
        var points = rs.points.map(function (p) {
          return {
            timestamp: p.timestamp,
            values: p.users.map(function (u) {
              return u[rr.field][rr.metric];
            }).sort(rr.comparator)
          };
        });
        return _.times(rr.limit, function (i) {
          return _extends({}, params, {
            metric: rr.metric,
            population: g,
            ranking: _extends({}, rr.toJSON(), { index: i }),
            data: points.map(function (p) {
              return [p.timestamp, p.values[i] || null];
            })
          });
        });
      } else {
        // Shape a normal timeseries result for requested metrics
        // Todo support other metrics (as client-side "average")
        return q.metrics.map(function (metric) {
          return _extends({}, params, {
            metric: metric,
            population: g,
            data: rs.points.map(function (p) {
              return [p.timestamp, p[field][metric]];
            })
          });
        });
      }
    });
    return _.flatten(res1);
  });
};

queryMeasurements.defaults = {
  api: {
    queryParams: {
      metrics: ['SUM', 'COUNT', 'AVERAGE', 'MIN', 'MAX']
    }
  }
};

queryMeasurements.getValidators = function (q, config) {
  return {
    granularity: function granularity(_granularity) {
      return Granularity.fromName(_granularity.toLowerCase()) ? null : new Error('Unknown granularity');
    },
    timespan: function timespan(_ref) {
      var _ref2 = _slicedToArray(_ref, 2),
          t0 = _ref2[0],
          t1 = _ref2[1];

      return _.isNumber(t0) && _.isNumber(t1) ? null : new Error('Cannot read timespan');
    },
    metrics: function metrics(_metrics) {
      if (q.ranking) {
        return null; // a metric is n/a when a ranking is requested
      }
      if (!_metrics || !_.isArray(_metrics) || !_metrics.length) {
        return new Error('A metric must be specified');
      }
      var metric1 = _metrics.find(function (m) {
        return config.metrics.indexOf(m) < 0;
      });
      return !metric1 ? null : new Error(sprintf('Unknown metric (%s)', metric1));
    },
    ranking: function ranking(_ranking) {
      return !_ranking || _.isArray(_ranking) && _ranking.every(function (r) {
        return r.type && config.metrics.indexOf(r.metric || '') >= 0;
      }) ? null : new Error('Expected a ranking as an array of {type, metric}');
    },
    population: function population(p) {
      return p.every(function (p1) {
        return p1 instanceof _population.Group || p1 instanceof _population.Cluster;
      }) ? null : new Error('Expected an instance of population.(Group|Cluster)');
    }
  };
};

queryMeasurements.validate = function (q, config) {

  var err = null;
  var validators = queryMeasurements.getValidators(q, config);
  _.forEach(validators, function (validator, paramName) {
    return err = validator(q[paramName]), err && console.error(err.message, q[paramName]), !err // break on error
    ;
  });

  if (err) {
    throw err;
  }

  return q;
};

module.exports = { queryStats: queryStats, queryMeasurements: queryMeasurements };

},{"../api/query":472,"../constants/Constants":573,"../model/granularity":601,"../model/population":602,"lodash":"lodash","sprintf":"sprintf"}],647:[function(require,module,exports){
'use strict';

var develop = "production" !== 'production';

var _require = require('redux'),
    createStore = _require.createStore,
    applyMiddleware = _require.applyMiddleware;

var thunkMiddleware = require('redux-thunk');
var ReduxLogger = require('redux-logger');

var _require2 = require('react-router-redux'),
    routerMiddleware = _require2.routerMiddleware;

var rootReducer = require('../reducers/index');
var history = require('../routing/history');

var middleware = [thunkMiddleware, routerMiddleware(history)];

if (develop) {
  // The logger middleware should always be last
  middleware.push(ReduxLogger());
}

function configureStore(initialState) {
  return createStore(rootReducer, initialState, applyMiddleware.apply(undefined, middleware));
}

module.exports = configureStore;

},{"../reducers/index":623,"../routing/history":642,"react-router-redux":"react-router-redux","redux":"redux","redux-logger":"redux-logger","redux-thunk":"redux-thunk"}]},{},[600]);
